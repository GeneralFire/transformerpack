/** @file

  @copyright
  INTEL CONFIDENTIAL
  Copyright 1999 - 2020 Intel Corporation. <BR>

  The source code contained or described herein and all documents related to the
  source code ("Material") are owned by Intel Corporation or its suppliers or
  licensors. Title to the Material remains with Intel Corporation or its suppliers
  and licensors. The Material may contain trade secrets and proprietary    and
  confidential information of Intel Corporation and its suppliers and licensors,
  and is protected by worldwide copyright and trade secret laws and treaty
  provisions. No part of the Material may be used, copied, reproduced, modified,
  published, uploaded, posted, transmitted, distributed, or disclosed in any way
  without Intel's prior express written permission.

  No license under any patent, copyright, trade secret or other intellectual
  property right is granted to or conferred upon you by disclosure or delivery
  of the Materials, either expressly, by implication, inducement, estoppel or
  otherwise. Any license under such intellectual property rights must be
  express and approved by Intel in writing.

  Unless otherwise agreed by Intel in writing, you may not remove or alter
  this notice or any other notice embedded in Materials by Intel or
  Intel's suppliers or licensors in any way.
**/

  #include "MemorySetup.h"


  form formid = VFR_FORMID_MEMORY,

    title = STRING_TOKEN(STR_MEMORY_CONFIG_FORM_TITLE);

    subtitle text = STRING_TOKEN(STR_NULL_STRING);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    subtitle text = STRING_TOKEN(STR_IOH_MEM_FORM_TITLE);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

    oneof varid = SOCKET_MEMORY_CONFIGURATION.EnforcePOR,
        prompt    = STRING_TOKEN (STR_ENFORCE_POR_PROMPT),
        help      = STRING_TOKEN (STR_ENFORCE_POR_HELP),
        option text = STRING_TOKEN (STR_POR),     value = ENFORCE_POR_EN,  flags = ENFORCE_POR_EN_FLAGS;
        option text = STRING_TOKEN (STR_DISABLE), value = ENFORCE_POR_DIS, flags = ENFORCE_POR_DIS_FLAGS;
    endoneof;

    suppressif ideqval SOCKET_MEMORY_CONFIGURATION.EnforcePOR == ENFORCE_POR_DIS;
      oneof varid = SOCKET_MEMORY_CONFIGURATION.EnforcePopulationPor,
          prompt    = STRING_TOKEN (STR_ENFORCE_POPULATION_POR_PROMPT),
          help      = STRING_TOKEN (STR_ENFORCE_POPULATION_POR_HELP),
          option text = STRING_TOKEN (STR_DISABLE_ENFORCEMENT),           value = ENFORCE_POPULATION_POR_DIS, flags = ENFORCE_POPULATION_POR_DIS_FLAGS;
          option text = STRING_TOKEN (STR_ENFORCE_SUPPORTED_POPULATIONS), value = ENFORCE_POPULATION_POR_ENFORCE_SUPPORTED,  flags = ENFORCE_POR_EN_SUPP_FLAGS;
          option text = STRING_TOKEN (STR_ENFORCE_VALIDATED_POPULATIONS), value = ENFORCE_POPULATION_POR_ENFORCE_VALIDATED,  flags = ENFORCE_POR_EN_VAL_FLAGS;
      endoneof;
    endif;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.pprType,
        prompt  = STRING_TOKEN (STR_PPR_TYPE),
        help    = STRING_TOKEN (STR_PPR_TYPE_HELP),
        option text = STRING_TOKEN (STR_PPR_DISABLED),  value = PPR_DISABLED, flags = PPR_DIS_FLAGS;
        option text = STRING_TOKEN (STR_PPR_TYPE_HARD), value = PPR_TYPE_HARD, flags = PPR_TYPE_HARD_FLAGS;
        option text = STRING_TOKEN (STR_PPR_TYPE_SOFT), value = PPR_TYPE_SOFT, flags = PPR_TYPE_SOFT_FLAGS;
    endoneof;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.pprErrInjTest,
        prompt  = STRING_TOKEN (STR_PPR_ERR_INJ),
        help    = STRING_TOKEN (STR_PPR_ERR_INJ_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = PPR_ERR_INJ_DISABLE, flags = PPR_ERR_INJ_DIS_FLAGS;
        option text = STRING_TOKEN(STR_ENABLE),  value = PPR_ERR_INJ_ENABLE, flags = PPR_ERR_INJ_EN_FLAGS;
    endoneof;

#ifdef DDR5_SUPPORT
     oneof varid = SOCKET_MEMORY_CONFIGURATION.DdrFreqLimit,
          prompt  = STRING_TOKEN(STR_XMP_DDR_FREQ_LIMIT_PROMPT),
          help    = STRING_TOKEN(STR_XMP_DDR_FREQ_LIMIT_HELP),
          option text = STRING_TOKEN(STR_AUTO),                 value = DDR_FREQ_AUTO, flags = DDR_FREQ_AUTO_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_3200_STRING), value = 19, flags = DDR_3200_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_3600_STRING), value = 22, flags = DDR_3600_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_4000_STRING), value = 25, flags = DDR_4000_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_4400_STRING), value = 28, flags = DDR_4400_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_4800_STRING), value = 29, flags = DDR_4800_FLAGS;
      endoneof;
#else
   suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
              ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
              ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX;
      oneof varid = SOCKET_MEMORY_CONFIGURATION.DdrFreqLimit,
          prompt  = STRING_TOKEN(STR_XMP_DDR_FREQ_LIMIT_PROMPT),
          help    = STRING_TOKEN(STR_XMP_DDR_FREQ_LIMIT_HELP),
          option text = STRING_TOKEN(STR_AUTO),                 value = DDR_FREQ_AUTO, flags = DDR_FREQ_AUTO_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_1200_STRING), value = 4,  flags = DDR_1200_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_1333_STRING), value = 5,  flags = DDR_1333_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_1400_STRING), value = 6,  flags = DDR_1400_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_1600_STRING), value = 7,  flags = DDR_1600_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_1800_STRING), value = 8,  flags = DDR_1800_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_1866_STRING), value = 9,  flags = DDR_1866_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_2000_STRING), value = 10, flags = DDR_2000_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_2133_STRING), value = 11, flags = DDR_2133_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_2200_STRING), value = 12, flags = DDR_2200_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_2400_STRING), value = 13, flags = DDR_2400_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_2600_STRING), value = 14, flags = DDR_2600_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_2666_STRING), value = 15, flags = DDR_2666_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_2800_STRING), value = 16, flags = DDR_2800_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_2933_STRING), value = 17, flags = DDR_2933_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_3000_STRING), value = 18, flags = DDR_3000_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_3200_STRING), value = 19, flags = DDR_3200_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_3400_STRING_OVRCLK), value = 20, flags = DDR_3400_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_3466_STRING_OVRCLK), value = 21, flags = DDR_3466_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_3600_STRING_OVRCLK), value = 22, flags = DDR_3600_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_3733_STRING_OVRCLK), value = 23, flags = DDR_3733_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_3800_STRING_OVRCLK), value = 24, flags = DDR_3800_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_4000_STRING_OVRCLK), value = 25, flags = DDR_4000_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_4200_STRING_OVRCLK), value = 26, flags = DDR_4200_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_4266_STRING_OVRCLK), value = 27, flags = DDR_4266_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_4400_STRING_OVRCLK), value = 28, flags = DDR_4400_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_4800_STRING_OVRCLK), value = 29, flags = DDR_4800_FLAGS;
      endoneof;
    endif;
#endif

    suppressif NOT (ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX);
      oneof varid = SOCKET_MEMORY_CONFIGURATION.DdrFreqLimit,
          prompt  = STRING_TOKEN(STR_XMP_DDR_FREQ_LIMIT_PROMPT),
          help    = STRING_TOKEN(STR_XMP_DDR_FREQ_LIMIT_HELP),
          option text = STRING_TOKEN(STR_AUTO),                 value = DDR_FREQ_AUTO, flags = DDR_FREQ_AUTO_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_1200_STRING), value = 4,  flags = DDR_1200_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_1333_STRING), value = 5,  flags = DDR_1333_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_1400_STRING), value = 6,  flags = DDR_1400_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_1600_STRING), value = 7,  flags = DDR_1600_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_1800_STRING), value = 8,  flags = DDR_1800_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_1866_STRING), value = 9,  flags = DDR_1866_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_2000_STRING), value = 10, flags = DDR_2000_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_2133_STRING), value = 11, flags = DDR_2133_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_2200_STRING), value = 12, flags = DDR_2200_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_2400_STRING), value = 13, flags = DDR_2400_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_2600_STRING), value = 14, flags = DDR_2600_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_2666_STRING), value = 15, flags = DDR_2666_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_2800_STRING), value = 16, flags = DDR_2800_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_2933_STRING), value = 17, flags = DDR_2933_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_3000_STRING), value = 18, flags = DDR_3000_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_3200_STRING), value = 19, flags = DDR_3200_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_3400_STRING_OVRCLK), value = 20, flags = DDR_3400_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_3466_STRING_OVRCLK), value = 21, flags = DDR_3466_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_3600_STRING_OVRCLK), value = 22, flags = DDR_3600_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_3733_STRING_OVRCLK), value = 23, flags = DDR_3733_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_3800_STRING_OVRCLK), value = 24, flags = DDR_3800_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_4000_STRING_OVRCLK), value = 25, flags = DDR_4000_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_4200_STRING_OVRCLK), value = 26, flags = DDR_4200_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_4266_STRING_OVRCLK), value = 27, flags = DDR_4266_FLAGS;
          option text = STRING_TOKEN(STR_DDR_FREQ_4400_STRING_OVRCLK), value = 28, flags = DDR_4400_FLAGS;
      endoneof;
    endif;
    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.DdrFreqLimit == 0 OR
                ideqval SOCKET_MEMORY_CONFIGURATION.DdrFreqLimit == 2 OR
                ideqval SOCKET_MEMORY_CONFIGURATION.DdrFreqLimit == 3 OR
                ideqval SOCKET_MEMORY_CONFIGURATION.DdrFreqLimit == 5 OR
                ideqval SOCKET_MEMORY_CONFIGURATION.DdrFreqLimit == 6 OR
                ideqval SOCKET_MEMORY_CONFIGURATION.DdrFreqLimit == 8 OR
                ideqval SOCKET_MEMORY_CONFIGURATION.DdrFreqLimit == 9 OR
                ideqval SOCKET_MEMORY_CONFIGURATION.DdrFreqLimit == 10 OR
                ideqval SOCKET_MEMORY_CONFIGURATION.DdrFreqLimit == 11 OR
                ideqval SOCKET_MEMORY_CONFIGURATION.DdrFreqLimit == 12 OR
                ideqval SOCKET_MEMORY_CONFIGURATION.DdrFreqLimit == 14 OR
                ideqval SOCKET_MEMORY_CONFIGURATION.DdrFreqLimit == 15 OR
                ideqval SOCKET_MEMORY_CONFIGURATION.DdrFreqLimit == 16 OR
                ideqval SOCKET_MEMORY_CONFIGURATION.DdrFreqLimit == 17 OR
                ideqval SOCKET_MEMORY_CONFIGURATION.DdrFreqLimit == 18 OR
                ideqval SOCKET_MEMORY_CONFIGURATION.DdrFreqLimit == 20 OR
                ideqval SOCKET_MEMORY_CONFIGURATION.DdrFreqLimit == 21 OR
                ideqval SOCKET_MEMORY_CONFIGURATION.DdrFreqLimit == 22 OR
                ideqval SOCKET_MEMORY_CONFIGURATION.DdrFreqLimit == 23 OR
                ideqval SOCKET_MEMORY_CONFIGURATION.DdrFreqLimit == 24 OR
                ideqval SOCKET_MEMORY_CONFIGURATION.DdrFreqLimit == 26 OR
                ideqval SOCKET_MEMORY_CONFIGURATION.DdrFreqLimit == 27 OR
                ideqval SOCKET_MEMORY_CONFIGURATION.DdrFreqLimit == 28 OR
                ideqval SOCKET_MEMORY_CONFIGURATION.DdrFreqLimit == 29;
      oneof varid   = SOCKET_MEMORY_CONFIGURATION.imcBclk,
          prompt      = STRING_TOKEN (STR_IMC_BCLK_PROMPT),
          help        = STRING_TOKEN (STR_IMC_BCLK_HELP),
          option text = STRING_TOKEN (STR_AUTO),            value = IMC_BCLK_AUTO, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT | INTERACTIVE;
          option text = STRING_TOKEN (STR_100),             value = IMC_BCLK_100, flags = RESET_REQUIRED | INTERACTIVE;
          option text = STRING_TOKEN (STR_133),             value = IMC_BCLK_133, flags = RESET_REQUIRED | INTERACTIVE;
      endoneof;
    endif;

    suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_ICXSP OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SPRSP;
      oneof varid = SOCKET_MEMORY_CONFIGURATION.PanicWm,
          prompt  = STRING_TOKEN(STR_REFRESH_WM_PROMPT),
          help    = STRING_TOKEN(STR_REFRESH_WM_HELP),
          option text = STRING_TOKEN(STR_AUTO),                    value = REFRESH_WM_AUTO, flags = REFRESH_WM_AUTO_FLAGS;
          option text = STRING_TOKEN(STR_REFRESH_WM_HIGH_STRING),  value = REFRESH_WM_HIGH, flags = REFRESH_WM_HIGH_FLAGS;
          option text = STRING_TOKEN(STR_REFRESH_WM_LOW_STRING),   value = REFRESH_WM_LOW, flags = REFRESH_WM_LOW_FLAGS;
      endoneof;
    endif;

     oneof varid = SOCKET_MEMORY_CONFIGURATION.promoteMrcWarnings,
        prompt  = STRING_TOKEN(STR_PROMOTE_MRC_WARNING_PROMPT),
        help    = STRING_TOKEN(STR_PROMOTE_MRC_WARNING_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = PROMOTE_MRC_WARN_DISABLE, flags = PROMOTE_MRC_WARN_DIS_FLAGS;
        option text = STRING_TOKEN (STR_ENABLE),  value = PROMOTE_MRC_WARN_ENABLE, flags = PROMOTE_MRC_WARN_EN_FLAGS;
    endoneof;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.promoteWarnings,
        prompt  = STRING_TOKEN (STR_PROMOTE_WARNINGS_PROMPT),
        help    = STRING_TOKEN (STR_PROMOTE_WARNINGS_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = PROMOTE_WARN_DISABLE, flags = PROMOTE_WARN_DIS_FLAGS;
        option text = STRING_TOKEN (STR_ENABLE),  value = PROMOTE_WARN_ENABLE, flags = PROMOTE_WARN_EN_FLAGS;
    endoneof;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.haltOnMemErr,
        prompt  = STRING_TOKEN(STR_HALT_ON_MEM_TRAINING_ERROR_PROMPT),
#ifdef DEBUG_CODE_BLOCK
        help    = STRING_TOKEN(STR_HALT_ON_MEM_TRAINING_ERROR_AUTO_HELP),
        option text = STRING_TOKEN(STR_AUTO_RESET),  value = HALT_ON_ERROR_AUTO_RESET, flags = HALT_ON_ERROR_AUTO_FLAGS;
        option text = STRING_TOKEN(STR_DISABLE), value = HALT_ON_ERROR_DISABLE, flags = HALT_ON_ERROR_DIS_FLAGS;
        option text = STRING_TOKEN(STR_ENABLE),  value = HALT_ON_ERROR_ENABLE, flags = HALT_ON_ERROR_EN_FLAGS;
#else //DEBUG_CODE_BLOCK
        help    = STRING_TOKEN(STR_HALT_ON_MEM_TRAINING_ERROR_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = HALT_ON_ERROR_DISABLE, flags = HALT_ON_ERROR_DIS_FLAGS;
        option text = STRING_TOKEN(STR_ENABLE),  value = HALT_ON_ERROR_ENABLE, flags = HALT_ON_ERROR_EN_FLAGS;
#endif //DEBUG_CODE_BLOCK
    endoneof;

    suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.DcpmmEnable == 0;
      oneof varid  = SOCKET_MEMORY_CONFIGURATION.AepNotSupportedException,
        prompt   = STRING_TOKEN (STR_AEP_DIMM_NOT_SUPPORTED_EXCEPTION_PROMPT),
        help     = STRING_TOKEN (STR_AEP_DIMM_NOT_SUPPORTED_EXCEPTION_HELP),
        option text = STRING_TOKEN (STR_ENABLED_STRING),    value = AEP_DIMM_NOT_SUPPORTED_EXCEPTION_ENABLE,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN (STR_DISABLED_STRING),   value = AEP_DIMM_NOT_SUPPORTED_EXCEPTION_DISABLE,  flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      endoneof;
    endif; // suppressif DcpmmEnable == 0

    suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.DcpmmEnable == 0;
      oneof varid  = SOCKET_MEMORY_CONFIGURATION.NvmMediaStatusException,
        prompt   = STRING_TOKEN (STR_NVMCTRL_MEDIA_STATUS_EXCEPTION_PROMPT),
        help     = STRING_TOKEN (STR_NVMCTRL_MEDIA_STATUS_EXCEPTION_HELP),
        option text = STRING_TOKEN (STR_ENABLED_STRING),    value = NVMCTRL_MEDIA_STATUS_EXCEPTION_ENABLE,   flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
        option text = STRING_TOKEN (STR_DISABLED_STRING),   value = NVMCTRL_MEDIA_STATUS_EXCEPTION_DISABLE,  flags = RESET_REQUIRED;
      endoneof;
    endif; // suppressif DcpmmEnable == 0

    oneof varid = SOCKET_MEMORY_CONFIGURATION.MultiThreaded,
        prompt  = STRING_TOKEN (STR_MULTI_THREADED_PROMPT),
        help    = STRING_TOKEN (STR_MULTI_THREADED_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = MULTI_THREADED_DISABLE, flags = MULTI_THREADED_DIS_FLAGS;
        option text = STRING_TOKEN (STR_ENABLE),  value = MULTI_THREADED_ENABLE, flags = MULTI_THREADED_EN_FLAGS;
    endoneof;

    oneof varid  = SOCKET_MEMORY_CONFIGURATION.spdCrcCheck,
        prompt   = STRING_TOKEN (STR_SPD_CRC_CHECK_PROMPT),
        help     = STRING_TOKEN (STR_SPD_CRC_CHECK_HELP),
        option text = STRING_TOKEN (STR_AUTO),    value = SPD_CRC_CHECK_AUTO, flags = MANUFACTURING | DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN (STR_DISABLE), value = SPD_CRC_CHECK_DIS, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (STR_ENABLE),  value = SPD_CRC_CHECK_EN, flags = RESET_REQUIRED;
    endoneof;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.logParsing,
        prompt  = STRING_TOKEN (STR_LOG_PARSING_PROMPT),
        help    = STRING_TOKEN (STR_LOG_PARSING_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = LOG_PARSING_DIS, flags = LOG_PARSING_DIS_FLAGS;
        option text = STRING_TOKEN (STR_ENABLE),  value = LOG_PARSING_EN, flags = LOG_PARSING_EN_FLAGS;
    endoneof;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.lrdimmModuleDelay,
        prompt  = STRING_TOKEN (STR_MODULE_DELAY_PROMPT),
        help    = STRING_TOKEN (STR_MODULE_DELAY_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = MODULE_DELAY_DISABLE, flags = MODULE_DELAY_DIS_FLAGS;
        option text = STRING_TOKEN (STR_AUTO),            value = MODULE_DELAY_AUTO, flags = MODULE_DELAY_AUTO_FLAGS;
    endoneof;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.HwMemTest,
        prompt  = STRING_TOKEN (STR_MEM_TEST_PROMPT),
        help    = STRING_TOKEN (STR_MEM_TEST_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = MEM_TEST_DISABLE, flags = MEM_TEST_DIS_FLAGS;
        option text = STRING_TOKEN (STR_ENABLE),  value = MEM_TEST_ENABLE, flags = MEM_TEST_EN_FLAGS;
    endoneof;

    numeric varid = SOCKET_MEMORY_CONFIGURATION.MemTestLoops,
        prompt    = STRING_TOKEN(STR_MEM_TEST_LOOPS_PROMPT),
        help      = STRING_TOKEN(STR_MEM_TEST_LOOPS_HELP),
        flags     = RESET_REQUIRED,
        minimum   = 0,
        maximum   = 65535,
        step      = 0,
        default   = MEM_TEST_LOOPS_DEFAULT, defaultstore = MyStandardDefault,
        default   = MEM_TEST_LOOPS_DEFAULT, defaultstore = MyManufactureDefault,
    endnumeric;

    numeric varid = SOCKET_MEMORY_CONFIGURATION.AdvMemTestOptions,
        prompt    = STRING_TOKEN (STR_ADV_MEM_TEST_OPTIONS_PROMPT),
        help      = STRING_TOKEN (STR_ADV_MEM_TEST_OPTIONS_HELP),
        flags     = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum   = 0,
        maximum   = ADV_MEM_TEST_MAX,
        step      = 0x0, // Stepping of 0 equates to a manual entering of a value,
                         // otherwise it will auto-increment with a left/right arrow
        default   = ADV_MEM_TEST_OPTIONS_DEFAULT, defaultstore = MyStandardDefault,
        default   = ADV_MEM_TEST_OPTIONS_DEFAULT, defaultstore = MyManufactureDefault,
    endnumeric;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.AdvMemTestResetList,
        prompt    = STRING_TOKEN (STR_ADV_MEM_TEST_RESET_LIST_PROMPT),
        help      = STRING_TOKEN (STR_ADV_MEM_TEST_RESET_LIST_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
        default   = ADV_MEM_TEST_RESET_LIST_DEFAULT, defaultstore = MyStandardDefault,
        default   = ADV_MEM_TEST_RESET_LIST_DEFAULT, defaultstore = MyManufactureDefault,
    endoneof;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.AdvMemTestCondition,
        prompt    = STRING_TOKEN (STR_ADV_MEM_TEST_COND_PROMPT),
        help      = STRING_TOKEN (STR_ADV_MEM_TEST_COND_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = ADV_MEM_TEST_COND_DISABLE, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (STR_AUTO),    value = ADV_MEM_TEST_COND_AUTO,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN (STR_MANUAL),  value = ADV_MEM_TEST_COND_MANUAL,  flags = RESET_REQUIRED;
        default   = ADV_MEM_TEST_COND_DEFAULT, defaultstore = MyStandardDefault,
        default   = ADV_MEM_TEST_COND_DEFAULT, defaultstore = MyManufactureDefault,
    endoneof;

    suppressif NOT ideqval SOCKET_MEMORY_CONFIGURATION.AdvMemTestCondition == ADV_MEM_TEST_COND_MANUAL;

    numeric varid = SOCKET_MEMORY_CONFIGURATION.AdvMemTestCondVdd,
        prompt    = STRING_TOKEN(STR_ADV_MEM_TEST_COND_VDD_PROMPT),
        help      = STRING_TOKEN(STR_ADV_MEM_TEST_COND_VDD_HELP),
        flags     = RESET_REQUIRED,
        minimum   = ADV_MEM_TEST_COND_VDD_MIN,
        maximum   = ADV_MEM_TEST_COND_VDD_MAX,
        step      = 0,
        default   = ADV_MEM_TEST_COND_VDD_DEFAULT, defaultstore = MyStandardDefault,
        default   = ADV_MEM_TEST_COND_VDD_DEFAULT, defaultstore = MyManufactureDefault,
    endnumeric;

    numeric varid = SOCKET_MEMORY_CONFIGURATION.AdvMemTestCondTwr,
        prompt    = STRING_TOKEN(STR_ADV_MEM_TEST_COND_TWR_PROMPT),
        help      = STRING_TOKEN(STR_ADV_MEM_TEST_COND_TWR_HELP),
        flags     = RESET_REQUIRED,
        minimum   = ADV_MEM_TEST_COND_TWR_MIN,
        maximum   = ADV_MEM_TEST_COND_TWR_MAX,
        step      = 0,
        default   = ADV_MEM_TEST_COND_TWR_DEFAULT, defaultstore = MyStandardDefault,
        default   = ADV_MEM_TEST_COND_TWR_DEFAULT, defaultstore = MyManufactureDefault,
    endnumeric;

    numeric varid = SOCKET_MEMORY_CONFIGURATION.AdvMemTestCondTrefi,
        prompt    = STRING_TOKEN(STR_ADV_MEM_TEST_COND_TREFI_PROMPT),
        help      = STRING_TOKEN(STR_ADV_MEM_TEST_COND_TREFI_HELP),
        flags     = RESET_REQUIRED,
        minimum   = ADV_MEM_TEST_COND_TREFI_MIN,
        maximum   = ADV_MEM_TEST_COND_TREFI_MAX,
        step      = 0,
        default   = ADV_MEM_TEST_COND_TREFI_DEFAULT, defaultstore = MyStandardDefault,
        default   = ADV_MEM_TEST_COND_TREFI_DEFAULT, defaultstore = MyManufactureDefault,
    endnumeric;

    numeric varid = SOCKET_MEMORY_CONFIGURATION.AdvMemTestCondPause,
        prompt    = STRING_TOKEN(STR_ADV_MEM_TEST_COND_PAUSE_PROMPT),
        help      = STRING_TOKEN(STR_ADV_MEM_TEST_COND_PAUSE_HELP),
        flags     = RESET_REQUIRED,
        minimum   = ADV_MEM_TEST_COND_PAUSE_MIN,
        maximum   = ADV_MEM_TEST_COND_PAUSE_MAX,
        step      = 0,
        default   = ADV_MEM_TEST_COND_PAUSE_DEFAULT, defaultstore = MyStandardDefault,
        default   = ADV_MEM_TEST_COND_PAUSE_DEFAULT, defaultstore = MyManufactureDefault,
    endnumeric;

    endif;

    oneof varid   = SOCKET_MEMORY_CONFIGURATION.TrainingResultOffsetFunctionEnable,
        prompt    = STRING_TOKEN (STR_TRNG_RESULT_OFFSET_PROMPT),
        help      = STRING_TOKEN (STR_TRNG_RESULT_OFFSET_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = TRNG_RESULT_OFFSET_DISABLE, flags = MANUFACTURING | DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN (STR_ENABLE),  value = TRNG_RESULT_OFFSET_ENABLE, flags = RESET_REQUIRED;
    endoneof;

    suppressif  ideqval SOCKET_MEMORY_CONFIGURATION.TrainingResultOffsetFunctionEnable == TRNG_RESULT_OFFSET_DISABLE; //Assumes TRNG_RESULT_OFFSET_DEFAULT == TRNG_RESULT_OFFSET_DISABLE

      numeric varid = SOCKET_MEMORY_CONFIGURATION.OffsetRecEn,
          prompt    = STRING_TOKEN(STR_TRNG_RESULT_OFFSET_RECV_EN_PROMPT),
          help      = STRING_TOKEN(STR_TRNG_RESULT_OFFSET_RECV_EN_HELP),
          flags     = RESET_REQUIRED,
          minimum   = TRNG_RESULT_OFFSET_MIN_VALUE,
          maximum   = TRNG_RESULT_OFFSET_MAX_VALUE,
          step      = 0,
          default   = TRNG_RESULT_OFFSET_DEFAULT_VALUE, defaultstore = MyStandardDefault,
          default   = TRNG_RESULT_OFFSET_DEFAULT_VALUE, defaultstore = MyManufactureDefault,
      endnumeric;

      numeric varid = SOCKET_MEMORY_CONFIGURATION.OffsetTxDq,
          prompt    = STRING_TOKEN(STR_TRNG_RESULT_OFFSET_TX_DQ_PROMPT),
          help      = STRING_TOKEN(STR_TRNG_RESULT_OFFSET_TX_DQ_HELP),
          flags     = RESET_REQUIRED,
          minimum   = TRNG_RESULT_OFFSET_MIN_VALUE,
          maximum   = TRNG_RESULT_OFFSET_MAX_VALUE,
          step      = 0,
          default   = TRNG_RESULT_OFFSET_DEFAULT_VALUE, defaultstore = MyStandardDefault,
          default   = TRNG_RESULT_OFFSET_DEFAULT_VALUE, defaultstore = MyManufactureDefault,
      endnumeric;

      numeric varid = SOCKET_MEMORY_CONFIGURATION.OffsetRxDq,
          prompt    = STRING_TOKEN(STR_TRNG_RESULT_OFFSET_RX_DQ_PROMPT),
          help      = STRING_TOKEN(STR_TRNG_RESULT_OFFSET_RX_DQ_HELP),
          flags     = RESET_REQUIRED,
          minimum   = TRNG_RESULT_OFFSET_MIN_VALUE,
          maximum   = TRNG_RESULT_OFFSET_MAX_VALUE,
          step      = 0,
          default   = TRNG_RESULT_OFFSET_DEFAULT_VALUE, defaultstore = MyStandardDefault,
          default   = TRNG_RESULT_OFFSET_DEFAULT_VALUE, defaultstore = MyManufactureDefault,
      endnumeric;

      numeric varid = SOCKET_MEMORY_CONFIGURATION.OffsetTxVref,
          prompt    = STRING_TOKEN(STR_TRNG_RESULT_OFFSET_TX_VREF_PROMPT),
          help      = STRING_TOKEN(STR_TRNG_RESULT_OFFSET_TX_VREF_HELP),
          flags     = RESET_REQUIRED,
          minimum   = TRNG_RESULT_OFFSET_MIN_VALUE,
          maximum   = TRNG_RESULT_OFFSET_MAX_VALUE,
          step      = 0,
          default   = TRNG_RESULT_OFFSET_DEFAULT_VALUE, defaultstore = MyStandardDefault,
          default   = TRNG_RESULT_OFFSET_DEFAULT_VALUE, defaultstore = MyManufactureDefault,
      endnumeric;

      numeric varid = SOCKET_MEMORY_CONFIGURATION.OffsetRxVref,
          prompt    = STRING_TOKEN(STR_TRNG_RESULT_OFFSET_RX_VREF_PROMPT),
          help      = STRING_TOKEN(STR_TRNG_RESULT_OFFSET_RX_VREF_HELP),
          flags     = RESET_REQUIRED,
          minimum   = TRNG_RESULT_OFFSET_MIN_VALUE,
          maximum   = TRNG_RESULT_OFFSET_MAX_VALUE,
          step      = 0,
          default   = TRNG_RESULT_OFFSET_DEFAULT_VALUE, defaultstore = MyStandardDefault,
          default   = TRNG_RESULT_OFFSET_DEFAULT_VALUE, defaultstore = MyManufactureDefault,
      endnumeric;

      numeric varid = SOCKET_MEMORY_CONFIGURATION.OffsetCmdAll,
          prompt    = STRING_TOKEN(STR_TRNG_RESULT_OFFSET_CMD_ALL_PROMPT),
          help      = STRING_TOKEN(STR_TRNG_RESULT_OFFSET_CMD_ALL_HELP),
          flags     = RESET_REQUIRED,
          minimum   = TRNG_RESULT_OFFSET_MIN_VALUE,
          maximum   = TRNG_RESULT_OFFSET_MAX_VALUE,
          step      = 0,
          default   = TRNG_RESULT_OFFSET_DEFAULT_VALUE, defaultstore = MyStandardDefault,
          default   = TRNG_RESULT_OFFSET_DEFAULT_VALUE, defaultstore = MyManufactureDefault,
      endnumeric;

      numeric varid = SOCKET_MEMORY_CONFIGURATION.OffsetCmdVref,
          prompt    = STRING_TOKEN(STR_TRNG_RESULT_OFFSET_CMD_VREF_PROMPT),
          help      = STRING_TOKEN(STR_TRNG_RESULT_OFFSET_CMD_VREF_HELP),
          flags     = RESET_REQUIRED,
          minimum   = TRNG_RESULT_OFFSET_MIN_VALUE,
          maximum   = TRNG_RESULT_OFFSET_MAX_VALUE,
          step      = 0,
          default   = TRNG_RESULT_OFFSET_DEFAULT_VALUE, defaultstore = MyStandardDefault,
          default   = TRNG_RESULT_OFFSET_DEFAULT_VALUE, defaultstore = MyManufactureDefault,
      endnumeric;

      numeric varid = SOCKET_MEMORY_CONFIGURATION.OffsetCtlAll,
          prompt    = STRING_TOKEN(STR_TRNG_RESULT_OFFSET_CTL_ALL_PROMPT),
          help      = STRING_TOKEN(STR_TRNG_RESULT_OFFSET_CTL_ALL_HELP),
          flags     = RESET_REQUIRED,
          minimum   = TRNG_RESULT_OFFSET_MIN_VALUE,
          maximum   = TRNG_RESULT_OFFSET_MAX_VALUE,
          step      = 0,
          default   = TRNG_RESULT_OFFSET_DEFAULT_VALUE, defaultstore = MyStandardDefault,
          default   = TRNG_RESULT_OFFSET_DEFAULT_VALUE, defaultstore = MyManufactureDefault,
      endnumeric;
    endif;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.DdrMemoryType,
        prompt  = STRING_TOKEN (STR_DDR_MEMORY_TYPE_PROMPT),
        help    = STRING_TOKEN (STR_DDR_MEMORY_TYPE_HELP),
        option text = STRING_TOKEN(STR_RDIMM_ONLY),  value = RDIMM_TYPE, flags = RDIMM_TYPE_FLAGS;
        option text = STRING_TOKEN(STR_UDIMM_ONLY),  value = UDIMM_TYPE, flags = UDIMM_TYPE_FLAGS;
        option text = STRING_TOKEN(STR_UDIMM_RDIMM), value = UDIMM_RDIMM_TYPE, flags = UDIMM_RDIMM_TYPE_FLAGS;
    endoneof;


    suppressif NOT (ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
                    ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
                    ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX);
      oneof varid = SOCKET_MEMORY_CONFIGURATION.AttemptFastBoot,
          prompt  = STRING_TOKEN (STR_ATTEMPT_FAST_BOOT_PROMPT),
          help    = STRING_TOKEN (STR_ATTEMPT_FAST_BOOT_HELP_SKX),
          option text = STRING_TOKEN (STR_DISABLE), value = FAST_BOOT_DISABLE, flags = FAST_BOOT_DIS_FLAGS;
          option text = STRING_TOKEN (STR_ENABLE),  value = FAST_BOOT_ENABLE, flags = FAST_BOOT_EN_FLAGS;
      endoneof;
    endif;

    suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX;
      oneof varid = SOCKET_MEMORY_CONFIGURATION.AttemptFastBoot,
          prompt  = STRING_TOKEN (STR_ATTEMPT_FAST_BOOT_PROMPT),
          help    = STRING_TOKEN (STR_ATTEMPT_FAST_BOOT_HELP_10NM),
          option text = STRING_TOKEN (STR_DISABLE), value = FAST_BOOT_DISABLE, flags = FAST_BOOT_DIS_FLAGS;
          option text = STRING_TOKEN (STR_ENABLE),  value = FAST_BOOT_ENABLE, flags = FAST_BOOT_EN_FLAGS;
      endoneof;
    endif;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.AttemptFastBootCold,
        prompt  = STRING_TOKEN (STR_ATTEMPT_FAST_BOOT_COLD_PROMPT),
        help    = STRING_TOKEN (STR_ATTEMPT_FAST_BOOT_COLD_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = FAST_BOOT_COLD_DISABLE, flags = FAST_BOOT_COLD_DIS_FLAGS;
        option text = STRING_TOKEN (STR_ENABLE),  value = FAST_BOOT_COLD_ENABLE, flags = FAST_BOOT_COLD_EN_FLAGS;
    endoneof;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.MemTestOnColdFastBoot,
        prompt  = STRING_TOKEN (STR_MEM_TEST_COLD_FAST_BOOT_PROMPT),
        help    = STRING_TOKEN (STR_MEM_TEST_COLD_FAST_BOOT_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = MEM_TEST_COLD_FAST_BOOT_DISABLE, flags = MEM_TEST_COLD_FAST_BOOT_DIS_FLAGS;
        option text = STRING_TOKEN (STR_ENABLE),  value = MEM_TEST_COLD_FAST_BOOT_ENABLE, flags = MEM_TEST_COLD_FAST_BOOT_EN_FLAGS;
    endoneof;

  suppressif ideqval SOCKET_MEMORY_CONFIGURATION.LegacyRmtKnobVisible == LEGACY_RMT_KNOB_VISIBLITY_DISABLE;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.RmtOnColdFastBoot,
        prompt  = STRING_TOKEN (STR_RMT_COLD_FAST_BOOT_PROMPT),
        help    = STRING_TOKEN (STR_RMT_COLD_FAST_BOOT_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = RMT_COLD_FAST_BOOT_DISABLE, flags = RMT_COLD_FAST_BOOT_DIS_FLAGS;
        option text = STRING_TOKEN (STR_ENABLE),  value = RMT_COLD_FAST_BOOT_ENABLE, flags = RMT_COLD_FAST_BOOT_EN_FLAGS;
    endoneof;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.LegacyRmt,
        prompt  = STRING_TOKEN (STR_LEGACY_RMT_PROMPT),
        help    = STRING_TOKEN (STR_LEGACY_RMT_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = LEGACY_RMT_DISABLE, flags = LEGACY_RMT_DISABLE_FLAGS;
        option text = STRING_TOKEN (STR_ENABLE),  value = LEGACY_RMT_ENABLE, flags = LEGACY_RMT_ENABLE_FLAGS;
    endoneof;

    // Setup option for enabling  RMT Execution on Advanced Memory Training
    suppressif  ideqval SOCKET_MEMORY_CONFIGURATION.LegacyRmt == LEGACY_RMT_DISABLE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.RmtOnAdvancedTraining,
            prompt  = STRING_TOKEN (STR_RMT_ON_ADVANCED_TRAINING_PROMPT),
            help    = STRING_TOKEN (STR_RMT_ON_ADVANCED_TRAINING_HELP),
            option text = STRING_TOKEN (STR_ENABLE),  value = RMT_ON_ADVANCED_TRAINING_ENABLE,  flags = RMT_ON_ADVANCED_TRAINING_EN_FLAGS;
            option text = STRING_TOKEN (STR_DISABLE), value = RMT_ON_ADVANCED_TRAINING_DISABLE, flags = RMT_ON_ADVANCED_TRAINING_DIS_FLAGS;
        endoneof;
    endif; //suppressif
  endif; // suppressif ideqval SOCKET_MEMORY_CONFIGURATION.LegacyRmtKnobVisible == LEGACY_RMT_KNOB_VISIBLITY_DISABLE;

    suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SNR;
      oneof varid  = SOCKET_MEMORY_CONFIGURATION.EnableNgnBcomMargining,
          prompt   = STRING_TOKEN (STR_NGN_BCOM_MARGIN_PROMPT),
          help     = STRING_TOKEN (STR_NGN_BCOM_MARGIN_HELP),
          option text = STRING_TOKEN (STR_DISABLE),   value = NGN_BCOM_MARGINING_DISABLE, flags = NGN_BCOM_MARGINING_DIS_FLAGS;
          option text = STRING_TOKEN (STR_ENABLE),    value = NGN_BCOM_MARGINING_ENABLE,  flags = NGN_BCOM_MARGINING_EN_FLAGS;
      endoneof;
    endif;  // suppressif CpuType == CPU_SNR

    oneof varid = SOCKET_MEMORY_CONFIGURATION.bdatEn,
        prompt  = STRING_TOKEN (STR_BDAT_EN_PROMPT),
        help    = STRING_TOKEN (STR_BDAT_EN_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = BDAT_DISABLE, flags = BDAT_DIS_FLAGS;
        option text = STRING_TOKEN (STR_ENABLE),  value = BDAT_ENABLE, flags = BDAT_EN_FLAGS;
    endoneof;

    suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.DcpmmEnable == 0;
      oneof varid = SOCKET_MEMORY_CONFIGURATION.ScrambleEnDDRT,
        prompt  = STRING_TOKEN (STR_SCRAMBLE_EN_DDRT_PROMPT),
        help    = STRING_TOKEN (STR_SCRAMBLE_EN_DDRT_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = SCRAMBLE_DDRT_DISABLE, flags = SCRAMBLE_DDRT_DIS_FLAGS;
        option text = STRING_TOKEN (STR_ENABLE),  value = SCRAMBLE_DDRT_ENABLE, flags = SCRAMBLE_DDRT_EN_FLAGS;
      endoneof;
    endif; // suppressif DcpmmEnable == 0

    oneof varid = SOCKET_MEMORY_CONFIGURATION.ScrambleEn,
        prompt  = STRING_TOKEN (STR_SCRAMBLE_EN_PROMPT),
        help    = STRING_TOKEN (STR_SCRAMBLE_EN_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = SCRAMBLE_DISABLE, flags = SCRAMBLE_DIS_FLAGS;
        option text = STRING_TOKEN (STR_ENABLE),  value = SCRAMBLE_ENABLE, flags = SCRAMBLE_EN_FLAGS;
    endoneof;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.allowCorrectableError,
        prompt  = STRING_TOKEN (STR_ALLOW_CORRECTABLE_ERROR_EN_PROMPT),
        help    = STRING_TOKEN (STR_ALLOW_CORRECTABLE_ERROR_EN_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = ALLOW_CORRECTABLE_ERROR_DISABLE, flags = ALLOW_CORRECTABLE_ERROR_DIS_FLAGS;
        option text = STRING_TOKEN (STR_ENABLE),  value = ALLOW_CORRECTABLE_ERROR_ENABLE, flags = ALLOW_CORRECTABLE_ERROR_EN_FLAGS;
    endoneof;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.allowCorrectableMemTestError,
        prompt  = STRING_TOKEN (STR_ALLOW_CORRECTABLE_MEM_TEST_ERROR_EN_PROMPT),
        help    = STRING_TOKEN (STR_ALLOW_CORRECTABLE_MEM_TEST_ERROR_EN_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = ALLOW_CORRECTABLE_MEM_TEST_ERROR_DISABLE, flags = ALLOW_CORRECTABLE_MEM_TEST_ERROR_DIS_FLAGS;
        option text = STRING_TOKEN (STR_ENABLE),  value = ALLOW_CORRECTABLE_MEM_TEST_ERROR_ENABLE, flags = ALLOW_CORRECTABLE_MEM_TEST_ERROR_EN_FLAGS;
    endoneof;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.EarlyWrCRCDdrio,
      prompt  = STRING_TOKEN (STR_EARLY_WR_CRC_DDRIO_PROMPT),
      help    = STRING_TOKEN (STR_EARLY_WR_CRC_DDRIO_HELP),
      option text = STRING_TOKEN (STR_DISABLE), value = WR_CRC_DISABLE, flags = EARLY_WR_CRC_DDRIO_DIS_FLAGS;
      option text = STRING_TOKEN (STR_ENABLE),  value = WR_CRC_ENABLE, flags = EARLY_WR_CRC_DDRIO_EN_FLAGS;
    endoneof;

    suppressif ideqval SOCKET_MEMORY_CONFIGURATION.ADDDCEn == 1;
      grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.AepOnSystem == 1;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.WrCRC,
          prompt  = STRING_TOKEN (STR_WR_CRC_PROMPT),
          help    = STRING_TOKEN (STR_WR_CRC_HELP),
          option text = STRING_TOKEN (STR_DISABLE), value = WR_CRC_DISABLE, flags = WR_CRC_DIS_FLAGS;
          option text = STRING_TOKEN (STR_ENABLE),  value = WR_CRC_ENABLE, flags = WR_CRC_EN_FLAGS;
        endoneof;
      endif;
    endif;

    suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_ICXSP;
      oneof varid = SOCKET_MEMORY_CONFIGURATION.dimmIsolation,
          prompt  = STRING_TOKEN(STR_DIMM_ISOLATION_PROMPT),
          help    = STRING_TOKEN(STR_DIMM_ISOLATION_HELP),
          option text = STRING_TOKEN(STR_DISABLE), value = DIMM_ISOLATION_DISABLE, flags = DIMM_ISOLATION_DIS_FLAGS;
          option text = STRING_TOKEN(STR_ENABLE),  value = DIMM_ISOLATION_ENABLE, flags = DIMM_ISOLATION_EN_FLAGS;
      endoneof;
    endif;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.WritePreamble,
        prompt  = STRING_TOKEN (STR_WRITE_PREAMBLE_PROMPT),
#ifdef  DDR5_SUPPORT
        help    = STRING_TOKEN (STR_DDR5_WRITE_PREAMBLE_HELP),
        option text = STRING_TOKEN (STR_2TCLK), value = PREAMBLE_2TCLK, flags = WR_PREAMBLE_2TCLK_FLAGS;
        option text = STRING_TOKEN (STR_3TCLK), value = PREAMBLE_3TCLK, flags = WR_PREAMBLE_3TCLK_FLAGS;
        option text = STRING_TOKEN (STR_4TCLK), value = PREAMBLE_4TCLK, flags = WR_PREAMBLE_4TCLK_FLAGS;
#else
        help    = STRING_TOKEN (STR_DDR4_WRITE_PREAMBLE_HELP),
        option text = STRING_TOKEN (STR_1TCLK), value = PREAMBLE_1TCLK, flags = WR_PREAMBLE_1TCLK_FLAGS;
        option text = STRING_TOKEN (STR_2TCLK), value = PREAMBLE_2TCLK, flags = WR_PREAMBLE_2TCLK_FLAGS;
#endif
        option text = STRING_TOKEN (STR_AUTO),  value = PREAMBLE_AUTO,  flags = WR_PREAMBLE_AUTO_FLAGS;
    endoneof;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.ReadPreamble,
        prompt  = STRING_TOKEN (STR_READ_PREAMBLE_PROMPT),
#ifdef  DDR5_SUPPORT
        help    = STRING_TOKEN (STR_DDR5_READ_PREAMBLE_HELP),
#else
        help    = STRING_TOKEN (STR_DDR4_READ_PREAMBLE_HELP),
#endif
        option text = STRING_TOKEN (STR_1TCLK), value = PREAMBLE_1TCLK, flags = RD_PREAMBLE_1TCLK_FLAGS;
        option text = STRING_TOKEN (STR_2TCLK), value = PREAMBLE_2TCLK, flags = RD_PREAMBLE_2TCLK_FLAGS;
#ifdef  DDR5_SUPPORT
        option text = STRING_TOKEN (STR_3TCLK), value = PREAMBLE_3TCLK, flags = RD_PREAMBLE_3TCLK_FLAGS;
        option text = STRING_TOKEN (STR_4TCLK), value = PREAMBLE_4TCLK, flags = RD_PREAMBLE_4TCLK_FLAGS;
#endif
        option text = STRING_TOKEN (STR_AUTO),  value = PREAMBLE_AUTO,  flags = RD_PREAMBLE_AUTO_FLAGS;
    endoneof;

#if defined(SKX_HOST) || defined(CPX_HOST)
    oneof varid  = SOCKET_MEMORY_CONFIGURATION.RecEnDelayAverage,
      prompt   = STRING_TOKEN (STR_RANK_SWITCH_FIX_PROMPT),
      help     = STRING_TOKEN (STR_RANK_SWITCH_FIX_HELP),
      option text = STRING_TOKEN (STR_DISABLED_STRING),            value = RANK_SWITCH_FIX_DIS,           flags = RANK_SWITCH_FIX_DIS_FLAGS;
      option text = STRING_TOKEN (STR_RANK_SWITCH_TA_FLOOR),       value = RANK_SWITCH_FIX_TA_FLOOR,      flags = RANK_SWITCH_FIX_TA_FLOOR_FLAGS;
      option text = STRING_TOKEN (STR_RANK_SWITCH_RCVEN_AVE),      value = RANK_SWITCH_FIX_RCVEN_AVE,     flags = RANK_SWITCH_FIX_RCVEN_AVE_FLAGS;
      option text = STRING_TOKEN (STR_RANK_SWITCH_RCVEN_AVE_PT1),  value = RANK_SWITCH_FIX_RCVEN_AVE_PT1, flags = RANK_SWITCH_FIX_RCVEN_AVE_PT1_FLAGS;
    endoneof;
#endif

    numeric varid = SOCKET_MEMORY_CONFIGURATION.ScrambleSeedLow,
        prompt    = STRING_TOKEN (STR_SCRAMBLE_SEED_LOW_PROMPT),
        help      = STRING_TOKEN (STR_SCRAMBLE_SEED_LOW_HELP),
        flags     = RESET_REQUIRED,
        minimum   = MIN_SCRAMBLE_SEED_LOW,
        maximum   = MAX_SCRAMBLE_SEED_LOW,
        step      = 0,
        default   = SCRAMBLE_SEED_LOW, defaultstore = MyStandardDefault,
        default   = SCRAMBLE_SEED_LOW, defaultstore = MyManufactureDefault,
    endnumeric;

    numeric varid = SOCKET_MEMORY_CONFIGURATION.ScrambleSeedHigh,
        prompt    = STRING_TOKEN (STR_SCRAMBLE_SEED_HIGH_PROMPT),
        help      = STRING_TOKEN (STR_SCRAMBLE_SEED_HIGH_HELP),
        flags     = RESET_REQUIRED,
        minimum   = MIN_SCRAMBLE_SEED_HIGH,
        maximum   = MAX_SCRAMBLE_SEED_HIGH,
        step      = 0,
        default   = SCRAMBLE_SEED_HIGH, defaultstore = MyStandardDefault,
        default   = SCRAMBLE_SEED_HIGH, defaultstore = MyManufactureDefault,
    endnumeric;

    suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SNR;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.EadrSupport == EADR_ENABLED;
        oneof varid  = SOCKET_MEMORY_CONFIGURATION.ADREn,
            prompt   = STRING_TOKEN (STR_ADR_ENABLE),
            help     = STRING_TOKEN (STR_ADR_ENABLE_HELP),
            option text = STRING_TOKEN (STR_DISABLE), value = ADR_DISABLE, flags = ADR_DIS_FLAGS;
            option text = STRING_TOKEN (STR_ENABLE),  value = ADR_ENABLE, flags = ADR_EN_FLAGS;
        endoneof;

        suppressif ideqval SOCKET_MEMORY_CONFIGURATION.ADREn == ADR_DISABLE;
          oneof varid  = SOCKET_MEMORY_CONFIGURATION.LegacyADRModeEn,
            prompt   = STRING_TOKEN (STR_ADR_LEGACYMODE_EN),
            help     = STRING_TOKEN (STR_ADR_LEGACYMODE_EN_HELP),
            option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = LEGACY_ADR_DIS_FLAGS;
            option text = STRING_TOKEN (STR_ENABLED_STRING),  value = 1, flags = LEGACY_ADR_EN_FLAGS ;
          endoneof;

          oneof varid  = SOCKET_MEMORY_CONFIGURATION.MinNormalMemSize,
            prompt   = STRING_TOKEN (STR_ADR_MIN_MEM_SIZE),
            help     = STRING_TOKEN (STR_ADR_MIN_MEM_SIZE_HELP),
            option text = STRING_TOKEN (STR_2GB), value = 2, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
            option text = STRING_TOKEN (STR_4GB), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (STR_6GB), value = 6, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (STR_8GB), value = 8, flags = RESET_REQUIRED;
          endoneof;
        endif;
      endif;  // Suppressif EadrSupport == EADR_ENABLED

#ifdef MEM_NVDIMM_EN
      oneof varid  = SOCKET_MEMORY_CONFIGURATION.NvDimmEnergyPolicy,
        prompt = STRING_TOKEN (STR_NVDIMM_ENERGY_POLICY),
        help = STRING_TOKEN (STR_NVDIMM_ENERGY_POLICY_HELP),
        option text = STRING_TOKEN (STR_NVDIMM_ENERGY_POLICY_DEVICE_MANAGED), value = ENERGY_POLICY_DEVICE_MANAGED, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN (STR_NVDIMM_ENERGY_POLICY_HOST_MANAGED), value = ENERGY_POLICY_HOST_MANAGED, flags = RESET_REQUIRED;
      endoneof;
#endif

      suppressif (ideqval SOCKET_MEMORY_CONFIGURATION.ADREn == ADR_DISABLE) AND (NOT ideqval SOCKET_MEMORY_CONFIGURATION.EadrSupport == EADR_ENABLED);
#ifdef MEM_NVDIMM_EN
        oneof varid  = SOCKET_MEMORY_CONFIGURATION.ADRDataSaveMode,
            prompt   = STRING_TOKEN (STR_ADR_DATA_SAVE_MODE),
            help     = STRING_TOKEN (STR_ADR_DATA_SAVE_MODE_HELP),
            option text = STRING_TOKEN (STR_ADR_DATASAVE_DIS), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (STR_ADR_DATASAVE_BBU), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (STR_ADR_DATASAVE_NVDIMM), value = 2, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        endoneof;
#endif

#ifdef MEM_NVDIMM_EN
        suppressif ideqval SOCKET_MEMORY_CONFIGURATION.ADRDataSaveMode == 2;
#endif
          oneof varid  = SOCKET_MEMORY_CONFIGURATION.check_pm_sts,
              prompt   = STRING_TOKEN (STR_CHECK_PM_STS),
              help     = STRING_TOKEN (STR_CHECK_PM_STS_HELP),
              option text = STRING_TOKEN (STR_DISABLE), value = CHECK_PM_STS_DISABLE, flags = CHECK_PM_STS_DIS_FLAGS;
              option text = STRING_TOKEN (STR_ENABLE),  value = CHECK_PM_STS_ENABLE, flags = CHECK_PM_STS_EN_FLAGS;
          endoneof;
#ifdef MEM_NVDIMM_EN
        endif;
#endif

#ifdef MEM_NVDIMM_EN
        suppressif ideqval SOCKET_MEMORY_CONFIGURATION.ADRDataSaveMode == 2;
#endif
          oneof varid  = SOCKET_MEMORY_CONFIGURATION.check_platform_detect,
              prompt   = STRING_TOKEN (STR_CHECK_PLATFORM),
              help     = STRING_TOKEN (STR_CHECK_PLATFORM_HELP),
              option text = STRING_TOKEN (STR_DISABLE), value = CHECK_PLATFORM_DETECT_DISABLE, flags = CHECK_PLATFORM_DETECT_DIS_FLAGS;
              option text = STRING_TOKEN (STR_ENABLE),  value = CHECK_PLATFORM_DETECT_ENABLE, flags = CHECK_PLATFORM_DETECT_EN_FLAGS;
          endoneof;
#ifdef MEM_NVDIMM_EN
        endif;
#endif

#ifdef MEM_NVDIMM_EN
        suppressif NOT ideqval SOCKET_MEMORY_CONFIGURATION.ADRDataSaveMode == 2;
          oneof varid  = SOCKET_MEMORY_CONFIGURATION.eraseArmNVDIMMS,
              prompt   = STRING_TOKEN (STR_ERASEARM_NVDIMM),
              help     = STRING_TOKEN (STR_ERASEARM_NVDIMM_HELP),
              option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED ;
              option text = STRING_TOKEN (STR_ENABLED_STRING),  value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
          endoneof;

          oneof varid  = SOCKET_MEMORY_CONFIGURATION.restoreNVDIMMS,
              prompt   = STRING_TOKEN (STR_RESTORE_NVDIMM),
              help     = STRING_TOKEN (STR_RESTORE_NVDIMM_HELP),
              option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED ;
              option text = STRING_TOKEN (STR_ENABLED_STRING),  value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
          endoneof;

          oneof varid  = SOCKET_MEMORY_CONFIGURATION.interNVDIMMS,
              prompt   = STRING_TOKEN (STR_INTERLEAVE_NVDIMM),
              help     = STRING_TOKEN (STR_INTERLEAVE_NVDIMM_HELP),
              option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT ;
              option text = STRING_TOKEN (STR_ENABLED_STRING),  value = 1, flags = RESET_REQUIRED;
          endoneof;
        endif;
#endif
      endif;  // suppressif ADREn == ADR_DISABLE AND EadrSupport != EADR_ENABLED
    endif;  // suppressif CpuType == CPU_SNR

    oneof varid = SOCKET_MEMORY_CONFIGURATION.CustomRefreshRateEn,
        prompt  = STRING_TOKEN(STR_CUSTOMREFRESHRATEEN_PROMPT),
        help    = STRING_TOKEN(STR_CUSTOMREFRESHRATEEN_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = CUSTOM_REFRESH_RATE_DISABLE, flags = CUSTOM_REFRESH_RATE_DIS_FLAGS;
        option text = STRING_TOKEN(STR_ENABLE),  value = CUSTOM_REFRESH_RATE_ENABLE, flags = CUSTOM_REFRESH_RATE_EN_FLAGS;
    endoneof;

    suppressif (ideqval SOCKET_MEMORY_CONFIGURATION.CustomRefreshRateEn == 0) OR
               (NOT (ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
                     ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
                     ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX));
      numeric varid = SOCKET_MEMORY_CONFIGURATION.CustomRefreshRate,
          prompt    = STRING_TOKEN(STR_CUSTOMREFRESHRATE_PROMPT),
          help      = STRING_TOKEN(STR_CUSTOMREFRESHRATE_HELP_SKX),
          flags     = RESET_REQUIRED,
          minimum   = CUST_REFRESH_RATE_MIN,
          maximum   = CUST_REFRESH_RATE_MAX_SKX,
          step      = 1,
          default   = CUST_REFRESH_RATE_DEFAULT, defaultstore = MyStandardDefault,
          default   = CUST_REFRESH_RATE_DEFAULT, defaultstore = MyManufactureDefault,
      endnumeric;
    endif;

    suppressif ideqval SOCKET_MEMORY_CONFIGURATION.CustomRefreshRateEn == 0 OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX;
      numeric varid = SOCKET_MEMORY_CONFIGURATION.CustomRefreshRate,
          prompt    = STRING_TOKEN(STR_CUSTOMREFRESHRATE_PROMPT),
          help      = STRING_TOKEN(STR_CUSTOMREFRESHRATE_HELP_ICX_KNH),
          flags     = RESET_REQUIRED,
          minimum   = CUST_REFRESH_RATE_MIN,
          maximum   = CUST_REFRESH_RATE_MAX_10NM,
          step      = 1,
          default   = CUST_REFRESH_RATE_DEFAULT, defaultstore = MyStandardDefault,
          default   = CUST_REFRESH_RATE_DEFAULT, defaultstore = MyManufactureDefault,
      endnumeric;
    endif;

    oneof varid  = SOCKET_MEMORY_CONFIGURATION.refreshMode,
        prompt   = STRING_TOKEN (STR_ALLOW_2X_REFRESH_PROMPT),
        help     = STRING_TOKEN (STR_ALLOW_2X_REFRESH_HELP),
        option text = STRING_TOKEN (STR_AUTO),    value = A2R_AUTO, flags = MANUFACTURING | DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN (STR_DISABLE), value = A2R_DISABLE, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (STR_ENABLE),  value = A2R_ENABLE, flags = RESET_REQUIRED;
    endoneof;

    numeric varid = SOCKET_MEMORY_CONFIGURATION.dllResetTestLoops,
        prompt    = STRING_TOKEN (STR_DLL_RESET_TEST_PROMPT),
        help      = STRING_TOKEN (STR_DLL_RESET_TEST_HELP),
        flags     = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum   = MIN_DLL_RESET_TEST_LOOPS,
        maximum   = MAX_DLL_RESET_TEST_LOOPS,
        step      = 0x0,                 // Stepping of 0 equates to a manual entering of a value,
                                                         // otherwise it will auto-increment with a left/right arrow
        default   = DLL_RESET_TEST_LOOPS_DEFAULT, defaultstore = MyStandardDefault,
        default   = DLL_RESET_TEST_LOOPS_DEFAULT, defaultstore = MyManufactureDefault,
    endnumeric;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.oppReadInWmm,
        prompt  = STRING_TOKEN(STR_OPP_READ_DURING_WMM_PROMPT),
        help    = STRING_TOKEN(STR_OPP_READ_DURING_WMM_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = OPP_RD_WMM_DISABLE, flags = OPP_RD_WMM_DIS_FLAGS;
        option text = STRING_TOKEN(STR_ENABLE),  value = OPP_RD_WMM_ENABLE, flags = OPP_RD_WMM_EN_FLAGS;
    endoneof;

    numeric varid = SOCKET_MEMORY_CONFIGURATION.normOppInterval,
        prompt    = STRING_TOKEN(STR_NORM_OPP_INTERVAL_PROMPT),
        help      = STRING_TOKEN(STR_NORM_OPP_INTERVAL_HELP),
        flags     = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum   = MIN_NORMAL_OPPERATION_INTERVAL,
        maximum   = MAX_NORMAL_OPPERATION_INTERVAL,
        step      = 0,       // Stepping of 0 equates to a manual entering of a value,
                             // otherwise it will auto-increment with a left/right arrow
        default   = NORMAL_OPPERATION_INTERVAL_DEFAULT, defaultstore = MyStandardDefault,
        default   = NORMAL_OPPERATION_INTERVAL_DEFAULT, defaultstore = MyManufactureDefault,
    endnumeric;


    // smbSpeed knob for no-spr
    suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SPRSP;
      oneof varid = SOCKET_MEMORY_CONFIGURATION.smbSpeed,
          prompt  = STRING_TOKEN(STR_SMB_SPEED_PROMPT),
          help    = STRING_TOKEN(STR_SMB_SPEED_HELP),
          option text = STRING_TOKEN(STR_SMB_100K), value = SMB_CLK_100K, flags = SMB_CLK_100K_FLAGS;
          option text = STRING_TOKEN(STR_SMB_400K), value = SMB_CLK_400K, flags = SMB_CLK_400K_FLAGS;
          option text = STRING_TOKEN(STR_SMB_700K), value = SMB_CLK_700K, flags = SMB_CLK_700K_FLAGS;
          option text = STRING_TOKEN(STR_SMB_1M),   value = SMB_CLK_1M,   flags = SMB_CLK_1M_FLAGS;
      endoneof;
    endif;

    // smbSpeed knob for spr
    suppressif NOT ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SPRSP;
      oneof varid = SOCKET_MEMORY_CONFIGURATION.smbSpeed,
          prompt  = STRING_TOKEN(STR_SMB_SPEED_PROMPT),
          help    = STRING_TOKEN(STR_SMB_SPEED_I3C_HELP),
          option text = STRING_TOKEN(STR_SMB_I2C_100K_I3C_4M), value = SMB_CLK_100K, flags = SMB_CLK_100K_FLAGS;
          option text = STRING_TOKEN(STR_SMB_I2C_400K_I3C_6M), value = SMB_CLK_400K, flags = SMB_CLK_400K_FLAGS;
          option text = STRING_TOKEN(STR_SMB_I2C_700K_I3C_8M), value = SMB_CLK_700K, flags = SMB_CLK_700K_FLAGS;
          option text = STRING_TOKEN(STR_SMB_I2C_1M_I3C_10M),  value = SMB_CLK_1M,   flags = SMB_CLK_1M_FLAGS;
      endoneof;
    endif;

    suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SPRSP;
      oneof varid = SOCKET_MEMORY_CONFIGURATION.SmbSpdAccess,
          prompt  = STRING_TOKEN(STR_SMB_SPD_ACCESS_PROMPT),
          help    = STRING_TOKEN(STR_SMB_SPD_ACCESS_HELP),
          option text = STRING_TOKEN(STR_LOCK_ACCESS), value = SMB_SPD_LOCK, flags = SMB_SPD_LOCK_FLAGS;
          option text = STRING_TOKEN(STR_UNLOCK_ACCESS), value = SMB_SPD_UNLOCK, flags = SMB_SPD_UNLOCK_FLAGS;
      endoneof;
    endif;

#ifndef DEBUG_CODE_BLOCK
    suppressif TRUE;
#endif //DEBUG_CODE_BLOCK
      oneof varid  = SOCKET_MEMORY_CONFIGURATION.SpdPrintEn,
          prompt   = STRING_TOKEN (STR_SPD_PRINT_PROMPT),
          help     = STRING_TOKEN (STR_SPD_PRINT_HELP),
          option text = STRING_TOKEN (STR_DISABLE), value = SPD_PRINT_DIS, flags = SPD_PRINT_DIS_FLAGS;
          option text = STRING_TOKEN (STR_ENABLE),  value = SPD_PRINT_EN, flags = SPD_PRINT_EN_FLAGS;
      endoneof;

      grayoutif ideqval SOCKET_MEMORY_CONFIGURATION.SpdPrintEn == SPD_PRINT_DIS;
          oneof varid = SOCKET_MEMORY_CONFIGURATION.SpdPrintLength,
              prompt  = STRING_TOKEN(STR_SPD_PRINT_LENGTH_PROMPT),
              help    = STRING_TOKEN(STR_SPD_PRINT_LENGTH_HELP),
              option text = STRING_TOKEN (STR_SPD_PRINT_AUTO), value = AUTO, flags = DEFAULT_MEMORY_SETUP;
              option text = STRING_TOKEN (STR_SPD_PRINT_256B), value = 256, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (STR_SPD_PRINT_512B), value = 512, flags = RESET_REQUIRED;
          endoneof;
      endif;
#ifndef DEBUG_CODE_BLOCK
    endif;
#endif //DEBUG_CODE_BLOCK

grayoutif ideqval SOCKET_MEMORY_CONFIGURATION.AepOnSystem == 1;
    oneof varid = SOCKET_MEMORY_CONFIGURATION.mrcRepeatTest,
        prompt  = STRING_TOKEN(STR_DDR_CYCLING_PROMPT),
        help    = STRING_TOKEN(STR_DDR_CYCLING_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = DDR_CYCLING_DISABLE, flags = DDR_CYCLING_DIS_FLAGS;
        option text = STRING_TOKEN(STR_ENABLE),  value = DDR_CYCLING_ENABLE, flags = DDR_CYCLING_EN_FLAGS;
    endoneof;
endif;

    numeric varid = SOCKET_MEMORY_CONFIGURATION.memFlows,
        prompt    = STRING_TOKEN(STR_MEM_FLOWS_PROMPT),
        help      = STRING_TOKEN(STR_MEM_FLOWS_HELP),
        flags     = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum   = MIN_MEM_FLOWS,
        maximum   = MAX_MEM_FLOWS,
        step      = 0,
        default   = MEM_FLOWS_DEFAULT, defaultstore = MyStandardDefault,
        default   = MEM_FLOWS_DEFAULT, defaultstore = MyManufactureDefault,
    endnumeric;

    numeric varid = SOCKET_MEMORY_CONFIGURATION.memFlowsExt,
        prompt    = STRING_TOKEN(STR_MEM_FLOWS_EXT_PROMPT),
        help      = STRING_TOKEN(STR_MEM_FLOWS_EXT_HELP),
        flags     = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum   = MIN_MEM_FLOWS_EXT,
        maximum   = MAX_MEM_FLOWS_EXT,
        step      = 0,
        default   = MEM_FLOWS_EXT_DEFAULT, defaultstore = MyStandardDefault,
        default   = MEM_FLOWS_EXT_DEFAULT, defaultstore = MyManufactureDefault,
    endnumeric;

    numeric varid = SOCKET_MEMORY_CONFIGURATION.memFlowsExt2,
        prompt    = STRING_TOKEN(STR_MEM_FLOWS_EXT2_PROMPT),
        help      = STRING_TOKEN(STR_MEM_FLOWS_EXT2_HELP),
        flags     = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum   = MIN_MEM_FLOWS_EXT2,
        maximum   = MAX_MEM_FLOWS_EXT2,
        step      = 0,
        default   = MEM_FLOWS_EXT2_DEFAULT, defaultstore = MyStandardDefault,
        default   = MEM_FLOWS_EXT2_DEFAULT, defaultstore = MyManufactureDefault,
    endnumeric;

    numeric varid = SOCKET_MEMORY_CONFIGURATION.memFlowsExt3,
        prompt    = STRING_TOKEN(STR_MEM_FLOWS_EXT3_PROMPT),
        help      = STRING_TOKEN(STR_MEM_FLOWS_EXT3_HELP),
        flags     = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum   = MIN_MEM_FLOWS_EXT3,
        maximum   = MAX_MEM_FLOWS_EXT3,
        step      = 0,
        default   = MEM_FLOWS_EXT3_DEFAULT, defaultstore = MyStandardDefault,
        default   = MEM_FLOWS_EXT3_DEFAULT, defaultstore = MyManufactureDefault,
    endnumeric;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.Blockgnt2cmd1cyc,
        prompt  = STRING_TOKEN (STR_BLOCK_GNT2CMD1CYC_PROMPT),
        help    = STRING_TOKEN (STR_BLOCK_GNT2CMD1CYC_HELP),
        option text = STRING_TOKEN (STR_PO_SAFE), value = PO_SAFE_VALUE, flags = BLOCK_GNT2CMD1CYC_PO_SAFE_VALUE_FLAGS;
        option text = STRING_TOKEN (STR_POR),     value = POR_VALUE, flags = BLOCK_GNT2CMD1CYC_POR_VALUE_FLAGS;
    endoneof;

    suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.DcpmmEnable == 0;
      oneof varid = SOCKET_MEMORY_CONFIGURATION.Disddrtopprd,
        prompt  = STRING_TOKEN (STR_DIS_DDRT_OPPRD_PROMPT),
        help    = STRING_TOKEN (STR_DIS_DDRT_OPPRD_HELP),
        option text = STRING_TOKEN (STR_PO_SAFE), value = PO_SAFE_VALUE, flags = DIS_NVMDIMM_OPPRDC_PO_SAFE_VALUE_FLAGS;
        option text = STRING_TOKEN (STR_POR),     value = POR_VALUE, flags = DIS_NVMDIMM_OPPRDC_POR_VALUE_FLAGS;
      endoneof;
    endif; // suppressif DcpmmEnable == 0

    //
    // Cmd setup hold percentageoffset
    //
    numeric varid = SOCKET_MEMORY_CONFIGURATION.cmdSetupPercentOffset,
        prompt    = STRING_TOKEN(STR_CMD_SETUP_PROMPT),
        help      = STRING_TOKEN(STR_CMD_SETUP_HELP),
        flags     = RESET_REQUIRED,
        minimum   = MIN_CMD_SETUP_PERCENT,
        maximum   = MAX_CMD_SETUP_PERCENT,
        step      = 0,
        default   = CMD_SETUP_PERCENT_DEFAULT, defaultstore = MyStandardDefault,
        default   = CMD_SETUP_PERCENT_DEFAULT, defaultstore = MyManufactureDefault,
    endnumeric;

    suppressif NOT (ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_ICXSP OR
                    ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_ICXD OR
                    ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SNR OR
                    ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SPRSP);
      oneof varid  = SOCKET_MEMORY_CONFIGURATION.PeriodicRcomp,
          prompt   = STRING_TOKEN (STR_PERIODIC_RCOMP_ENABLE_PROMPT),
          help     = STRING_TOKEN (STR_PERIODIC_RCOMP_ENABLE_HELP),
          option text = STRING_TOKEN (STR_DISABLE), value = PERIODIC_RCOMP_DISABLE, flags = PERIODIC_RCOMP_DIS_FLAGS;
          option text = STRING_TOKEN (STR_ENABLE),  value = PERIODIC_RCOMP_ENABLE,  flags = PERIODIC_RCOMP_EN_FLAGS;
          option text = STRING_TOKEN (STR_AUTO),    value = PERIODIC_RCOMP_AUTO,    flags = PERIODIC_RCOMP_AUTO_FLAGS;
      endoneof;

      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.PeriodicRcomp == 0x00;
        oneof varid  = SOCKET_MEMORY_CONFIGURATION.PeriodicRcompInterval,
          prompt   = STRING_TOKEN (STR_PERIODIC_RCOMP_INTERVAL_PROMPT),
          help     = STRING_TOKEN (STR_PERIODIC_RCOMP_INTERVAL_HELP),
          option text = STRING_TOKEN (STR_INTERVAL_10P24US), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_INTERVAL_20P48US), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_INTERVAL_40P96US), value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_INTERVAL_163P84US), value = 3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_INTERVAL_327P68US), value = 4, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_INTERVAL_655P36US), value = 5, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_INTERVAL_1310P72US), value = 6, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_INTERVAL_2621P44US), value = 7, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_INTERVAL_5242P88US), value = 8, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_INTERVAL_10P48576MS), value = 9, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_INTERVAL_20P97152MS), value = 10, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_INTERVAL_41P94304MS), value = 11, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_INTERVAL_83P88608MS), value = 12, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_INTERVAL_167P77216MS), value = 13, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_INTERVAL_335P54432MS), value = 14, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_INTERVAL_671P08864MS), value = 15, flags = DEFAULT_MEMORY_SETUP;
        endoneof;
      endif;
    endif;

    suppressif NOT ((NOT ideqval SOCKET_MEMORY_CONFIGURATION.PeriodicRcomp == PERIODIC_RCOMP_ENABLE) AND
                    (ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SPRSP));
      oneof varid  = SOCKET_MEMORY_CONFIGURATION.TrainingCompOptions,
          prompt   = STRING_TOKEN (STR_TRAINING_COMP_OPTIONS_PROMPT),
          help     = STRING_TOKEN (STR_TRAINING_COMP_OPTIONS_HELP),
          option text = STRING_TOKEN (STR_TRAINING_COMP_MMRC_INIT),        value = TRAINING_COMP_MMRC_INIT,        flags = TRAINING_COMP_MMRC_INIT_FLAGS;
          option text = STRING_TOKEN (STR_TRAINING_COMP_EVERY_JEDEC_INIT), value = TRAINING_COMP_EVERY_JEDEC_INIT, flags = TRAINING_COMP_EVERY_JEDEC_INIT_FLAGS;
          option text = STRING_TOKEN (STR_TRAINING_COMP_EVERY_TRAINING),   value = TRAINING_COMP_EVERY_TRAINING,   flags = TRAINING_COMP_EVERY_TRAINING_FLAGS;
      endoneof;
    endif;

    //
    // Jump to Memory Topology display form
    //
    goto VFR_FORMID_MEMTOPOLOGY_DISPLAY,
      prompt = STRING_TOKEN(STR_MEMTOPOLOGY_DISPLAY_FORM_TITLE),
      help   = STRING_TOKEN(STR_MEMTOPOLOGY_DISPLAY_FORM_HELP);

    // Page Policy
    goto VFR_FORMID_PAGE_POLICY_DISPLAY,
      prompt = STRING_TOKEN(STR_PAGE_POLICY_DISPLAY_FORM_TITLE),
      help   = STRING_TOKEN(STR_PAGE_POLICY_DISPLAY_FORM_HELP);

    // Memory Training
    goto VFR_FORMID_MEMORY_TRAINING_DISPLAY,
      prompt = STRING_TOKEN(STR_MEMORY_TRAINING_DISPLAY_FORM_TITLE),
      help   = STRING_TOKEN(STR_MEMORY_TRAINING_DISPLAY_FORM_HELP);

    // Memory Heath Check
    goto VFR_FORMID_MEMORY_HEALTH_CHECK,
      prompt = STRING_TOKEN(STR_MEMORY_HEALTH_CHECK_FORM_TITLE),
      help   = STRING_TOKEN(STR_MEMORY_HEALTH_CHECK_FORM_HELP);

    // XMP Profiles
    goto VFR_FORMID_XMP_DISPLAY,
      prompt = STRING_TOKEN(STR_XMP_FORM_SUBTITLE),
      help   = STRING_TOKEN(STR_XMP_PROFILE_HELP);

    // Memory Mapping
    goto VFR_FORMID_MEM_MAP,
      prompt = STRING_TOKEN(STR_MEM_MAP_SUBTITLE),
      help   = STRING_TOKEN(STR_MEM_MAP_HELP);

    // Memory RAS
    goto VFR_FORMID_MEMORY_RAS,
      prompt = STRING_TOKEN(STR_MEMORY_RAS_CONFIG_FORM_TITLE),
      help   = STRING_TOKEN(STR_MEMORY_RAS_CONFIG_FORM_HELP);

    // NGN memory
    suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.DcpmmEnable == 0;
      goto VFR_FORMID_MEMORY_NGN,
        prompt = STRING_TOKEN(STR_MEMORY_NGN_CONFIG_FORM_TITLE),
        help   = STRING_TOKEN(STR_MEMORY_NGN_CONFIG_FORM_HELP);
    endif; // suppressif DcpmmEnable == 0

#if FixedPcdGetBool (PcdBiosDfxKnobEnabled)
    goto VFR_FORMID_MEMORY_DFX,
      prompt = STRING_TOKEN(STR_MEMORY_DFX_CONFIG_FORM_TITLE),
      help   = STRING_TOKEN(STR_MEMORY_DFX_CONFIG_FORM_HELP);
#endif

     // BIOS_SSA_RMT
    goto VFR_FORMID_MEMORY_BIOS_SSA_CONFIG_MENU,
      prompt = STRING_TOKEN(STR_BIOS_SSA_CONFIG_MENU_SUBTITLE),
      help   = STRING_TOKEN(STR_BIOS_SSA_CONFIG_MENU_HELP);

    // CMI Init
    goto VFR_FORMID_CMI_INIT,
      prompt = STRING_TOKEN(STR_FORMID_CMI_INIT_TITLE),
      help   = STRING_TOKEN(STR_FORMID_CMI_INIT_TITLE_HELP);
  endform;

  form formid = VFR_FORMID_MEMTOPOLOGY_DISPLAY,
      title = STRING_TOKEN(STR_MEMTOPOLOGY_DISPLAY_FORM_TITLE);
      subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE); // So you know you are at the top of the list.

      label MEM_TOPOLOGY_START_LABEL;
      label MEM_TOPOLOGY_END_LABEL;

      subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE); // So you know you have reached the bottom of the list.
  endform;

  form formid = VFR_FORMID_PAGE_POLICY_DISPLAY,
    title   = STRING_TOKEN(STR_PAGE_POLICY_DISPLAY_FORM_TITLE);

    oneof varid = SOCKET_MEMORY_CONFIGURATION.PagePolicy,
        prompt  = STRING_TOKEN(STR_PAGE_POLICY_PROMPT),
        help    = STRING_TOKEN(STR_PAGE_POLICY_HELP),
        option text = STRING_TOKEN(STR_CLOSED_PAGE),   value = CLOSED_PAGE_EN, flags = CLOSED_PAGE_EN_FLAGS;
        option text = STRING_TOKEN(STR_ADAPTIVE_PAGE), value = OPEN_PAGE_ADAPTIVE, flags = OPEN_PAGE_ADAPTIVE_FLAGS;
    endoneof;

  endform;

  //
  // Memory Trainings
  //
  form formid = VFR_FORMID_MEMORY_TRAINING_DISPLAY,
    title   = STRING_TOKEN(STR_MEMORY_TRAINING_DISPLAY_FORM_TITLE);

    oneof varid = SOCKET_MEMORY_CONFIGURATION.CmdNormalization,
        prompt  = STRING_TOKEN (STR_COMMAND_NORMAL_PROMPT),
        help    = STRING_TOKEN (STR_COMMAND_NORMAL_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = CMD_NORMAL_DISABLE, flags = CMD_NORMAL_DIS_FLAGS;
        option text = STRING_TOKEN (STR_ENABLE),  value = CMD_NORMAL_ENABLE, flags = CMD_NORMAL_EN_FLAGS;
    endoneof;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.LrDimmBacksideVrefEn,
        prompt  = STRING_TOKEN (STR_LR_DIMM_BACKSIDE_VREF_PROMPT),
        help    = STRING_TOKEN (STR_LR_DIMM_BACKSIDE_VREF_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = LRDIMM_BACKSIDE_VREF_DISABLE, flags = LRDIMM_BACKSIDE_VREF_DIS_FLAGS;
        option text = STRING_TOKEN (STR_ENABLE),  value = LRDIMM_BACKSIDE_VREF_ENABLE, flags = LRDIMM_BACKSIDE_VREF_EN_FLAGS;
    endoneof;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.CmdVrefEnable,
        prompt  = STRING_TOKEN (STR_COMMAND_VREF_PROMPT),
        help    = STRING_TOKEN (STR_COMMAND_VREF_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = CMD_VREF_DISABLE, flags = CMD_VREF_DIS_FLAGS;
        option text = STRING_TOKEN (STR_ENABLE),  value = CMD_VREF_ENABLE, flags = CMD_VREF_EN_FLAGS;
    endoneof;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.McRonEn,
        prompt  = STRING_TOKEN (STR_MC_RON_EN_PROMPT),
        help    = STRING_TOKEN (STR_MC_RON_EN_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = MC_RON_DISABLE, flags = MC_RON_DIS_FLAGS;
        option text = STRING_TOKEN (STR_ENABLE),  value = MC_RON_ENABLE, flags = MC_RON_EN_FLAGS;
    endoneof;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.DramRonEn,
        prompt  = STRING_TOKEN (STR_DRAM_RON_EN_PROMPT),
        help    = STRING_TOKEN (STR_DRAM_RON_EN_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = DRAM_RON_DISABLE, flags = DRAM_RON_DIS_FLAGS;
        option text = STRING_TOKEN (STR_ENABLE),  value = DRAM_RON_ENABLE, flags = DRAM_RON_EN_FLAGS;
    endoneof;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.RxOdtEn,
        prompt  = STRING_TOKEN (STR_RX_ODT_EN_PROMPT),
        help    = STRING_TOKEN (STR_RX_ODT_EN_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = RX_ODT_DISABLE, flags = RX_ODT_DIS_FLAGS;
        option text = STRING_TOKEN (STR_ENABLE),  value = RX_ODT_ENABLE, flags = RX_ODT_EN_FLAGS;
    endoneof;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.RxCtleTrnEn,
        prompt  = STRING_TOKEN (STR_RX_CTLE_TRN_EN_PROMPT),
        help    = STRING_TOKEN (STR_RX_CTLE_TRN_EN_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = RX_CTLE_DISABLE, flags = RX_CTLE_TRN_DIS_FLAGS;
        option text = STRING_TOKEN (STR_ENABLE),  value = RX_CTLE_ENABLE, flags = RX_CTLE_TRN_EN_FLAGS;
    endoneof;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.LrDimmWrVrefEn,
        prompt  = STRING_TOKEN (STR_LRDIMM_WR_VREF_EN_PROMPT),
        help    = STRING_TOKEN (STR_LRDIMM_WR_VREF_EN_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = LRDIMM_WR_VREF_DISABLE, flags = LRDIMM_WR_VREF_DIS_FLAGS;
        option text = STRING_TOKEN (STR_ENABLE),  value = LRDIMM_WR_VREF_ENABLE, flags = LRDIMM_WR_VREF_EN_FLAGS;
    endoneof;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.LrDimmRdVrefEn,
        prompt  = STRING_TOKEN (STR_LRDIMM_RD_VREF_EN_PROMPT),
        help    = STRING_TOKEN (STR_LRDIMM_RD_VREF_EN_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = LRDIMM_RD_VREF_DISABLE, flags = LRDIMM_RD_VREF_DIS_FLAGS;
        option text = STRING_TOKEN (STR_ENABLE),  value = LRDIMM_RD_VREF_ENABLE, flags = LRDIMM_RD_VREF_EN_FLAGS;
    endoneof;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.LrDimmTxDqCentering,
        prompt  = STRING_TOKEN (STR_LRDIMM_TX_DQ_CENTERING_PROMPT),
        help    = STRING_TOKEN (STR_LRDIMM_TX_DQ_CENTERING_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = LRDIMM_TX_DQ_CENTERING_DISABLE, flags = LRDIMM_TX_DQ_CENTERING_DIS_FLAGS;
        option text = STRING_TOKEN (STR_ENABLE),  value = LRDIMM_TX_DQ_CENTERING_ENABLE, flags = LRDIMM_TX_DQ_CENTERING_EN_FLAGS;
    endoneof;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.LrDimmRxDqCentering,
        prompt  = STRING_TOKEN (STR_LRDIMM_RX_DQ_CENTERING_PROMPT),
        help    = STRING_TOKEN (STR_LRDIMM_RX_DQ_CENTERING_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = LRDIMM_RX_DQ_CENTERING_DISABLE, flags = LRDIMM_RX_DQ_CENTERING_DIS_FLAGS;
        option text = STRING_TOKEN (STR_ENABLE),  value = LRDIMM_RX_DQ_CENTERING_ENABLE, flags = LRDIMM_RX_DQ_CENTERING_EN_FLAGS;
    endoneof;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.txEqCalibration,
        prompt  = STRING_TOKEN (STR_TX_EQ_PROMPT),
        help    = STRING_TOKEN (STR_TX_EQ_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = TX_EQ_DISABLE, flags = TX_EQ_DIS_FLAGS;
        option text = STRING_TOKEN (STR_ENABLE),  value = TX_EQ_ENABLE, flags = TX_EQ_EN_FLAGS;
    endoneof;

    suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX;
      oneof varid = SOCKET_MEMORY_CONFIGURATION.CmdTxEqCalibration,
          prompt  = STRING_TOKEN (STR_CMD_TX_EQ_PROMPT),
          help    = STRING_TOKEN (STR_CMD_TX_EQ_HELP),
          option text = STRING_TOKEN (STR_DISABLE), value = CMD_TX_EQ_DISABLE, flags = CMD_TX_EQ_DIS_FLAGS;
          option text = STRING_TOKEN (STR_ENABLE),  value = CMD_TX_EQ_ENABLE, flags = CMD_TX_EQ_EN_FLAGS;
      endoneof;
    endif;

    suppressif NOT (ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_ICXSP OR
                    ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_ICXD OR
                    ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SNR);
      oneof varid = SOCKET_MEMORY_CONFIGURATION.RxDfe,
          prompt  = STRING_TOKEN (STR_RX_DFE_PROMPT),
          help    = STRING_TOKEN (STR_RX_DFE_HELP),
          option text = STRING_TOKEN (STR_DISABLE), value = RX_DFE_DISABLE, flags = RX_DFE_DIS_FLAGS;
          option text = STRING_TOKEN (STR_ENABLE),  value = RX_DFE_ENABLE, flags = RX_DFE_EN_FLAGS;
          option text = STRING_TOKEN (STR_AUTO),  value = RX_DFE_AUTO, flags = RX_DFE_AUTO_FLAGS;
      endoneof;
    endif;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.RxDfeDdr5Training,
      prompt  = STRING_TOKEN (STR_RX_DFE_DDR5_TRAINING_PROMPT),
      help    = STRING_TOKEN (STR_RX_DFE_DDR5_TRAINING_HELP),
      option text = STRING_TOKEN (STR_DISABLE), value = RX_DFE_DDR5_TRAINING_DISABLE, flags = RX_DFE_DDR5_TRAINING_DIS_FLAGS;
      option text = STRING_TOKEN (STR_ENABLE),  value = RX_DFE_DDR5_TRAINING_ENABLE,  flags = RX_DFE_DDR5_TRAINING_EN_FLAGS;
    endoneof;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.TxDfeDdr5Training,
      prompt  = STRING_TOKEN (STR_TX_DFE_DDR5_TRAINING_PROMPT),
      help    = STRING_TOKEN (STR_TX_DFE_DDR5_TRAINING_HELP),
      option text = STRING_TOKEN (STR_DISABLE), value = TX_DFE_DDR5_TRAINING_DISABLE, flags = TX_DFE_DDR5_TRAINING_DIS_FLAGS;
      option text = STRING_TOKEN (STR_ENABLE),  value = TX_DFE_DDR5_TRAINING_ENABLE,  flags = TX_DFE_DDR5_TRAINING_EN_FLAGS;
    endoneof;

    suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX;
      oneof varid = SOCKET_MEMORY_CONFIGURATION.TxRiseFallSlewRate,
          prompt  = STRING_TOKEN (STR_TX_RF_SLEW_RATE_PROMPT),
          help    = STRING_TOKEN (STR_TX_RF_SLEW_RATE_HELP),
          option text = STRING_TOKEN (STR_DISABLE), value = TX_RF_SLEW_RATE_DISABLE, flags = TX_RF_SLEW_RATE_DIS_FLAGS;
          option text = STRING_TOKEN (STR_ENABLE),  value = TX_RF_SLEW_RATE_ENABLE, flags = TX_RF_SLEW_RATE_EN_FLAGS;
          option text = STRING_TOKEN (STR_AUTO),  value = TX_RF_SLEW_RATE_AUTO, flags = TX_RF_SLEW_RATE_AUTO_FLAGS;
      endoneof;
    endif;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.iModeTraining,
        prompt  = STRING_TOKEN (STR_IMODE_PROMPT),
        help    = STRING_TOKEN (STR_IMODE_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = IMODE_DISABLE, flags = IMODE_DIS_FLAGS;
        option text = STRING_TOKEN (STR_ENABLE),  value = IMODE_ENABLE, flags = IMODE_EN_FLAGS;
    endoneof;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.TcoCompTraining,
        prompt  = STRING_TOKEN (STR_TCOCOMP_PROMPT),
        help    = STRING_TOKEN (STR_TCOCOMP_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = TCO_COMP_DISABLE, flags = TCO_COMP_DIS_FLAGS;
        option text = STRING_TOKEN (STR_ENABLE),  value = TCO_COMP_ENABLE, flags = TCO_COMP_EN_FLAGS;
    endoneof;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.RoundTripLatency,
        prompt  = STRING_TOKEN (STR_ROUND_TRIP_LATENCY_PROMPT),
        help    = STRING_TOKEN (STR_ROUND_TRIP_LATENCY_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = ROUND_TRIP_LATENCY_DISABLE, flags = ROUND_TRIP_LATENCY_DIS_FLAGS;
        option text = STRING_TOKEN (STR_ENABLE),  value = ROUND_TRIP_LATENCY_ENABLE, flags = ROUND_TRIP_LATENCY_EN_FLAGS;
    endoneof;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.DutyCycleTraining,
        prompt  = STRING_TOKEN (STR_DUTY_CYCLE_PROMPT),
        help    = STRING_TOKEN (STR_DUTY_CYCLE_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = DUTY_CYCLE_DISABLE, flags = DUTY_CYCLE_DIS_FLAGS;
        option text = STRING_TOKEN (STR_ENABLE),  value = DUTY_CYCLE_ENABLE, flags = DUTY_CYCLE_EN_FLAGS;
    endoneof;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.readVrefCenter,
        prompt  = STRING_TOKEN(STR_READ_VREF_CENTERING_PROMPT),
        help    = STRING_TOKEN(STR_READ_VREF_CENTERING_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = RX_VREF_DISABLE, flags = RX_VREF_DIS_FLAGS;
        option text = STRING_TOKEN (STR_ENABLE),  value = RX_VREF_ENABLE, flags = RX_VREF_EN_FLAGS;
    endoneof;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.eyeDiagram,
        prompt  = STRING_TOKEN(STR_EYE_DIAGRAM_PROMPT),
        help    = STRING_TOKEN(STR_EYE_DIAGRAM_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = EYE_DIAGRAM_DISABLE, flags = EYE_DIAGRAM_DIS_FLAGS;
        option text = STRING_TOKEN(STR_ENABLE),  value = EYE_DIAGRAM_ENABLE, flags = EYE_DIAGRAM_EN_FLAGS;
    endoneof;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.turnaroundOpt,
        prompt  = STRING_TOKEN(STR_TURNAROUND_PROMPT),
        help    = STRING_TOKEN(STR_TURNAROUND_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = TURNAROUND_DISABLE, flags = TURNAROUND_DIS_FLAGS;
        option text = STRING_TOKEN (STR_ENABLE),  value = TURNAROUND_ENABLE, flags = TURNAROUND_EN_FLAGS;
    endoneof;

    suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.DcpmmEnable == 0;
      oneof varid = SOCKET_MEMORY_CONFIGURATION.turnaroundOptDdrt,
        prompt  = STRING_TOKEN(STR_TURNAROUND_DDRT_PROMPT),
        help    = STRING_TOKEN(STR_TURNAROUND_DDRT_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = TURNAROUND_DDRT_DISABLE, flags = TURNAROUND_DDRT_DIS_FLAGS;
        option text = STRING_TOKEN (STR_ENABLE),  value = TURNAROUND_DDRT_ENABLE, flags = TURNAROUND_DDRT_EN_FLAGS;
      endoneof;
    endif; // suppressif DcpmmEnable == 0

    oneof varid = SOCKET_MEMORY_CONFIGURATION.oneRankTimingMode,
        prompt  = STRING_TOKEN(STR_ONERANKTIMINGMODE_PROMPT),
        help    = STRING_TOKEN(STR_ONERANKTIMINGMODE_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = ONE_RANK_TIMING_MODE_DISABLED, flags = ONE_RANK_TIMING_MODE_DIS_FLAGS;
        option text = STRING_TOKEN (STR_ENABLE),  value = ONE_RANK_TIMING_MODE_ENABLED, flags = ONE_RANK_TIMING_MODE_EN_FLAGS;
    endoneof;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.pda,
        prompt  = STRING_TOKEN(STR_PDA_PROMPT),
        help    = STRING_TOKEN(STR_PDA_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = PDA_DISABLE, flags = PDA_DIS_FLAGS;
        option text = STRING_TOKEN (STR_ENABLE),  value = PDA_ENABLE, flags = PDA_EN_FLAGS;
    endoneof;

    suppressif ideqval SOCKET_MEMORY_CONFIGURATION.pda == PDA_DISABLE;
      oneof varid = SOCKET_MEMORY_CONFIGURATION.wrVrefCenter,
          prompt  = STRING_TOKEN(STR_WRITE_VREF_CENTERING_PROMPT),
          help    = STRING_TOKEN(STR_WRITE_VREF_CENTERING_HELP),
          option text = STRING_TOKEN (STR_DISABLE), value = TX_VREF_DISABLE, flags = TX_VREF_DIS_FLAGS;
          option text = STRING_TOKEN (STR_ENABLE),  value = TX_VREF_ENABLE, flags = TX_VREF_EN_FLAGS;
      endoneof;
    endif;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.PxcTraining,
        prompt  = STRING_TOKEN (STR_PXC_PROMPT),
        help    = STRING_TOKEN (STR_PXC_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = PXC_DISABLE, flags = PDA_DIS_FLAGS;
        option text = STRING_TOKEN (STR_ENABLE),  value = PXC_ENABLE, flags = PDA_EN_FLAGS;
    endoneof;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.DdjcTraining,
        prompt  = STRING_TOKEN (STR_DDJC_PROMPT),
        help    = STRING_TOKEN (STR_DDJC_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = DDJC_DISABLE, flags = PDA_DIS_FLAGS;
        option text = STRING_TOKEN (STR_ENABLE),  value = DDJC_ENABLE, flags = PDA_EN_FLAGS;
    endoneof;

    suppressif NOT ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_ICXSP;
      oneof varid = SOCKET_MEMORY_CONFIGURATION.LrdimmDbDfeTraining,
          prompt  = STRING_TOKEN (STR_LRDIMM_DBDFE_PROMPT),
          help    = STRING_TOKEN (STR_LRDIMM_DBDFE_HELP),
          option text = STRING_TOKEN (STR_DISABLE),    value = DBDFE_DISABLE,    flags = DBDFE_DIS_FLAGS;
          option text = STRING_TOKEN (STR_PMEM_ONLY),  value = DBDFE_PMEM_ONLY,  flags = DBDFE_PMEM_EN_FLAGS;
          option text = STRING_TOKEN (STR_ALL_LRDIMM), value = DBDFE_ALL_LRDIMM, flags = DBDFE_LRDIMM_EN_FLAGS;
      endoneof;
    endif;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.DramDutyCycleAdjusterTrainingKnob,
        prompt  = STRING_TOKEN (STR_DRAM_DUTY_CYCLE_ADJUSTER_PROMPT),
        help    = STRING_TOKEN (STR_DRAM_DUTY_CYCLE_ADJUSTER_HELP),
        option text = STRING_TOKEN (STR_DISABLE),   value = DRAM_DUTY_CYCLE_ADJUSTER_DISABLE, flags = DRAM_DUTY_CYCLE_ADJUSTER_DIS_FLAGS;
        option text = STRING_TOKEN (STR_ENABLE),    value = DRAM_DUTY_CYCLE_ADJUSTER_ENABLE,  flags = DRAM_DUTY_CYCLE_ADJUSTER_EN_FLAGS;
    endoneof;

  endform; // Memory Trainings

    // Memory Thermal
    form formid = VFR_FORMID_MEM_THERMAL_ID,
    title   = STRING_TOKEN(STR_MEM_THERMAL_SUBTITLE);

#if defined (DDR5_SUPPORT) && !defined (SPR_HOST)
      oneof varid = SOCKET_MEMORY_CONFIGURATION.thermalthrottlingsupport,
        prompt    = STRING_TOKEN(STR_FAN_SPD_CTRL_THRTL_MODE),
        help      = STRING_TOKEN(STR_FAN_SPD_CTRL_THRTL_MODE_HELP),
        option text = STRING_TOKEN(STR_DISABLED_STRING),               value = THERMAL_THROT_DISABLE, flags = THERMAL_THROT_DIS_FLAGS | DEFAULT;
        option text = STRING_TOKEN(STR_OPEN_LOOP_THERMAL_THROTTLING),  value = OLTT_ENABLE, flags = OLTT_EN_FLAGS;
        option text = STRING_TOKEN(STR_CLOSE_LOOP_THERMAL_THROTTLING), value = CLTT_ENABLE, flags = CLTT_EN_FLAGS;
        option text = STRING_TOKEN(STR_CLOSE_LOOP_PECI_THERMAL_THROTTLING), value = CLTT_PECI_ENABLE, flags = CLTT_PECI_EN_FLAGS;
      endoneof;
#else
      oneof varid = SOCKET_MEMORY_CONFIGURATION.thermalthrottlingsupport,
        prompt    = STRING_TOKEN(STR_FAN_SPD_CTRL_THRTL_MODE),
        help      = STRING_TOKEN(STR_FAN_SPD_CTRL_THRTL_MODE_HELP),
        option text = STRING_TOKEN(STR_DISABLED_STRING),               value = THERMAL_THROT_DISABLE, flags = THERMAL_THROT_DIS_FLAGS;
        option text = STRING_TOKEN(STR_OPEN_LOOP_THERMAL_THROTTLING),  value = OLTT_ENABLE, flags = OLTT_EN_FLAGS;
        option text = STRING_TOKEN(STR_CLOSE_LOOP_THERMAL_THROTTLING), value = CLTT_ENABLE, flags = CLTT_EN_FLAGS;
        option text = STRING_TOKEN(STR_CLOSE_LOOP_PECI_THERMAL_THROTTLING), value = CLTT_PECI_ENABLE, flags = CLTT_PECI_EN_FLAGS;
      endoneof;
#endif

      suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SPRSP;
        //Memtrip to ThermTrip OffPkg
        suppressif ideqval SOCKET_MEMORY_CONFIGURATION.thermalthrottlingsupport == THERMAL_THROT_DISABLE;
          oneof varid = SOCKET_MEMORY_CONFIGURATION.OffPkgMemToThermTrip,
            prompt    = STRING_TOKEN(STR_OFFPKGMEMTOTHERMTRIP_CONFIG),
            help      = STRING_TOKEN(STR_OFFPKGMEMTOTHERMTRIP_CONFIG_HELP),
            option text = STRING_TOKEN (STR_DISABLE), value = OFFPKG_MEM_TO_THERMTRIP_DISABLE, flags = OFFPKG_MEM_TO_THERMTRIP_DIS_FLAGS;
            option text = STRING_TOKEN (STR_ENABLE),  value = OFFPKG_MEM_TO_THERMTRIP_ENABLE, flags = OFFPKG_MEM_TO_THERMTRIP_EN_FLAGS;
          endoneof;
        endif;

        //MemTrip to MemTrip OffPkg
        suppressif ideqval SOCKET_MEMORY_CONFIGURATION.thermalthrottlingsupport == THERMAL_THROT_DISABLE OR
                   ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
                   ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
                   ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX;
          oneof varid = SOCKET_MEMORY_CONFIGURATION.OffPkgMemToMemTrip,
            prompt    = STRING_TOKEN(STR_OFFPKGMEMTOMEMTRIP_CONFIG),
            help      = STRING_TOKEN(STR_OFFPKGMEMTOMEMTRIP_CONFIG_HELP),
            option text = STRING_TOKEN (STR_DISABLE), value = OFFPKG_MEM_TO_MEMTRIP_DISABLE, flags = OFFPKG_MEM_TO_MEMTRIP_DIS_FLAGS;
            option text = STRING_TOKEN (STR_ENABLE),  value = OFFPKG_MEM_TO_MEMTRIP_ENABLE, flags = OFFPKG_MEM_TO_MEMTRIP_EN_FLAGS;
          endoneof;
        endif;
      endif; // if CpuType != CPU_SPRSP

      //Memtrip reporting
      suppressif NOT ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SPRSP;
        suppressif ideqval SOCKET_MEMORY_CONFIGURATION.thermalthrottlingsupport == THERMAL_THROT_DISABLE;
          oneof varid = SOCKET_MEMORY_CONFIGURATION.MemTripReporting,
            prompt    = STRING_TOKEN(STR_MEMTRIPREPORTING_CONFIG),
            help      = STRING_TOKEN(STR_MEMTRIPREPORTING_CONFIG_HELP),
            option text = STRING_TOKEN (STR_DISABLE), value = MEMTRIP_REPORTING_DISABLE, flags = MEMTRIP_REPORTING_DIS_FLAGS;
            option text = STRING_TOKEN (STR_ENABLE),  value = MEMTRIP_REPORTING_ENABLE, flags = MEMTRIP_REPORTING_EN_FLAGS;
          endoneof;
        endif;
      endif; // if CpuType != CPU_SPR

    endform;

    form formid = VFR_FORMID_CMI_INIT,
    title = STRING_TOKEN(STR_FORMID_CMI_INIT_TITLE);

      //CMI Initialize option
      oneof varid     = SOCKET_MEMORY_CONFIGURATION.CmiInitOption,
          prompt      = STRING_TOKEN(STR_CMI_INIT_OPTION),
          help        = STRING_TOKEN(STR_CMI_INIT_OPTION_HELP),
          option text = STRING_TOKEN(STR_AUTO),   value = CMI_INIT_AUTO, flags = CMI_INIT_AUTO_FLAGS;
          option text = STRING_TOKEN(STR_RESET_VALUE), value = CMI_INIT_RESET, flags = CMI_INIT_RESET_FLAGS;
      endoneof;
    endform;

    form formid = VFR_FORMID_MEM_PM_CFG_ID,
    title   = STRING_TOKEN(STR_MEMORY_PM_CONFIG_FORM_TITLE);
    subtitle text = STRING_TOKEN(STR_MEMORY_PM_CONFIG_FORM_TITLE);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

    //DRAM RAPL Config
    suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SNR OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_TNR;
      goto DRAM_RAPL_FORMID,
      prompt = STRING_TOKEN(STR_DRAM_RAPL_FORM),
      help   = STRING_TOKEN(STR_DRAM_RAPL_FORM_HELP);
    endif;  // SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SNR || CPU_TNR

    //Memory Thermal
    goto VFR_FORMID_MEM_THERMAL_ID,
    prompt = STRING_TOKEN(STR_MEM_THERMAL_SUBTITLE),
    help   = STRING_TOKEN(STR_MEM_THERMAL_SUBTITLE_HELP);

    suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.TempRefreshOption,
            prompt      = STRING_TOKEN(STR_TEMP_REFRESH_OPTION_PROMPT),
            help        = STRING_TOKEN(STR_TEMP_REFRESH_OPTION_HELP),
            option text = STRING_TOKEN(STR_AUTO), value = TEMP_REFRESH_OPTION_AUTO, flags = TEMP_REFRESH_OPTION_AUTO_FLAGS;
            option text = STRING_TOKEN(STR_MANUAL), value = TEMP_REFRESH_OPTION_MANUAL, flags = TEMP_REFRESH_OPTION_MANUAL_FLAGS;
        endoneof;

        suppressif ideqval SOCKET_MEMORY_CONFIGURATION.TempRefreshOption == TEMP_REFRESH_OPTION_AUTO;
            numeric varid = SOCKET_MEMORY_CONFIGURATION.HalfxRefreshValue,
                prompt    = STRING_TOKEN (STR_SET_HALFX_VALUE_PROMPT),
                help      = STRING_TOKEN (STR_SET_HALFX_VALUE_HELP),
                flags     = RESET_REQUIRED,
                minimum   = HALFX_TEMP_REFRESH_MIN,
                maximum   = HALFX_TEMP_REFRESH_MAX,
                step      = 0,        // Stepping of 0 equates to a manual entering of a value,
                                      // otherwise it will auto-increment with a left/right arrow
                default   = HALFX_TEMP_REFRESH_DEFAULT, defaultstore = MyStandardDefault,
                default   = HALFX_TEMP_REFRESH_DEFAULT, defaultstore = MyManufactureDefault,
            endnumeric;

            numeric varid = SOCKET_MEMORY_CONFIGURATION.TwoxRefreshValue,
                prompt    = STRING_TOKEN (STR_SET_TWOX_VALUE_PROMPT),
                help      = STRING_TOKEN (STR_SET_TWOX_VALUE_HELP),
                flags     = RESET_REQUIRED,
                minimum   = TWOX_TEMP_REFRESH_MIN,
                maximum   = TWOX_TEMP_REFRESH_MAX,
                step      = 0,        // Stepping of 0 equates to a manual entering of a value,
                                      // otherwise it will auto-increment with a left/right arrow
                default   = TWOX_TEMP_REFRESH_DEFAULT, defaultstore = MyStandardDefault,
                default   = TWOX_TEMP_REFRESH_DEFAULT, defaultstore = MyManufactureDefault,
            endnumeric;

           numeric varid = SOCKET_MEMORY_CONFIGURATION.FourxRefreshValue,
               prompt    = STRING_TOKEN (STR_SET_FOURX_VALUE_PROMPT),
                help      = STRING_TOKEN (STR_SET_FOURX_VALUE_HELP),
                flags     = RESET_REQUIRED,
                minimum   = FOURX_TEMP_REFRESH_MIN,
                maximum   = FOURX_TEMP_REFRESH_MAX,
                step      = 0,        // Stepping of 0 equates to a manual entering of a value,
                                      // otherwise it will auto-increment with a left/right arrow
                default   = FOURX_TEMP_REFRESH_DEFAULT, defaultstore = MyStandardDefault,
                default   = FOURX_TEMP_REFRESH_DEFAULT, defaultstore = MyManufactureDefault,
            endnumeric;
      endif;  // SOCKET_COMMONRC_CONFIGURATION.TempRefreshOption
    endif;  // SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX || CPU_CLX || CPU_CPX

    suppressif NOT (ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
                    ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
                    ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX);
        oneof varid = SOCKET_MEMORY_CONFIGURATION.memhotSupport,
            prompt      = STRING_TOKEN(STR_MEMHOT_THROTTLING_MODE_PROMPT),
            help        = STRING_TOKEN(STR_MEMHOT_THROTTLING_MODE_PROMPT_HELP),
            option text = STRING_TOKEN(STR_DISABLED), value = MEMHOT_DISABLE, flags = MEMHOT_DIS_FLAGS;
            option text = STRING_TOKEN(STR_OUTPUT_ONLY), value = MEMHOT_OUTPUT_ONLY, flags = MEMHOT_OUTPUT_ONLY_FLAGS;
            option text = STRING_TOKEN(STR_INPUT_ONLY), value = MEMHOT_INPUT_ONLY, flags = MEMHOT_INPUT_ONLY_FLAGS;
            option text = STRING_TOKEN(STR_INPUT_OUTPUT_ENABLED), value = MEMHOT_INPUT_OUTPUT, flags = MEMHOT_INPUT_OUTPUT_FLAGS;
        endoneof;
    endif;

    suppressif NOT ideqval SOCKET_MEMORY_CONFIGURATION.memhotSupport == MEMHOT_OUTPUT_ONLY OR
               NOT ideqval SOCKET_MEMORY_CONFIGURATION.memhotSupport == MEMHOT_INPUT_OUTPUT OR
               NOT (ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX);
      oneof varid = SOCKET_MEMORY_CONFIGURATION.MemhotOutputOnlyOpt,
          prompt      = STRING_TOKEN(STR_MEMHOT_OUTPUT_THROTTLING_MODE_PROMPT),
          help        = STRING_TOKEN(STR_MEMHOT_OUTPUT_THROTTLING_MODE_PROMPT_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = MEMHOT_OUTPUT_ONLY_DIS, flags = MEMHOT_OUTPUT_ONLY_DIS_FLAGS;
          option text = STRING_TOKEN(STR_OUTPUT_H), value = MEMHOT_OUTPUT_ONLY_HIGH, flags = MEMHOT_OUTPUT_ONLY_HIGH_FLAGS;
          option text = STRING_TOKEN(STR_OUTPUT_HM), value = MEMHOT_OUTPUT_ONLY_HIGH_MED, flags = MEMHOT_OUTPUT_ONLY_HIGH_MED_FLAGS;
          option text = STRING_TOKEN(STR_OUTPUT_HML), value = MEMHOT_OUTPUT_ONLY_HIGH_MED_LOW, flags = MEMHOT_OUTPUT_ONLY_HIGH_MED_LOW_FLAGS;
      endoneof;
    endif;

    // MemHot knob for 10nm
    suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.memhotSupport,
            prompt      = STRING_TOKEN(STR_MEMHOT_THROTTLING_MODE_PROMPT),
            help        = STRING_TOKEN(STR_MEMHOT_THROTTLING_MODE_PROMPT_HELP),
            option text = STRING_TOKEN(STR_DISABLED), value = MEMHOT_DISABLE, flags = MEMHOT_DIS_FLAGS;
            option text = STRING_TOKEN(STR_ENABLED), value = MEMHOT_ENABLE, flags = MEMHOT_EN_FLAGS;
        endoneof;
    endif;

    suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX OR
               ideqval SOCKET_MEMORY_CONFIGURATION.memhotSupport == MEMHOT_DISABLE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.MemHotIn,
            prompt      = STRING_TOKEN(STR_MEMHOT_IN_SUPPORT),
            help        = STRING_TOKEN(STR_MEMHOT_IN_SUPPORT_HELP),
            option text = STRING_TOKEN(STR_DISABLED), value = MEMHOT_IN_DISABLE, flags = MEMHOT_IN_DIS_FLAGS;
            option text = STRING_TOKEN(STR_ENABLED), value = MEMHOT_IN_ENABLE, flags = MEMHOT_IN_EN_FLAGS;
        endoneof;
    endif;

    suppressif (ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
                ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
                ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX) OR
                ideqval SOCKET_MEMORY_CONFIGURATION.memhotSupport == MEMHOT_DISABLE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.MemHotOut,
            prompt      = STRING_TOKEN(STR_MEMHOT_OUT_SUPPORT),
            help        = STRING_TOKEN(STR_MEMHOT_OUT_SUPPORT_HELP),
            option text = STRING_TOKEN(STR_DISABLED), value = MEMHOT_OUT_DISABLE, flags = MEMHOT_OUT_DIS_FLAGS;
            option text = STRING_TOKEN(STR_ENABLED), value = MEMHOT_OUT_ENABLE, flags = MEMHOT_OUT_EN_FLAGS;
        endoneof;
    endif;

    suppressif ideqval SOCKET_MEMORY_CONFIGURATION.MemHotOut == MEMHOT_OUT_DISABLE OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX OR
               ideqval SOCKET_MEMORY_CONFIGURATION.memhotSupport == MEMHOT_DISABLE;
      oneof varid = SOCKET_MEMORY_CONFIGURATION.MemhotOutputOnlyOpt,
          prompt      = STRING_TOKEN(STR_MEMHOT_OUTPUT_THROTTLING_MODE_PROMPT),
          help        = STRING_TOKEN(STR_MEMHOT_OUTPUT_THROTTLING_MODE_PROMPT_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = MEMHOT_OUTPUT_ONLY_DIS, flags = MEMHOT_OUTPUT_ONLY_DIS_FLAGS;
          option text = STRING_TOKEN(STR_OUTPUT_H), value = MEMHOT_OUTPUT_ONLY_HIGH, flags = MEMHOT_OUTPUT_ONLY_HIGH_FLAGS;
          option text = STRING_TOKEN(STR_OUTPUT_HM), value = MEMHOT_OUTPUT_ONLY_HIGH_MED, flags = MEMHOT_OUTPUT_ONLY_HIGH_MED_FLAGS;
          option text = STRING_TOKEN(STR_OUTPUT_HML), value = MEMHOT_OUTPUT_ONLY_HIGH_MED_LOW, flags = MEMHOT_OUTPUT_ONLY_HIGH_MED_LOW_FLAGS;
      endoneof;
    endif;

    // Memory Power Savings Advanced Options
    goto VFR_FORMID_MEM_PWR_SAVE_ADV_ID,
    prompt = STRING_TOKEN(STR_MEM_PWR_SAVE_ADV_SUBTITLE),
    help   = STRING_TOKEN(STR_MEM_PWR_SAVE_ADV_SUBTITLE_HELP);

    endform;

    form formid = VFR_FORMID_MEM_PWR_SAVE_ADV_ID,
    title = STRING_TOKEN(STR_MEM_PWR_SAVE_ADV_SUBTITLE);

    grayoutif (ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX) AND
              ideqval SOCKET_MEMORY_CONFIGURATION.AepOnSystem == 1;
      //CKE MODE AUTO OR OVERRIDE
      oneof varid     = SOCKET_MEMORY_CONFIGURATION.CkeProgramming,
          prompt      = STRING_TOKEN(STR_CKE_PROMPT),
          help        = STRING_TOKEN(STR_CKE_HELP),
          option text = STRING_TOKEN(STR_AUTO),   value = CKE_AUTO, flags = CKE_AUTO_FLAGS;
          option text = STRING_TOKEN(STR_MANUAL), value = CKE_MANUAL, flags = CKE_MANUAL_FLAGS;
      endoneof;
    endif;

      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.CkeProgramming == CKE_AUTO;
        goto VFR_FORMID_CKE_DISPLAY,
           prompt = STRING_TOKEN(STR_CKE_DISPLAY_FORM_TITLE),
           help   = STRING_TOKEN(STR_CKE_DISPLAY_FORM_HELP);
      endif;

      //SREF AUTO OR OVERRIDE
      oneof varid     = SOCKET_MEMORY_CONFIGURATION.SrefProgramming,
          prompt      = STRING_TOKEN(STR_SREF_PROMPT),
          help        = STRING_TOKEN(STR_SREF_HELP),
          option text = STRING_TOKEN(STR_AUTO),   value = SREF_PROG_AUTO, flags = SREF_PROG_AUTO_FLAGS;
          option text = STRING_TOKEN(STR_MANUAL), value = SREF_PROG_MANUAL, flags = SREF_PROG_MANUAL_FLAGS;
      endoneof;

      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.SrefProgramming == SREF_PROG_AUTO;
        goto VFR_FORMID_SREF_DISPLAY,
           prompt = STRING_TOKEN(STR_SREF_DISPLAY_FORM_TITLE),
           help   = STRING_TOKEN(STR_SREF_DISPLAY_FORM_HELP);
      endif;

      //SREF STATIC AUTO, ENABLE, DISABLE
      oneof varid     = SOCKET_MEMORY_CONFIGURATION.PkgcSrefEn,
          prompt      = STRING_TOKEN(STR_SREF_STATIC_PROMPT),
          help        = STRING_TOKEN(STR_SREF_STATIC_HELP),
          option text = STRING_TOKEN(STR_DISABLE), value = PKGC_SREF_DISABLE, flags = PKGC_SREF_DIS_FLAGS;
          option text = STRING_TOKEN(STR_ENABLE),  value = PKGC_SREF_ENABLE, flags = PKGC_SREF_EN_FLAGS;
      endoneof;

      suppressif NOT ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SPRSP;
        oneof varid     = SOCKET_MEMORY_CONFIGURATION.DataDllOff,
          prompt      = STRING_TOKEN(STR_DATA_DLL_OFF_PROMPT),
          help        = STRING_TOKEN(STR_DATA_DLL_OFF_HELP),
          option text = STRING_TOKEN(STR_DISABLE), value = DATA_DLL_OFF_DISABLE, flags = DATA_DLL_OFF_DIS_FLAGS;
          option text = STRING_TOKEN(STR_ENABLE),  value = DATA_DLL_OFF_ENABLE, flags = DATA_DLL_OFF_EN_FLAGS;
        endoneof;
      endif;

    endform;

    form formid = VFR_FORMID_CKE_DISPLAY,
    title = STRING_TOKEN(STR_CKE_DISPLAY_FORM_TITLE);

      grayoutif (ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
                ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
                ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX) AND
                ideqval SOCKET_MEMORY_CONFIGURATION.AepOnSystem == 1;  // Redundancy with grayoutif around CkeProgramming.
        numeric varid = SOCKET_MEMORY_CONFIGURATION.CkeIdleTimer,
            prompt    = STRING_TOKEN (STR_CKE_IDLE_TIMER_PROMPT),
            help      = STRING_TOKEN (STR_CKE_IDLE_TIMER_HELP),
            flags     = RESET_REQUIRED,
            minimum   = MIN_CKE_IDLE_TIMER,
            maximum   = MAX_CKE_IDLE_TIMER,
            step      = 0,        // Stepping of 0 equates to a manual entering of a value,
                                  // otherwise it will auto-increment with a left/right arrow
            default   = CKE_IDLE_TIMER_DEFAULT, defaultstore = MyStandardDefault,
            default   = CKE_IDLE_TIMER_DEFAULT, defaultstore = MyManufactureDefault,
        endnumeric;

        oneof varid     = SOCKET_MEMORY_CONFIGURATION.ApdEn,
            prompt      = STRING_TOKEN(STR_APD_PROMPT),
            help        = STRING_TOKEN(STR_APD_HELP),
            option text = STRING_TOKEN(STR_DISABLE), value = APD_DISABLE, flags = APD_DIS_FLAGS;
            option text = STRING_TOKEN(STR_ENABLE),  value = APD_ENABLE, flags = APD_EN_FLAGS;
        endoneof;

        suppressif ideqval SOCKET_MEMORY_CONFIGURATION.ApdEn == APD_ENABLE;
          oneof varid     = SOCKET_MEMORY_CONFIGURATION.PpdEn,
              prompt      = STRING_TOKEN(STR_PPD_PROMPT),
              help        = STRING_TOKEN(STR_PPD_HELP),
              option text = STRING_TOKEN(STR_DISABLE), value = PPD_DISABLE, flags = PPD_DIS_FLAGS;
              option text = STRING_TOKEN(STR_ENABLE),  value = PPD_ENABLE, flags = PPD_EN_FLAGS;
          endoneof;
        endif;

        suppressif ideqval SOCKET_MEMORY_CONFIGURATION.AepOnSystem == 0;
          oneof varid     = SOCKET_MEMORY_CONFIGURATION.DdrtCkeEn,
              prompt      = STRING_TOKEN(STR_DDRTCKE_PROMPT),
              help        = STRING_TOKEN(STR_DDRTCKE_HELP),
              option text = STRING_TOKEN(STR_DISABLE), value = DDRT_CKE_DISABLE, flags = DDRT_CKE_DIS_FLAGS;
              option text = STRING_TOKEN(STR_ENABLE),  value = DDRT_CKE_ENABLE, flags = DDRT_CKE_EN_FLAGS;
          endoneof;
        endif;
      endif;  // grayoutif for SKX family with AEP/DDRT
    endform;

    form formid = VFR_FORMID_SREF_DISPLAY,
    title = STRING_TOKEN(STR_SREF_DISPLAY_FORM_TITLE);

      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.OppSrefVisible == 0;
        grayoutif (ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
                  ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
                  ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX) AND
                  ideqval SOCKET_MEMORY_CONFIGURATION.AepOnSystem == 1;
          oneof varid     = SOCKET_MEMORY_CONFIGURATION.OppSrefEn,
              prompt      = STRING_TOKEN(STR_OPP_SR_PROMPT),
              help        = STRING_TOKEN(STR_OPP_SR_HELP),
              option text = STRING_TOKEN(STR_DISABLE), value = OPP_SREF_DISABLE, flags = OPP_SREF_DIS_FLAGS;
              option text = STRING_TOKEN(STR_ENABLE),  value = OPP_SREF_ENABLE, flags = OPP_SREF_EN_FLAGS;
          endoneof;
        endif;
      endif;

      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.OppSrefEn == OPP_SREF_DISABLE OR
                 ideqval SOCKET_MEMORY_CONFIGURATION.AepOnSystem == 0;
        oneof varid     = SOCKET_MEMORY_CONFIGURATION.DdrtSrefEn,
            prompt      = STRING_TOKEN(STR_DDRT_SREF_PROMPT),
            help        = STRING_TOKEN(STR_DDRT_SREF_HELP),
            option text = STRING_TOKEN(STR_DISABLE), value = DDRT_SREF_DISABLE, flags = DDRT_SREF_DIS_FLAGS;
            option text = STRING_TOKEN(STR_ENABLE),  value = DDRT_SREF_ENABLE, flags = DDRT_SREF_EN_FLAGS;
        endoneof;
      endif;

      oneof varid     = SOCKET_MEMORY_CONFIGURATION.MdllOffEn,
          prompt      = STRING_TOKEN(MDLL_OFF_PROMPT),
          help        = STRING_TOKEN(MDLL_OFF_HELP),
          option text = STRING_TOKEN(STR_DISABLE), value = MDLL_OFF_DISABLE, flags = MDLL_OFF_DIS_FLAGS;
          option text = STRING_TOKEN(STR_ENABLE),  value = MDLL_OFF_ENABLE, flags = MDLL_OFF_EN_FLAGS;
      endoneof;

      oneof varid = SOCKET_MEMORY_CONFIGURATION.CkMode,
          prompt      = STRING_TOKEN(STR_CK_SELF_REFRESH_PROMPT),
          help        = STRING_TOKEN(STR_CK_SELF_REFRESH_PROMPT_HELP),
          option text = STRING_TOKEN(STR_DRIVEN),   value = CK_SELF_REF_DRIVEN, flags = CK_SELF_REF_DRIVEN_FLAGS;
          option text = STRING_TOKEN(STR_PULL_LOW), value = CK_SELF_REF_LOW, flags = CK_SELF_REF_LOW_FLAGS;
      endoneof;
    endform;

    form formid = VFR_FORMID_XMP_DISPLAY,
    title   = STRING_TOKEN(STR_XMP_FORM_SUBTITLE);

    //
    //  Explicit definition of XMPProfilesSup configured by BIOS at runtime.
    //  If not explicitly declared vfr compiler will set RESET_REQUIRED flag,
    //  potentially forcing reboot any time defaults are loaded.
    //
    suppressif TRUE;
      numeric varid = SOCKET_MEMORY_CONFIGURATION.XMPProfilesSup,
        questionid = 0xDFF8,
        prompt  = STRING_TOKEN(STR_XMP_PROFILES_SUPPORTED_PROMPT),
        help    = STRING_TOKEN(STR_XMP_PROFILES_SUPPORTED_HELP),
        flags     = INTERACTIVE,
        minimum   = 0,
        maximum   = 255,
        step      = 1,
        default = 0, defaultstore = MyStandardDefault,
        default = 0, defaultstore = MyManufactureDefault,
      endnumeric;
    endif;

    suppressif NOT ideqval SOCKET_MEMORY_CONFIGURATION.XMPProfilesSup == 0;
      oneof varid     = SOCKET_MEMORY_CONFIGURATION.XMPMode,
          prompt      = STRING_TOKEN (STR_XMP_PROFILE_PROMPT),
          help        = STRING_TOKEN (STR_XMP_PROFILE_HELP),
          option text = STRING_TOKEN (STR_DISABLE), value = XMP_AUTO,   flags = XMP_AUTO_FLAGS;
          option text = STRING_TOKEN (STR_MANUAL),  value = XMP_MANUAL, flags = XMP_MANUAL_FLAGS;
      endoneof;
    endif;

    suppressif  NOT ideqval SOCKET_MEMORY_CONFIGURATION.XMPProfilesSup == 1;
      oneof varid     = SOCKET_MEMORY_CONFIGURATION.XMPMode,
          questionid  = KEY_XMP_PROFILE,
          prompt      = STRING_TOKEN (STR_XMP_PROFILE_PROMPT),
          help        = STRING_TOKEN (STR_XMP_PROFILE_HELP),
          option text = STRING_TOKEN (STR_DISABLE),      value = XMP_AUTO, flags = XMP_AUTO_FLAGS;
          option text = STRING_TOKEN (STR_MANUAL),       value = XMP_MANUAL, flags = XMP_MANUAL_FLAGS;
          option text = STRING_TOKEN (STR_XMP_PROFILE1), value = XMP_PROFILE_1, flags = XMP_PROFILE_1_FLAGS;
      endoneof;
    endif;

    suppressif  NOT ideqval SOCKET_MEMORY_CONFIGURATION.XMPProfilesSup == 3;
      oneof varid     = SOCKET_MEMORY_CONFIGURATION.XMPMode,
          questionid  = KEY_XMP_PROFILE1,
          prompt      = STRING_TOKEN (STR_XMP_PROFILE_PROMPT),
          help        = STRING_TOKEN (STR_XMP_PROFILE_HELP),
          option text = STRING_TOKEN (STR_DISABLE),      value = XMP_AUTO, flags = XMP_AUTO_FLAGS;
          option text = STRING_TOKEN (STR_MANUAL),       value = XMP_MANUAL, flags = XMP_MANUAL_FLAGS;
          option text = STRING_TOKEN (STR_XMP_PROFILE1), value = XMP_PROFILE_1, flags = XMP_PROFILE_1_FLAGS;
          option text = STRING_TOKEN (STR_XMP_PROFILE2), value = XMP_PROFILE_2, flags = XMP_PROFILE_2_FLAGS;
      endoneof;
    endif;

    suppressif   ideqval SOCKET_MEMORY_CONFIGURATION.XMPMode == 0;
      numeric varid = SOCKET_MEMORY_CONFIGURATION.Vdd,
          prompt    = STRING_TOKEN (STR_VDD_PROMPT),
          help      = STRING_TOKEN (STR_VDD_HELP),
          flags     = RESET_REQUIRED,
          minimum   = MIN_VDD,
          maximum   = MAX_VDD,
          step      = 5,
          default   = VDD_DEFAULT, defaultstore = MyStandardDefault,
          default   = VDD_DEFAULT, defaultstore = MyManufactureDefault,
      endnumeric;

      oneof varid     = SOCKET_MEMORY_CONFIGURATION.commandTiming,
          prompt      = STRING_TOKEN(STR_COMMAND_TIMING_PROMPT),
          help        = STRING_TOKEN(STR_COMMAND_TIMING_HELP),
          option text = STRING_TOKEN(STR_AUTO), value = CMD_TIMING_AUTO, flags = CMD_TIMING_AUTO_FLAGS;
          option text = STRING_TOKEN(STR_1N),   value = CMD_TIMING_1N, flags = CMD_TIMING_1N_FLAGS;
          option text = STRING_TOKEN(STR_2N),   value = CMD_TIMING_2N, flags = CMD_TIMING_2N_FLAGS;
          option text = STRING_TOKEN(STR_3N),   value = CMD_TIMING_3N, flags = CMD_TIMING_3N_FLAGS;
      endoneof;

      numeric varid = SOCKET_MEMORY_CONFIGURATION.tREFI,
          prompt    = STRING_TOKEN(STR_REFRESH_RATE),
          help      = STRING_TOKEN(STR_REFRESH_RATE_HELP),
          flags     = RESET_REQUIRED,
          minimum   = MIN_REFRESH_RATE,
          maximum   = MAX_REFRESH_RATE,
          step      = 0,       // Stepping of 0 equates to a manual entering of a value,
                               // otherwise it will auto-increment with a left/right arrow
          default   = REFRESH_RATE_DEFAULT, defaultstore = MyStandardDefault,
          default   = REFRESH_RATE_DEFAULT, defaultstore = MyManufactureDefault,
      endnumeric;

      numeric varid = SOCKET_MEMORY_CONFIGURATION.tCAS,
          prompt    = STRING_TOKEN(STR_CAS_LATENCY),
          help      = STRING_TOKEN(STR_CAS_LATENCY_HELP),
          flags     = RESET_REQUIRED,
          minimum   = MIN_CAS_LATENCY,
          maximum   = MAX_CAS_LATENCY,
          step      = 0,       // Stepping of 0 equates to a manual entering of a value,
                               // otherwise it will auto-increment with a left/right arrow
          default   = CAS_LATENCY_DEFAULT, defaultstore = MyStandardDefault,
          default   = CAS_LATENCY_DEFAULT, defaultstore = MyManufactureDefault,
      endnumeric;

      numeric varid = SOCKET_MEMORY_CONFIGURATION.tRP,
          prompt    = STRING_TOKEN(STR_TRP_LATENCY),
          help      = STRING_TOKEN(STR_TRP_LATENCY_HELP),
          flags     = RESET_REQUIRED,
          minimum   = 0,
          maximum   = MAX_TRP_LATENCY,
          step      = 0,       // Stepping of 0 equates to a manual entering of a value,
                               // otherwise it will auto-increment with a left/right arrow
          default   = 0, defaultstore = MyStandardDefault,
          default   = 0, defaultstore = MyManufactureDefault,
      endnumeric;

      numeric varid = SOCKET_MEMORY_CONFIGURATION.tRCD,
          prompt    = STRING_TOKEN(STR_TRCD_LATENCY),
          help      = STRING_TOKEN(STR_TRCD_LATENCY_HELP),
          flags     = RESET_REQUIRED,
          minimum   = MIN_TRCD_LATENCY,
          maximum   = MAX_TRCD_LATENCY,
          step      = 0,       // Stepping of 0 equates to a manual entering of a value,
                               // otherwise it will auto-increment with a left/right arrow
          default   = TRCD_LATENCY_DEFAULT, defaultstore = MyStandardDefault,
          default   = TRCD_LATENCY_DEFAULT, defaultstore = MyManufactureDefault,
      endnumeric;

      numeric varid = SOCKET_MEMORY_CONFIGURATION.tRAS,
          prompt    = STRING_TOKEN(STR_TRAS_LATENCY),
          help      = STRING_TOKEN(STR_TRAS_LATENCY_HELP),
          flags     = RESET_REQUIRED,
          minimum   = MIN_TRAS_LATENCY,
          maximum   = MAX_TRAS_LATENCY,
          step      = 0,       // Stepping of 0 equates to a manual entering of a value,
                               // otherwise it will auto-increment with a left/right arrow
          default   = TRAS_LATENCY_DEFAULT, defaultstore = MyStandardDefault,
          default   = TRAS_LATENCY_DEFAULT, defaultstore = MyManufactureDefault,
      endnumeric;

      numeric varid = SOCKET_MEMORY_CONFIGURATION.tWR,
          prompt    = STRING_TOKEN(STR_TWR_LATENCY),
          help      = STRING_TOKEN(STR_TWR_LATENCY_HELP),
          flags     = RESET_REQUIRED,
          minimum   = MIN_TWR_LATENCY,
          maximum   = MAX_TWR_LATENCY,
          step      = 0,       // Stepping of 0 equates to a manual entering of a value,
                               // otherwise it will auto-increment with a left/right arrow
          default   = TWR_LATENCY_DEFAULT, defaultstore = MyStandardDefault,
          default   = TWR_LATENCY_DEFAULT, defaultstore = MyManufactureDefault,
      endnumeric;

      numeric varid = SOCKET_MEMORY_CONFIGURATION.tRFC,
          prompt    = STRING_TOKEN(STR_TRFC_LATENCY),
          help      = STRING_TOKEN(STR_TRFC_LATENCY_HELP),
          flags     = RESET_REQUIRED,
          minimum   = MIN_TRFC_LATENCY,
          maximum   = MAX_TRFC_LATENCY,
          step      = 0,       // Stepping of 0 equates to a manual entering of a value,
                               // otherwise it will auto-increment with a left/right arrow
          default   = TRFC_LATENCY_DEFAULT, defaultstore = MyStandardDefault,
          default   = TRFC_LATENCY_DEFAULT, defaultstore = MyManufactureDefault,
      endnumeric;

      numeric varid = SOCKET_MEMORY_CONFIGURATION.tRRD,
          prompt    = STRING_TOKEN(STR_TRRD_LATENCY),
          help      = STRING_TOKEN(STR_TRRD_LATENCY_HELP),
          flags     = RESET_REQUIRED,
          minimum   = MIN_TRRD_LATENCY,
          maximum   = MAX_TRRD_LATENCY,
          step      = 0,       // Stepping of 0 equates to a manual entering of a value,
                               // otherwise it will auto-increment with a left/right arrow
          default   = TRRD_LATENCY_DEFAULT, defaultstore = MyStandardDefault,
          default   = TRRD_LATENCY_DEFAULT, defaultstore = MyManufactureDefault,
      endnumeric;

      numeric varid = SOCKET_MEMORY_CONFIGURATION.tRRD_L,
          prompt    = STRING_TOKEN(STR_TRRDL_LATENCY),
          help      = STRING_TOKEN(STR_TRRDL_LATENCY_HELP),
          flags     = RESET_REQUIRED,
          minimum   = 0,
          maximum   = MAX_TRRDL_LATENCY,
          step      = 0,       // Stepping of 0 equates to a manual entering of a value,
                               // otherwise it will auto-increment with a left/right arrow
          default = TRRDL_LATENCY_DEFAULT, defaultstore = MyStandardDefault,
          default = TRRDL_LATENCY_DEFAULT, defaultstore = MyManufactureDefault,
      endnumeric;

      numeric varid = SOCKET_MEMORY_CONFIGURATION.tRTP,
          prompt    = STRING_TOKEN(STR_TRTP_LATENCY),
          help      = STRING_TOKEN(STR_TRTP_LATENCY_HELP),
          flags     = RESET_REQUIRED,
          minimum   = MIN_TRTP_LATENCY,
          maximum   = MAX_TRTP_LATENCY,
          step      = 0,       // Stepping of 0 equates to a manual entering of a value,
                               // otherwise it will auto-increment with a left/right arrow
          default   = TRTP_LATENCY_DEFAULT, defaultstore = MyStandardDefault,
          default   = TRTP_LATENCY_DEFAULT, defaultstore = MyManufactureDefault,
      endnumeric;

      numeric varid = SOCKET_MEMORY_CONFIGURATION.tWTR,
          prompt    = STRING_TOKEN(STR_TWTR_LATENCY),
          help      = STRING_TOKEN(STR_TWTR_LATENCY_HELP),
          flags     = RESET_REQUIRED,
          minimum   = MIN_TWTR_LATENCY,
          maximum   = MAX_TWTR_LATENCY,
          step      = 0,       // Stepping of 0 equates to a manual entering of a value,
                               // otherwise it will auto-increment with a left/right arrow
          default   = TWTR_LATENCY_DEFAULT, defaultstore = MyStandardDefault,
          default   = TWTR_LATENCY_DEFAULT, defaultstore = MyManufactureDefault,
      endnumeric;

      numeric varid = SOCKET_MEMORY_CONFIGURATION.tFAW,
          prompt    = STRING_TOKEN(STR_TFAW_LATENCY),
          help      = STRING_TOKEN(STR_TFAW_LATENCY_HELP),
          flags     = RESET_REQUIRED,
          minimum   = MIN_TFAW_LATENCY,
          maximum   = MAX_TFAW_LATENCY,
          step      = 0,       // Stepping of 0 equates to a manual entering of a value,
                               // otherwise it will auto-increment with a left/right arrow
          default   = TFAW_LATENCY_DEFAULT, defaultstore = MyStandardDefault,
          default   = TFAW_LATENCY_DEFAULT, defaultstore = MyManufactureDefault,
      endnumeric;

      numeric varid = SOCKET_MEMORY_CONFIGURATION.tRC,
          prompt    = STRING_TOKEN(STR_TRC_LATENCY),
          help      = STRING_TOKEN(STR_TRC_LATENCY_HELP),
          flags     = RESET_REQUIRED,
          minimum   = MIN_TRC_LATENCY,
          maximum   = MAX_TRC_LATENCY,
          step      = 0,       // Stepping of 0 equates to a manual entering of a value,
                               // otherwise it will auto-increment with a left/right arrow
          default   = TRC_LATENCY_DEFAULT, defaultstore = MyStandardDefault,
          default   = TRC_LATENCY_DEFAULT, defaultstore = MyManufactureDefault,
      endnumeric;

      numeric varid = SOCKET_MEMORY_CONFIGURATION.tCWL,
          prompt    = STRING_TOKEN(STR_TCWL_LATENCY),
          help      = STRING_TOKEN(STR_TCWL_LATENCY_HELP),
          flags     = RESET_REQUIRED,
          minimum   = MIN_TCWL_LATENCY,
          maximum   = MAX_TCWL_LATENCY,
          step      = 0,       // Stepping of 0 equates to a manual entering of a value,
                               // otherwise it will auto-increment with a left/right arrow
          default   = TCWL_LATENCY_DEFAULT, defaultstore = MyStandardDefault,
          default   = TCWL_LATENCY_DEFAULT, defaultstore = MyManufactureDefault,
      endnumeric;
    endif;
    endform;

    form formid = VFR_FORMID_MEM_MAP,
    title       = STRING_TOKEN(STR_MEM_MAP_SUBTITLE);

    suppressif (ideqval SOCKET_COMMONRC_CONFIGURATION.DcpmmEnable == 0 AND
                ideqval SOCKET_COMMONRC_CONFIGURATION.HbmSku == 0) OR
                NOT ideqval SOCKET_COMMONRC_CONFIGURATION.NumaEn == NUMA_EN OR
                ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX;
      oneof varid = SOCKET_MEMORY_CONFIGURATION.volMemMode,
        questionid = KEY_VOL_MEM_MODE,
        prompt  = STRING_TOKEN(STR_VOL_MEM_MODE),
        help    = STRING_TOKEN(STR_VOL_MEM_MODE_HELP),
        option text = STRING_TOKEN(STR_1LM),        value = VOL_MEM_MODE_1LM,        flags = INTERACTIVE | VOL_MEM_MODE_1LM_FLAGS;
        option text = STRING_TOKEN(STR_2LM),        value = VOL_MEM_MODE_2LM,        flags = INTERACTIVE | VOL_MEM_MODE_2LM_FLAGS;
      endoneof;

      suppressif  ideqval SOCKET_COMMONRC_CONFIGURATION.HbmSku == 0  OR
              NOT ideqval SOCKET_MEMORY_CONFIGURATION.volMemMode == VOL_MEM_MODE_2LM;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.CacheMemType,
          prompt      = STRING_TOKEN(STR_DDR_CACHE_MEM_TYPE_PROMPT),
          help        = STRING_TOKEN(STR_DDR_CACHE_MEM_TYPE_HELP),
          option text = STRING_TOKEN(STR_DDR_CACHE_PMEM ),  value = CACHE_TYPE_DDR_CACHE_PMEM,   flags = CACHE_TYPE_DDR_CACHE_PMEM_FLAGS;
          option text = STRING_TOKEN(STR_HBM_CACHE_DDR ),   value = CACHE_TYPE_HBM_CACHE_DDR,    flags = CACHE_TYPE_HBM_CACHE_DDR_FLAGS;
        endoneof;
      endif;

      suppressif NOT ideqval SOCKET_MEMORY_CONFIGURATION.volMemMode == VOL_MEM_MODE_2LM OR
                 NOT ideqval SOCKET_MEMORY_CONFIGURATION.CacheMemType == CACHE_TYPE_DDR_CACHE_PMEM OR
                   ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
                   ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
                   ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX OR
                   ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_ICXSP OR
                   ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_ICXD OR
                   ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SNR OR
                   ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SPRSP;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.DdrCacheSize,
          prompt      = STRING_TOKEN(STR_DDR_CACHE_SIZE_PROMPT),
          help        = STRING_TOKEN(STR_DDR_CACHE_SIZE_HELP),
          option text = STRING_TOKEN(STR_DDR_CACHE_ALL ),  value = DDR_ENCODED_CACHE_SIZE_ALL,   flags = DDR_ENCODED_CACHE_SIZE_ALL_FLAGS;
          option text = STRING_TOKEN(STR_8GB),   value = DDR_ENCODED_CACHE_SIZE_8GB,   flags = DDR_ENCODED_CACHE_SIZE_8GB_FLAGS;
          option text = STRING_TOKEN(STR_16GB),  value = DDR_ENCODED_CACHE_SIZE_16GB,  flags = DDR_ENCODED_CACHE_SIZE_16GB_FLAGS;
          option text = STRING_TOKEN(STR_32GB),  value = DDR_ENCODED_CACHE_SIZE_32GB,  flags = DDR_ENCODED_CACHE_SIZE_32GB_FLAGS;
          option text = STRING_TOKEN(STR_64GB),  value = DDR_ENCODED_CACHE_SIZE_64GB,  flags = DDR_ENCODED_CACHE_SIZE_64GB_FLAGS;
          option text = STRING_TOKEN(STR_128GB), value = DDR_ENCODED_CACHE_SIZE_128GB, flags = DDR_ENCODED_CACHE_SIZE_128GB_FLAGS;
          option text = STRING_TOKEN(STR_256GB), value = DDR_ENCODED_CACHE_SIZE_256GB, flags = DDR_ENCODED_CACHE_SIZE_256GB_FLAGS;
        endoneof;
      endif;

      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.volMemMode == VOL_MEM_MODE_1LM;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.PmemCaching,
          prompt  = STRING_TOKEN(STR_APP_DIRECT_CACHE_PROMPT),
          help    = STRING_TOKEN(STR_APP_DIRECT_CACHE_HELP),
          option text = STRING_TOKEN(STR_DISABLED),        value = PMEM_WBCACHE_DISABLED, flags = PMEM_CACHE_DISABLE_FLAGS;
          option text = STRING_TOKEN(STR_ENABLED),         value = PMEM_WBCACHE_ENABLED,  flags = PMEM_CACHE_ENABLE_FLAGS;
        endoneof;
      endif;
    endif; // suppressif DcpmmEnable == 0 OR NOT NumaEn == NUMA_EN

    suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.DcpmmEnable == 0;
      suppressif NOT (ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
                      ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
                      ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX OR
                      ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_ICXSP OR
                      ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_ICXD);
        oneof varid = SOCKET_MEMORY_CONFIGURATION.EadrSupport,
          prompt  = STRING_TOKEN(STR_EADR_SUPPORT_PROMPT),
          help    = STRING_TOKEN(STR_EADR_SUPPORT_HELP),
          option text = STRING_TOKEN(STR_DISABLE),        value = EADR_DISABLED, flags = EADR_DISABLED_FLAGS;
          option text = STRING_TOKEN(STR_ENABLE),         value = EADR_ENABLED,  flags = EADR_ENABLED_FLAGS;
          option text = STRING_TOKEN(STR_AUTO),           value = EADR_AUTO,     flags = EADR_AUTO_FLAGS;
        endoneof;
      endif;

      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.EadrSupport == EADR_DISABLED;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.EadrCacheFlushMode,
          prompt  = STRING_TOKEN(STR_EADR_CACHE_FLUSH_MODE_PROMPT),
          help    = STRING_TOKEN(STR_EADR_CACHE_FLUSH_MODE_HELP),
          option text = STRING_TOKEN(STR_EADR_FLUSH_MODE_SERIAL),        value = EADR_FLUSH_SERIAL,    flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
          option text = STRING_TOKEN(STR_EADR_FLUSH_MODE_PARALLEL),      value = EADR_FLUSH_PARALLEL,  flags = RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
                 ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
                 ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX OR
                 ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_ICXSP OR
                 ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_ICXD OR
                 ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SNR;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.FadrSupport,
          prompt  = STRING_TOKEN(STR_FADR_SUPPORT_PROMPT),
          help    = STRING_TOKEN(STR_FADR_SUPPORT_HELP),
          option text = STRING_TOKEN(STR_DISABLE),        value = FADR_DISABLED, flags = FADR_DISABLED_FLAGS;
          option text = STRING_TOKEN(STR_ENABLE),         value = FADR_ENABLED,  flags = FADR_ENABLED_FLAGS;
        endoneof;
      endif;
    endif;

#ifdef SKX_HOST
    suppressif ideqval SOCKET_MEMORY_CONFIGURATION.volMemMode == VOL_MEM_MODE_2LM;
#else
    //
    // Only one setting is available in 10nm configs. Hide the option for these configs.
    //
    suppressif TRUE;
#endif
      oneof varid = SOCKET_MEMORY_CONFIGURATION.memInterleaveGran1LM,
          prompt  = STRING_TOKEN(STR_MEM_INT_GRAN_1LM),
          help    = STRING_TOKEN(STR_MEM_INT_GRAN_1LM_HELP),
#if (MAX_IMC > 2)
          option text = STRING_TOKEN(STR_4KB_256B_256B), value = MEM_INT_GRAN_1LM_4KB_256B_256B, flags = MEM_INT_GRAN_1LM_4KB_256B_256B_FLAGS;
#else
          option text = STRING_TOKEN(STR_256B_256B), value = MEM_INT_GRAN_1LM_256B_256B, flags = MEM_INT_GRAN_1LM_256B_256B_FLAGS;
          option text = STRING_TOKEN(STR_64B_64B),   value = MEM_INT_GRAN_1LM_64B_64B,   flags = MEM_INT_GRAN_1LM_64B_64B_FLAGS;
#endif
      endoneof;
    endif;

endform;

    form formid = VFR_FORMID_MEMORY_NGN,
    title   = STRING_TOKEN(STR_MEMORY_NGN_CONFIG_FORM_TITLE);

    //Secure Erase
    goto VFR_FORMID_SECURE_ERASE,
      prompt = STRING_TOKEN(STR_SECURE_ERASE_UNIT_SUBTITLE),
      help   = STRING_TOKEN(STR_SET_SECURE_ERASE_UNIT_HELP);

    oneof varid  = SOCKET_MEMORY_CONFIGURATION.FactoryResetClear,
        questionid  = KEY_NGN_FACTORY_CLEAN,
        prompt      = STRING_TOKEN (STR_FACTORY_RESET_CLEAR_PROMPT),
        help        = STRING_TOKEN (STR_FACTORY_RESET_CLEAR_HELP),
        option text = STRING_TOKEN (STR_DISABLED), value = NGN_FACTORY_RESET_CLEAR_DISABLE, flags = INTERACTIVE | DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (STR_ENABLED),  value = NGN_FACTORY_RESET_CLEAR_ENABLE, flags = INTERACTIVE | RESET_REQUIRED;
    endoneof;

    // Biased 2-way Near Memory Cache
    suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_ICXSP OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_ICXD OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SNR OR
               ideqval SOCKET_MEMORY_CONFIGURATION.volMemMode == VOL_MEM_MODE_1LM;
      goto VFR_FORMID_TWO_WAY_NM_CACHE,
        prompt = STRING_TOKEN(STR_TWO_WAY_NM_CACHE_UNIT_SUBTITLE),
        help   = STRING_TOKEN(STR_TWO_WAY_NM_CACHE_UNIT_HELP);
    endif;

    // Boot-time Fast Zero Memory
    suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_ICXSP OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_ICXD OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SNR OR
               NOT ideqval SOCKET_COMMONRC_CONFIGURATION.NumaEn == NUMA_EN;
      oneof varid = SOCKET_MEMORY_CONFIGURATION.FastZeroMemSupport,
        prompt  = STRING_TOKEN(STR_FAST_ZERO_MEM),
        help    = STRING_TOKEN(STR_FAST_ZERO_MEM_HELP),
          option text = STRING_TOKEN(STR_ENABLE),  value = FAST_ZERO_MEM_ENABLED,  flags = FAST_ZERO_MEM_ENABLED_FLAGS;
          option text = STRING_TOKEN(STR_DISABLE), value = FAST_ZERO_MEM_DISABLED, flags = FAST_ZERO_MEM_DISABLED_FLAGS;
      endoneof;
    endif;

    suppressif  ideqval SOCKET_MEMORY_CONFIGURATION.BwvOnSystem == 1;
      numeric varid = SOCKET_MEMORY_CONFIGURATION.NgnAveragePower,
          prompt  = STRING_TOKEN(STR_NGN_AVERAGE_POWER_PROMPT),
          help    = STRING_TOKEN(STR_NGN_AVERAGE_POWER_HELP),
          flags     = RESET_REQUIRED | DISPLAY_UINT_DEC,
          minimum   = NGN_AVERAGE_POWER_MIN,
          maximum   = NGN_AVERAGE_POWER_MAX,
          step      = 250,
          default   = NGN_AVERAGE_POWER_DEFAULT, defaultstore = MyStandardDefault,
          default   = NGN_AVERAGE_POWER_DEFAULT, defaultstore = MyManufactureDefault,
      endnumeric;
    endif;

    suppressif  ideqval SOCKET_MEMORY_CONFIGURATION.EkvOnSystem == 1;
      numeric varid = SOCKET_MEMORY_CONFIGURATION.DcpmmAveragePowerLimit,
          questionid = KEY_AVG_POWER_CHANGE,
          prompt     = STRING_TOKEN(STR_AVERAGE_POWER_LIMIT_PROMPT),
          help       = STRING_TOKEN(STR_AVERAGE_POWER_LIMIT_HELP),
          flags      = INTERACTIVE | RESET_REQUIRED | DISPLAY_UINT_DEC,
          minimum    = AVERAGE_POWER_LIMIT_MIN,
          maximum    = AVERAGE_POWER_LIMIT_MAX,
          step       = AVERAGE_POWER_LIMIT_INCREMENT,
          default    = AVERAGE_POWER_LIMIT_DEFAULT, defaultstore = MyStandardDefault,
          default    = AVERAGE_POWER_LIMIT_DEFAULT, defaultstore = MyManufactureDefault,
      endnumeric;
    endif;

     suppressif  ideqval SOCKET_MEMORY_CONFIGURATION.EkvOnSystem == 1;
       suppressif ideqval SOCKET_MEMORY_CONFIGURATION.DcpmmApiVersion200OnSystem == 0;
       oneof varid  = SOCKET_MEMORY_CONFIGURATION.DcpmmAveragePowerTimeConstant,
           prompt   = STRING_TOKEN (STR_AVERAGE_POWER_TIME_CONSTANT_PROMPT),
           help     = STRING_TOKEN (STR_AVERAGE_POWER_TIME_CONSTANT_HELP),
           option text = STRING_TOKEN (STR_AVERAGE_POWER_TIME_CONSTANT_STRING0), value = 0x06, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
           option text = STRING_TOKEN (STR_AVERAGE_POWER_TIME_CONSTANT_STRING1), value = 0x07, flags = RESET_REQUIRED;
           option text = STRING_TOKEN (STR_AVERAGE_POWER_TIME_CONSTANT_STRING2), value = 0x08, flags = RESET_REQUIRED;
           option text = STRING_TOKEN (STR_AVERAGE_POWER_TIME_CONSTANT_STRING3), value = 0x09, flags = RESET_REQUIRED;
           option text = STRING_TOKEN (STR_AVERAGE_POWER_TIME_CONSTANT_STRING4), value = 0x0A, flags = RESET_REQUIRED;
           option text = STRING_TOKEN (STR_AVERAGE_POWER_TIME_CONSTANT_STRING5), value = 0x0B, flags = RESET_REQUIRED;
           option text = STRING_TOKEN (STR_AVERAGE_POWER_TIME_CONSTANT_STRING6), value = 0x0C, flags = RESET_REQUIRED;
           option text = STRING_TOKEN (STR_AVERAGE_POWER_TIME_CONSTANT_STRING7), value = 0x0D, flags = RESET_REQUIRED;
           option text = STRING_TOKEN (STR_AVERAGE_POWER_TIME_CONSTANT_STRING8), value = 0x0E, flags = RESET_REQUIRED;
           option text = STRING_TOKEN (STR_AVERAGE_POWER_TIME_CONSTANT_STRING9), value = 0x0F, flags = RESET_REQUIRED;
           option text = STRING_TOKEN (STR_AVERAGE_POWER_TIME_CONSTANT_STRING10), value = 0x10, flags = RESET_REQUIRED;
           option text = STRING_TOKEN (STR_AVERAGE_POWER_TIME_CONSTANT_STRING11), value = 0x11, flags = RESET_REQUIRED;
           option text = STRING_TOKEN (STR_AVERAGE_POWER_TIME_CONSTANT_STRING12), value = 0x12, flags = RESET_REQUIRED;
           option text = STRING_TOKEN (STR_AVERAGE_POWER_TIME_CONSTANT_STRING13), value = 0x13, flags = RESET_REQUIRED;
       endoneof;
      endif;
     endif;

    suppressif  ideqval SOCKET_MEMORY_CONFIGURATION.EkvOnSystem == 1;
     suppressif   ideqval SOCKET_MEMORY_CONFIGURATION.DcpmmApiVersion201OnSystem == 0;
      numeric varid  = SOCKET_MEMORY_CONFIGURATION.DcpmmMbbAveragePowerTimeConstant,
          questionid  = KEY_AVG_POWER_TIME_CONST_CHANGE,
          prompt      = STRING_TOKEN (STR_MBB_AVERAGE_POWER_TIME_CONSTANT_PROMPT),
          help        = STRING_TOKEN (STR_MBB_AVERAGE_POWER_TIME_CONSTANT_HELP),
          flags       = INTERACTIVE | RESET_REQUIRED | DISPLAY_UINT_DEC,
          minimum     = AVERAGE_POWER_TIME_CONSTANT_MIN_2_1_OR_LATER,
          maximum     = AVERAGE_POWER_TIME_CONSTANT_MAX_2_1_OR_LATER,
          step        = AVERAGE_POWER_TIME_CONSTANT_INCREMENT_2_1_OR_LATER,
          default     = AVERAGE_POWER_TIME_CONSTANT_DEFAULT_2_1_OR_LATER, defaultstore = MyStandardDefault,
          default     = AVERAGE_POWER_TIME_CONSTANT_DEFAULT_2_1_OR_LATER, defaultstore = MyManufactureDefault,
      endnumeric;
      endif;
    endif;

    suppressif  ideqval SOCKET_MEMORY_CONFIGURATION.EkvOnSystem == 1;
      oneof varid  = SOCKET_MEMORY_CONFIGURATION.DcpmmMbbFeature,
          prompt      = STRING_TOKEN (STR_TURBO_POWER_STATE_PROMPT),
          help        = STRING_TOKEN (STR_TURBO_POWER_STATE_HELP),
          option text = STRING_TOKEN (STR_DISABLED), value = TURBO_MODE_STATE_DISABLED, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_ENABLED),  value = TURBO_MODE_STATE_ENABLED, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
      endoneof;
    endif;

    suppressif  ideqval SOCKET_MEMORY_CONFIGURATION.EkvOnSystem == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.DcpmmMbbFeature == TURBO_MODE_STATE_DISABLED;
        numeric varid  = SOCKET_MEMORY_CONFIGURATION.DcpmmMbbMaxPowerLimit,
            questionid = KEY_MBB_MAX_POWER_CHANGE,
            prompt     = STRING_TOKEN(STR_TURBO_POWER_LIMIT_PROMPT),
            help       = STRING_TOKEN(STR_TURBO_POWER_LIMIT_HELP),
            flags      = INTERACTIVE | RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum    = TURBO_POWER_LIMIT_MIN,
            maximum    = TURBO_POWER_LIMIT_MAX,
            step       = AVERAGE_POWER_LIMIT_INCREMENT,
            default    = TURBO_POWER_LIMIT_DEFAULT, defaultstore = MyStandardDefault,
            default    = TURBO_POWER_LIMIT_DEFAULT, defaultstore = MyManufactureDefault,
        endnumeric;
      endif;
    endif;

    oneof varid  = SOCKET_MEMORY_CONFIGURATION.NgnArsPublish,
        prompt   = STRING_TOKEN (STR_NGN_ARS_PUBLISH_PROMPT),
        help     = STRING_TOKEN (STR_NGN_ARS_PUBLISH_HELP),
        option text = STRING_TOKEN (STR_DISABLED), value = NGN_ARS_PUBLISH_DIS, flags = NGN_ARS_PUBLISH_DIS_FLAGS;
        option text = STRING_TOKEN (STR_ENABLED),  value = NGN_ARS_PUBLISH_EN, flags = NGN_ARS_PUBLISH_EN_FLAGS;
    endoneof;

    suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SPRSP;
      oneof varid = SOCKET_MEMORY_CONFIGURATION.NgnCmdTime,
          prompt  = STRING_TOKEN (STR_NGN_CMD_TIME_PROMPT),
          help    = STRING_TOKEN (STR_NGN_CMD_TIME_HELP),
          option text = STRING_TOKEN (STR_AUTO), value = NGN_CMD_TIME_AUTO, flags = NGN_CMD_TIME_AUTO_FLAGS;
          option text = STRING_TOKEN (STR_1N), value = NGN_CMD_1N, flags = NGN_CMD_1N_FLAGS;
          option text = STRING_TOKEN (STR_2N), value = NGN_CMD_2N, flags = NGN_CMD_2N_FLAGS;
      endoneof;
    endif;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.NgnEccRdChk,
        prompt  = STRING_TOKEN (STR_NGN_ECC_RD_CHK_PROMPT),
        help    = STRING_TOKEN (STR_NGN_ECC_RD_CHK_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = NGN_ECC_RD_CHK_DISABLE, flags = NGN_ECC_RD_CHK_DIS_FLAGS;
        option text = STRING_TOKEN (STR_ENABLE),  value = NGN_ECC_RD_CHK_ENABLE,  flags = NGN_ECC_RD_CHK_EN_FLAGS;
    endoneof;

    // FOUND IN CRYSTALRIDGE.C
    suppressif  ideqval SOCKET_MEMORY_CONFIGURATION.AepOnSystem == 0;
      oneof varid = SOCKET_MEMORY_CONFIGURATION.FastGoConfig,
          prompt  = STRING_TOKEN(STR_CR_FAST_GO_CONFIG_PROMPT),
          help    = STRING_TOKEN(STR_CR_FAST_GO_CONFIG_HELP),
#ifdef SKX_HOST
          option text = STRING_TOKEN(STR_CR_FAST_GO_AUTO),    value = CR_FASTGO_AUTOMATIC,                   flags = CR_QOS_FASTGO_AUTOMATIC_FLAGS;
          option text = STRING_TOKEN(STR_CR_FAST_GO_STRING0), value = CR_FASTGO_DEFAULT,                     flags = CR_QOS_DEFAULT_FLAGS;
          option text = STRING_TOKEN(STR_CR_FAST_GO_STRING1), value = CR_FASTGO_DISABLE,                     flags = CR_QOS_FASTGO_DISABLE_FLAGS;
          option text = STRING_TOKEN(STR_CR_FAST_GO_STRING2), value = CR_FASTGO_DISABLE_MLC_SQ_THRESHOLD_5,  flags = CR_QOS_FASTGO_DISABLE_MLC_SQ_THRESHOLD_5_FLAGS;
          option text = STRING_TOKEN(STR_CR_FAST_GO_STRING3), value = CR_FASTGO_DISABLE_MLC_SQ_THRESHOLD_6,  flags = CR_QOS_FASTGO_DISABLE_MLC_SQ_THRESHOLD_6_FLAGS;
          option text = STRING_TOKEN(STR_CR_FAST_GO_STRING4), value = CR_FASTGO_DISABLE_MLC_SQ_THRESHOLD_8,  flags = CR_QOS_FASTGO_DISABLE_MLC_SQ_THRESHOLD_8_FLAGS;
          option text = STRING_TOKEN(STR_CR_FAST_GO_STRING5), value = CR_FASTGO_DISABLE_MLC_SQ_THRESHOLD_10, flags = CR_QOS_FASTGO_DISABLE_MLC_SQ_THRESHOLD_10_FLAGS;
#else
          option text = STRING_TOKEN(STR_CR_FAST_GO_AUTO),    value = CR_FASTGO_AUTOMATIC,                   flags = CR_QOS_FASTGO_AUTOMATIC_FLAGS;
          option text = STRING_TOKEN(STR_CR_FAST_GO_STRING0), value = CR_FASTGO_DEFAULT,                     flags = CR_QOS_DEFAULT_FLAGS;
          option text = STRING_TOKEN(STR_CR_FAST_GO_STRING1), value = CR_FASTGO_DISABLE,                     flags = CR_QOS_FASTGO_DISABLE_FLAGS;
#endif
      endoneof;
    endif;

    suppressif  ideqval SOCKET_MEMORY_CONFIGURATION.AepOnSystem == 0;
      oneof varid = SOCKET_MEMORY_CONFIGURATION.NvmQos,
          prompt  = STRING_TOKEN(STR_NVM_QOS_PROMPT),
          help    = STRING_TOKEN(STR_NVM_QOS_HELP),
#if defined(SKX_HOST) || defined(CPX_HOST)
          option text = STRING_TOKEN(STR_NVM_QOS_RECIPE1_STR),     value = NVM_QOS_RECIPE1,      flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_NVM_QOS_RECIPE2_STR),     value = NVM_QOS_RECIPE2,      flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_NVM_QOS_RECIPE3_STR),     value = NVM_QOS_RECIPE3,      flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_NVM_QOS_DISABLE_STR),     value = NVM_QOS_DISABLE,      flags = MANUFACTURING | DEFAULT | RESET_REQUIRED;
#else
          option text = STRING_TOKEN(STR_DDRT_QOS_MODE_0),         value = DDRT_QOS_MODE_0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
          option text = STRING_TOKEN(STR_DDRT_QOS_MODE_1),         value = DDRT_QOS_MODE_1,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DDRT_QOS_MODE_2),         value = DDRT_QOS_MODE_2,  flags = RESET_REQUIRED;
#endif
      endoneof;
    endif;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.LatchSystemShutdownState,
        prompt = STRING_TOKEN(STR_CR_LATCH_SYSTEM_SHUTDOWN_PROMPT),
        help    = STRING_TOKEN(STR_CR_LATCH_SYSTEM_SHUTDOWN_HELP),
        option text = STRING_TOKEN(STR_DISABLED),           value = 0,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),            value = 1,  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.NumCpus == 1 OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX;
      oneof varid = SOCKET_MEMORY_CONFIGURATION.EliminateDirectoryInFarMemory,
          prompt  = STRING_TOKEN(STR_ELIMINATE_DIRECTORY_IN_FM_PROMPT),
          help    = STRING_TOKEN(STR_ELIMINATE_DIRECTORY_IN_FM_HELP),
          option text = STRING_TOKEN(STR_ENABLE),     value = ELIMINATE_DIRECTORY_IN_FM_ENABLE,   flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DISABLE),    value = ELIMINATE_DIRECTORY_IN_FM_DISABLE,  flags = MANUFACTURING | DEFAULT | RESET_REQUIRED;
      endoneof;
    endif;

    suppressif ideqval SOCKET_MEMORY_CONFIGURATION.AepOnSystem == 0;
      oneof varid  = SOCKET_MEMORY_CONFIGURATION.NvmdimmPerfConfig,
          prompt   = STRING_TOKEN (STR_NVMDIMM_PERF_PROMOPT),
          help     = STRING_TOKEN (STR_NVMDIMM_PERF_HELP),
#if defined(SKX_HOST)
          option text = STRING_TOKEN (STR_BW_OPTIMIZED),       value = NVMDIMM_BW_OPTIMIZED,       flags = MANUFACTURING | DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN (STR_LATENCY_OPTIMIZED),  value = NVMDIMM_LATENCY_OPTIMIZED,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_BALANCED),           value = NVMDIMM_BALANCED,           flags = RESET_REQUIRED;
#elif defined (ICX_HOST) || defined (ICXD_HOST)
          option text = STRING_TOKEN (STR_BW_OPTIMIZED),       value = NVMDIMM_BW_OPTIMIZED,       flags = MANUFACTURING | DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN (STR_BALANCED),           value = NVMDIMM_BALANCED,           flags = RESET_REQUIRED;
#else
          option text = STRING_TOKEN (STR_BW_OPTIMIZED),       value = NVMDIMM_BW_OPTIMIZED,       flags = MANUFACTURING | DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN (STR_LATENCY_OPTIMIZED),  value = NVMDIMM_LATENCY_OPTIMIZED,  flags = RESET_REQUIRED;
#endif
      endoneof;
    endif;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.NvmdimmPowerCyclePolicy,
        prompt  = STRING_TOKEN(STR_CR_PCP_SURPRISECLOCKSTOP_PROMPT),
        help    = STRING_TOKEN(STR_CR_PCP_SURPRISECLOCKSTOP_HELP),
        option text = STRING_TOKEN(STR_ENABLE),     value = 1,  flags = MANUFACTURING | DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLE),    value = 0, flags = RESET_REQUIRED;
    endoneof;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.DisableDirForAppDirect,
        prompt  = STRING_TOKEN(STR_DIRECTORY_FOR_APP_DIRECT_PROMPT),
        help    = STRING_TOKEN(STR_DIRECTORY_FOR_APP_DIRECT_HELP),
        option text = STRING_TOKEN(STR_DISABLE),    value = DIRECTORY_FOR_APP_DIRECT_DISABLE,  flags = MANUFACTURING | DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),     value = DIRECTORY_FOR_APP_DIRECT_ENABLE, flags = RESET_REQUIRED;
    endoneof;

    suppressif NOT (ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
                    ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
                    ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX);
      oneof varid = SOCKET_MEMORY_CONFIGURATION.AppDirectMemoryHole,
          prompt = STRING_TOKEN(STR_PMEM_MEM_HOLE_PROMPT),
          help    = STRING_TOKEN(STR_PMEM_MEM_HOLE_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = PMEM_MEM_HOLE_DISABLE,  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),   value = PMEM_MEM_HOLE_ENABLE,  flags = RESET_REQUIRED;
      endoneof;
    endif;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.LsxImplementation,
        prompt = STRING_TOKEN(STR_LSX_IMPLEMENTATION_PROMPT),
        help   = STRING_TOKEN(STR_LSX_IMPLEMENTATION_HELP),
        option text = STRING_TOKEN(STR_SWSMI), value = LSX_IMPLEMENTATION_SWSMI,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ASL),   value = LSX_IMPLEMENTATION_ASL,    flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.ExtendedType17,
        prompt = STRING_TOKEN(STR_EXTENDED_TYPE_17_PROMPT),
        help    = STRING_TOKEN(STR_EXTENDED_TYPE_17_HELP),
        option text = STRING_TOKEN(STR_DISABLED),           value = EXTENDED_TYPE_17_DISABLE,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),            value = EXTENDED_TYPE_17_ENABLE,  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    numeric varid = SOCKET_MEMORY_CONFIGURATION.NvdimmSmbusMaxAccessTime,
      prompt      = STRING_TOKEN(STR_NVDIMM_SMBUS_MAX_ACCESS_TIME_PROMPT),
      help        = STRING_TOKEN(STR_NVDIMM_SMBUS_MAX_ACCESS_TIME_HELP),
      flags       = RESET_REQUIRED,
      minimum     = 0,
      maximum     = 0xFFFFFFFF,
      step        = 0,          // Stepping of 0 equates to a manual entering
      default     = NVDIMM_SMBUS_MAX_ACCESS_TIME_MS_DEFAULT, defaultstore = MyStandardDefault,
      default     = NVDIMM_SMBUS_MAX_ACCESS_TIME_MS_DEFAULT, defaultstore = MyManufactureDefault,
    endnumeric;

    numeric varid = SOCKET_MEMORY_CONFIGURATION.NvdimmSmbusReleaseDelay,
      prompt      = STRING_TOKEN(STR_NVDIMM_SMBUS_RELEASE_DELAY_PROMPT),
      help        = STRING_TOKEN(STR_NVDIMM_SMBUS_RELEASE_DELAY_HELP),
      flags       = RESET_REQUIRED,
      minimum     = 0,
      maximum     = 0xFFFFFFFF,
      step        = 0,          // Stepping of 0 equates to a manual entering
      default     = NVDIMM_SMBUS_ACCESS_RELEASE_DELAY_MS_DEFAULT, defaultstore = MyStandardDefault,
      default     = NVDIMM_SMBUS_ACCESS_RELEASE_DELAY_MS_DEFAULT, defaultstore = MyManufactureDefault,
    endnumeric;

    oneof varid = SOCKET_MEMORY_CONFIGURATION.NfitPublishMailboxStructs,
      prompt    = STRING_TOKEN (STR_NFIT_MAILBOX_STRUCTS_PROMPT),
      help      = STRING_TOKEN (STR_NFIT_MAILBOX_STRUCTS_HELP),
      option text = STRING_TOKEN (STR_DISABLED), value = NFIT_PUBLISH_MAILBOX_STRUCTS_DISABLE, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      option text = STRING_TOKEN (STR_ENABLED),  value = NFIT_PUBLISH_MAILBOX_STRUCTS_ENABLE,  flags = RESET_REQUIRED;
    endoneof;

endform;

    form formid = VFR_FORMID_SECURE_ERASE,
    title = STRING_TOKEN(STR_SECURE_ERASE_UNIT_SUBTITLE);

    oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs,
       prompt   = STRING_TOKEN(STR_SET_SECURE_ERASE),
       help     = STRING_TOKEN(STR_SET_SECURE_ERASE_HELP),
       option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_ALL_DIS_FLAGS;
       option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_ALL_EN_FLAGS;
    endoneof;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[0] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[0],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S0_CH0),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S0_CH0_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT0_CH0_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT0_CH0_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[1] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[1],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S0_CH1),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S0_CH1_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT0_CH1_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT0_CH1_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[2] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[2],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S0_CH2),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S0_CH2_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT0_CH2_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT0_CH2_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[3] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[3],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S0_CH3),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S0_CH3_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT0_CH3_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT0_CH3_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[4] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[4],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S0_CH4),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S0_CH4_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT0_CH4_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT0_CH4_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[5] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[5],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S0_CH5),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S0_CH5_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT0_CH5_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT0_CH5_EN_FLAGS;
        endoneof;
      endif;
    endif;

    suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX;
      grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[6] == 1;
        suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
          oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[6],
             prompt   = STRING_TOKEN(STR_SECURE_ERASE_S0_CH6),
             help     = STRING_TOKEN(STR_SECURE_ERASE_S0_CH6_HELP),
             option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT0_CH6_DIS_FLAGS;
             option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT0_CH6_EN_FLAGS;
          endoneof;
        endif;
      endif;

      grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[7] == 1;
        suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
          oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[7],
             prompt   = STRING_TOKEN(STR_SECURE_ERASE_S0_CH7),
             help     = STRING_TOKEN(STR_SECURE_ERASE_S0_CH7_HELP),
             option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT0_CH7_DIS_FLAGS;
             option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT0_CH7_EN_FLAGS;
          endoneof;
        endif;
      endif;
    endif;

#if (MAX_SOCKET > 1)
    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[8] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[8],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S1_CH0),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S1_CH0_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT1_CH0_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT1_CH0_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[9] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[9],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S1_CH1),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S1_CH1_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT1_CH1_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT1_CH1_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[10] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[10],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S1_CH2),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S1_CH2_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT1_CH2_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT1_CH2_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[11] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[11],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S1_CH3),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S1_CH3_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT1_CH3_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT1_CH3_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[12] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[12],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S1_CH4),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S1_CH4_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT1_CH4_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT1_CH4_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[13] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[13],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S1_CH5),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S1_CH5_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT1_CH5_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT1_CH5_EN_FLAGS;
        endoneof;
      endif;
    endif;

    suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX;
      grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[14] == 1;
        suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
          oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[14],
             prompt   = STRING_TOKEN(STR_SECURE_ERASE_S1_CH6),
             help     = STRING_TOKEN(STR_SECURE_ERASE_S1_CH6_HELP),
             option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT1_CH6_DIS_FLAGS;
             option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT1_CH6_EN_FLAGS;
          endoneof;
        endif;
      endif;

      grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[15] == 1;
        suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
          oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[15],
             prompt   = STRING_TOKEN(STR_SECURE_ERASE_S1_CH7),
             help     = STRING_TOKEN(STR_SECURE_ERASE_S1_CH7_HELP),
             option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT1_CH7_DIS_FLAGS;
             option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT1_CH7_EN_FLAGS;
          endoneof;
        endif;
      endif;
    endif;

#endif

#if (MAX_SOCKET > 2)

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[16] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[16],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S2_CH0),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S2_CH0_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT2_CH0_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT2_CH0_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[17] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[17],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S2_CH1),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S2_CH1_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT2_CH1_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT2_CH1_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[18] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[18],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S2_CH2),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S2_CH2_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT2_CH2_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT2_CH2_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[19] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[19],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S2_CH3),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S2_CH3_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT2_CH3_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT2_CH3_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[20] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[20],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S2_CH4),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S2_CH4_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT2_CH4_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT2_CH4_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[21] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[21],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S2_CH5),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S2_CH5_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT2_CH5_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT2_CH5_EN_FLAGS;
        endoneof;
      endif;
    endif;

    suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX;
      grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[22] == 1;
        suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
          oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[22],
             prompt   = STRING_TOKEN(STR_SECURE_ERASE_S2_CH6),
             help     = STRING_TOKEN(STR_SECURE_ERASE_S2_CH6_HELP),
             option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT2_CH6_DIS_FLAGS;
             option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT2_CH6_EN_FLAGS;
          endoneof;
        endif;
      endif;

      grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[23] == 1;
        suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
          oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[23],
             prompt   = STRING_TOKEN(STR_SECURE_ERASE_S2_CH7),
             help     = STRING_TOKEN(STR_SECURE_ERASE_S2_CH7_HELP),
             option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT2_CH7_DIS_FLAGS;
             option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT2_CH7_EN_FLAGS;
          endoneof;
        endif;
      endif;
    endif;

#endif

#if (MAX_SOCKET > 3)

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[24] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[24],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S3_CH0),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S3_CH0_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT3_CH0_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT3_CH0_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[25] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[25],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S3_CH1),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S3_CH1_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT3_CH1_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT3_CH1_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[26] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[26],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S3_CH2),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S3_CH2_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT3_CH2_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT3_CH2_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[27] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[27],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S3_CH3),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S3_CH3_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT3_CH3_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT3_CH3_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[28] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[28],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S3_CH4),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S3_CH4_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT3_CH4_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT3_CH4_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[29] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[29],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S3_CH5),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S3_CH5_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT3_CH5_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT3_CH5_EN_FLAGS;
        endoneof;
      endif;
    endif;

    suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX;
      grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[30] == 1;
        suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
          oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[30],
             prompt   = STRING_TOKEN(STR_SECURE_ERASE_S3_CH6),
             help     = STRING_TOKEN(STR_SECURE_ERASE_S3_CH6_HELP),
             option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT3_CH6_DIS_FLAGS;
             option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT3_CH6_EN_FLAGS;
          endoneof;
        endif;
      endif;

      grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[31] == 1;
        suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
          oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[31],
             prompt   = STRING_TOKEN(STR_SECURE_ERASE_S3_CH7),
             help     = STRING_TOKEN(STR_SECURE_ERASE_S3_CH7_HELP),
             option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT3_CH7_DIS_FLAGS;
             option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT3_CH7_EN_FLAGS;
          endoneof;
        endif;
      endif;
    endif;

#endif

#if (MAX_SOCKET > 4)

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[32] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[32],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S4_CH0),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S4_CH0_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT4_CH0_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT4_CH0_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[33] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[33],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S4_CH1),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S4_CH1_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT4_CH1_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT4_CH1_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[34] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[34],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S4_CH2),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S4_CH2_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT4_CH2_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT4_CH2_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[35] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[35],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S4_CH3),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S4_CH3_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT4_CH3_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT4_CH3_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[36] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[36],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S4_CH4),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S4_CH4_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT4_CH4_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT4_CH4_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[37] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[37],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S4_CH5),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S4_CH5_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT4_CH5_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT4_CH5_EN_FLAGS;
        endoneof;
      endif;
    endif;

    suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX;
      grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[38] == 1;
        suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
          oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[38],
             prompt   = STRING_TOKEN(STR_SECURE_ERASE_S4_CH6),
             help     = STRING_TOKEN(STR_SECURE_ERASE_S4_CH6_HELP),
             option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT4_CH6_DIS_FLAGS;
             option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT4_CH6_EN_FLAGS;
          endoneof;
        endif;
      endif;

      grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[39] == 1;
        suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
          oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[39],
             prompt   = STRING_TOKEN(STR_SECURE_ERASE_S4_CH7),
             help     = STRING_TOKEN(STR_SECURE_ERASE_S4_CH7_HELP),
             option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT4_CH7_DIS_FLAGS;
             option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT4_CH7_EN_FLAGS;
          endoneof;
        endif;
      endif;
    endif;

#endif

#if (MAX_SOCKET > 5)
    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[40] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[30],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S5_CH0),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S5_CH0_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT5_CH0_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT5_CH0_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[41] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[41],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S5_CH1),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S5_CH1_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT5_CH1_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT5_CH1_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[42] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[42],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S5_CH2),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S5_CH2_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT5_CH2_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT5_CH2_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[43] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[43],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S5_CH3),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S5_CH3_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT5_CH3_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT5_CH3_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[44] == 1;
     suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[44],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S5_CH4),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S5_CH4_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT5_CH4_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT5_CH4_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[45] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[45],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S5_CH5),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S5_CH5_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT5_CH5_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT5_CH5_EN_FLAGS;
        endoneof;
      endif;
    endif;

    suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX;
      grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[46] == 1;
        suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
          oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[46],
             prompt   = STRING_TOKEN(STR_SECURE_ERASE_S5_CH6),
             help     = STRING_TOKEN(STR_SECURE_ERASE_S5_CH6_HELP),
             option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT5_CH6_DIS_FLAGS;
             option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT5_CH6_EN_FLAGS;
          endoneof;
        endif;
      endif;

      grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[47] == 1;
        suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
          oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[47],
             prompt   = STRING_TOKEN(STR_SECURE_ERASE_S5_CH7),
             help     = STRING_TOKEN(STR_SECURE_ERASE_S5_CH7_HELP),
             option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT5_CH7_DIS_FLAGS;
             option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT5_CH7_EN_FLAGS;
          endoneof;
        endif;
      endif;
    endif;

#endif

#if (MAX_SOCKET > 6)

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[48] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[48],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S6_CH0),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S6_CH0_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT6_CH0_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT6_CH0_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[49] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[49],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S6_CH1),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S6_CH1_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT6_CH1_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT6_CH1_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[50] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[50],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S6_CH2),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S6_CH2_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT6_CH2_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT6_CH2_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[51] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[51],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S6_CH3),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S6_CH3_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT6_CH3_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT6_CH3_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[52] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[52],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S6_CH4),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S6_CH4_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT6_CH4_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT6_CH4_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[53] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[53],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S6_CH5),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S6_CH5_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT6_CH5_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT6_CH5_EN_FLAGS;
        endoneof;
      endif;
    endif;

    suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX;
      grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[54] == 1;
        suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
          oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[54],
             prompt   = STRING_TOKEN(STR_SECURE_ERASE_S6_CH6),
             help     = STRING_TOKEN(STR_SECURE_ERASE_S6_CH6_HELP),
             option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT6_CH6_DIS_FLAGS;
             option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT6_CH6_EN_FLAGS;
          endoneof;
        endif;
      endif;

      grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[55] == 1;
        suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
          oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[55],
             prompt   = STRING_TOKEN(STR_SECURE_ERASE_S6_CH7),
             help     = STRING_TOKEN(STR_SECURE_ERASE_S6_CH7_HELP),
             option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT6_CH7_DIS_FLAGS;
             option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT6_CH7_EN_FLAGS;
          endoneof;
        endif;
      endif;
    endif;

#endif

#if (MAX_SOCKET > 7)

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[56] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[56],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S7_CH0),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S7_CH0_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT7_CH0_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT7_CH0_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[57] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[57],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S7_CH1),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S7_CH1_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT7_CH1_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT7_CH1_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[58] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[58],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S7_CH2),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S7_CH2_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT7_CH2_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT7_CH2_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[59] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[59],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S7_CH3),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S7_CH3_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT7_CH3_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT7_CH3_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[60] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[60],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S7_CH4),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S7_CH4_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT7_CH4_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT7_CH4_EN_FLAGS;
        endoneof;
      endif;
    endif;

    grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[61] == 1;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[61],
           prompt   = STRING_TOKEN(STR_SECURE_ERASE_S7_CH5),
           help     = STRING_TOKEN(STR_SECURE_ERASE_S7_CH5_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT7_CH5_DIS_FLAGS;
           option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT7_CH5_EN_FLAGS;
        endoneof;
      endif;
    endif;

    suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX;
      grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[62] == 1;
        suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
          oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[62],
             prompt   = STRING_TOKEN(STR_SECURE_ERASE_S7_CH6),
             help     = STRING_TOKEN(STR_SECURE_ERASE_S7_CH6_HELP),
             option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT7_CH6_DIS_FLAGS;
             option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT7_CH6_EN_FLAGS;
          endoneof;
        endif;
      endif;

      grayoutif  ideqval SOCKET_MEMORY_CONFIGURATION.SetSecureEraseSktChHob[63] == 1;
        suppressif ideqval SOCKET_MEMORY_CONFIGURATION.setSecureEraseAllDIMMs == ENABLE_SECURE_ERASE;
          oneof varid = SOCKET_MEMORY_CONFIGURATION.setSecureEraseSktCh[63],
             prompt   = STRING_TOKEN(STR_SECURE_ERASE_S7_CH7),
             help     = STRING_TOKEN(STR_SECURE_ERASE_S7_CH7_HELP),
             option text = STRING_TOKEN(STR_DISABLE), value = DISABLE_SECURE_ERASE, flags = SECURE_ERASE_SKT7_CH7_DIS_FLAGS;
             option text = STRING_TOKEN(STR_ENABLE),  value = ENABLE_SECURE_ERASE,  flags = SECURE_ERASE_SKT7_CH7_EN_FLAGS;
          endoneof;
        endif;
      endif;
    endif;

#endif

endform;

    form formid = VFR_FORMID_TWO_WAY_NM_CACHE,
    title       = STRING_TOKEN(STR_TWO_WAY_NM_CACHE_UNIT_SUBTITLE);

    oneof varid = SOCKET_MEMORY_CONFIGURATION.EnableTwoWayNmCache,
      prompt  = STRING_TOKEN(STR_ENABLE_TWO_WAY_NM_CACHE),
      help    = STRING_TOKEN(STR_ENABLE_TWO_WAY_NM_CACHE_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = TWO_WAY_NM_CACHE_DISABLED, flags = TWO_WAY_NM_CACHE_DISABLED_FLAGS;
        option text = STRING_TOKEN(STR_ENABLE),  value = TWO_WAY_NM_CACHE_ENABLED,  flags = TWO_WAY_NM_CACHE_ENABLED_FLAGS;
    endoneof;

    grayoutif ideqval SOCKET_MEMORY_CONFIGURATION.EnableTwoWayNmCache == TWO_WAY_NM_CACHE_DISABLED;
      numeric varid = SOCKET_MEMORY_CONFIGURATION.NonPreferredWayMask,
        prompt  = STRING_TOKEN(STR_NON_PREFERRED_WAY_MASK),
        help    = STRING_TOKEN(STR_NON_PREFERRED_WAY_MASK_HELP),
          flags   = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum = NON_PREFERRED_WAY_MASK_MIN,
          maximum = NON_PREFERRED_WAY_MASK_MAX,
          step    = 1,
          default = NON_PREFERRED_WAY_MASK_DEFAULT, defaultstore = MyStandardDefault,
          default = NON_PREFERRED_WAY_MASK_DEFAULT, defaultstore = MyManufactureDefault,
      endnumeric;

      oneof varid = SOCKET_MEMORY_CONFIGURATION.PreferredReadFirst,
        prompt  = STRING_TOKEN(STR_PREFERRED_READ_FIRST),
        help    = STRING_TOKEN(STR_PREFERRED_READ_FIRST_HELP),
          option text = STRING_TOKEN(STR_PREFERRED_WAY),     value = PREFERRED_WAY_READ_FIRST,     flags = PREFERRED_WAY_READ_FIRST_FLAGS;
          option text = STRING_TOKEN(STR_NON_PREFERRED_WAY), value = NON_PREFERRED_WAY_READ_FIRST, flags = NON_PREFERRED_WAY_READ_FIRST_FLAGS;
      endoneof;
    endif;  // grayoutif ideqval SOCKET_MEMORY_CONFIGURATION.EnableTwoWayNmCache == TWO_WAY_NM_CACHE_DISABLED;
endform;  // form formid = VFR_FORMID_TWO_WAY_NM_CACHE

    form formid = VFR_FORMID_MEMORY_BIOS_SSA_CONFIG_MENU,
    title   = STRING_TOKEN(STR_BIOS_SSA_CONFIG_MENU_SUBTITLE);

suppressif ideqvallist SOCKET_MEMORY_CONFIGURATION.SsaLoaderKnobVisible == BIOS_SSA_LOADER_KNOB_DISABLE;
    oneof varid = SOCKET_MEMORY_CONFIGURATION.EnableBiosSsaLoader,
        prompt  = STRING_TOKEN (STR_BIOS_SSA_LOADER_PROMPT),
        help    = STRING_TOKEN (STR_BIOS_SSA_LOADER_HELP),
        option text = STRING_TOKEN (STR_ENABLE),  value = BIOS_SSA_LOADER_ENABLE,  flags = BIOS_SSA_LOADER_EN_FLAGS;
        option text = STRING_TOKEN (STR_DISABLE), value = BIOS_SSA_LOADER_DISABLE, flags = BIOS_SSA_LOADER_DIS_FLAGS;
    endoneof;
endif; // suppressif ideqvallist SOCKET_MEMORY_CONFIGURATION.SsaLoaderKnobVisible == 0;

suppressif ideqval SOCKET_MEMORY_CONFIGURATION.SsaBuiltInRmtKnobVisible == BIOS_SSA_RMT_KNOB_DISABLE;
    oneof varid = SOCKET_MEMORY_CONFIGURATION.EnableBiosSsaRMT,
        prompt  = STRING_TOKEN (STR_BIOS_SSA_RMT_PROMPT),
        help    = STRING_TOKEN (STR_BIOS_SSA_RMT_HELP),
        option text = STRING_TOKEN (STR_ENABLE),  value = BIOS_SSA_RMT_ENABLE,  flags = BIOS_SSA_RMT_EN_FLAGS;
        option text = STRING_TOKEN (STR_DISABLE), value = BIOS_SSA_RMT_DISABLE, flags = BIOS_SSA_RMT_DIS_FLAGS;
    endoneof;

    // Setup option for enabling  RMT Execution on Advanced Memory Training
    suppressif ideqvallist SOCKET_MEMORY_CONFIGURATION.EnableBiosSsaRMT == BIOS_SSA_RMT_DISABLE;
      oneof varid = SOCKET_MEMORY_CONFIGURATION.RmtOnAdvancedTraining,
          prompt  = STRING_TOKEN (STR_RMT_ON_ADVANCED_TRAINING_PROMPT),
          help    = STRING_TOKEN (STR_RMT_ON_ADVANCED_TRAINING_HELP),
          option text = STRING_TOKEN (STR_ENABLE),  value = RMT_ON_ADVANCED_TRAINING_ENABLE,  flags = RMT_ON_ADVANCED_TRAINING_EN_FLAGS;
          option text = STRING_TOKEN (STR_DISABLE), value = RMT_ON_ADVANCED_TRAINING_DISABLE, flags = RMT_ON_ADVANCED_TRAINING_DIS_FLAGS;
      endoneof;
    endif;  //suppressif ideqvallist SOCKET_MEMORY_CONFIGURATION.EnableBiosSsaRMT

    oneof varid = SOCKET_MEMORY_CONFIGURATION.EnableBiosSsaRMTonFCB,
        prompt  = STRING_TOKEN (STR_BIOS_SSA_RMT_FCB_PROMPT),
        help    = STRING_TOKEN (STR_BIOS_SSA_RMT_FCB_HELP),
        option text = STRING_TOKEN (STR_ENABLE),  value = BIOS_SSA_RMT_FCB_ENABLE,  flags = BIOS_SSA_RMT_FCB_EN_FLAGS;
        option text = STRING_TOKEN (STR_DISABLE), value = BIOS_SSA_RMT_FCB_DISABLE, flags = BIOS_SSA_RMT_FCB_DIS_FLAGS;
    endoneof;

    suppressif ideqvallist SOCKET_MEMORY_CONFIGURATION.EnableBiosSsaRMT == BIOS_SSA_RMT_DISABLE;
      oneof varid = SOCKET_MEMORY_CONFIGURATION.BiosSsaPerBitMargining,
          prompt  = STRING_TOKEN (STR_BIOS_SSA_PER_BIT_PROMPT),
          help    = STRING_TOKEN (STR_BIOS_SSA_PER_BIT_HELP),
          option text = STRING_TOKEN (STR_ENABLE),  value = BIOS_SSA_PER_BIT_MARGINING_ENABLE,  flags = BIOS_SSA_PER_BIT_MARGINING_EN_FLAGS;
          option text = STRING_TOKEN (STR_DISABLE), value = BIOS_SSA_PER_BIT_MARGINING_DISABLE, flags = BIOS_SSA_PER_BIT_MARGINING_DIS_FLAGS;
      endoneof;

      oneof varid = SOCKET_MEMORY_CONFIGURATION.BiosSsaDisplayTables,
          prompt  = STRING_TOKEN (STR_BIOS_SSA_DISPLAY_TABLE_PROMPT),
          help    = STRING_TOKEN (STR_BIOS_SSA_DISPLAY_TABLE_HELP),
          option text = STRING_TOKEN (STR_ENABLE),  value = BIOS_SSA_DISPLAY_TABLE_ENABLE,  flags = BIOS_SSA_DISPLAY_TABLE_EN_FLAGS;
          option text = STRING_TOKEN (STR_DISABLE), value = BIOS_SSA_DISPLAY_TABLE_DISABLE, flags = BIOS_SSA_DISPLAY_TABLE_DIS_FLAGS;
      endoneof;

      oneof varid = SOCKET_MEMORY_CONFIGURATION.BiosSsaPerDisplayPlots,
          prompt  = STRING_TOKEN (STR_BIOS_SSA_DISPLAY_PLOTS_PROMPT),
          help    = STRING_TOKEN (STR_BIOS_SSA_DISPLAY_PLOTS_HELP),
          option text = STRING_TOKEN (STR_ENABLE),  value = BIOS_SSA_DISPLAY_PLOTS_ENABLE,  flags = BIOS_SSA_DISPLAY_PLOTS_EN_FLAGS;
          option text = STRING_TOKEN (STR_DISABLE), value = BIOS_SSA_DISPLAY_PLOTS_DISABLE, flags = BIOS_SSA_DISPLAY_PLOTS_DIS_FLAGS;
      endoneof;

      numeric varid = SOCKET_MEMORY_CONFIGURATION.BiosSsaLoopCount,
          prompt    = STRING_TOKEN (STR_BIOS_SSA_LOOP_CNT_PROMPT),
          help      = STRING_TOKEN (STR_BIOS_SSA_LOOP_CNT_HELP),
          flags     = RESET_REQUIRED,
          minimum   = MIN_BIOS_SSA_LOOP_CNT,
          maximum   = MAX_BIOS_SSA_LOOP_CNT,
          step      = 0,   // Stepping of 0 equates to a manual entering of a value,
                               // otherwise it will auto-increment with a left/right arrow
          default   = BIOS_SSA_LOOP_CNT_DEFAULT, defaultstore = MyStandardDefault,
          default   = BIOS_SSA_LOOP_CNT_DEFAULT, defaultstore = MyManufactureDefault,
      endnumeric;

      oneof varid = SOCKET_MEMORY_CONFIGURATION.BiosSsaBacksideMargining,
           prompt = STRING_TOKEN (STR_BIOS_SSA_BACKSIDE_MARGINING_PROMPT),
           help   = STRING_TOKEN (STR_BIOS_SSA_BACKSIDE_MARGINING_HELP),
           option text = STRING_TOKEN (STR_ENABLE),  value = BIOS_SSA_BACKSIDE_MARGINING_ENABLE,  flags = BIOS_SSA_BACKSIDE_MARGINING_EN_FLAGS;
           option text = STRING_TOKEN (STR_DISABLE), value = BIOS_SSA_BACKSIDE_MARGINING_DISABLE, flags = BIOS_SSA_BACKSIDE_MARGINING_DIS_FLAGS;
      endoneof;

      oneof varid = SOCKET_MEMORY_CONFIGURATION.BiosSsaEarlyReadIdMargining,
          prompt  = STRING_TOKEN (STR_BIOS_SSA_EARLY_READ_ID_PROMPT),
          help    = STRING_TOKEN (STR_BIOS_SSA_EARLY_READ_ID_HELP),
          option text = STRING_TOKEN (STR_ENABLE),  value = BIOS_SSA_EARLY_READ_ID_ENABLE,  flags = BIOS_SSA_EARLY_READ_ID_EN_FLAGS;
          option text = STRING_TOKEN (STR_DISABLE), value = BIOS_SSA_EARLY_READ_ID_DISABLE, flags = BIOS_SSA_EARLY_READ_ID_DIS_FLAGS;
      endoneof;

      oneof varid = SOCKET_MEMORY_CONFIGURATION.BiosSsaStepSizeOverride,
          prompt  = STRING_TOKEN (STR_BIOS_SSA_STEP_SIZE_OVERRIDE_PROMPT),
          help    = STRING_TOKEN (STR_BIOS_SSA_STEP_SIZE_OVERRIDE_HELP),
          option text = STRING_TOKEN (STR_ENABLE),  value = BIOS_SSA_STEP_SIZE_OVERRIDE_ENABLE,  flags = BIOS_SSA_STEP_SIZE_OVERRIDE_EN_FLAGS;
          option text = STRING_TOKEN (STR_DISABLE), value = BIOS_SSA_STEP_SIZE_OVERRIDE_DISABLE, flags = BIOS_SSA_STEP_SIZE_OVERRIDE_DIS_FLAGS;
      endoneof;

    suppressif ideqval SOCKET_MEMORY_CONFIGURATION.BiosSsaStepSizeOverride == BIOS_SSA_STEP_SIZE_OVERRIDE_DISABLE;
        oneof varid = SOCKET_MEMORY_CONFIGURATION.BiosSsaRxDqs,
            prompt  = STRING_TOKEN(STR_BIOS_SSA_RXDQS_PROMPT),
            help    = STRING_TOKEN(STR_BIOS_SSA_RXDQS_HELP),
            flags   = RESET_REQUIRED,
            option text = STRING_TOKEN(STR_1), value = BIOS_SSA_RMT_DEFAULT_VALUE, flags = BSSA_VALUE_1_FLAGS;
            option text = STRING_TOKEN(STR_2), value = BSSA_VALUE_2, flags = BSSA_VALUE_2_FLAGS;
            option text = STRING_TOKEN(STR_4), value = BSSA_VALUE_4, flags = BSSA_VALUE_4_FLAGS;
            option text = STRING_TOKEN(STR_8), value = BSSA_VALUE_8, flags = BSSA_VALUE_8_FLAGS;
        endoneof;

        oneof varid = SOCKET_MEMORY_CONFIGURATION.BiosSsaRxVref,
            prompt  = STRING_TOKEN(STR_BIOS_SSA_RXVREF_PROMPT),
            help    = STRING_TOKEN(STR_BIOS_SSA_RXVREF_HELP),
            flags   = RESET_REQUIRED,
            option text = STRING_TOKEN(STR_1), value = BIOS_SSA_RMT_DEFAULT_VALUE, flags = BSSA_VALUE_1_FLAGS;
            option text = STRING_TOKEN(STR_2), value = BSSA_VALUE_2, flags = BSSA_VALUE_2_FLAGS;
            option text = STRING_TOKEN(STR_4), value = BSSA_VALUE_4, flags = BSSA_VALUE_4_FLAGS;
            option text = STRING_TOKEN(STR_8), value = BSSA_VALUE_8, flags = BSSA_VALUE_8_FLAGS;
        endoneof;

        oneof varid = SOCKET_MEMORY_CONFIGURATION.BiosSsaTxDq,
            prompt  = STRING_TOKEN(STR_BIOS_SSA_TXDQ_PROMPT),
            help    = STRING_TOKEN(STR_BIOS_SSA_TXDQ_HELP),
            flags   = RESET_REQUIRED,
            option text = STRING_TOKEN(STR_1), value = BIOS_SSA_RMT_DEFAULT_VALUE, flags = BSSA_VALUE_1_FLAGS;
            option text = STRING_TOKEN(STR_2), value = BSSA_VALUE_2, flags = BSSA_VALUE_2_FLAGS;
            option text = STRING_TOKEN(STR_4), value = BSSA_VALUE_4, flags = BSSA_VALUE_4_FLAGS;
            option text = STRING_TOKEN(STR_8), value = BSSA_VALUE_8, flags = BSSA_VALUE_8_FLAGS;
        endoneof;

        oneof varid = SOCKET_MEMORY_CONFIGURATION.BiosSsaTxVref,
            prompt  = STRING_TOKEN(STR_BIOS_SSA_TXVREF_PROMPT),
            help    = STRING_TOKEN(STR_BIOS_SSA_TXVREF_HELP),
            flags   = RESET_REQUIRED,
            option text = STRING_TOKEN(STR_1), value = BIOS_SSA_RMT_DEFAULT_VALUE, flags = BSSA_VALUE_1_FLAGS;
            option text = STRING_TOKEN(STR_2), value = BSSA_VALUE_2, flags = BSSA_VALUE_2_FLAGS;
            option text = STRING_TOKEN(STR_4), value = BSSA_VALUE_4, flags = BSSA_VALUE_4_FLAGS;
            option text = STRING_TOKEN(STR_8), value = BSSA_VALUE_8, flags = BSSA_VALUE_8_FLAGS;
        endoneof;

        oneof varid = SOCKET_MEMORY_CONFIGURATION.BiosSsaCmdAll,
            prompt  = STRING_TOKEN(STR_BIOS_SSA_CMDALL_PROMPT),
            help    = STRING_TOKEN(STR_BIOS_SSA_CMDALL_HELP),
            flags   = RESET_REQUIRED,
            option text = STRING_TOKEN(STR_1), value = BIOS_SSA_RMT_DEFAULT_VALUE, flags = BSSA_VALUE_1_FLAGS;
            option text = STRING_TOKEN(STR_2), value = BSSA_VALUE_2, flags = BSSA_VALUE_2_FLAGS;
            option text = STRING_TOKEN(STR_4), value = BSSA_VALUE_4, flags = BSSA_VALUE_4_FLAGS;
            option text = STRING_TOKEN(STR_8), value = BSSA_VALUE_8, flags = BSSA_VALUE_8_FLAGS;
        endoneof;

        oneof varid = SOCKET_MEMORY_CONFIGURATION.BiosSsaCmdVref,
            prompt  = STRING_TOKEN(STR_BIOS_SSA_CMDVREF_PROMPT),
            help    = STRING_TOKEN(STR_BIOS_SSA_CMDVREF_HELP),
            flags   = RESET_REQUIRED,
            option text = STRING_TOKEN(STR_1), value = BIOS_SSA_RMT_DEFAULT_VALUE, flags = BSSA_VALUE_1_FLAGS;
            option text = STRING_TOKEN(STR_2), value = BSSA_VALUE_2, flags = BSSA_VALUE_2_FLAGS;
            option text = STRING_TOKEN(STR_4), value = BSSA_VALUE_4, flags = BSSA_VALUE_4_FLAGS;
            option text = STRING_TOKEN(STR_8), value = BSSA_VALUE_8, flags = BSSA_VALUE_8_FLAGS;
        endoneof;

        oneof varid = SOCKET_MEMORY_CONFIGURATION.BiosSsaCtlAll,
            prompt  = STRING_TOKEN(STR_BIOS_SSA_CTLALL_PROMPT),
            help    = STRING_TOKEN(STR_BIOS_SSA_CTLALL_HELP),
            flags   = RESET_REQUIRED,
            option text = STRING_TOKEN(STR_1), value = BIOS_SSA_RMT_DEFAULT_VALUE, flags = BSSA_VALUE_1_FLAGS;
            option text = STRING_TOKEN(STR_2), value = BSSA_VALUE_2, flags = BSSA_VALUE_2_FLAGS;
            option text = STRING_TOKEN(STR_4), value = BSSA_VALUE_4, flags = BSSA_VALUE_4_FLAGS;
            option text = STRING_TOKEN(STR_8), value = BSSA_VALUE_8, flags = BSSA_VALUE_8_FLAGS;
        endoneof;

        oneof varid = SOCKET_MEMORY_CONFIGURATION.BiosSsaEridDelay,
            prompt  = STRING_TOKEN(STR_BIOS_SSA_ERID_DELAY_PROMPT),
            help    = STRING_TOKEN(STR_BIOS_SSA_ERID_DELAY_HELP),
            flags   = RESET_REQUIRED,
            option text = STRING_TOKEN(STR_1), value = BIOS_SSA_RMT_DEFAULT_VALUE, flags = BSSA_VALUE_1_FLAGS;
            option text = STRING_TOKEN(STR_2), value = BSSA_VALUE_2, flags = BSSA_VALUE_2_FLAGS;
            option text = STRING_TOKEN(STR_4), value = BSSA_VALUE_4, flags = BSSA_VALUE_4_FLAGS;
            option text = STRING_TOKEN(STR_8), value = BSSA_VALUE_8, flags = BSSA_VALUE_8_FLAGS;
        endoneof;

        oneof varid = SOCKET_MEMORY_CONFIGURATION.BiosSsaEridVref,
            prompt  = STRING_TOKEN(STR_BIOS_SSA_ERID_VREF_PROMPT),
            help    = STRING_TOKEN(STR_BIOS_SSA_ERID_VREF_HELP),
            flags   = RESET_REQUIRED,
            option text = STRING_TOKEN(STR_1), value = BIOS_SSA_RMT_DEFAULT_VALUE, flags = BSSA_VALUE_1_FLAGS;
            option text = STRING_TOKEN(STR_2), value = BSSA_VALUE_2, flags = BSSA_VALUE_2_FLAGS;
            option text = STRING_TOKEN(STR_4), value = BSSA_VALUE_4, flags = BSSA_VALUE_4_FLAGS;
            option text = STRING_TOKEN(STR_8), value = BSSA_VALUE_8, flags = BSSA_VALUE_8_FLAGS;
        endoneof;
    endif; //suppressif ideqval - BiosSsaStepSizeOverride

    oneof varid  = SOCKET_MEMORY_CONFIGURATION.BiosSsaDebugMessages,
        prompt   = STRING_TOKEN (STR_BIOS_SSA_RMT_DEBUG_MSGS_PROMPT),
        help     = STRING_TOKEN (STR_BIOS_SSA_RMT_DEBUG_MSGS_HELP),
        option text = STRING_TOKEN (STR_ENABLE),  value = BIOS_SSA_RMT_DEBUG_MSGS_ENABLE,  flags = BIOS_SSA_RMT_DEBUG_MSGS_EN_FLAGS;
        option text = STRING_TOKEN (STR_DISABLE), value = BIOS_SSA_RMT_DEBUG_MSGS_DISABLE, flags = BIOS_SSA_RMT_DEBUG_MSGS_DIS_FLAGS;
    endoneof;
    endif; //suppressif - EnableBiosSsaRMT
endif; //suppressif - SsaBuiltInRmtKnobVisible
    endform;
