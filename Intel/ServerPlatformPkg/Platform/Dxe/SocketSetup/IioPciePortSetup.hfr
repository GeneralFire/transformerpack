/** @file

  @copyright
  INTEL CONFIDENTIAL
  Copyright 1999 - 2020 Intel Corporation. <BR>

  The source code contained or described herein and all documents related to the
  source code ("Material") are owned by Intel Corporation or its suppliers or
  licensors. Title to the Material remains with Intel Corporation or its suppliers
  and licensors. The Material may contain trade secrets and proprietary    and
  confidential information of Intel Corporation and its suppliers and licensors,
  and is protected by worldwide copyright and trade secret laws and treaty
  provisions. No part of the Material may be used, copied, reproduced, modified,
  published, uploaded, posted, transmitted, distributed, or disclosed in any way
  without Intel's prior express written permission.

  No license under any patent, copyright, trade secret or other intellectual
  property right is granted to or conferred upon you by disclosure or delivery
  of the Materials, either expressly, by implication, inducement, estoppel or
  otherwise. Any license under such intellectual property rights must be
  express and approved by Intel in writing.

  Unless otherwise agreed by Intel in writing, you may not remove or alter
  this notice or any other notice embedded in Materials by Intel or
  Intel's suppliers or licensors in any way.
**/

    //
    // PCI-E Port Enable
    //
    #if (INDEX != 0)
      oneof varid = SOCKET_IIO_CONFIGURATION.PciePortEnable[INDEX],
          prompt  = STRING_TOKEN(STR_PCIE_PORT_ENABLE_PROMPT),
          help    = STRING_TOKEN(STR_PCIE_PORT_ENABLE_HELP),
          option text = STRING_TOKEN(STR_AUTO), value = 2, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
          option text = STRING_TOKEN(STR_NO),   value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_YES),  value = 1, flags = RESET_REQUIRED;
      endoneof;

    //
    // PCI-E Port Link
    //
      suppressif ideqval SOCKET_IIO_CONFIGURATION.PciePortEnable[INDEX] == 0x00;

        suppressif ideqval SOCKET_IIO_CONFIGURATION.PcieHotPlugEnable == IIO_OPTION_DISABLE;
          oneof varid = SOCKET_IIO_CONFIGURATION.PcieHotPlugOnPort[INDEX],
              prompt  = STRING_TOKEN(STR_PCIE_PORT_HPCAP_PROMPT),
              help    = STRING_TOKEN(STR_PCIE_PORT_HPCAP_HELP),
              option text = STRING_TOKEN(STR_AUTO), value = IIO_OPTION_AUTO, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
              option text = STRING_TOKEN(STR_DISABLE), value = IIO_OPTION_DISABLE, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_ENABLE), value = IIO_OPTION_ENABLE, flags = RESET_REQUIRED;
          endoneof;

          oneof varid = SOCKET_IIO_CONFIGURATION.SLOTHPSUP[INDEX],
              prompt  = STRING_TOKEN(STR_PCIE_PORT_HPSUPCAP_PROMPT),
              help    = STRING_TOKEN(STR_PCIE_PORT_HPSUPCAP_HELP),
              option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
              option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
          endoneof;
        endif;  //supressif PcieHotPlugEnable

        oneof varid = SOCKET_IIO_CONFIGURATION.PcieLinkDis[INDEX],
            prompt  = STRING_TOKEN(STR_PCIE_PORT_LINK_DISABLE_PROMPT),
            help    = STRING_TOKEN(STR_PCIE_PORT_LINK_DISABLE_HELP),
            option text = STRING_TOKEN(STR_NO),    value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
            option text = STRING_TOKEN(STR_YES),   value = 1, flags = RESET_REQUIRED;
        endoneof;

        endif;  //supressif PciePortEnable

        suppressif ideqval SOCKET_IIO_CONFIGURATION.PciePortEnable[INDEX] == 0x00;
      #endif // INDEX != 0

        //
        // PCI-E Port Gen3 Support
        //
        oneof varid     = SOCKET_IIO_CONFIGURATION.PciePortLinkSpeed[INDEX],
            prompt          = STRING_TOKEN(STR_PCIE_PORT_LINK_SPEED_PROMPT),
            help            = STRING_TOKEN(STR_PCIE_PORT_LINK_SPEED_HELP),
          #if (INDEX == 0)
            #if (EBG_SC_FLAG == 1) && defined (CLX_HOST)
            // EBG A0 CLX VV WA: Use Gen1 as default for EBG + CLX
              option text     = STRING_TOKEN(STR_AUTO),        value = PCIE_LINK_SPEED_AUTO, flags = RESET_REQUIRED;
              option text     = STRING_TOKEN(STR_PCIE_GEN1),   value = PCIE_LINK_SPEED_GEN1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
              option text     = STRING_TOKEN(STR_PCIE_GEN2),   value = PCIE_LINK_SPEED_GEN2, flags = RESET_REQUIRED;
              option text     = STRING_TOKEN(STR_PCIE_GEN3),   value = PCIE_LINK_SPEED_GEN3, flags = RESET_REQUIRED;
            #else
              option text     = STRING_TOKEN(STR_AUTO),        value = PCIE_LINK_SPEED_AUTO, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
              option text     = STRING_TOKEN(STR_PCIE_GEN1),   value = PCIE_LINK_SPEED_GEN1, flags = RESET_REQUIRED;
              option text     = STRING_TOKEN(STR_PCIE_GEN2),   value = PCIE_LINK_SPEED_GEN2, flags = RESET_REQUIRED;
              option text     = STRING_TOKEN(STR_PCIE_GEN3),   value = PCIE_LINK_SPEED_GEN3, flags = RESET_REQUIRED;
            #endif // EBG_SC_FLAG == 1 && CLX_HOST
          #else
            option text     = STRING_TOKEN(STR_AUTO),        value = PCIE_LINK_SPEED_AUTO, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text     = STRING_TOKEN(STR_PCIE_GEN1),   value = PCIE_LINK_SPEED_GEN1, flags = RESET_REQUIRED;
            option text     = STRING_TOKEN(STR_PCIE_GEN2),   value = PCIE_LINK_SPEED_GEN2, flags = RESET_REQUIRED;
            option text     = STRING_TOKEN(STR_PCIE_GEN3),   value = PCIE_LINK_SPEED_GEN3, flags = RESET_REQUIRED;
            #if(defined (ICX_HOST) || defined (ICXDE_HOST))
              option text     = STRING_TOKEN(STR_PCIE_GEN4),   value = PCIE_LINK_SPEED_GEN4, flags = RESET_REQUIRED;
            #endif // ICX_HOST and ICXDE_HOST
          #endif
      endoneof;

#if (LINKMAXWIDTH != 0)
      //
      // Force PCI-E Port Link Max Width
      //
      #if (INDEX == 0)
        //
        // Hidden for DMI
        //
        suppressif TRUE;
      #endif // INDEX != 0

        oneof varid = SOCKET_IIO_CONFIGURATION.PciePortLinkMaxWidth[INDEX],
          prompt  = STRING_TOKEN(STR_PCIE_PORT_LINK_MAXWIDTH_PROMPT),
          help    = STRING_TOKEN(STR_PCIE_PORT_LINK_MAXWIDTH_HELP),
            option text = STRING_TOKEN(STR_PCIE_PORT_LINK_MAXWIDTH_AUTO), value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
          #if (LINKMAXWIDTH == 4 || LINKMAXWIDTH == 8 || LINKMAXWIDTH == 16)
            option text = STRING_TOKEN(STR_PCIE_PORT_LINK_MAXWIDTH_X1),   value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_PCIE_PORT_LINK_MAXWIDTH_X2),   value = 2, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_PCIE_PORT_LINK_MAXWIDTH_X4),   value = 3, flags = RESET_REQUIRED;
          #endif
          #if (LINKMAXWIDTH == 8 || LINKMAXWIDTH == 16)
            option text = STRING_TOKEN(STR_PCIE_PORT_LINK_MAXWIDTH_X8),   value = 4, flags = RESET_REQUIRED;
          #endif
          #if (LINKMAXWIDTH == 16)
            option text = STRING_TOKEN(STR_PCIE_PORT_LINK_MAXWIDTH_X16),  value = 5, flags = RESET_REQUIRED;
          #endif
        endoneof;

      #if (INDEX == 0)
        endif;  //suppressif PciePortLinkMaxWidth
      #endif
#endif

        //
        // PCI-E Port De-Emphasis control
        //
      suppressif ideqval SOCKET_IIO_CONFIGURATION.PciePortLinkSpeed[INDEX] == 1;
        oneof varid = SOCKET_IIO_CONFIGURATION.DeEmphasis[INDEX],
            prompt  = STRING_TOKEN(STR_PCIE_PORT_DEEMPHASIS_PROMPT),
            help    = STRING_TOKEN(STR_PCIE_PORT_DEEMPHASIS_HELP),
         #if (INDEX == 0)
            option text = STRING_TOKEN(STR_60DB), value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
            option text = STRING_TOKEN(STR_35DB),  value = 1, flags = RESET_REQUIRED;
         #else
            option text = STRING_TOKEN(STR_60DB), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_35DB),  value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
         #endif
        endoneof;
      endif;

      #if (INDEX != 0)
        endif;  //supressif PciePortEnable
      #endif // INDEX != 0

      //
      // PCI-E Port Link Status
      //
      text
          help   = STRING_TOKEN(STR_NULL_STRING),
          text   = STRING_TOKEN(STR_LINK_STATUS),
          #if INDEX == 0
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO0PORT0),
          #elif INDEX == 1
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO0PORT1),
          #elif INDEX == 2
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO0PORT2),
          #elif INDEX == 3
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO0PORT3),
          #elif INDEX == 4
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO0PORT4),
          #elif INDEX == 5
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO0PORT5),
          #elif INDEX == 6
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO0PORT6),
          #elif INDEX == 7
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO0PORT7),
          #elif INDEX == 8
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO0PORT8),
          #elif INDEX == 9
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO0PORT9),
          #elif INDEX == 10
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO0PORT10),
          #elif INDEX == 11
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO0PORT11),
          #elif INDEX == 12
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO0PORT12),
          #elif INDEX == 13
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO0PORT13),
          #elif INDEX == 14
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO0PORT14),
          #elif INDEX == 15
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO0PORT15),
          #elif INDEX == 16
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO0PORT16),
          #elif INDEX == 17
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO0PORT17),
          #elif INDEX == 18
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO0PORT18),
          #elif INDEX == 19
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO0PORT19),
          #elif INDEX == 20
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO0PORT20),
          #elif INDEX == 21
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO1PORT0),
          #elif INDEX == 22
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO1PORT1),
          #elif INDEX == 23
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO1PORT2),
          #elif INDEX == 24
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO1PORT3),
          #elif INDEX == 25
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO1PORT4),
          #elif INDEX == 26
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO1PORT5),
          #elif INDEX == 27
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO1PORT6),
          #elif INDEX == 28
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO1PORT7),
          #elif INDEX == 29
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO1PORT8),
          #elif INDEX == 30
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO1PORT9),
          #elif INDEX == 31
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO1PORT10),
          #elif INDEX == 32
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO1PORT11),
          #elif INDEX == 33
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO1PORT12),
          #elif INDEX == 34
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO1PORT13),
          #elif INDEX == 35
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO1PORT14),
          #elif INDEX == 36
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO1PORT15),
          #elif INDEX == 37
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO1PORT16),
          #elif INDEX == 38
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO1PORT17),
          #elif INDEX == 39
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO1PORT18),
          #elif INDEX == 40
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO1PORT19),
          #elif INDEX == 41
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO1PORT20),
          #elif INDEX == 42
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO2PORT0),
          #elif INDEX == 43
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO2PORT1),
          #elif INDEX == 44
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO2PORT2),
          #elif INDEX == 45
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO2PORT3),
          #elif INDEX == 46
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO2PORT4),
          #elif INDEX == 47
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO2PORT5),
          #elif INDEX == 48
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO2PORT6),
          #elif INDEX == 49
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO2PORT7),
          #elif INDEX == 50
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO2PORT8),
          #elif INDEX == 51
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO2PORT9),
          #elif INDEX == 52
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO2PORT10),
          #elif INDEX == 53
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO2PORT11),
          #elif INDEX == 54
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO2PORT12),
          #elif INDEX == 55
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO2PORT13),
          #elif INDEX == 56
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO2PORT14),
          #elif INDEX == 57
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO2PORT15),
          #elif INDEX == 58
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO2PORT16),
          #elif INDEX == 59
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO2PORT17),
          #elif INDEX == 60
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO2PORT18),
          #elif INDEX == 61
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO2PORT19),
          #elif INDEX == 62
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO2PORT20),
          #elif INDEX == 63
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO3PORT0),
          #elif INDEX == 64
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO3PORT1),
          #elif INDEX == 65
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO3PORT2),
          #elif INDEX == 66
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO3PORT3),
          #elif INDEX == 67
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO3PORT4),
          #elif INDEX == 68
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO3PORT5),
          #elif INDEX == 69
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO3PORT6),
          #elif INDEX == 70
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO3PORT7),
          #elif INDEX == 71
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO3PORT8),
          #elif INDEX == 72
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO3PORT9),
          #elif INDEX == 73
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO3PORT10),
          #elif INDEX == 74
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO3PORT11),
          #elif INDEX == 75
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO3PORT12),
          #elif INDEX == 76
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO3PORT13),
          #elif INDEX == 77
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO3PORT14),
          #elif INDEX == 78
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO3PORT15),
          #elif INDEX == 79
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO3PORT16),
          #elif INDEX == 80
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO3PORT17),
          #elif INDEX == 81
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO3PORT18),
          #elif INDEX == 82
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO3PORT19),
          #elif INDEX == 83
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO3PORT20),
          #elif INDEX == 84
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO4PORT0),
          #elif INDEX == 85
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO4PORT1),
          #elif INDEX == 86
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO4PORT2),
          #elif INDEX == 87
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO4PORT3),
          #elif INDEX == 88
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO4PORT4),
          #elif INDEX == 89
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO4PORT5),
          #elif INDEX == 90
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO4PORT6),
          #elif INDEX == 91
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO4PORT7),
          #elif INDEX == 92
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO4PORT8),
          #elif INDEX == 93
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO4PORT9),
          #elif INDEX == 94
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO4PORT10),
          #elif INDEX == 95
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO4PORT11),
          #elif INDEX == 96
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO4PORT12),
          #elif INDEX == 97
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO4PORT13),
          #elif INDEX == 98
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO4PORT14),
          #elif INDEX == 99
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO4PORT15),
          #elif INDEX == 100
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO4PORT16),
          #elif INDEX == 101
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO4PORT17),
          #elif INDEX == 102
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO4PORT18),
          #elif INDEX == 103
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO4PORT19),
          #elif INDEX == 104
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO4PORT20),
          #elif INDEX == 105
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO5PORT0),
          #elif INDEX == 106
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO5PORT1),
          #elif INDEX == 107
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO5PORT2),
          #elif INDEX == 108
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO5PORT3),
          #elif INDEX == 109
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO5PORT4),
          #elif INDEX == 110
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO5PORT5),
          #elif INDEX == 111
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO5PORT6),
          #elif INDEX == 112
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO5PORT7),
          #elif INDEX == 113
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO5PORT8),
          #elif INDEX == 114
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO5PORT9),
          #elif INDEX == 115
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO5PORT10),
          #elif INDEX == 116
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO5PORT11),
          #elif INDEX == 117
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO5PORT12),
          #elif INDEX == 118
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO5PORT13),
          #elif INDEX == 119
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO5PORT14),
          #elif INDEX == 120
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO5PORT15),
          #elif INDEX == 121
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO5PORT16),
          #elif INDEX == 122
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO5PORT17),
          #elif INDEX == 123
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO5PORT18),
          #elif INDEX == 124
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO5PORT19),
          #elif INDEX == 125
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO5PORT20),
          #elif INDEX == 126
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO6PORT0),
          #elif INDEX == 127
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO6PORT1),
          #elif INDEX == 128
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO6PORT2),
          #elif INDEX == 129
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO6PORT3),
          #elif INDEX == 130
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO6PORT4),
          #elif INDEX == 131
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO6PORT5),
          #elif INDEX == 132
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO6PORT6),
          #elif INDEX == 133
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO6PORT7),
          #elif INDEX == 134
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO6PORT8),
          #elif INDEX == 135
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO6PORT9),
          #elif INDEX == 136
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO6PORT10),
          #elif INDEX == 137
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO6PORT11),
          #elif INDEX == 138
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO6PORT12),
          #elif INDEX == 139
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO6PORT13),
          #elif INDEX == 140
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO6PORT14),
          #elif INDEX == 141
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO6PORT15),
          #elif INDEX == 142
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO6PORT16),
          #elif INDEX == 143
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO6PORT17),
          #elif INDEX == 144
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO6PORT18),
          #elif INDEX == 145
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO6PORT19),
          #elif INDEX == 146
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO6PORT20),
          #elif INDEX == 147
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO7PORT0),
          #elif INDEX == 148
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO7PORT1),
          #elif INDEX == 149
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO7PORT2),
          #elif INDEX == 150
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO7PORT3),
          #elif INDEX == 151
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO7PORT4),
          #elif INDEX == 152
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO7PORT5),
          #elif INDEX == 153
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO7PORT6),
          #elif INDEX == 154
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO7PORT7),
          #elif INDEX == 155
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO7PORT8),
          #elif INDEX == 156
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO7PORT9),
          #elif INDEX == 157
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO7PORT10),
          #elif INDEX == 158
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO7PORT11),
          #elif INDEX == 159
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO7PORT12),
          #elif INDEX == 160
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO7PORT13),
          #elif INDEX == 161
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO7PORT14),
          #elif INDEX == 162
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO7PORT15),
          #elif INDEX == 163
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO7PORT16),
          #elif INDEX == 164
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO7PORT17),
          #elif INDEX == 165
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO7PORT18),
          #elif INDEX == 166
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO7PORT19),
          #elif INDEX == 167
            text   = STRING_TOKEN(STR_LINK_STATUS_IIO7PORT20),
          #else
            #error missing lookup for STR_LINK_STATUS for given INDEX
          #endif
      flags  = 0, key = 0;


      //
      // PCI-E Port Max Link Width Status
      //
      text
          help   = STRING_TOKEN(STR_NULL_STRING),
          text   = STRING_TOKEN(STR_MAXLINK_STATUS),
          #if INDEX == 0
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO0PORT0),
          #elif INDEX == 1
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO0PORT1),
          #elif INDEX == 2
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO0PORT2),
          #elif INDEX == 3
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO0PORT3),
          #elif INDEX == 4
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO0PORT4),
          #elif INDEX == 5
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO0PORT5),
          #elif INDEX == 6
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO0PORT6),
          #elif INDEX == 7
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO0PORT7),
          #elif INDEX == 8
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO0PORT8),
          #elif INDEX == 9
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO0PORT9),
          #elif INDEX == 10
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO0PORT10),
          #elif INDEX == 11
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO0PORT11),
          #elif INDEX == 12
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO0PORT12),
          #elif INDEX == 13
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO0PORT13),
          #elif INDEX == 14
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO0PORT14),
          #elif INDEX == 15
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO0PORT15),
          #elif INDEX == 16
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO0PORT16),
          #elif INDEX == 17
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO0PORT17),
          #elif INDEX == 18
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO0PORT18),
          #elif INDEX == 19
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO0PORT19),
          #elif INDEX == 20
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO0PORT20),
          #elif INDEX == 21
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO1PORT0),
          #elif INDEX == 22
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO1PORT1),
          #elif INDEX == 23
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO1PORT2),
          #elif INDEX == 24
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO1PORT3),
          #elif INDEX == 25
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO1PORT4),
          #elif INDEX == 26
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO1PORT5),
          #elif INDEX == 27
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO1PORT6),
          #elif INDEX == 28
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO1PORT7),
          #elif INDEX == 29
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO1PORT8),
          #elif INDEX == 30
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO1PORT9),
          #elif INDEX == 31
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO1PORT10),
          #elif INDEX == 32
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO1PORT11),
          #elif INDEX == 33
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO1PORT12),
          #elif INDEX == 34
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO1PORT13),
          #elif INDEX == 35
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO1PORT14),
          #elif INDEX == 36
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO1PORT15),
          #elif INDEX == 37
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO1PORT16),
          #elif INDEX == 38
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO1PORT17),
          #elif INDEX == 39
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO1PORT18),
          #elif INDEX == 40
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO1PORT19),
          #elif INDEX == 41
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO1PORT20),
          #elif INDEX == 42
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO2PORT0),
          #elif INDEX == 43
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO2PORT1),
          #elif INDEX == 44
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO2PORT2),
          #elif INDEX == 45
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO2PORT3),
          #elif INDEX == 46
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO2PORT4),
          #elif INDEX == 47
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO2PORT5),
          #elif INDEX == 48
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO2PORT6),
          #elif INDEX == 49
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO2PORT7),
          #elif INDEX == 50
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO2PORT8),
          #elif INDEX == 51
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO2PORT9),
          #elif INDEX == 52
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO2PORT10),
          #elif INDEX == 53
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO2PORT11),
          #elif INDEX == 54
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO2PORT12),
          #elif INDEX == 55
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO2PORT13),
          #elif INDEX == 56
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO2PORT14),
          #elif INDEX == 57
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO2PORT15),
          #elif INDEX == 58
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO2PORT16),
          #elif INDEX == 59
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO2PORT17),
          #elif INDEX == 60
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO2PORT18),
          #elif INDEX == 61
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO2PORT19),
          #elif INDEX == 62
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO2PORT20),
          #elif INDEX == 63
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO3PORT0),
          #elif INDEX == 64
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO3PORT1),
          #elif INDEX == 65
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO3PORT2),
          #elif INDEX == 66
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO3PORT3),
          #elif INDEX == 67
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO3PORT4),
          #elif INDEX == 68
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO3PORT5),
          #elif INDEX == 69
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO3PORT6),
          #elif INDEX == 70
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO3PORT7),
          #elif INDEX == 71
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO3PORT8),
          #elif INDEX == 72
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO3PORT9),
          #elif INDEX == 73
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO3PORT10),
          #elif INDEX == 74
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO3PORT11),
          #elif INDEX == 75
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO3PORT12),
          #elif INDEX == 76
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO3PORT13),
          #elif INDEX == 77
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO3PORT14),
          #elif INDEX == 78
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO3PORT15),
          #elif INDEX == 79
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO3PORT16),
          #elif INDEX == 80
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO3PORT17),
          #elif INDEX == 81
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO3PORT18),
          #elif INDEX == 82
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO3PORT19),
          #elif INDEX == 83
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO3PORT20),
          #elif INDEX == 84
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO4PORT0),
          #elif INDEX == 85
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO4PORT1),
          #elif INDEX == 86
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO4PORT2),
          #elif INDEX == 87
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO4PORT3),
          #elif INDEX == 88
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO4PORT4),
          #elif INDEX == 89
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO4PORT5),
          #elif INDEX == 90
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO4PORT6),
          #elif INDEX == 91
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO4PORT7),
          #elif INDEX == 92
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO4PORT8),
          #elif INDEX == 93
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO4PORT9),
          #elif INDEX == 94
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO4PORT10),
          #elif INDEX == 95
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO4PORT11),
          #elif INDEX == 96
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO4PORT12),
          #elif INDEX == 97
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO4PORT13),
          #elif INDEX == 98
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO4PORT14),
          #elif INDEX == 99
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO4PORT15),
          #elif INDEX == 100
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO4PORT16),
          #elif INDEX == 101
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO4PORT17),
          #elif INDEX == 102
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO4PORT18),
          #elif INDEX == 103
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO4PORT19),
          #elif INDEX == 104
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO4PORT20),
          #elif INDEX == 105
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO5PORT0),
          #elif INDEX == 106
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO5PORT1),
          #elif INDEX == 107
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO5PORT2),
          #elif INDEX == 108
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO5PORT3),
          #elif INDEX == 109
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO5PORT4),
          #elif INDEX == 110
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO5PORT5),
          #elif INDEX == 111
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO5PORT6),
          #elif INDEX == 112
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO5PORT7),
          #elif INDEX == 113
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO5PORT8),
          #elif INDEX == 114
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO5PORT9),
          #elif INDEX == 115
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO5PORT10),
          #elif INDEX == 116
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO5PORT11),
          #elif INDEX == 117
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO5PORT12),
          #elif INDEX == 118
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO5PORT13),
          #elif INDEX == 119
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO5PORT14),
          #elif INDEX == 120
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO5PORT15),
          #elif INDEX == 121
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO5PORT16),
          #elif INDEX == 122
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO5PORT17),
          #elif INDEX == 123
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO5PORT18),
          #elif INDEX == 124
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO5PORT19),
          #elif INDEX == 125
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO5PORT20),
          #elif INDEX == 126
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO6PORT0),
          #elif INDEX == 127
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO6PORT1),
          #elif INDEX == 128
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO6PORT2),
          #elif INDEX == 129
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO6PORT3),
          #elif INDEX == 130
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO6PORT4),
          #elif INDEX == 131
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO6PORT5),
          #elif INDEX == 132
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO6PORT6),
          #elif INDEX == 133
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO6PORT7),
          #elif INDEX == 134
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO6PORT8),
          #elif INDEX == 135
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO6PORT9),
          #elif INDEX == 136
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO6PORT10),
          #elif INDEX == 137
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO6PORT11),
          #elif INDEX == 138
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO6PORT12),
          #elif INDEX == 139
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO6PORT13),
          #elif INDEX == 140
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO6PORT14),
          #elif INDEX == 141
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO6PORT15),
          #elif INDEX == 142
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO6PORT16),
          #elif INDEX == 143
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO6PORT17),
          #elif INDEX == 144
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO6PORT18),
          #elif INDEX == 145
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO6PORT19),
          #elif INDEX == 146
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO6PORT20),
          #elif INDEX == 147
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO7PORT0),
          #elif INDEX == 148
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO7PORT1),
          #elif INDEX == 149
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO7PORT2),
          #elif INDEX == 150
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO7PORT3),
          #elif INDEX == 151
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO7PORT4),
          #elif INDEX == 152
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO7PORT5),
          #elif INDEX == 153
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO7PORT6),
          #elif INDEX == 154
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO7PORT7),
          #elif INDEX == 155
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO7PORT8),
          #elif INDEX == 156
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO7PORT9),
          #elif INDEX == 157
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO7PORT10),
          #elif INDEX == 158
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO7PORT11),
          #elif INDEX == 159
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO7PORT12),
          #elif INDEX == 160
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO7PORT13),
          #elif INDEX == 161
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO7PORT14),
          #elif INDEX == 162
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO7PORT15),
          #elif INDEX == 163
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO7PORT16),
          #elif INDEX == 164
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO7PORT17),
          #elif INDEX == 165
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO7PORT18),
          #elif INDEX == 166
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO7PORT19),
          #elif INDEX == 167
            text   = STRING_TOKEN(STR_MAXLINK_STATUS_IIO7PORT20),
          #else
            #error missing lookup for STR_MAXLINK_STATS for given INDEX
          #endif
          flags  = 0, key = 0;

      //
      // PCI-E Port Link Speed Status
      //
  #if (INDEX != 0)
    suppressif ideqval SOCKET_IIO_CONFIGURATION.PciePortEnable[INDEX] == 0x00;
  #endif // INDEX != 0
      text
          help   = STRING_TOKEN(STR_NULL_STRING),
          text   = STRING_TOKEN(STR_PCIESPEED_STATUS),
          #if INDEX == 0
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO0PORT0),
          #elif INDEX == 1
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO0PORT1),
          #elif INDEX == 2
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO0PORT2),
          #elif INDEX == 3
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO0PORT3),
          #elif INDEX == 4
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO0PORT4),
          #elif INDEX == 5
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO0PORT5),
          #elif INDEX == 6
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO0PORT6),
          #elif INDEX == 7
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO0PORT7),
          #elif INDEX == 8
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO0PORT8),
          #elif INDEX == 9
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO0PORT9),
          #elif INDEX == 10
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO0PORT10),
          #elif INDEX == 11
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO0PORT11),
          #elif INDEX == 12
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO0PORT12),
          #elif INDEX == 13
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO0PORT13),
          #elif INDEX == 14
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO0PORT14),
          #elif INDEX == 15
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO0PORT15),
          #elif INDEX == 16
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO0PORT16),
          #elif INDEX == 17
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO0PORT17),
          #elif INDEX == 18
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO0PORT18),
          #elif INDEX == 19
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO0PORT19),
          #elif INDEX == 20
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO0PORT20),
          #elif INDEX == 21
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO1PORT0),
          #elif INDEX == 22
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO1PORT1),
          #elif INDEX == 23
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO1PORT2),
          #elif INDEX == 24
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO1PORT3),
          #elif INDEX == 25
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO1PORT4),
          #elif INDEX == 26
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO1PORT5),
          #elif INDEX == 27
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO1PORT6),
          #elif INDEX == 28
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO1PORT7),
          #elif INDEX == 29
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO1PORT8),
          #elif INDEX == 30
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO1PORT9),
          #elif INDEX == 31
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO1PORT10),
          #elif INDEX == 32
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO1PORT11),
          #elif INDEX == 33
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO1PORT12),
          #elif INDEX == 34
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO1PORT13),
          #elif INDEX == 35
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO1PORT14),
          #elif INDEX == 36
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO1PORT15),
          #elif INDEX == 37
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO1PORT16),
          #elif INDEX == 38
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO1PORT17),
          #elif INDEX == 39
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO1PORT18),
          #elif INDEX == 40
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO1PORT19),
          #elif INDEX == 41
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO1PORT20),
          #elif INDEX == 42
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO2PORT0),
          #elif INDEX == 43
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO2PORT1),
          #elif INDEX == 44
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO2PORT2),
          #elif INDEX == 45
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO2PORT3),
          #elif INDEX == 46
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO2PORT4),
          #elif INDEX == 47
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO2PORT5),
          #elif INDEX == 48
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO2PORT6),
          #elif INDEX == 49
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO2PORT7),
          #elif INDEX == 50
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO2PORT8),
          #elif INDEX == 51
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO2PORT9),
          #elif INDEX == 52
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO2PORT10),
          #elif INDEX == 53
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO2PORT11),
          #elif INDEX == 54
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO2PORT12),
          #elif INDEX == 55
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO2PORT13),
          #elif INDEX == 56
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO2PORT14),
          #elif INDEX == 57
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO2PORT15),
          #elif INDEX == 58
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO2PORT16),
          #elif INDEX == 59
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO2PORT17),
          #elif INDEX == 60
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO2PORT18),
          #elif INDEX == 61
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO2PORT19),
          #elif INDEX == 62
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO2PORT20),
          #elif INDEX == 63
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO3PORT0),
          #elif INDEX == 64
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO3PORT1),
          #elif INDEX == 65
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO3PORT2),
          #elif INDEX == 66
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO3PORT3),
          #elif INDEX == 67
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO3PORT4),
          #elif INDEX == 68
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO3PORT5),
          #elif INDEX == 69
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO3PORT6),
          #elif INDEX == 70
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO3PORT7),
          #elif INDEX == 71
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO3PORT8),
          #elif INDEX == 72
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO3PORT9),
          #elif INDEX == 73
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO3PORT10),
          #elif INDEX == 74
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO3PORT11),
          #elif INDEX == 75
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO3PORT12),
          #elif INDEX == 76
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO3PORT13),
          #elif INDEX == 77
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO3PORT14),
          #elif INDEX == 78
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO3PORT15),
          #elif INDEX == 79
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO3PORT16),
          #elif INDEX == 80
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO3PORT17),
          #elif INDEX == 81
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO3PORT18),
          #elif INDEX == 82
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO3PORT19),
          #elif INDEX == 83
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO3PORT20),
          #elif INDEX == 84
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO4PORT0),
          #elif INDEX == 85
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO4PORT1),
          #elif INDEX == 86
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO4PORT2),
          #elif INDEX == 87
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO4PORT3),
          #elif INDEX == 88
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO4PORT4),
          #elif INDEX == 89
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO4PORT5),
          #elif INDEX == 90
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO4PORT6),
          #elif INDEX == 91
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO4PORT7),
          #elif INDEX == 92
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO4PORT8),
          #elif INDEX == 93
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO4PORT9),
          #elif INDEX == 94
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO4PORT10),
          #elif INDEX == 95
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO4PORT11),
          #elif INDEX == 96
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO4PORT12),
          #elif INDEX == 97
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO4PORT13),
          #elif INDEX == 98
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO4PORT14),
          #elif INDEX == 99
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO4PORT15),
          #elif INDEX == 100
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO4PORT16),
          #elif INDEX == 101
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO4PORT17),
          #elif INDEX == 102
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO4PORT18),
          #elif INDEX == 103
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO4PORT19),
          #elif INDEX == 104
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO4PORT20),
          #elif INDEX == 105
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO5PORT0),
          #elif INDEX == 106
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO5PORT1),
          #elif INDEX == 107
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO5PORT2),
          #elif INDEX == 108
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO5PORT3),
          #elif INDEX == 109
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO5PORT4),
          #elif INDEX == 110
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO5PORT5),
          #elif INDEX == 111
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO5PORT6),
          #elif INDEX == 112
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO5PORT7),
          #elif INDEX == 113
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO5PORT8),
          #elif INDEX == 114
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO5PORT9),
          #elif INDEX == 115
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO5PORT10),
          #elif INDEX == 116
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO5PORT11),
          #elif INDEX == 117
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO5PORT12),
          #elif INDEX == 118
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO5PORT13),
          #elif INDEX == 119
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO5PORT14),
          #elif INDEX == 120
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO5PORT15),
          #elif INDEX == 121
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO5PORT16),
          #elif INDEX == 122
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO5PORT17),
          #elif INDEX == 123
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO5PORT18),
          #elif INDEX == 124
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO5PORT19),
          #elif INDEX == 125
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO5PORT20),
          #elif INDEX == 126
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO6PORT0),
          #elif INDEX == 127
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO6PORT1),
          #elif INDEX == 128
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO6PORT2),
          #elif INDEX == 129
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO6PORT3),
          #elif INDEX == 130
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO6PORT4),
          #elif INDEX == 131
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO6PORT5),
          #elif INDEX == 132
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO6PORT6),
          #elif INDEX == 133
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO6PORT7),
          #elif INDEX == 134
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO6PORT8),
          #elif INDEX == 135
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO6PORT9),
          #elif INDEX == 136
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO6PORT10),
          #elif INDEX == 137
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO6PORT11),
          #elif INDEX == 138
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO6PORT12),
          #elif INDEX == 139
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO6PORT13),
          #elif INDEX == 140
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO6PORT14),
          #elif INDEX == 141
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO6PORT15),
          #elif INDEX == 142
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO6PORT16),
          #elif INDEX == 143
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO6PORT17),
          #elif INDEX == 144
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO6PORT18),
          #elif INDEX == 145
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO6PORT19),
          #elif INDEX == 146
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO6PORT20),
          #elif INDEX == 147
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO7PORT0),
          #elif INDEX == 148
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO7PORT1),
          #elif INDEX == 149
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO7PORT2),
          #elif INDEX == 150
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO7PORT3),
          #elif INDEX == 151
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO7PORT4),
          #elif INDEX == 152
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO7PORT5),
          #elif INDEX == 153
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO7PORT6),
          #elif INDEX == 154
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO7PORT7),
          #elif INDEX == 155
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO7PORT8),
          #elif INDEX == 156
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO7PORT9),
          #elif INDEX == 157
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO7PORT10),
          #elif INDEX == 158
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO7PORT11),
          #elif INDEX == 159
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO7PORT12),
          #elif INDEX == 160
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO7PORT13),
          #elif INDEX == 161
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO7PORT14),
          #elif INDEX == 162
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO7PORT15),
          #elif INDEX == 163
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO7PORT16),
          #elif INDEX == 164
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO7PORT17),
          #elif INDEX == 165
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO7PORT18),
          #elif INDEX == 166
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO7PORT19),
          #elif INDEX == 167
            text   = STRING_TOKEN(STR_PCIESPEED_STATUS_IIO7PORT20),
          #else
            #error missing lookup for STR_PCISPEED_STATUS for given INDEX
          #endif
          flags  = 0, key = 0;

    #if (INDEX != 0)
      endif;  //supressif PCI-E Port Link Speed Status
    #endif // INDEX != 0

      //
      // PCI-E Port Clocking
      //
      oneof varid = SOCKET_IIO_CONFIGURATION.PcieCommonClock[INDEX],
          prompt  = STRING_TOKEN(STR_PCIE_PORT_CLOCKING_PROMPT),
          help    = STRING_TOKEN(STR_PCIE_PORT_CLOCKING_HELP),
          option text = STRING_TOKEN(STR_DISTINCT), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_COMMON),   value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
      endoneof;

      //
      // PCI-E Port Clock Gating
      //
      oneof varid = SOCKET_IIO_CONFIGURATION.PciePortClkGateEnable[INDEX],
        prompt  = STRING_TOKEN(STR_PCIE_PORT_CLOCK_GATING_PROMPT),
        help    = STRING_TOKEN(STR_PCIE_PORT_CLOCK_GATING_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
      endoneof;

      //
      // PCI-E Data Link Feature Exchange Enable
      //
      oneof varid = SOCKET_IIO_CONFIGURATION.PcieDataLinkFeatureExchangeEnable[INDEX],
        prompt  = STRING_TOKEN(STR_PCIE_PORT_DATA_LINK_FEATURES_EXCHANGE_ENABLE_PROMPT),
        help    = STRING_TOKEN(STR_PCIE_PORT_DATA_LINK_FEATURES_EXCHANGE_ENABLE_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
      endoneof;

      //
      // PCI-E Max Payload Size Supported
      //
      oneof varid = SOCKET_IIO_CONFIGURATION.PcieMaxPayload[INDEX],
#if INDEX == 0
          prompt  = STRING_TOKEN(STR_DMI_PORT_MPSS_PROMPT),
          help    = STRING_TOKEN(STR_DMI_PORT_MPSS_HELP),
#else
          prompt  = STRING_TOKEN(STR_PCIE_PORT_MPSS_PROMPT),
          help    = STRING_TOKEN(STR_PCIE_PORT_MPSS_HELP),
#endif
          option text = STRING_TOKEN(STR_128B),   value = PCIE_MAX_PAYLOAD_128B, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_256B),   value = PCIE_MAX_PAYLOAD_256B, flags = RESET_REQUIRED;
#if !defined(SKX_HOST) && INDEX != 0
          option text = STRING_TOKEN(STR_512B),   value = PCIE_MAX_PAYLOAD_512B, flags = RESET_REQUIRED;
#endif
          option text = STRING_TOKEN(STR_AUTO),   value = PCIE_MAX_PAYLOAD_AUTO, flags = RESET_REQUIRED| MANUFACTURING | DEFAULT;
      endoneof;

      //
      // PCI-E Port DState
      //
      oneof varid = SOCKET_IIO_CONFIGURATION.PcieDState[INDEX],
          prompt  = STRING_TOKEN(STR_PCIE_PORT_D_STATE_PROMPT),
          help    = STRING_TOKEN(STR_PCIE_PORT_D_STATE_HELP),
          option text = STRING_TOKEN(STR_D0),   value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
          option text = STRING_TOKEN(STR_D3HOT),   value = 1, flags = RESET_REQUIRED;
      endoneof;

// HSD 4166383: Extra Global ASPM Setup Option in the PCIe Port Setup
//       Removed menu item from here and moved it to the IioSetup file.
        //
        // PCI-E Port Aspm Support
        //
        oneof varid = SOCKET_IIO_CONFIGURATION.PcieAspm[INDEX],
            prompt  = STRING_TOKEN(STR_PCIE_PORT_ASPM_PROMPT),
            help    = STRING_TOKEN(STR_PCIE_PORT_ASPM_HELP),
//Transformers_JK014***>>
            option text = STRING_TOKEN(STR_AUTO), value = PCIE_ASPM_AUTO, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_L1_ONLY), value = PCIE_ASPM_L1_ONLY, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DISABLE), value = PCIE_ASPM_DISABLE, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//Transformers_JK014***<<
        endoneof;

        suppressif ideqval SOCKET_IIO_CONFIGURATION.PcieAspm[INDEX] == 0;
        //
        // PCI-E Port L1 Latency
        //
          oneof varid = SOCKET_IIO_CONFIGURATION.PcieL1Latency[INDEX],
              prompt  = STRING_TOKEN(STR_PCIE_PORT_L1_LATENCY_PROMPT),
              help    = STRING_TOKEN(STR_PCIE_PORT_L1_LATENCY_HELP),
              option text = STRING_TOKEN(STR_L1_LT_1US),    value = 0, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_L1_1US_2US),   value = 1, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_L1_2US_4US),   value = 2, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_L1_4US_8US),   value = 3, flags = RESET_REQUIRED;
              #if (INDEX == 0) && (defined (SNR_HOST) || defined (ICXDE_HOST))
                option text = STRING_TOKEN(STR_L1_8US_16US),  value = 4, flags = RESET_REQUIRED;
                option text = STRING_TOKEN(STR_L1_16US_32US), value = 5, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
              #else
                option text = STRING_TOKEN(STR_L1_8US_16US),  value = 4, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
                option text = STRING_TOKEN(STR_L1_16US_32US), value = 5, flags = RESET_REQUIRED;
              #endif
              option text = STRING_TOKEN(STR_L1_32US_64US), value = 6, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_L1_GT_64US),   value = 7, flags = RESET_REQUIRED;
          endoneof;
        endif;
      //
      // MSI CTRL
      //
      oneof varid = SOCKET_IIO_CONFIGURATION.MsiEn[INDEX],
          prompt  = STRING_TOKEN(STR_IIO_MSI_EN_PROMPT),
          help    = STRING_TOKEN(STR_IIO_MSI_EN_HELP),
          option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
          option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      //
      // Extended Sync Mode
      //
      oneof varid = SOCKET_IIO_CONFIGURATION.ExtendedSync[INDEX],
          prompt  = STRING_TOKEN(STR_IIO_EXTENDED_SYNC_PROMPT),
          help    = STRING_TOKEN(STR_IIO_EXTENDED_SYNC_HELP),
          option text = STRING_TOKEN(STR_NO),   value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
          option text = STRING_TOKEN(STR_YES),  value = 1, flags = RESET_REQUIRED;
      endoneof;

    oneof varid = SOCKET_IIO_CONFIGURATION.ComplianceMode[INDEX],
        prompt  = STRING_TOKEN(STR_IIO_COMPLIANCE_PROMPT),
        help    = STRING_TOKEN(STR_IIO_COMPLIANCE_PROMPT_HELP),
        option text = STRING_TOKEN(STR_NO),        value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(STR_YES),       value = 1,  flags = RESET_REQUIRED;
    endoneof;

#ifdef STACK_INDEX
    suppressif ideqval SOCKET_IIO_CONFIGURATION.NtbPpd[STACK_INDEX] == 1 OR ideqval SOCKET_IIO_CONFIGURATION.NtbPpd[STACK_INDEX] == 2;
#endif
       oneof varid = SOCKET_IIO_CONFIGURATION.EOI[INDEX],
           prompt  = STRING_TOKEN(STR_IIO_EOI_PROMPT),
           help    = STRING_TOKEN(STR_IIO_EOI_PROMPT_HELP),
#if (INDEX == 0)
           option text = STRING_TOKEN(STR_DISABLE),       value = 1,  flags = RESET_REQUIRED;
           option text = STRING_TOKEN(STR_ENABLE),        value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
#else
           option text = STRING_TOKEN(STR_DISABLE),       value = 1,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
           option text = STRING_TOKEN(STR_ENABLE),        value = 0,  flags = RESET_REQUIRED;
#endif
      endoneof;
#ifdef STACK_INDEX
    endif;
#endif

    oneof varid = SOCKET_IIO_CONFIGURATION.MSIFATEN[INDEX],
        prompt  = STRING_TOKEN(STR_IIO_FATAL_ERR_OVERRIDE_PROMPT),
        help    = STRING_TOKEN(STR_IIO_FATAL_ERR_OVERRIDE_PROMPT_HELP),
        option text = STRING_TOKEN(STR_NO),        value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(STR_YES),       value = 1,  flags = RESET_REQUIRED;
    endoneof;

    oneof varid = SOCKET_IIO_CONFIGURATION.MSINFATEN[INDEX],
        prompt  = STRING_TOKEN(STR_IIO_NFATAL_ERR_OVERRIDE_PROMPT),
        help    = STRING_TOKEN(STR_IIO_NFATAL_ERR_OVERRIDE_PROMPT_HELP),
        option text = STRING_TOKEN(STR_NO),        value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(STR_YES),       value = 1,  flags = RESET_REQUIRED;
    endoneof;

    oneof varid = SOCKET_IIO_CONFIGURATION.MSICOREN[INDEX],
        prompt  = STRING_TOKEN(STR_IIO_CORR_ERR_OVERRIDE_PROMPT),
        help    = STRING_TOKEN(STR_IIO_CORR_ERR_OVERRIDE_PROMPT_HELP),
        option text = STRING_TOKEN(STR_NO),        value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(STR_YES),       value = 1,  flags = RESET_REQUIRED;
    endoneof;

    oneof varid = SOCKET_IIO_CONFIGURATION.ACPIPMEn[INDEX],
        prompt  = STRING_TOKEN(STR_IIO_ACPI_PME_INT_PROMPT),
        help    = STRING_TOKEN(STR_IIO_ACPI_PME_INT_PROMPT_HELP),
        option text = STRING_TOKEN(STR_NO),        value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(STR_YES),       value = 1,  flags = RESET_REQUIRED;
    endoneof;

    oneof varid = SOCKET_IIO_CONFIGURATION.P2PRdDis[INDEX],
        prompt  = STRING_TOKEN(STR_IIO_P2P_READ_PROMPT),
        help    = STRING_TOKEN(STR_IIO_P2P_READ_PROMPT_HELP),
        option text = STRING_TOKEN(STR_DISABLE),        value = 1,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),         value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
    endoneof;

    oneof varid = SOCKET_IIO_CONFIGURATION.DisPMETOAck[INDEX],
        prompt  = STRING_TOKEN(STR_IIO_PME2ACK_PROMPT),
        help    = STRING_TOKEN(STR_IIO_PME2ACK_PROMPT_HELP),
        option text = STRING_TOKEN(STR_DISABLE),        value = 1,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),         value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
    endoneof;

    #if (INDEX != 0)
        suppressif NOT ideqval SOCKET_IIO_CONFIGURATION.PcieAcpiHotPlugEnable == 2;
            oneof varid = SOCKET_IIO_CONFIGURATION.ACPIHP[INDEX],
                prompt  = STRING_TOKEN(STR_IIO_ACPIHP_PROMPT),
                help    = STRING_TOKEN(STR_IIO_ACPIHP_PROMPT_HELP),
                option text = STRING_TOKEN(STR_NO),        value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
                option text = STRING_TOKEN(STR_YES),       value = 1,  flags = RESET_REQUIRED;
        endoneof;
        endif;

        oneof varid = SOCKET_IIO_CONFIGURATION.ACPIPM[INDEX],
                prompt  = STRING_TOKEN(STR_IIO_ACPIPM_PROMPT),
                help    = STRING_TOKEN(STR_IIO_ACPIPM_PROMPT_HELP),
                option text = STRING_TOKEN(STR_NO),        value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
                option text = STRING_TOKEN(STR_YES),       value = 1,  flags = RESET_REQUIRED;
        endoneof;
    #endif

    //
    // PEXDEVCTRL -- need to review -- this register programming is done in SMM Error Logging
    //
    oneof varid     = SOCKET_IIO_CONFIGURATION.PcieUnsupportedRequests[INDEX],
        prompt      = STRING_TOKEN(STR_IIO_PORT_UNSUPPORTED_REQUEST_PROMPT),
        help        = STRING_TOKEN(STR_IIO_PORT_UNSUPPORTED_REQUEST_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid = SOCKET_IIO_CONFIGURATION.TXEQ[INDEX],
        prompt  = STRING_TOKEN(STR_IIO_TXEQ_PROMPT),
        help    = STRING_TOKEN(STR_IIO_TXEQ_PROMPT_HELP),
        option text = STRING_TOKEN(STR_DISABLE),        value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(STR_ENABLE),         value = 1,  flags = RESET_REQUIRED;
    endoneof;

    oneof varid = SOCKET_IIO_CONFIGURATION.SRIS[INDEX],
        prompt  = STRING_TOKEN(STR_IIO_SRIS_PROMPT),
        help    = STRING_TOKEN(STR_IIO_SRIS_PROMPT_HELP),
        option text = STRING_TOKEN(STR_NO),        value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(STR_YES),       value = 1,  flags = RESET_REQUIRED;
    endoneof;

    oneof varid = SOCKET_IIO_CONFIGURATION.SERRE[INDEX],
        prompt  = STRING_TOKEN(STR_IIO_SERRE_PROMPT),
        help    = STRING_TOKEN(STR_IIO_SERRE_PROMPT_HELP),
        #if defined (SNR_HOST)
          option text = STRING_TOKEN(STR_DISABLE),        value = 0,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),         value = 1,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        #else
          option text = STRING_TOKEN(STR_DISABLE),        value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
          option text = STRING_TOKEN(STR_ENABLE),         value = 1,  flags = RESET_REQUIRED;
        #endif
    endoneof;


//add IODC options here (only valid for multisocket projects)
suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SNR OR
           ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_ICXD;
   oneof varid = SOCKET_IIO_CONFIGURATION.IODC[INDEX],
#if INDEX >= TOTAL_PORTS_VAR     // limit of IODC array and many others
#error INDEX too big:  exceeds TOTAL_PORTS_VAR - 1
#endif
       prompt  = STRING_TOKEN(STR_IODC_PROMPT),
       help    = STRING_TOKEN(STR_IODC_PROMPT_HELP),
       option text = STRING_TOKEN(STR_IODC_GLOBAL_KTI_OPTION),        value = IODC_GLOBAL_KTI_OPTION,             flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
       option text = STRING_TOKEN(STR_AUTO),                               value = IODC_AUTO,                          flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_IODC_EN_REM_INVITOM_PUSH),           value = IODC_EN_REM_INVITOM_PUSH,           flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_IODC_EN_REM_INVITOM_ALLOCFLOW),      value = IODC_EN_REM_INVITOM_ALLOCFLOW,      flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_IODC_EN_REM_INVITOM_ALLOC_NONALLOC), value = IODC_EN_REM_INVITOM_ALLOC_NONALLOC, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(STR_IODC_EN_REM_INVITOM_AND_WCILF),      value = IODC_EN_REM_INVITOM_AND_WCILF,      flags = RESET_REQUIRED;
    endoneof;
endif;

//add NTB options below
#ifdef STACK_INDEX
suppressif NOT (ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
                ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
                ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX);
    oneof varid = SOCKET_IIO_CONFIGURATION.NtbPpd[STACK_INDEX],
          prompt  = STRING_TOKEN(STR_IIO_NTB_PPD),
          help    = STRING_TOKEN(STR_IIO_NTB_PPD_HELP),
          option text = STRING_TOKEN(STR_IIO_NTB_TB), value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
          option text = STRING_TOKEN(STR_IIO_NTB_NTB),  value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_IIO_NTB_RP),  value = 2, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval SOCKET_IIO_CONFIGURATION.NtbPpd[STACK_INDEX] == 0;
      oneof varid = SOCKET_IIO_CONFIGURATION.NtbBarSizeOverride[STACK_INDEX],  //allow BIOS to bypass BAR SZ register writes when configured as NTB
          prompt  = STRING_TOKEN(STR_IIO_SZ_ENABLE),
          help    = STRING_TOKEN(STR_IIO_SZ_ENABLE_HELP),
          option text = STRING_TOKEN(STR_NO),      value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
          option text = STRING_TOKEN(STR_YES),     value = 1,  flags = RESET_REQUIRED;
      endoneof;
    endif; //end suppression

    suppressif ideqval SOCKET_IIO_CONFIGURATION.NtbPpd[STACK_INDEX] == 0 OR ideqval SOCKET_IIO_CONFIGURATION.NtbBarSizeOverride[STACK_INDEX] == 0;
      oneof varid = SOCKET_IIO_CONFIGURATION.NtbSplitBar[STACK_INDEX],  //allow BIOS to enable Split BAR(32 bit BAR) for IMBAR2 and EMBAR2
          prompt  = STRING_TOKEN(STR_IIO_SPLIT_BAR_ENABLE),
          help    = STRING_TOKEN(STR_IIO_SPLIT_BAR_ENABLE_HELP),
          option text = STRING_TOKEN(STR_NO),      value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
          option text = STRING_TOKEN(STR_YES),     value = 1,  flags = RESET_REQUIRED;
      endoneof;

      numeric varid = SOCKET_IIO_CONFIGURATION.NtbBarSizeImBar1[STACK_INDEX],
          prompt  = STRING_TOKEN(STR_IIO_IMBAR1SZ),
          help    = STRING_TOKEN(STR_IIO_IMBAR1SZ_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0,
          maximum = 48,
          step = 1,
          default = 22, defaultstore = MyStandardDefault,
          default = 22, defaultstore = MyManufactureDefault,
      endnumeric;

    suppressif  ideqval SOCKET_IIO_CONFIGURATION.NtbSplitBar[STACK_INDEX] == 0;
      numeric varid = SOCKET_IIO_CONFIGURATION.NtbBarSizeImBar2_0[STACK_INDEX],
          prompt  = STRING_TOKEN(STR_IIO_IMBAR2_0_SZ),
          help    = STRING_TOKEN(STR_IIO_IMBAR2_0_SZ_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0,
          maximum = 39,
          step = 1,
          default = 12, defaultstore = MyStandardDefault,
          default = 12, defaultstore = MyManufactureDefault,
      endnumeric;

     numeric varid = SOCKET_IIO_CONFIGURATION.NtbBarSizeImBar2_1[STACK_INDEX],
          prompt  = STRING_TOKEN(STR_IIO_IMBAR2_1_SZ),
          help    = STRING_TOKEN(STR_IIO_IMBAR2_1_SZ_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0,
          maximum = 39,
          step = 1,
          default = 12, defaultstore = MyStandardDefault,
          default = 12, defaultstore = MyManufactureDefault,
      endnumeric;
    endif; //end suppression


    suppressif  ideqval SOCKET_IIO_CONFIGURATION.NtbSplitBar[STACK_INDEX] == 1;
      numeric varid = SOCKET_IIO_CONFIGURATION.NtbBarSizeImBar2[STACK_INDEX],
          prompt  = STRING_TOKEN(STR_IIO_IMBAR2SZ),
          help    = STRING_TOKEN(STR_IIO_IMBAR2SZ_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0,
          maximum = 48,
          step = 1,
          default = 22, defaultstore = MyStandardDefault,
          default = 22, defaultstore = MyManufactureDefault,
      endnumeric;
    endif; //end suppression

    numeric varid = SOCKET_IIO_CONFIGURATION.NtbBarSizeEmBarSZ1[STACK_INDEX],
          prompt  = STRING_TOKEN(STR_IIO_EMBAR1SZ),
          help    = STRING_TOKEN(STR_IIO_EMBAR1SZ_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0,
          maximum = 48,
          step = 1,
          default = 22, defaultstore = MyStandardDefault,
          default = 22, defaultstore = MyManufactureDefault,
      endnumeric;

    suppressif  ideqval SOCKET_IIO_CONFIGURATION.NtbSplitBar[STACK_INDEX] == 0;
      numeric varid = SOCKET_IIO_CONFIGURATION.NtbBarSizeEmBarSZ2_0[STACK_INDEX],
          prompt  = STRING_TOKEN(STR_IIO_EMBAR2_0SZ),
          help    = STRING_TOKEN(STR_IIO_EMBAR2_0SZ_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0,
          maximum = 39,
          step = 1,
          default = 12, defaultstore = MyStandardDefault,
          default = 12, defaultstore = MyManufactureDefault,
      endnumeric;

      numeric varid = SOCKET_IIO_CONFIGURATION.NtbBarSizeEmBarSZ2_1[STACK_INDEX],
          prompt  = STRING_TOKEN(STR_IIO_EMBAR2_1SZ),
          help    = STRING_TOKEN(STR_IIO_EMBAR2_1SZ_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0,
          maximum = 39,
          step = 1,
          default = 12, defaultstore = MyStandardDefault,
          default = 12, defaultstore = MyManufactureDefault,
      endnumeric;
    endif; //end suppression

    suppressif  ideqval SOCKET_IIO_CONFIGURATION.NtbSplitBar[STACK_INDEX] == 1;
      numeric varid = SOCKET_IIO_CONFIGURATION.NtbBarSizeEmBarSZ2[STACK_INDEX],
          prompt  = STRING_TOKEN(STR_IIO_EMBAR2SZ),
          help    = STRING_TOKEN(STR_IIO_EMBAR2SZ_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0,
          maximum = 48,
          step = 1,
          default = 22, defaultstore = MyStandardDefault,
          default = 22, defaultstore = MyManufactureDefault,
      endnumeric;
    endif; //end suppression

    endif; // end suppression NtbPPd or NtbBarSizeOverride
    //if the port is configured as NTB-NTB, allow the user to configure the crosslink control override
    //Configuration is as follows for SKX:
    //    11    Force NTB port to USD/DSP (ignores external NTBCROSSLINK pin)
    //    10    Force NTB port to DSD/USP (ignores external NTBCROSSLINK pin)

    //Note that this configuration is a "don't care" if port is configured as TB or NTB-RP

    suppressif ideqval SOCKET_IIO_CONFIGURATION.NtbPpd[STACK_INDEX] == 0 OR ideqval SOCKET_IIO_CONFIGURATION.NtbPpd[STACK_INDEX] == 2;

        oneof varid = SOCKET_IIO_CONFIGURATION.NtbXlinkCtlOverride[STACK_INDEX],
            prompt  = STRING_TOKEN(STR_IIO_XLINK_CTL_OVR),
            help    = STRING_TOKEN(STR_IIO_XLINK_CTL_OVR_HELP),
            option text = STRING_TOKEN(STR_IIO_XLINK_CTL_USD_DSP),    value = 3,  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IIO_XLINK_CTL_DSD_USP),    value = 2,  flags = RESET_REQUIRED;
        endoneof;

    endif;  //end suppression
   endif; //end suppression
#endif //end if STACK_INDEX

//10nm NTB configuration below
#ifdef NTB_INDEX_10NM
suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
           ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
           ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX;

  oneof varid = SOCKET_IIO_CONFIGURATION.NtbPpd[NTB_INDEX_10NM],
          prompt  = STRING_TOKEN(STR_IIO_NTB_PPD),
          help    = STRING_TOKEN(STR_IIO_NTB_PPD_HELP),
          option text = STRING_TOKEN(STR_IIO_NTB_TB),   value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
          option text = STRING_TOKEN(STR_IIO_NTB_NTB),  value = 1, flags = RESET_REQUIRED;
        endoneof;

    suppressif ideqval SOCKET_IIO_CONFIGURATION.NtbPpd[NTB_INDEX_10NM] == 0;
      oneof varid = SOCKET_IIO_CONFIGURATION.NtbBarSizeOverride[NTB_INDEX_10NM],  //allow BIOS to bypass BAR SZ register writes when configured as NTB
          prompt  = STRING_TOKEN(STR_IIO_SZ_ENABLE),
          help    = STRING_TOKEN(STR_IIO_SZ_ENABLE_HELP),
          option text = STRING_TOKEN(STR_NO),      value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
          option text = STRING_TOKEN(STR_YES),     value = 1,  flags = RESET_REQUIRED;
      endoneof;
    endif; //end suppression

    suppressif ideqval SOCKET_IIO_CONFIGURATION.NtbPpd[NTB_INDEX_10NM] == 0 OR ideqval SOCKET_IIO_CONFIGURATION.NtbBarSizeOverride[NTB_INDEX_10NM] == 0;
      oneof varid = SOCKET_IIO_CONFIGURATION.NtbSplitBar[NTB_INDEX_10NM],  //allow BIOS to enable Split BAR(32 bit BAR) for IMBAR2 and EMBAR2
          prompt  = STRING_TOKEN(STR_IIO_SPLIT_BAR_ENABLE),
          help    = STRING_TOKEN(STR_IIO_SPLIT_BAR_ENABLE_HELP),
          option text = STRING_TOKEN(STR_NO),      value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
          option text = STRING_TOKEN(STR_YES),     value = 1,  flags = RESET_REQUIRED;
      endoneof;


      numeric varid = SOCKET_IIO_CONFIGURATION.NtbBarSizeImBar1[NTB_INDEX_10NM],
          prompt  = STRING_TOKEN(STR_IIO_IMBAR1SZ),
          help    = STRING_TOKEN(STR_IIO_IMBAR1SZ_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 12,
          maximum = 51,
          step = 1,
          default = 22, defaultstore = MyStandardDefault,
          default = 22, defaultstore = MyManufactureDefault,
      endnumeric;
    endif; //end suppression

    suppressif  ideqval SOCKET_IIO_CONFIGURATION.NtbSplitBar[NTB_INDEX_10NM] == 0;
      numeric varid = SOCKET_IIO_CONFIGURATION.NtbBarSizeImBar2_0[NTB_INDEX_10NM],
          prompt  = STRING_TOKEN(STR_IIO_IMBAR2_0_SZ),
          help    = STRING_TOKEN(STR_IIO_IMBAR2_0_SZ_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 12,
          maximum = 39,
          step = 1,
          default = 12, defaultstore = MyStandardDefault,
          default = 12, defaultstore = MyManufactureDefault,
      endnumeric;

     numeric varid = SOCKET_IIO_CONFIGURATION.NtbBarSizeImBar2_1[NTB_INDEX_10NM],
          prompt  = STRING_TOKEN(STR_IIO_IMBAR2_1_SZ),
          help    = STRING_TOKEN(STR_IIO_IMBAR2_1_SZ_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 12,
          maximum = 39,
          step = 1,
          default = 12, defaultstore = MyStandardDefault,
          default = 12, defaultstore = MyManufactureDefault,
      endnumeric;
    endif; //end suppression


    suppressif  ideqval SOCKET_IIO_CONFIGURATION.NtbSplitBar[NTB_INDEX_10NM] == 1;
      numeric varid = SOCKET_IIO_CONFIGURATION.NtbBarSizeImBar2[NTB_INDEX_10NM],
          prompt  = STRING_TOKEN(STR_IIO_IMBAR2SZ),
          help    = STRING_TOKEN(STR_IIO_IMBAR2SZ_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 12,
          maximum = 51,
          step = 1,
          default = 22, defaultstore = MyStandardDefault,
          default = 22, defaultstore = MyManufactureDefault,
      endnumeric;

    numeric varid = SOCKET_IIO_CONFIGURATION.NtbBarSizeEmBarSZ1[NTB_INDEX_10NM],
          prompt  = STRING_TOKEN(STR_IIO_EMBAR1SZ),
          help    = STRING_TOKEN(STR_IIO_EMBAR1SZ_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 12,
          maximum = 51,
          step = 1,
          default = 22, defaultstore = MyStandardDefault,
          default = 22, defaultstore = MyManufactureDefault,
      endnumeric;
    endif; //end suppression

    suppressif  ideqval SOCKET_IIO_CONFIGURATION.NtbSplitBar[NTB_INDEX_10NM] == 0;
      numeric varid = SOCKET_IIO_CONFIGURATION.NtbBarSizeEmBarSZ2_0[NTB_INDEX_10NM],
          prompt  = STRING_TOKEN(STR_IIO_EMBAR2_0SZ),
          help    = STRING_TOKEN(STR_IIO_EMBAR2_0SZ_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 12,
          maximum = 39,
          step = 1,
          default = 12, defaultstore = MyStandardDefault,
          default = 12, defaultstore = MyManufactureDefault,
      endnumeric;

      numeric varid = SOCKET_IIO_CONFIGURATION.NtbBarSizeEmBarSZ2_1[NTB_INDEX_10NM],
          prompt  = STRING_TOKEN(STR_IIO_EMBAR2_1SZ),
          help    = STRING_TOKEN(STR_IIO_EMBAR2_1SZ_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 12,
          maximum = 39,
          step = 1,
          default = 12, defaultstore = MyStandardDefault,
          default = 12, defaultstore = MyManufactureDefault,
      endnumeric;
    endif; //end suppression

    suppressif  ideqval SOCKET_IIO_CONFIGURATION.NtbSplitBar[NTB_INDEX_10NM] == 1;
      numeric varid = SOCKET_IIO_CONFIGURATION.NtbBarSizeEmBarSZ2[NTB_INDEX_10NM],
          prompt  = STRING_TOKEN(STR_IIO_EMBAR2SZ),
          help    = STRING_TOKEN(STR_IIO_EMBAR2SZ_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 12,
          maximum = 51,
          step = 1,
          default = 22, defaultstore = MyStandardDefault,
          default = 22, defaultstore = MyManufactureDefault,
      endnumeric;
    endif; //end suppression

    //if the port is configured as NTB-NTB, allow the user to configure the crosslink control override
    //Configuration is as follows for ICX:
    //    11    Force NTB port to DSD/USP (ignores external NTBCROSSLINK pin)
    //    10    Force NTB port to USD/DSP (ignores external NTBCROSSLINK pin)
    //Note that this configuration is a "don't care" if port is configured as TB or NTB-RP
    suppressif ideqval SOCKET_IIO_CONFIGURATION.NtbPpd[NTB_INDEX_10NM] == 0 OR ideqval SOCKET_IIO_CONFIGURATION.NtbPpd[NTB_INDEX_10NM] == 2;

        oneof varid = SOCKET_IIO_CONFIGURATION.NtbXlinkCtlOverride[NTB_INDEX_10NM],
            prompt  = STRING_TOKEN(STR_IIO_XLINK_CTL_OVR),
            help    = STRING_TOKEN(STR_IIO_XLINK_CTL_OVR_HELP),
            option text = STRING_TOKEN(STR_IIO_XLINK_CTL_DSD_USP),    value = 3,  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_IIO_XLINK_CTL_USD_DSP),    value = 2,  flags = RESET_REQUIRED;
        endoneof;
    endif;  //end suppression
endif;
#endif
    //
    // User option to force PCIe Root Port hide
    //
#if (INDEX != 0)
    oneof varid         = SOCKET_IIO_CONFIGURATION.PEXPHIDE[INDEX],
        prompt          = STRING_TOKEN(STR_PCIE_DEVICE_HIDE_PROMPT),
        help            = STRING_TOKEN(STR_PCIE_DEVICE_HIDE_PROMPT_HELP),
        option text     = STRING_TOKEN(STR_NO),                 value = 0x00, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text     = STRING_TOKEN(STR_YES),                value = 0x01, flags = RESET_REQUIRED;
    endoneof;
#endif

    suppressif TRUE;
      checkbox varid    = SOCKET_IIO_CONFIGURATION.HidePEXPMenu[INDEX],
          prompt   = STRING_TOKEN(STR_NULL_STRING),
          help     = STRING_TOKEN(STR_NULL_STRING),
          // Flags behavior for checkbox is overloaded so that it equals
          // a DEFAULT value.  1 = ON, 0 = off
          flags    = CHECKBOX_DEFAULT | CHECKBOX_DEFAULT_MFG,
      endcheckbox;
    endif;
    //
    // Option to Enable/Disable MCTP for each PCIe Root Port
    //
    oneof varid = SOCKET_IIO_CONFIGURATION.MctpEn[INDEX],
        prompt  = STRING_TOKEN(STR_IIO_MCTP_EN),
        help    = STRING_TOKEN(STR_IIO_MCTP_EN_HELP),
        option text = STRING_TOKEN(STR_NO),      value = 0,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_YES),     value = 1,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
    endoneof;
// APTIOV_SERVER_OVERRIDE_RC_START : Isolate the AMI PCI Hotplug resource parameters out of SOCKET_IIO_CONFIGURATION (EIP455745)
// APTIOV_SERVER_OVERRIDE_RC_START : EIP250562: PCH / IIO Resource reservation for Hot-Plug
#ifdef HOTPLUG_FLAG
        numeric varid = SOCKET_IIO_HP_RESOURCE.IioExtraBusRsvd[INDEX],
                prompt  = STRING_TOKEN(STR_IIO_RBUS_NUM_PROMPT),
                help    = STRING_TOKEN(STR_IIO_RBUS_NUM_HELP),
                flags   = 0 | RESET_REQUIRED,
                minimum = 0,
                maximum = MAX_EXTRA_BUS_RESERVED,
                step = 1,
                default = 0,
        endnumeric;

        numeric varid = SOCKET_IIO_HP_RESOURCE.IioMemRsvd[INDEX],
                prompt  = STRING_TOKEN(STR_IIO_RMEM_PROMPT),
                help    = STRING_TOKEN(STR_IIO_RMEM_HELP),
                flags   = 0 | RESET_REQUIRED,
                minimum = 0,
                maximum = MAX_PCIE_MEM_RESERVED,
                step = 1,
                default = 0,
        endnumeric;
        
        numeric varid = SOCKET_IIO_HP_RESOURCE.IioMemRsvdalig[INDEX],
                prompt  = STRING_TOKEN(STR_IIO_RMEM_ALIG_PROMPT),
                help    = STRING_TOKEN(STR_IIO_RMEM_ALIG_HELP),
                flags   = 0 | RESET_REQUIRED,
                minimum = 1,
                maximum = 31,
                step = 1,
                default = 1,
        endnumeric;

        numeric varid = SOCKET_IIO_HP_RESOURCE.IioPFMemRsvd[INDEX],
                prompt  = STRING_TOKEN(STR_IIO_PF_RMEM_PROMPT),
                help    = STRING_TOKEN(STR_IIO_PF_RMEM_HELP),
                flags   = 0 | RESET_REQUIRED,
                minimum = 0,
                maximum = MAX_PCIE_PF_MEM_RESERVED,
                step = 1,
                default = 0,
        endnumeric;


        numeric varid = SOCKET_IIO_HP_RESOURCE.IioPFMemRsvdalig[INDEX],
                prompt  = STRING_TOKEN(STR_IIO_PF_RMEM_ALIG_PROMPT),
                help    = STRING_TOKEN(STR_IIO_PF_RMEM_ALIG_HELP),
                flags   = 0 | RESET_REQUIRED,
                minimum = 1,
                maximum = 31,
                step = 1,
                default = 1,
        endnumeric;

        numeric varid = SOCKET_IIO_HP_RESOURCE.Iio64PFMemRsvd[INDEX],
                prompt  = STRING_TOKEN(STR_IIO_64_PF_RMEM_PROMPT),
                help    = STRING_TOKEN(STR_IIO_64_PF_RMEM_HELP),
                flags   = 0 | RESET_REQUIRED,
                minimum = 0,
                maximum = MAX_PCIE_64_PF_MEM_RESERVED,
                step = 1,
                default = 0,
        endnumeric;

        numeric varid = SOCKET_IIO_HP_RESOURCE.Iio64PFMemRsvdalig[INDEX],
                prompt  = STRING_TOKEN(STR_IIO_64_PF_RMEM_ALIG_PROMPT),
                help    = STRING_TOKEN(STR_IIO_64_PF_RMEM_ALIG_HELP),
                flags   = 0 | RESET_REQUIRED,
                minimum = 1,
                maximum = 31,
                step = 1,
                default = 1,
        endnumeric;
        
        numeric varid = SOCKET_IIO_HP_RESOURCE.IioIoRsvd[INDEX],
                prompt  = STRING_TOKEN(STR_IIO_RVIO_PROMPT),
                help    = STRING_TOKEN(STR_IIO_RVIO_HELP),
                flags   = 0 | RESET_REQUIRED,
                minimum = 0,
                maximum = MAX_PCIE_IO_RESERVED,
                step = 4,
                default = 0,
        endnumeric;
#endif
// APTIOV_SERVER_OVERRIDE_RC_END : EIP250562: PCH / IIO Resource reservation for Hot-Plug
// APTIOV_SERVER_OVERRIDE_RC_END : Isolate the AMI PCI Hotplug resource parameters out of SOCKET_IIO_CONFIGURATION (EIP455745)    
