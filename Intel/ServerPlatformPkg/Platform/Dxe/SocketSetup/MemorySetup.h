/** @file

  @copyright
  INTEL CONFIDENTIAL
  Copyright 2006 - 2020 Intel Corporation. <BR>

  The source code contained or described herein and all documents related to the
  source code ("Material") are owned by Intel Corporation or its suppliers or
  licensors. Title to the Material remains with Intel Corporation or its suppliers
  and licensors. The Material may contain trade secrets and proprietary    and
  confidential information of Intel Corporation and its suppliers and licensors,
  and is protected by worldwide copyright and trade secret laws and treaty
  provisions. No part of the Material may be used, copied, reproduced, modified,
  published, uploaded, posted, transmitted, distributed, or disclosed in any way
  without Intel's prior express written permission.

  No license under any patent, copyright, trade secret or other intellectual
  property right is granted to or conferred upon you by disclosure or delivery
  of the Materials, either expressly, by implication, inducement, estoppel or
  otherwise. Any license under such intellectual property rights must be
  express and approved by Intel in writing.

  Unless otherwise agreed by Intel in writing, you may not remove or alter
  this notice or any other notice embedded in Materials by Intel or
  Intel's suppliers or licensors in any way.
**/

#ifndef _memory_setup_h
#define _memory_setup_h

#include <Memory/MemDefaults.h>

#define NON_MANUFACTURING_DEFAULT_MEMORY_SETUP DEFAULT                 | RESET_REQUIRED
#define MANUFACTURING_DEFAULT_MEMORY_SETUP               MANUFACTURING | RESET_REQUIRED
#define DEFAULT_MEMORY_SETUP                   DEFAULT | MANUFACTURING | RESET_REQUIRED
#define DEFAULT_MEMORY_SETUP_INTERACTIVE       DEFAULT_MEMORY_SETUP                     | INTERACTIVE

//
// Enforce POR
//
#if FixedPcdGet8 (PcdEnforcePorDefault) == ENFORCE_POR_DIS
#define ENFORCE_POR_EN_FLAGS      RESET_REQUIRED
#define ENFORCE_POR_DIS_FLAGS     DEFAULT_MEMORY_SETUP
#else // PcdEnforcePorDefault
#define ENFORCE_POR_EN_FLAGS      DEFAULT_MEMORY_SETUP
#define ENFORCE_POR_DIS_FLAGS     RESET_REQUIRED
#endif // PcdEnforcePorDefault

//
// Enforce Population POR
//
#if FixedPcdGet8 (PcdEnforcePopulationPorDefault) == ENFORCE_POPULATION_POR_DIS
#define ENFORCE_POPULATION_POR_DIS_FLAGS  DEFAULT_MEMORY_SETUP
#define ENFORCE_POR_EN_SUPP_FLAGS         RESET_REQUIRED
#define ENFORCE_POR_EN_VAL_FLAGS          RESET_REQUIRED
#elif FixedPcdGet8 (PcdEnforcePopulationPorDefault) == ENFORCE_POPULATION_POR_ENFORCE_SUPPORTED
#define ENFORCE_POPULATION_POR_DIS_FLAGS  RESET_REQUIRED
#define ENFORCE_POR_EN_SUPP_FLAGS         DEFAULT_MEMORY_SETUP
#define ENFORCE_POR_EN_VAL_FLAGS          RESET_REQUIRED
#else // PcdEnforcePopulationPorDefault
#define ENFORCE_POPULATION_POR_DIS_FLAGS  RESET_REQUIRED
#define ENFORCE_POR_EN_SUPP_FLAGS         RESET_REQUIRED
#define ENFORCE_POR_EN_VAL_FLAGS          DEFAULT_MEMORY_SETUP
#endif // PcdEnforcePopulationPorDefault

//
// Select Temperature Refresh Setting
//
#define TEMP_REFRESH_OPTION_AUTO          0
#define TEMP_REFRESH_OPTION_MANUAL        1

#if FixedPcdGet8 (PcdTempRefreshOption) == TEMP_REFRESH_OPTION_AUTO
#define TEMP_REFRESH_OPTION_AUTO_FLAGS         RESET_REQUIRED
#define TEMP_REFRESH_OPTION_MANUAL_FLAGS       DEFAULT_MEMORY_SETUP
#else // PcdTempRefreshOption
#define TEMP_REFRESH_OPTION_AUTO_FLAGS         DEFAULT_MEMORY_SETUP
#define TEMP_REFRESH_OPTION_MANUAL_FLAGS       RESET_REQUIRED
#endif // PcdTempRefreshOption

//
//  Half X temperature refresh value
//
#define HALFX_TEMP_REFRESH_DEFAULT      FixedPcdGet8 (PcdHalfxRefreshValue)
#define HALFX_TEMP_REFRESH_MIN          FixedPcdGet8 (PcdHalfxRefreshMinValue)
#define HALFX_TEMP_REFRESH_MAX          FixedPcdGet8 (PcdHalfxRefreshMaxValue)

//
//  TWO X temperature refresh value
//
#define TWOX_TEMP_REFRESH_DEFAULT      FixedPcdGet8 (PcdTwoxRefreshValue)
#define TWOX_TEMP_REFRESH_MIN          FixedPcdGet8 (PcdTwoxRefreshMinValue)
#define TWOX_TEMP_REFRESH_MAX          FixedPcdGet8 (PcdTwoxRefreshMaxValue)

//
//  FOUR X temperature refresh value
//
#define FOURX_TEMP_REFRESH_DEFAULT      FixedPcdGet8 (PcdFourxRefreshValue)
#define FOURX_TEMP_REFRESH_MIN          FixedPcdGet8 (PcdFourxRefreshMinValue)
#define FOURX_TEMP_REFRESH_MAX          FixedPcdGet8 (PcdFourxRefreshMaxValue)

//option to choose Mem Boot Health configuration type. 00=>Auto (Use defaults), 01=>Manual(Override defaults with setup option), 02=>Disable (Disable feature)
#if FixedPcdGet8 (PcdMemBootHealthCheck) == MEM_BOOT_HEALTH_CONFIG_AUTO
#define MEM_BOOT_HEALTH_CONFIG_AUTO_FLAGS       DEFAULT_MEMORY_SETUP
#define MEM_BOOT_HEALTH_CONFIG_MANUAL_FLAGS     RESET_REQUIRED
#define MEM_BOOT_HEALTH_CONFIG_DISABLE_FLAGS    RESET_REQUIRED
#elif FixedPcdGet8 (PcdMemBootHealthCheck) == MEM_BOOT_HEALTH_CONFIG_MANUAL
#define MEM_BOOT_HEALTH_CONFIG_AUTO_FLAGS       RESET_REQUIRED
#define MEM_BOOT_HEALTH_CONFIG_MANUAL_FLAGS     DEFAULT_MEMORY_SETUP
#define MEM_BOOT_HEALTH_CONFIG_DISABLE_FLAGS    RESET_REQUIRED
#else
#define MEM_BOOT_HEALTH_CONFIG_AUTO_FLAGS       RESET_REQUIRED
#define MEM_BOOT_HEALTH_CONFIG_MANUAL_FLAGS     RESET_REQUIRED
#define MEM_BOOT_HEALTH_CONFIG_DISABLE_FLAGS    DEFAULT_MEMORY_SETUP
#endif

#if FixedPcdGet8 (PcdResetOnCriticalError) == ENABLE_REBOOT_ON_CRITICAL_FAILURE
#define RESET_ON_CIRITICAL_ERROR_ENABLE_FLAGS     DEFAULT_MEMORY_SETUP
#define RESET_ON_CIRITICAL_ERROR_DISABLE_FLAGS    RESET_REQUIRED
#else
#define RESET_ON_CIRITICAL_ERROR_ENABLE_FLAGS     RESET_REQUIRED
#define RESET_ON_CIRITICAL_ERROR_DISABLE_FLAGS    DEFAULT_MEMORY_SETUP
#endif

// The below values are setup\standard\build defaults. Can be overridden in platform specific dsc
//###################MEM BOOT HEALTH CONFIG WARNING OFFSETS STARTS######################################
//Left edge offset for TxDqDelay
#define WARNING_TXDQ_DELAY_LEFT_EDGE   FixedPcdGet8 (PcdWarningTxDqDelayLeftEdge)
//Right edge offset for TxDqDelay
#define WARNING_TXDQ_DEALY_RIGHT_EDGE  FixedPcdGet8 (PcdWarningTxDqDelayRightEdge)
//Left edge offset for TxVref
#define WARNING_TXVREF_LEFT_EDGE       FixedPcdGet8 (PcdWarningTxVrefLeftEdge)
//Right edge offset for TxVref
#define WARNING_TXVREF_RIGHT_EDGE      FixedPcdGet8 (PcdWarningTxVrefRightEdge)
//Left edge offset for RxDqsDelay
#define WARNING_RXDQS_DELAY_LEFT_EDGE  FixedPcdGet8 (PcdWarningRxDqsDelayLeftEdge)
//Right edge offset for RxDqsDelay
#define WARNING_RXDQS_DELAY_RIGHT_EDGE FixedPcdGet8 (PcdWarningRxDqsDelayRightEdge)
//Left edge offset for RxVref
#define WARNING_RXVREF_LEFT_EDGE       FixedPcdGet8 (PcdWarningRxVrefLeftEdge)
//Right edge offset for RxVref
#define WARNING_RXVREF_RIGHT_EDGE      FixedPcdGet8 (PcdWarningRxVrefRightEdge)
//###################MEM BOOT HEALTH CONFIG WARNING OFFSETS ENDS######################################

//###################MEM BOOT HEALTH CONFIG CRITICAL OFFSETS STARTS######################################
//Left edge offset for TxDqDelay
#define CRITICAL_TXDQ_DELAY_LEFT_EDGE   FixedPcdGet8 (PcdCriticalTxDqDelayLeftEdge)
//Right edge offset for TxDqDelay
#define CRITICAL_TXDQ_DEALY_RIGHT_EDGE  FixedPcdGet8 (PcdCriticalTxDqDelayRightEdge)
//Left edge offset for TxVref
#define CRITICAL_TXVREF_LEFT_EDGE       FixedPcdGet8 (PcdCriticalTxVrefLeftEdge)
//Right edge offset for TxVref
#define CRITICAL_TXVREF_RIGHT_EDGE      FixedPcdGet8 (PcdCriticalTxVrefRightEdge)
//Left edge offset for RxDqsDelay
#define CRITICAL_RXDQS_DELAY_LEFT_EDGE  FixedPcdGet8 (PcdCriticalRxDqsDelayLeftEdge)
//Right edge offset for RxDqsDelay
#define CRITICAL_RXDQS_DELAY_RIGHT_EDGE FixedPcdGet8 (PcdCriticalRxDqsDelayRightEdge)
//Left edge offset for RxVref
#define CRITICAL_RXVREF_LEFT_EDGE       FixedPcdGet8 (PcdCriticalRxVrefLeftEdge)
//Right edge offset for RxVref
#define CRITICAL_RXVREF_RIGHT_EDGE      FixedPcdGet8 (PcdCriticalRxVrefRightEdge)
//###################MEM BOOT HEALTH CONFIG CRITICAL OFFSETS ENDS######################################

//
// PPR definitions
//
#if PPR_TYPE_DEFAULT == PPR_DISABLED
#define PPR_DIS_FLAGS       DEFAULT_MEMORY_SETUP
#else
#define PPR_DIS_FLAGS       RESET_REQUIRED
#endif

#if PPR_TYPE_DEFAULT == PPR_TYPE_HARD
#define PPR_TYPE_HARD_FLAGS DEFAULT_MEMORY_SETUP
#else
#define PPR_TYPE_HARD_FLAGS RESET_REQUIRED
#endif

#if PPR_TYPE_DEFAULT == PPR_TYPE_SOFT
#define PPR_TYPE_SOFT_FLAGS DEFAULT_MEMORY_SETUP
#else
#define PPR_TYPE_SOFT_FLAGS RESET_REQUIRED
#endif

//
// PPR Error injection
//
#if PPR_ERR_INJ_DEFAULT == PPR_ERR_INJ_DISABLE
#define PPR_ERR_INJ_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define PPR_ERR_INJ_EN_FLAGS  RESET_REQUIRED
#else
#define PPR_ERR_INJ_DIS_FLAGS RESET_REQUIRED
#define PPR_ERR_INJ_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// Set DramRaplEnable Default
//
#if DRAM_RAPL_DEFAULT  == DRAM_RAPL_DISABLE
#define DRAM_RAPL_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define DRAM_RAPL_EN_FLAGS  RESET_REQUIRED
#else
#define DRAM_RAPL_DIS_FLAGS RESET_REQUIRED
#define DRAM_RAPL_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// Memory Topology
//
#define MEM_TOPOLOGY_START_LABEL 0x2345
#define MEM_TOPOLOGY_END_LABEL   0x2346
#define SINGLE_RANK                1
#define DUAL_RANK                  2
#define QUAD_RANK                  4
#define RANK_8R                    8

//
// DDR Default Frequency
//
#define DDR_3200            18
#define DDR_FREQ_DEFAULT    FixedPcdGet8 (PcdMrcDdrFrequencyDefault)

//
// DDR Frequency
//
#if DDR_FREQ_DEFAULT == DDR_FREQ_AUTO
#define DDR_FREQ_AUTO_FLAGS DEFAULT_MEMORY_SETUP
#else
#define DDR_FREQ_AUTO_FLAGS RESET_REQUIRED
#endif

#if DDR_FREQ_DEFAULT == (DDR_1200+1)
#define DDR_1200_FLAGS      DEFAULT_MEMORY_SETUP
#else
#define DDR_1200_FLAGS      RESET_REQUIRED
#endif

#if DDR_FREQ_DEFAULT == (DDR_1333+1)
#define DDR_1333_FLAGS      DEFAULT_MEMORY_SETUP
#else
#define DDR_1333_FLAGS      RESET_REQUIRED
#endif

#if DDR_FREQ_DEFAULT == (DDR_1400+1)
#define DDR_1400_FLAGS      DEFAULT_MEMORY_SETUP
#else
#define DDR_1400_FLAGS      RESET_REQUIRED
#endif

#if DDR_FREQ_DEFAULT == (DDR_1600+1)
#define DDR_1600_FLAGS      DEFAULT_MEMORY_SETUP
#else
#define DDR_1600_FLAGS      RESET_REQUIRED
#endif

#if DDR_FREQ_DEFAULT == (DDR_1800+1)
#define DDR_1800_FLAGS      DEFAULT_MEMORY_SETUP
#else
#define DDR_1800_FLAGS      RESET_REQUIRED
#endif

#if DDR_FREQ_DEFAULT == (DDR_1866+1)
#define DDR_1866_FLAGS      DEFAULT_MEMORY_SETUP
#else
#define DDR_1866_FLAGS      RESET_REQUIRED
#endif

#if DDR_FREQ_DEFAULT == (DDR_2000+1)
#define DDR_2000_FLAGS      DEFAULT_MEMORY_SETUP
#else
#define DDR_2000_FLAGS      RESET_REQUIRED
#endif

#if DDR_FREQ_DEFAULT == (DDR_2133+1)
#define DDR_2133_FLAGS      DEFAULT_MEMORY_SETUP
#else
#define DDR_2133_FLAGS      RESET_REQUIRED
#endif

#if DDR_FREQ_DEFAULT == (DDR_2200+1)
#define DDR_2200_FLAGS      DEFAULT_MEMORY_SETUP
#else
#define DDR_2200_FLAGS      RESET_REQUIRED
#endif

#if DDR_FREQ_DEFAULT == (DDR_2400+1)
#define DDR_2400_FLAGS      DEFAULT_MEMORY_SETUP
#else
#define DDR_2400_FLAGS      RESET_REQUIRED
#endif

#if DDR_FREQ_DEFAULT == (DDR_2600+1)
#define DDR_2600_FLAGS      DEFAULT_MEMORY_SETUP
#else
#define DDR_2600_FLAGS      RESET_REQUIRED
#endif

#if DDR_FREQ_DEFAULT == (DDR_2666+1)
#define DDR_2666_FLAGS      DEFAULT_MEMORY_SETUP
#else
#define DDR_2666_FLAGS      RESET_REQUIRED
#endif

#if DDR_FREQ_DEFAULT == (DDR_2800+1)
#define DDR_2800_FLAGS      DEFAULT_MEMORY_SETUP
#else
#define DDR_2800_FLAGS      RESET_REQUIRED
#endif

#if DDR_FREQ_DEFAULT == (DDR_2933+1)
#define DDR_2933_FLAGS      DEFAULT_MEMORY_SETUP
#else
#define DDR_2933_FLAGS      RESET_REQUIRED
#endif

#if DDR_FREQ_DEFAULT == (DDR_3000+1)
#define DDR_3000_FLAGS      DEFAULT_MEMORY_SETUP
#else
#define DDR_3000_FLAGS      RESET_REQUIRED
#endif

#if DDR_FREQ_DEFAULT == (DDR_3200+1)
#define DDR_3200_FLAGS      DEFAULT_MEMORY_SETUP
#else
#define DDR_3200_FLAGS      RESET_REQUIRED
#endif

#if DDR_FREQ_DEFAULT == (DDR_3400+1)
#define DDR_3400_FLAGS      DEFAULT_MEMORY_SETUP
#else
#define DDR_3400_FLAGS      RESET_REQUIRED
#endif

#if DDR_FREQ_DEFAULT == (DDR_3466+1)
#define DDR_3466_FLAGS      DEFAULT_MEMORY_SETUP
#else
#define DDR_3466_FLAGS      RESET_REQUIRED
#endif

#if DDR_FREQ_DEFAULT == (DDR_3600+1)
#define DDR_3600_FLAGS      DEFAULT_MEMORY_SETUP
#else
#define DDR_3600_FLAGS      RESET_REQUIRED
#endif

#if DDR_FREQ_DEFAULT == (DDR_3733+1)
#define DDR_3733_FLAGS      DEFAULT_MEMORY_SETUP
#else
#define DDR_3733_FLAGS      RESET_REQUIRED
#endif

#if DDR_FREQ_DEFAULT == (DDR_3800+1)
#define DDR_3800_FLAGS      DEFAULT_MEMORY_SETUP
#else
#define DDR_3800_FLAGS      RESET_REQUIRED
#endif

#if DDR_FREQ_DEFAULT == (DDR_4000+1)
#define DDR_4000_FLAGS      DEFAULT_MEMORY_SETUP
#else
#define DDR_4000_FLAGS      RESET_REQUIRED
#endif

#if DDR_FREQ_DEFAULT == (DDR_4200+1)
#define DDR_4200_FLAGS      DEFAULT_MEMORY_SETUP
#else
#define DDR_4200_FLAGS      RESET_REQUIRED
#endif

#if DDR_FREQ_DEFAULT == (DDR_4266+1)
#define DDR_4266_FLAGS      DEFAULT_MEMORY_SETUP
#else
#define DDR_4266_FLAGS      RESET_REQUIRED
#endif

#if DDR_FREQ_DEFAULT == (DDR_4400+1)
#define DDR_4400_FLAGS      DEFAULT_MEMORY_SETUP
#else
#define DDR_4400_FLAGS      RESET_REQUIRED
#endif

#if DDR_FREQ_DEFAULT == (DDR_4800+1)
#define DDR_4800_FLAGS      DEFAULT_MEMORY_SETUP
#else
#define DDR_4800_FLAGS      RESET_REQUIRED
#endif

#if DDR_FREQ_DEFAULT == (DDR_5200+1)
#define DDR_5200_FLAGS      DEFAULT_MEMORY_SETUP
#else
#define DDR_5200_FLAGS      RESET_REQUIRED
#endif

#if DDR_FREQ_DEFAULT == (DDR_5600+1)
#define DDR_5600_FLAGS      DEFAULT_MEMORY_SETUP
#else
#define DDR_5600_FLAGS      RESET_REQUIRED
#endif

//
// Refresh parameter timing constraints defaults
//
#if FixedPcdGet8 (PcdMrcPanicWatermarkDefault) == REFRESH_WM_LOW
#define REFRESH_WM_LOW_FLAGS  DEFAULT_MEMORY_SETUP
#define REFRESH_WM_HIGH_FLAGS RESET_REQUIRED
#define REFRESH_WM_AUTO_FLAGS RESET_REQUIRED
#elif FixedPcdGet8 (PcdMrcPanicWatermarkDefault) == REFRESH_WM_HIGH
#define REFRESH_WM_LOW_FLAGS  RESET_REQUIRED
#define REFRESH_WM_HIGH_FLAGS DEFAULT_MEMORY_SETUP
#define REFRESH_WM_AUTO_FLAGS RESET_REQUIRED
#else
#define REFRESH_WM_LOW_FLAGS  RESET_REQUIRED
#define REFRESH_WM_HIGH_FLAGS RESET_REQUIRED
#define REFRESH_WM_AUTO_FLAGS DEFAULT_MEMORY_SETUP
#endif


//
// Promote MRC warnings
//
#if PROMOTE_MRC_WARN_DEFAULT == PROMOTE_MRC_WARN_ENABLE
#define PROMOTE_MRC_WARN_EN_FLAGS  DEFAULT_MEMORY_SETUP
#define PROMOTE_MRC_WARN_DIS_FLAGS RESET_REQUIRED
#else
#define PROMOTE_MRC_WARN_EN_FLAGS  RESET_REQUIRED
#define PROMOTE_MRC_WARN_DIS_FLAGS DEFAULT_MEMORY_SETUP
#endif

//
// Promote warnings
//
#if PROMOTE_WARN_DEFAULT == PROMOTE_WARN_ENABLE
#define PROMOTE_WARN_EN_FLAGS     DEFAULT_MEMORY_SETUP
#define PROMOTE_WARN_DIS_FLAGS    RESET_REQUIRED
#else
#define PROMOTE_WARN_EN_FLAGS     RESET_REQUIRED
#define PROMOTE_WARN_DIS_FLAGS    DEFAULT_MEMORY_SETUP
#endif

//
// Halt on error
//
#if HALT_ON_ERROR_DEFAULT == HALT_ON_ERROR_ENABLE
#define HALT_ON_ERROR_EN_FLAGS    DEFAULT_MEMORY_SETUP
#define HALT_ON_ERROR_DIS_FLAGS   RESET_REQUIRED
#ifdef DEBUG_CODE_BLOCK
#define HALT_ON_ERROR_AUTO_FLAGS  RESET_REQUIRED
#endif //DEBUG_CODE_BLOCK
#endif

#if HALT_ON_ERROR_DEFAULT == HALT_ON_ERROR_DISABLE
#define HALT_ON_ERROR_EN_FLAGS    RESET_REQUIRED
#define HALT_ON_ERROR_DIS_FLAGS   DEFAULT_MEMORY_SETUP
#ifdef DEBUG_CODE_BLOCK
#define HALT_ON_ERROR_AUTO_FLAGS  RESET_REQUIRED
#endif //DEBUG_CODE_BLOCK
#endif

#ifdef DEBUG_CODE_BLOCK
//
// Auto - cold reset and set Maximum serial debug level
//
#if HALT_ON_ERROR_DEFAULT == HALT_ON_ERROR_AUTO_RESET
#define HALT_ON_ERROR_EN_FLAGS    RESET_REQUIRED
#define HALT_ON_ERROR_DIS_FLAGS   RESET_REQUIRED
#define HALT_ON_ERROR_AUTO_FLAGS  DEFAULT_MEMORY_SETUP
#endif
#endif //DEBUG_CODE_BLOCK

//
// Multi-Threaded MRC
//

#if FixedPcdGetBool (PcdMrcMultiThreadedDefault) == MULTI_THREADED_ENABLE
#define MULTI_THREADED_EN_FLAGS    DEFAULT_MEMORY_SETUP
#define MULTI_THREADED_DIS_FLAGS   RESET_REQUIRED
#else
#define MULTI_THREADED_EN_FLAGS    RESET_REQUIRED
#define MULTI_THREADED_DIS_FLAGS   DEFAULT_MEMORY_SETUP
#endif

//
// ECC Support
//
#if ECC_DEFAULT == ECC_DISABLE
#define ECC_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define ECC_EN_FLAGS  RESET_REQUIRED
#else
#define ECC_DIS_FLAGS RESET_REQUIRED
#define ECC_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// Log Parsing - option of enabling additional information in the log to make parsing it more generic and easier in MT
//
#if LOG_PARSING_DEFAULT == LOG_PARSING_EN
#define LOG_PARSING_EN_FLAGS  DEFAULT_MEMORY_SETUP
#define LOG_PARSING_DIS_FLAGS RESET_REQUIRED
#else
#define LOG_PARSING_EN_FLAGS  RESET_REQUIRED
#define LOG_PARSING_DIS_FLAGS DEFAULT_MEMORY_SETUP
#endif

//
// LRDIMM Module Delay
//
#if MODULE_DELAY_DEFAULT == MODULE_DELAY_AUTO
#define MODULE_DELAY_AUTO_FLAGS DEFAULT_MEMORY_SETUP
#define MODULE_DELAY_DIS_FLAGS  RESET_REQUIRED
#else
#define MODULE_DELAY_AUTO_FLAGS RESET_REQUIRED
#define MODULE_DELAY_DIS_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// Memory test enable
//
#if MEM_TEST_DEFAULT == MEM_TEST_ENABLE
#define MEM_TEST_EN_FLAGS  DEFAULT_MEMORY_SETUP
#define MEM_TEST_DIS_FLAGS RESET_REQUIRED
#else
#define MEM_TEST_EN_FLAGS  RESET_REQUIRED
#define MEM_TEST_DIS_FLAGS DEFAULT_MEMORY_SETUP
#endif

//
// DDR Memory Type
//
#if DDR_TYPE_DEFAULT == RDIMM_TYPE
#define RDIMM_TYPE_FLAGS       DEFAULT_MEMORY_SETUP
#else
#define RDIMM_TYPE_FLAGS       RESET_REQUIRED
#endif

#if DDR_TYPE_DEFAULT == UDIMM_TYPE
#define UDIMM_TYPE_FLAGS       DEFAULT_MEMORY_SETUP
#else
#define UDIMM_TYPE_FLAGS       RESET_REQUIRED
#endif

#if DDR_TYPE_DEFAULT == UDIMM_RDIMM_TYPE
#define UDIMM_RDIMM_TYPE_FLAGS DEFAULT_MEMORY_SETUP
#else
#define UDIMM_RDIMM_TYPE_FLAGS RESET_REQUIRED
#endif

//
// Rank Margin Tool
//
#if RMT_DEFAULT == RMT_DIS
#define RMT_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define RMT_EN_FLAGS  RESET_REQUIRED
#else
#define RMT_DIS_FLAGS RESET_REQUIRED
#define RMT_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// Enable Backside RMT
//
#if BACKSIDE_RMT_DEFAULT == BACKSIDE_RMT_DISABLE
#define BACKSIDE_RMT_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define BACKSIDE_RMT_EN_FLAGS  RESET_REQUIRED
#else
#define BACKSIDE_RMT_DIS_FLAGS RESET_REQUIRED
#define BACKSIDE_RMT_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// Enable Backside CMD RMT
//
#if BACKSIDE_CMD_RMT_DEFAULT == BACKSIDE_CMD_RMT_DISABLE
#define BACKSIDE_CMD_RMT_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define BACKSIDE_CMD_RMT_EN_FLAGS  RESET_REQUIRED
#else
#define BACKSIDE_CMD_RMT_DIS_FLAGS RESET_REQUIRED
#define BACKSIDE_CMD_RMT_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// Per Bit Margin Data
//
#if PER_BIT_MARGIN_DEFAULT == PER_BIT_MARGIN_DISABLE
#define PER_BIT_MARGIN_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define PER_BIT_MARGIN_EN_FLAGS  RESET_REQUIRED
#else
#define PER_BIT_MARGIN_DIS_FLAGS RESET_REQUIRED
#define PER_BIT_MARGIN_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// Do we attempt a fast boot path through MRC?
//
#if FixedPcdGet8 (PcdMrcFastBootDefault) == FAST_BOOT_ENABLE
#define FAST_BOOT_EN_FLAGS     DEFAULT_MEMORY_SETUP
#define FAST_BOOT_DIS_FLAGS    RESET_REQUIRED
#else
#define FAST_BOOT_EN_FLAGS     RESET_REQUIRED
#define FAST_BOOT_DIS_FLAGS    DEFAULT_MEMORY_SETUP
#endif

//
// Fast Cold Boot
//
#if FixedPcdGetBool (PcdMrcFastColdBootDefault) == FAST_BOOT_COLD_ENABLE
#define FAST_BOOT_COLD_EN_FLAGS    DEFAULT_MEMORY_SETUP
#define FAST_BOOT_COLD_DIS_FLAGS   RESET_REQUIRED
#else
#define FAST_BOOT_COLD_EN_FLAGS    RESET_REQUIRED
#define FAST_BOOT_COLD_DIS_FLAGS   DEFAULT_MEMORY_SETUP
#endif

//
// Memory test enable for cold fast boot scenario
//
#if MEM_TEST_COLD_FAST_BOOT_DEFAULT == MEM_TEST_COLD_FAST_BOOT_DISABLE
#define MEM_TEST_COLD_FAST_BOOT_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define MEM_TEST_COLD_FAST_BOOT_EN_FLAGS  RESET_REQUIRED
#else
#define MEM_TEST_COLD_FAST_BOOT_DIS_FLAGS RESET_REQUIRED
#define MEM_TEST_COLD_FAST_BOOT_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// RMT on Cold Fast Boot
//
#if RMT_COLD_FAST_BOOT_DEFAULT == RMT_COLD_FAST_BOOT_DISABLE
#define RMT_COLD_FAST_BOOT_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define RMT_COLD_FAST_BOOT_EN_FLAGS  RESET_REQUIRED
#else
#define RMT_COLD_FAST_BOOT_DIS_FLAGS RESET_REQUIRED
#define RMT_COLD_FAST_BOOT_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// LegacyRmt
//
#if FixedPcdGet8 (PcdLegacyRmtEnable) == LEGACY_RMT_DISABLE
#define LEGACY_RMT_DISABLE_FLAGS DEFAULT_MEMORY_SETUP
#define LEGACY_RMT_ENABLE_FLAGS  RESET_REQUIRED
#else
#define LEGACY_RMT_DISABLE_FLAGS RESET_REQUIRED
#define LEGACY_RMT_ENABLE_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// Hide\Show Legacy RMT Setup question
//
#define LEGACY_RMT_KNOB_VISIBLITY_DISABLE        0
#define LEGACY_RMT_KNOB_VISIBLITY_ENABLE         1
//
// Bdat
//
#if FixedPcdGet8 (PcdMrcBdatDefault) == BDAT_ENABLE
#define BDAT_EN_FLAGS   DEFAULT_MEMORY_SETUP
#define BDAT_DIS_FLAGS  RESET_REQUIRED
#else
#define BDAT_EN_FLAGS   RESET_REQUIRED
#define BDAT_DIS_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// DDRT Scrambling support
//
#if SCRAMBLE_DDRT_DEFAULT == SCRAMBLE_DDRT_DISABLE
#define SCRAMBLE_DDRT_DIS_FLAGS  DEFAULT_MEMORY_SETUP
#define SCRAMBLE_DDRT_EN_FLAGS   RESET_REQUIRED
#else
#define SCRAMBLE_DDRT_DIS_FLAGS  RESET_REQUIRED
#define SCRAMBLE_DDRT_EN_FLAGS   DEFAULT_MEMORY_SETUP
#endif

//
// Scrambling support
//
#if SCRAMBLE_DEFAULT == SCRAMBLE_DISABLE
#define SCRAMBLE_DIS_FLAGS   DEFAULT_MEMORY_SETUP
#define SCRAMBLE_EN_FLAGS  RESET_REQUIRED
#else
#define SCRAMBLE_DIS_FLAGS   RESET_REQUIRED
#define SCRAMBLE_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// ALLOW_CORRECTABLE_ERRORS
//
#if ALLOW_CORRECTABLE_ERROR_DEFAULT == ALLOW_CORRECTABLE_ERROR_DISABLE
#define ALLOW_CORRECTABLE_ERROR_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define ALLOW_CORRECTABLE_ERROR_EN_FLAGS  RESET_REQUIRED
#else
#define ALLOW_CORRECTABLE_ERROR_DIS_FLAGS RESET_REQUIRED
#define ALLOW_CORRECTABLE_ERROR_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// ALLOW_CORRECTABLE_ERRORS
//
#if ALLOW_CORRECTABLE_MEM_TEST_ERROR_DEFAULT == ALLOW_CORRECTABLE_MEM_TEST_ERROR_DISABLE
#define ALLOW_CORRECTABLE_MEM_TEST_ERROR_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define ALLOW_CORRECTABLE_MEM_TEST_ERROR_EN_FLAGS  RESET_REQUIRED
#else
#define ALLOW_CORRECTABLE_MEM_TEST_ERROR_DIS_FLAGS RESET_REQUIRED
#define ALLOW_CORRECTABLE_MEM_TEST_ERROR_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// Early Write CRC for DDRIO
//
#if EARLY_WR_CRC_DDRIO_DEFAULT == WR_CRC_DISABLE
#define EARLY_WR_CRC_DDRIO_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define EARLY_WR_CRC_DDRIO_EN_FLAGS  RESET_REQUIRED
#else
#define EARLY_WR_CRC_DDRIO_DIS_FLAGS RESET_REQUIRED
#define EARLY_WR_CRC_DDRIO_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// Late Write CRC for DDRIO, MC and DRAM
//
#if WR_CRC_DEFAULT == WR_CRC_DISABLE
#define WR_CRC_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define WR_CRC_EN_FLAGS  RESET_REQUIRED
#else
#define WR_CRC_DIS_FLAGS RESET_REQUIRED
#define WR_CRC_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// DIMM Isolation
//
#if FixedPcdGet8 (PcdDimmIsolationDefault) == DIMM_ISOLATION_ENABLE
#define DIMM_ISOLATION_EN_FLAGS  DEFAULT_MEMORY_SETUP
#define DIMM_ISOLATION_DIS_FLAGS RESET_REQUIRED
#else
#define DIMM_ISOLATION_EN_FLAGS  RESET_REQUIRED
#define DIMM_ISOLATION_DIS_FLAGS DEFAULT_MEMORY_SETUP
#endif

//
// Read/WritePreamble TCLK
//
#define WR_PREAMBLE_1TCLK_FLAGS RESET_REQUIRED
#define WR_PREAMBLE_2TCLK_FLAGS RESET_REQUIRED
#define WR_PREAMBLE_3TCLK_FLAGS RESET_REQUIRED
#define WR_PREAMBLE_4TCLK_FLAGS RESET_REQUIRED
#define WR_PREAMBLE_AUTO_FLAGS  RESET_REQUIRED
#if FixedPcdGet8 (PcdMrcWritePreambleTclkDefault) == PREAMBLE_1TCLK
#undef  WR_PREAMBLE_1TCLK_FLAGS
#define WR_PREAMBLE_1TCLK_FLAGS DEFAULT_MEMORY_SETUP
#elif FixedPcdGet8 (PcdMrcWritePreambleTclkDefault) == PREAMBLE_2TCLK
#undef  WR_PREAMBLE_2TCLK_FLAGS
#define WR_PREAMBLE_2TCLK_FLAGS DEFAULT_MEMORY_SETUP
#elif FixedPcdGet8 (PcdMrcWritePreambleTclkDefault) == PREAMBLE_3TCLK
#undef  WR_PREAMBLE_3TCLK_FLAGS
#define WR_PREAMBLE_3TCLK_FLAGS DEFAULT_MEMORY_SETUP
#elif FixedPcdGet8 (PcdMrcWritePreambleTclkDefault) == PREAMBLE_4TCLK
#undef  WR_PREAMBLE_4TCLK_FLAGS
#define WR_PREAMBLE_4TCLK_FLAGS DEFAULT_MEMORY_SETUP
#else
#undef WR_PREAMBLE_AUTO_FLAGS
#define WR_PREAMBLE_AUTO_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if FixedPcdGet8 (PcdMrcReadPreambleTclkDefault) == PREAMBLE_1TCLK

#define RD_PREAMBLE_1TCLK_FLAGS DEFAULT_MEMORY_SETUP
#define RD_PREAMBLE_2TCLK_FLAGS RESET_REQUIRED
#define RD_PREAMBLE_3TCLK_FLAGS RESET_REQUIRED
#define RD_PREAMBLE_4TCLK_FLAGS RESET_REQUIRED
#define RD_PREAMBLE_AUTO_FLAGS  RESET_REQUIRED

#elif FixedPcdGet8 (PcdMrcReadPreambleTclkDefault) == PREAMBLE_2TCLK

#define RD_PREAMBLE_1TCLK_FLAGS RESET_REQUIRED
#define RD_PREAMBLE_2TCLK_FLAGS DEFAULT_MEMORY_SETUP
#define RD_PREAMBLE_3TCLK_FLAGS RESET_REQUIRED
#define RD_PREAMBLE_4TCLK_FLAGS RESET_REQUIRED
#define RD_PREAMBLE_AUTO_FLAGS  RESET_REQUIRED

#elif FixedPcdGet8 (PcdMrcReadPreambleTclkDefault) == PREAMBLE_3TCLK

#define RD_PREAMBLE_1TCLK_FLAGS RESET_REQUIRED
#define RD_PREAMBLE_2TCLK_FLAGS RESET_REQUIRED
#define RD_PREAMBLE_3TCLK_FLAGS DEFAULT_MEMORY_SETUP
#define RD_PREAMBLE_4TCLK_FLAGS RESET_REQUIRED
#define RD_PREAMBLE_AUTO_FLAGS  RESET_REQUIRED

#elif FixedPcdGet8 (PcdMrcReadPreambleTclkDefault) == PREAMBLE_4TCLK

#define RD_PREAMBLE_1TCLK_FLAGS RESET_REQUIRED
#define RD_PREAMBLE_2TCLK_FLAGS RESET_REQUIRED
#define RD_PREAMBLE_3TCLK_FLAGS RESET_REQUIRED
#define RD_PREAMBLE_4TCLK_FLAGS DEFAULT_MEMORY_SETUP
#define RD_PREAMBLE_AUTO_FLAGS  RESET_REQUIRED

#else

#define RD_PREAMBLE_1TCLK_FLAGS RESET_REQUIRED
#define RD_PREAMBLE_2TCLK_FLAGS RESET_REQUIRED
#define RD_PREAMBLE_3TCLK_FLAGS RESET_REQUIRED
#define RD_PREAMBLE_4TCLK_FLAGS RESET_REQUIRED
#define RD_PREAMBLE_AUTO_FLAGS  DEFAULT_MEMORY_SETUP

#endif

#if FixedPcdGetBool (PcdRankSwitchFixOption) == RANK_SWITCH_FIX_TA_FLOOR
#define RANK_SWITCH_FIX_DIS_FLAGS             RESET_REQUIRED
#define RANK_SWITCH_FIX_TA_FLOOR_FLAGS        DEFAULT_MEMORY_SETUP
#define RANK_SWITCH_FIX_RCVEN_AVE_FLAGS       RESET_REQUIRED
#define RANK_SWITCH_FIX_RCVEN_AVE_PT1_FLAGS   RESET_REQUIRED
#elif FixedPcdGetBool (PcdRankSwitchFixOption) == RANK_SWITCH_FIX_RCVEN_AVE
#define RANK_SWITCH_FIX_DIS_FLAGS             RESET_REQUIRED
#define RANK_SWITCH_FIX_TA_FLOOR_FLAGS        RESET_REQUIRED
#define RANK_SWITCH_FIX_RCVEN_AVE_FLAGS       DEFAULT_MEMORY_SETUP
#define RANK_SWITCH_FIX_RCVEN_AVE_PT1_FLAGS   RESET_REQUIRED
#elif FixedPcdGetBool (PcdRankSwitchFixOption) ==  RANK_SWITCH_FIX_RCVEN_AVE_PT1
#define RANK_SWITCH_FIX_DIS_FLAGS             RESET_REQUIRED
#define RANK_SWITCH_FIX_TA_FLOOR_FLAGS        RESET_REQUIRED
#define RANK_SWITCH_FIX_RCVEN_AVE_FLAGS       RESET_REQUIRED
#define RANK_SWITCH_FIX_RCVEN_AVE_PT1_FLAGS   DEFAULT_MEMORY_SETUP
#else
//if value dont match the above 3, then go to default of disable
#define RANK_SWITCH_FIX_DIS_FLAGS             DEFAULT_MEMORY_SETUP
#define RANK_SWITCH_FIX_TA_FLOOR_FLAGS        RESET_REQUIRED
#define RANK_SWITCH_FIX_RCVEN_AVE_FLAGS       RESET_REQUIRED
#define RANK_SWITCH_FIX_RCVEN_AVE_PT1_FLAGS   RESET_REQUIRED
#endif

//
// ADREn
//
#if ADR_DEFAULT == ADR_DISABLE
#define ADR_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define ADR_EN_FLAGS  RESET_REQUIRED
#else
#define ADR_DIS_FLAGS RESET_REQUIRED
#define ADR_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// Legacy ADR
//
#if FixedPcdGet8 (PcdLegacyAdrDefault) == LEGACY_ADR_MODE_ENABLE
#define LEGACY_ADR_DIS_FLAGS  RESET_REQUIRED
#define LEGACY_ADR_EN_FLAGS   DEFAULT_MEMORY_SETUP
#else
#define LEGACY_ADR_DIS_FLAGS  DEFAULT_MEMORY_SETUP
#define LEGACY_ADR_EN_FLAGS   RESET_REQUIRED
#endif

//
// Check PCH_PM_STS
//
#if CHECK_PM_STS_DEFAULT == CHECK_PM_STS_DISABLE
#define CHECK_PM_STS_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define CHECK_PM_STS_EN_FLAGS  RESET_REQUIRED
#else
#define CHECK_PM_STS_DIS_FLAGS RESET_REQUIRED
#define CHECK_PM_STS_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// Check PlatformDetectADR
//
#if CHECK_PLATFORM_DETECT_DEFAULT == CHECK_PLATFORM_DETECT_DISABLE
#define CHECK_PLATFORM_DETECT_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define CHECK_PLATFORM_DETECT_EN_FLAGS  RESET_REQUIRED
#else
#define CHECK_PLATFORM_DETECT_DIS_FLAGS RESET_REQUIRED
#define CHECK_PLATFORM_DETECT_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// CustomRefreshRate
//
#if CUSTOM_REFRESH_RATE_DEFAULT == CUSTOM_REFRESH_RATE_DISABLE
#define CUSTOM_REFRESH_RATE_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define CUSTOM_REFRESH_RATE_EN_FLAGS  RESET_REQUIRED
#else
#define CUSTOM_REFRESH_RATE_DIS_FLAGS RESET_REQUIRED
#define CUSTOM_REFRESH_RATE_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// Opportunistic Reads in WMM
//
#if OPP_RD_WMM_DEFAULT == OPP_RD_WMM_DISABLE
#define OPP_RD_WMM_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define OPP_RD_WMM_EN_FLAGS  RESET_REQUIRED
#else
#define OPP_RD_WMM_DIS_FLAGS RESET_REQUIRED
#define OPP_RD_WMM_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// C/A Parity
//
#if CA_PARITY_DEFAULT == CA_PARITY_DISABLE
#define CA_PARITY_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define CA_PARITY_EN_FLAGS  RESET_REQUIRED
#else
#define CA_PARITY_DIS_FLAGS RESET_REQUIRED
#define CA_PARITY_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// SMBUS Clk Period
//
#if FixedPcdGet8 (PcdMrcSmbusSpeedDefault) == SMB_CLK_100K

#define SMB_CLK_100K_FLAGS DEFAULT_MEMORY_SETUP
#define SMB_CLK_400K_FLAGS RESET_REQUIRED
#define SMB_CLK_700K_FLAGS RESET_REQUIRED
#define SMB_CLK_1M_FLAGS   RESET_REQUIRED

#elif FixedPcdGet8 (PcdMrcSmbusSpeedDefault) == SMB_CLK_400K

#define SMB_CLK_100K_FLAGS RESET_REQUIRED
#define SMB_CLK_400K_FLAGS DEFAULT_MEMORY_SETUP
#define SMB_CLK_700K_FLAGS RESET_REQUIRED
#define SMB_CLK_1M_FLAGS   RESET_REQUIRED

#elif FixedPcdGet8 (PcdMrcSmbusSpeedDefault) == SMB_CLK_700K

#define SMB_CLK_100K_FLAGS RESET_REQUIRED
#define SMB_CLK_400K_FLAGS RESET_REQUIRED
#define SMB_CLK_700K_FLAGS DEFAULT_MEMORY_SETUP
#define SMB_CLK_1M_FLAGS   RESET_REQUIRED

#else

#define SMB_CLK_100K_FLAGS RESET_REQUIRED
#define SMB_CLK_400K_FLAGS RESET_REQUIRED
#define SMB_CLK_700K_FLAGS RESET_REQUIRED
#define SMB_CLK_1M_FLAGS   DEFAULT_MEMORY_SETUP

#endif

#if SMB_SPD_ACCESS_DEFAULT == SMB_SPD_LOCK
#define SMB_SPD_LOCK_FLAGS DEFAULT_MEMORY_SETUP
#define SMB_SPD_UNLOCK_FLAGS RESET_REQUIRED
#else
#define SMB_SPD_LOCK_FLAGS RESET_REQUIRED
#define SMB_SPD_UNLOCK_FLAGS DEFAULT_MEMORY_SETUP
#endif

#if FixedPcdGetBool (PcdMrcSpdPrintDefault) == SPD_PRINT_DIS
#define SPD_PRINT_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SPD_PRINT_EN_FLAGS RESET_REQUIRED
#else
#define SPD_PRINT_DIS_FLAGS RESET_REQUIRED
#define SPD_PRINT_EN_FLAGS DEFAULT_MEMORY_SETUP
#endif

// DDR Cycling Support
#if DDR_CYCLING_DEFAULT == DDR_CYCLING_DISABLE
#define DDR_CYCLING_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define DDR_CYCLING_EN_FLAGS  RESET_REQUIRED
#else
#define DDR_CYCLING_DIS_FLAGS RESET_REQUIRED
#define DDR_CYCLING_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// BLOCK GNT2CMD1CYC
//
#if BLOCK_GNT2CMD1CYC_DEFAULT == PO_SAFE_VALUE
#define BLOCK_GNT2CMD1CYC_PO_SAFE_VALUE_FLAGS DEFAULT_MEMORY_SETUP
#define BLOCK_GNT2CMD1CYC_POR_VALUE_FLAGS     RESET_REQUIRED
#else
#define BLOCK_GNT2CMD1CYC_PO_SAFE_VALUE_FLAGS RESET_REQUIRED
#define BLOCK_GNT2CMD1CYC_POR_VALUE_FLAGS     DEFAULT_MEMORY_SETUP
#endif

//
// Disable NVMDIMM OPPRD
//
#if DIS_NVMDIMM_OPPRDC_DEFAULT == PO_SAFE_VALUE
#define DIS_NVMDIMM_OPPRDC_PO_SAFE_VALUE_FLAGS DEFAULT_MEMORY_SETUP
#define DIS_NVMDIMM_OPPRDC_POR_VALUE_FLAGS     RESET_REQUIRED
#else
#define DIS_NVMDIMM_OPPRDC_PO_SAFE_VALUE_FLAGS RESET_REQUIRED
#define DIS_NVMDIMM_OPPRDC_POR_VALUE_FLAGS     DEFAULT_MEMORY_SETUP
#endif

//
// Rank Mask
//
#if RANK_MASK_DEFAULT == RANK_MASK_DISABLE
#define RANK_MASK_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define RANK_MASK_EN_FLAGS  RESET_REQUIRED
#else
#define RANK_MASK_DIS_FLAGS RESET_REQUIRED
#define RANK_MASK_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// Page Policy
//
#if CLOSED_PAGE_DEFAULT == CLOSED_PAGE_DIS
#define CLOSED_PAGE_DIS_FLAGS DEFAULT_MEMORY_SETUP
#else
#define CLOSED_PAGE_DIS_FLAGS RESET_REQUIRED
#endif

#if CLOSED_PAGE_DEFAULT == CLOSED_PAGE_EN
#define CLOSED_PAGE_EN_FLAGS DEFAULT_MEMORY_SETUP
#else
#define CLOSED_PAGE_EN_FLAGS RESET_REQUIRED
#endif

#if CLOSED_PAGE_DEFAULT == OPEN_PAGE_ADAPTIVE
#define OPEN_PAGE_ADAPTIVE_FLAGS DEFAULT_MEMORY_SETUP
#else
#define OPEN_PAGE_ADAPTIVE_FLAGS RESET_REQUIRED
#endif

//
// Tx Equalization calibration
//
#if TX_EQ_DEFAULT == TX_EQ_DISABLE
#define TX_EQ_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define TX_EQ_EN_FLAGS  RESET_REQUIRED
#else
#define TX_EQ_DIS_FLAGS RESET_REQUIRED
#define TX_EQ_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// Command Normalization
//
#if FixedPcdGet8 (PcdMrcCmdNormalizationTrainingEnable) == CMD_NORMAL_DISABLE
#define CMD_NORMAL_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define CMD_NORMAL_EN_FLAGS  RESET_REQUIRED
#else
#define CMD_NORMAL_DIS_FLAGS RESET_REQUIRED
#define CMD_NORMAL_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// LR Backside VREF Enable
//
#if LRDIMM_BACKSIDE_VREF_DEFAULT == LRDIMM_BACKSIDE_VREF_DISABLE
#define LRDIMM_BACKSIDE_VREF_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define LRDIMM_BACKSIDE_VREF_EN_FLAGS  RESET_REQUIRED
#else
#define LRDIMM_BACKSIDE_VREF_DIS_FLAGS RESET_REQUIRED
#define LRDIMM_BACKSIDE_VREF_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
//  CMD Vref Training
//
#if FixedPcdGet8 (PcdMrcCmdVrefCenteringTrainingEnable) == CMD_VREF_DISABLE
#define CMD_VREF_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define CMD_VREF_EN_FLAGS  RESET_REQUIRED
#else
#define CMD_VREF_DIS_FLAGS RESET_REQUIRED
#define CMD_VREF_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
//  MC RON
//
#if FixedPcdGet8 (PcdMrcMcRonDefault) == MC_RON_DISABLE
#define MC_RON_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define MC_RON_EN_FLAGS  RESET_REQUIRED
#else
#define MC_RON_DIS_FLAGS RESET_REQUIRED
#define MC_RON_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
//  DRAM RON
//
#if FixedPcdGet8 (PcdMrcDramRonDefault) == DRAM_RON_DISABLE
#define DRAM_RON_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define DRAM_RON_EN_FLAGS  RESET_REQUIRED
#else
#define DRAM_RON_DIS_FLAGS RESET_REQUIRED
#define DRAM_RON_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
//  RX ODT
//
#if FixedPcdGet8 (PcdMrcMcOdtDefault) == RX_ODT_DISABLE
#define RX_ODT_DIS_FLAGS  DEFAULT_MEMORY_SETUP
#define RX_ODT_EN_FLAGS   RESET_REQUIRED
#else
#define RX_ODT_DIS_FLAGS  RESET_REQUIRED
#define RX_ODT_EN_FLAGS   DEFAULT_MEMORY_SETUP
#endif

//
//  RX CTLE
//
#if FixedPcdGet8 (PcdMrcCtleTrainingEnable) == RX_CTLE_DISABLE
#define RX_CTLE_TRN_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define RX_CTLE_TRN_EN_FLAGS  RESET_REQUIRED
#else
#define RX_CTLE_TRN_DIS_FLAGS RESET_REQUIRED
#define RX_CTLE_TRN_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
//  LRDIMM Write VREF
//
#if LRDIMM_WR_VREF_DEFAULT == LRDIMM_WR_VREF_DISABLE
#define LRDIMM_WR_VREF_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define LRDIMM_WR_VREF_EN_FLAGS  RESET_REQUIRED
#else
#define LRDIMM_WR_VREF_DIS_FLAGS RESET_REQUIRED
#define LRDIMM_WR_VREF_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
//  LRDIMM Write VREF
//
#if LRDIMM_RD_VREF_DEFAULT == LRDIMM_RD_VREF_DISABLE
#define LRDIMM_RD_VREF_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define LRDIMM_RD_VREF_EN_FLAGS  RESET_REQUIRED
#else
#define LRDIMM_RD_VREF_DIS_FLAGS RESET_REQUIRED
#define LRDIMM_RD_VREF_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
//  LRDIMM Rx Dq Centering
//
#if LRDIMM_RX_DQ_CENTERING_DEFAULT == LRDIMM_RX_DQ_CENTERING_DISABLE
#define LRDIMM_RX_DQ_CENTERING_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define LRDIMM_RX_DQ_CENTERING_EN_FLAGS  RESET_REQUIRED
#else
#define LRDIMM_RX_DQ_CENTERING_DIS_FLAGS RESET_REQUIRED
#define LRDIMM_RX_DQ_CENTERING_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
//  LRDIMM Tx Dq Centering
//
#if LRDIMM_TX_DQ_CENTERING_DEFAULT == LRDIMM_TX_DQ_CENTERING_DISABLE
#define LRDIMM_TX_DQ_CENTERING_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define LRDIMM_TX_DQ_CENTERING_EN_FLAGS  RESET_REQUIRED
#else
#define LRDIMM_TX_DQ_CENTERING_DIS_FLAGS RESET_REQUIRED
#define LRDIMM_TX_DQ_CENTERING_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// CMD Tx Equalization calibration
//
#if CMD_TX_EQ_DEFAULT_10NM == CMD_TX_EQ_DISABLE
#define CMD_TX_EQ_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define CMD_TX_EQ_EN_FLAGS  RESET_REQUIRED
#else
#define CMD_TX_EQ_DIS_FLAGS RESET_REQUIRED
#define CMD_TX_EQ_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if FixedPcdGet8 (PcdMrcRxDfeDefault) == RX_DFE_DISABLE

#define RX_DFE_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define RX_DFE_EN_FLAGS RESET_REQUIRED
#define RX_DFE_AUTO_FLAGS RESET_REQUIRED

#elif FixedPcdGet8 (PcdMrcRxDfeDefault) == RX_DFE_ENABLE

#define RX_DFE_DIS_FLAGS RESET_REQUIRED
#define RX_DFE_EN_FLAGS DEFAULT_MEMORY_SETUP
#define RX_DFE_AUTO_FLAGS RESET_REQUIRED

#else

#define RX_DFE_DIS_FLAGS RESET_REQUIRED
#define RX_DFE_EN_FLAGS RESET_REQUIRED
#define RX_DFE_AUTO_FLAGS DEFAULT_MEMORY_SETUP

#endif

//
//  RX DFE DDR5
//
#if FixedPcdGet8 (PcdMrcRxDfeDdr5TrainingDefault) == RX_DFE_DDR5_TRAINING_DISABLE
#define RX_DFE_DDR5_TRAINING_DIS_FLAGS  DEFAULT_MEMORY_SETUP
#define RX_DFE_DDR5_TRAINING_EN_FLAGS   RESET_REQUIRED
#else
#define RX_DFE_DDR5_TRAINING_DIS_FLAGS  RESET_REQUIRED
#define RX_DFE_DDR5_TRAINING_EN_FLAGS   DEFAULT_MEMORY_SETUP
#endif

//
//  TX DFE DDR5
//
#if FixedPcdGet8 (PcdMrcTxDfeDdr5TrainingDefault) == TX_DFE_DDR5_TRAINING_DISABLE
#define TX_DFE_DDR5_TRAINING_DIS_FLAGS  DEFAULT_MEMORY_SETUP
#define TX_DFE_DDR5_TRAINING_EN_FLAGS   RESET_REQUIRED
#else
#define TX_DFE_DDR5_TRAINING_DIS_FLAGS  RESET_REQUIRED
#define TX_DFE_DDR5_TRAINING_EN_FLAGS   DEFAULT_MEMORY_SETUP
#endif

#if FixedPcdGet8 (PcdMrcTxRfSlewRateDefault) == TX_RF_SLEW_RATE_DISABLE

#define TX_RF_SLEW_RATE_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define TX_RF_SLEW_RATE_EN_FLAGS RESET_REQUIRED
#define TX_RF_SLEW_RATE_AUTO_FLAGS RESET_REQUIRED

#elif FixedPcdGet8 (PcdMrcTxRfSlewRateDefault) == TX_RF_SLEW_RATE_ENABLE

#define TX_RF_SLEW_RATE_DIS_FLAGS RESET_REQUIRED
#define TX_RF_SLEW_RATE_EN_FLAGS DEFAULT_MEMORY_SETUP
#define TX_RF_SLEW_RATE_AUTO_FLAGS RESET_REQUIRED

#else

#define TX_RF_SLEW_RATE_DIS_FLAGS RESET_REQUIRED
#define TX_RF_SLEW_RATE_EN_FLAGS RESET_REQUIRED
#define TX_RF_SLEW_RATE_AUTO_FLAGS DEFAULT_MEMORY_SETUP

#endif

//
// iMode training
//
#if FixedPcdGet8 (PcdMrcImodeTrainingEnable) == IMODE_DISABLE
#define IMODE_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define IMODE_EN_FLAGS  RESET_REQUIRED
#else
#define IMODE_DIS_FLAGS RESET_REQUIRED
#define IMODE_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// Tco Comp training
//
#if FixedPcdGet8 (PcdMrcTcoCompTrainingEnable) == TCO_COMP_DISABLE
#define TCO_COMP_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define TCO_COMP_EN_FLAGS  RESET_REQUIRED
#else
#define TCO_COMP_DIS_FLAGS RESET_REQUIRED
#define TCO_COMP_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// Round Trip Latency
//
#if FixedPcdGet8 (PcdMrcRoundTripOptimizationTrainingEnable) == ROUND_TRIP_LATENCY_DISABLE
#define ROUND_TRIP_LATENCY_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define ROUND_TRIP_LATENCY_EN_FLAGS  RESET_REQUIRED
#else
#define ROUND_TRIP_LATENCY_DIS_FLAGS RESET_REQUIRED
#define ROUND_TRIP_LATENCY_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// Duty Cycle Training
//
#if DUTY_CYCLE_DEFAULT == DUTY_CYCLE_DISABLE
#define DUTY_CYCLE_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define DUTY_CYCLE_EN_FLAGS  RESET_REQUIRED
#else
#define DUTY_CYCLE_DIS_FLAGS RESET_REQUIRED
#define DUTY_CYCLE_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// Rx Vref Training
//
#if RX_VREF_DEFAULT == RX_VREF_DISABLE
#define RX_VREF_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define RX_VREF_EN_FLAGS  RESET_REQUIRED
#else
#define RX_VREF_DIS_FLAGS RESET_REQUIRED
#define RX_VREF_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// Rx Vref Training
//
#if EYE_DIAGRAM_DEFAULT == EYE_DIAGRAM_DISABLE
#define EYE_DIAGRAM_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define EYE_DIAGRAM_EN_FLAGS  RESET_REQUIRED
#else
#define EYE_DIAGRAM_DIS_FLAGS RESET_REQUIRED
#define EYE_DIAGRAM_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// Turnaround Time Optimization
//
#if FixedPcdGetBool (PcdMrcTurnaroundOptimizations) == TURNAROUND_DISABLE
#define TURNAROUND_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define TURNAROUND_EN_FLAGS  RESET_REQUIRED
#else
#define TURNAROUND_DIS_FLAGS RESET_REQUIRED
#define TURNAROUND_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// DDRT Turnaround Time Optimization
//
#if FixedPcdGetBool (PcdMrcTurnaroundOptimizationsDdrt) == TURNAROUND_DDRT_DISABLE
#define TURNAROUND_DDRT_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define TURNAROUND_DDRT_EN_FLAGS  RESET_REQUIRED
#else
#define TURNAROUND_DDRT_DIS_FLAGS RESET_REQUIRED
#define TURNAROUND_DDRT_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// One Rank Timing Mode Option
//
#if ONE_RANK_TIMING_MODE_DEFAULT == ONE_RANK_TIMING_MODE_DISABLED
#define ONE_RANK_TIMING_MODE_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define ONE_RANK_TIMING_MODE_EN_FLAGS  RESET_REQUIRED
#else
#define ONE_RANK_TIMING_MODE_DIS_FLAGS RESET_REQUIRED
#define ONE_RANK_TIMING_MODE_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// PDA
//
#if PDA_DEFAULT == PDA_DISABLE
#define PDA_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define PDA_EN_FLAGS  RESET_REQUIRED
#else
#define PDA_DIS_FLAGS RESET_REQUIRED
#define PDA_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// Tx Vref Training
//
#if TX_VREF_DEFAULT == TX_VREF_DISABLE
#define TX_VREF_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define TX_VREF_EN_FLAGS  RESET_REQUIRED
#else
#define TX_VREF_DIS_FLAGS RESET_REQUIRED
#define TX_VREF_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// PXC Training
//
#if FixedPcdGet8 (PcdMrcPxcDefault) == PXC_DISABLE
#define PXC_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define PXC_EN_FLAGS  RESET_REQUIRED
#else
#define PXC_DIS_FLAGS RESET_REQUIRED
#define PXC_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// DDJC Training
//
#if FixedPcdGet8 (PcdMrcDdjcDefault) == DDJC_DISABLE
#define DDJC_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define DDJC_EN_FLAGS  RESET_REQUIRED
#else
#define DDJC_DIS_FLAGS RESET_REQUIRED
#define DDJC_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// LRDIMM DB DFE Training, default: DBDFE_PMEM_EN_FLAGS
//
#if FixedPcdGet8 (PcdMrcLrdimmDbDfeDefault) == DBDFE_DISABLE
#define DBDFE_DIS_FLAGS        DEFAULT_MEMORY_SETUP
#define DBDFE_PMEM_EN_FLAGS    RESET_REQUIRED
#define DBDFE_LRDIMM_EN_FLAGS  RESET_REQUIRED
#else
#define DBDFE_DIS_FLAGS        RESET_REQUIRED
#define DBDFE_PMEM_EN_FLAGS    DEFAULT_MEMORY_SETUP
#define DBDFE_LRDIMM_EN_FLAGS  RESET_REQUIRED
#endif

//
// Thermal throttling
//
#if THERMAL_THROT_DEFAULT == THERMAL_THROT_DISABLE
#define THERMAL_THROT_DIS_FLAGS DEFAULT_MEMORY_SETUP
#else
#define THERMAL_THROT_DIS_FLAGS RESET_REQUIRED
#endif

#if THERMAL_THROT_DEFAULT == OLTT_ENABLE
#define OLTT_EN_FLAGS DEFAULT_MEMORY_SETUP
#else
#define OLTT_EN_FLAGS RESET_REQUIRED
#endif

#if THERMAL_THROT_DEFAULT == CLTT_ENABLE
#define CLTT_EN_FLAGS DEFAULT_MEMORY_SETUP
#else
#define CLTT_EN_FLAGS RESET_REQUIRED
#endif

#if THERMAL_THROT_DEFAULT == CLTT_PECI_ENABLE
#define CLTT_PECI_EN_FLAGS DEFAULT_MEMORY_SETUP
#else
#define CLTT_PECI_EN_FLAGS RESET_REQUIRED
#endif

//
// MemTripReporting
//
#if MEMTRIP_REPORTING_DEFAULT == MEMTRIP_REPORTING_DISABLE
#define MEMTRIP_REPORTING_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define MEMTRIP_REPORTING_EN_FLAGS  RESET_REQUIRED
#else // MemTripReporting
#define MEMTRIP_REPORTING_DIS_FLAGS RESET_REQUIRED
#define MEMTRIP_REPORTING_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif // MemTripReporting

//
// OffPkg Memtrip to Thermal trip
//
#if OFFPKG_MEM_TO_THERMTRIP_DEFAULT == OFFPKG_MEM_TO_THERMTRIP_DISABLE
#define OFFPKG_MEM_TO_THERMTRIP_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define OFFPKG_MEM_TO_THERMTRIP_EN_FLAGS  RESET_REQUIRED
#else // OffPkg Memtrip to Thermal trip
#define OFFPKG_MEM_TO_THERMTRIP_DIS_FLAGS RESET_REQUIRED
#define OFFPKG_MEM_TO_THERMTRIP_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif // OffPkg Memtrip to Thermal trip

//
// OffPkg Memtrip to Memtrip
//
#if OFFPKG_MEM_TO_MEMTRIP_DEFAULT == OFFPKG_MEM_TO_MEMTRIP_DISABLE
#define OFFPKG_MEM_TO_MEMTRIP_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define OFFPKG_MEM_TO_MEMTRIP_EN_FLAGS  RESET_REQUIRED
#else //  OffPkg Memtrip to Memtrip
#define OFFPKG_MEM_TO_MEMTRIP_DIS_FLAGS RESET_REQUIRED
#define OFFPKG_MEM_TO_MEMTRIP_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif //  OffPkg Memtrip to Memtrip

//
// MEMHOT Throttling Mode
//
#if MEMHOT_DEFAULT == MEMHOT_ENABLE
#define MEMHOT_EN_FLAGS DEFAULT_MEMORY_SETUP
#else
#define MEMHOT_EN_FLAGS RESET_REQUIRED
#endif

#if MEMHOT_DEFAULT == MEMHOT_DISABLE
#define MEMHOT_DIS_FLAGS DEFAULT_MEMORY_SETUP
#else
#define MEMHOT_DIS_FLAGS RESET_REQUIRED
#endif

#if MEMHOT_DEFAULT == MEMHOT_OUTPUT_ONLY
#define MEMHOT_OUTPUT_ONLY_FLAGS DEFAULT_MEMORY_SETUP
#else
#define MEMHOT_OUTPUT_ONLY_FLAGS RESET_REQUIRED
#endif

#if MEMHOT_DEFAULT == MEMHOT_INPUT_ONLY
#define MEMHOT_INPUT_ONLY_FLAGS DEFAULT_MEMORY_SETUP
#else
#define MEMHOT_INPUT_ONLY_FLAGS RESET_REQUIRED
#endif

#if MEMHOT_DEFAULT == MEMHOT_INPUT_OUTPUT
#define MEMHOT_INPUT_OUTPUT_FLAGS DEFAULT_MEMORY_SETUP
#else
#define MEMHOT_INPUT_OUTPUT_FLAGS RESET_REQUIRED
#endif

//Memhot in option
#if MEMHOT_IN_DEFAULT == MEMHOT_IN_DISABLE
#define MEMHOT_IN_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define MEMHOT_IN_EN_FLAGS RESET_REQUIRED
#else
#define MEMHOT_IN_DIS_FLAGS RESET_REQUIRED
#define MEMHOT_IN_EN_FLAGS DEFAULT_MEMORY_SETUP
#endif

//Memhot out option
#if MEMHOT_OUT_DEFAULT == MEMHOT_OUT_DISABLE
#define MEMHOT_OUT_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define MEMHOT_OUT_EN_FLAGS RESET_REQUIRED
#else
#define MEMHOT_OUT_DIS_FLAGS RESET_REQUIRED
#define MEMHOT_OUT_EN_FLAGS DEFAULT_MEMORY_SETUP
#endif

//
// MEMHOT Output Only Options
//
#if MEMHOT_OUTPUT_ONLY_DEFAULT == MEMHOT_OUTPUT_ONLY_DIS
#define MEMHOT_OUTPUT_ONLY_DIS_FLAGS          DEFAULT_MEMORY_SETUP
#else
#define MEMHOT_OUTPUT_ONLY_DIS_FLAGS          MANUFACTURING_DEFAULT_MEMORY_SETUP
#endif

#if MEMHOT_OUTPUT_ONLY_DEFAULT == MEMHOT_OUTPUT_ONLY_HIGH
#define MEMHOT_OUTPUT_ONLY_HIGH_FLAGS         NON_MANUFACTURING_DEFAULT_MEMORY_SETUP
#else
#define MEMHOT_OUTPUT_ONLY_HIGH_FLAGS         RESET_REQUIRED
#endif

#if MEMHOT_OUTPUT_ONLY_DEFAULT == MEMHOT_OUTPUT_ONLY_HIGH_MED
#define MEMHOT_OUTPUT_ONLY_HIGH_MED_FLAGS     NON_MANUFACTURING_DEFAULT_MEMORY_SETUP
#else
#define MEMHOT_OUTPUT_ONLY_HIGH_MED_FLAGS     RESET_REQUIRED
#endif

#if MEMHOT_OUTPUT_ONLY_DEFAULT == MEMHOT_OUTPUT_ONLY_HIGH_MED_LOW_MED
#define MEMHOT_OUTPUT_ONLY_HIGH_MED_LOW_FLAGS NON_MANUFACTURING_DEFAULT_MEMORY_SETUP
#else
#define MEMHOT_OUTPUT_ONLY_HIGH_MED_LOW_FLAGS RESET_REQUIRED
#endif

//
// CKE
//
#if CKE_DEFAULT == CKE_AUTO
#define CKE_AUTO_FLAGS   DEFAULT_MEMORY_SETUP
#define CKE_MANUAL_FLAGS RESET_REQUIRED
#else
#define CKE_AUTO_FLAGS   RESET_REQUIRED
#define CKE_MANUAL_FLAGS DEFAULT_MEMORY_SETUP
#endif

//
// Self Refresh Programming
//
#if SREF_PROG_DEFAULT == SREF_PROG_AUTO
#define SREF_PROG_AUTO_FLAGS   DEFAULT_MEMORY_SETUP
#define SREF_PROG_MANUAL_FLAGS RESET_REQUIRED
#else
#define SREF_PROG_AUTO_FLAGS   RESET_REQUIRED
#define SREF_PROG_MANUAL_FLAGS DEFAULT_MEMORY_SETUP
#endif

//
// PKGC_SREF
//
#if PKGC_SREF_DEFAULT == PKGC_SREF_DISABLE
#define PKGC_SREF_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define PKGC_SREF_EN_FLAGS  RESET_REQUIRED
#else
#define PKGC_SREF_DIS_FLAGS RESET_REQUIRED
#define PKGC_SREF_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// Data DLL Off
//
#if DATA_DLL_OFF_DEFAULT == DATA_DLL_OFF_DISABLE
#define DATA_DLL_OFF_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define DATA_DLL_OFF_EN_FLAGS  RESET_REQUIRED
#else
#define DATA_DLL_OFF_DIS_FLAGS RESET_REQUIRED
#define DATA_DLL_OFF_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// APD
//
#if APD_DEFAULT == APD_DISABLE
#define APD_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define APD_EN_FLAGS  RESET_REQUIRED
#else
#define APD_DIS_FLAGS RESET_REQUIRED
#define APD_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// PPD
//
#if PPD_DEFAULT == PPD_DISABLE
#define PPD_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define PPD_EN_FLAGS  RESET_REQUIRED
#else
#define PPD_DIS_FLAGS RESET_REQUIRED
#define PPD_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// DDRT CKE
//
#if DDRT_CKE_DEFAULT == DDRT_CKE_DISABLE
#define DDRT_CKE_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define DDRT_CKE_EN_FLAGS  RESET_REQUIRED
#else
#define DDRT_CKE_DIS_FLAGS RESET_REQUIRED
#define DDRT_CKE_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// Opportunistic Self-Refresh
//
#if FixedPcdGet8 (PcdOpportunisticSelfRefreshDefault) == OPP_SREF_DISABLE
#define OPP_SREF_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define OPP_SREF_EN_FLAGS  RESET_REQUIRED
#else
#define OPP_SREF_DIS_FLAGS RESET_REQUIRED
#define OPP_SREF_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// DDRT SREF
//
#if FixedPcdGet8 (PcdDdrtSrefDefault) == DDRT_SREF_DISABLE
#define DDRT_SREF_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define DDRT_SREF_EN_FLAGS  RESET_REQUIRED
#else
#define DDRT_SREF_DIS_FLAGS RESET_REQUIRED
#define DDRT_SREF_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// MDLL
//
#if MDLL_OFF_DEFAULT == MDLL_OFF_DISABLE
#define MDLL_OFF_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define MDLL_OFF_EN_FLAGS  RESET_REQUIRED
#else
#define MDLL_OFF_DIS_FLAGS RESET_REQUIRED
#define MDLL_OFF_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// CK/CK# OFF for Self Refresh
//
#if CK_SELF_REF_DEFAULT == CK_SELF_REF_DRIVEN
#define CK_SELF_REF_DRIVEN_FLAGS DEFAULT_MEMORY_SETUP
#define CK_SELF_REF_LOW_FLAGS    RESET_REQUIRED
#else
#define CK_SELF_REF_DRIVEN_FLAGS RESET_REQUIRED
#define CK_SELF_REF_LOW_FLAGS    DEFAULT_MEMORY_SETUP
#endif

//
//  XMP Support
//
#if XMP_DEFAULT == XMP_AUTO
#define XMP_AUTO_FLAGS DEFAULT_MEMORY_SETUP_INTERACTIVE
#else
#define XMP_AUTO_FLAGS RESET_REQUIRED | INTERACTIVE
#endif

#if XMP_DEFAULT == XMP_MANUAL
#define XMP_MANUAL_FLAGS DEFAULT_MEMORY_SETUP_INTERACTIVE
#else
#define XMP_MANUAL_FLAGS RESET_REQUIRED | INTERACTIVE
#endif

#if XMP_DEFAULT == XMP_PROFILE_1
#define XMP_PROFILE_1_FLAGS DEFAULT_MEMORY_SETUP_INTERACTIVE
#else
#define XMP_PROFILE_1_FLAGS RESET_REQUIRED | INTERACTIVE
#endif

#if XMP_DEFAULT == XMP_PROFILE_2
#define XMP_PROFILE_2_FLAGS DEFAULT_MEMORY_SETUP_INTERACTIVE
#else
#define XMP_PROFILE_2_FLAGS RESET_REQUIRED | INTERACTIVE
#endif

//
// Command timming
//
#if CMD_TIMING_DEFAULT == CMD_TIMING_AUTO
#define CMD_TIMING_AUTO_FLAGS DEFAULT_MEMORY_SETUP
#else
#define CMD_TIMING_AUTO_FLAGS RESET_REQUIRED
#endif

#if CMD_TIMING_DEFAULT == CMD_TIMING_1N
#define CMD_TIMING_1N_FLAGS DEFAULT_MEMORY_SETUP
#else
#define CMD_TIMING_1N_FLAGS RESET_REQUIRED
#endif

#if CMD_TIMING_DEFAULT == CMD_TIMING_2N
#define CMD_TIMING_2N_FLAGS DEFAULT_MEMORY_SETUP
#else
#define CMD_TIMING_2N_FLAGS RESET_REQUIRED
#endif

#if CMD_TIMING_DEFAULT == CMD_TIMING_3N
#define CMD_TIMING_3N_FLAGS DEFAULT_MEMORY_SETUP
#else
#define CMD_TIMING_3N_FLAGS RESET_REQUIRED
#endif

//
// Volatile Memory Mode
//
#if VOL_MEM_MODE_DEFAULT == VOL_MEM_MODE_1LM
#define VOL_MEM_MODE_1LM_FLAGS DEFAULT_MEMORY_SETUP
#else
#define VOL_MEM_MODE_1LM_FLAGS RESET_REQUIRED
#endif

#if VOL_MEM_MODE_DEFAULT == VOL_MEM_MODE_2LM
#define VOL_MEM_MODE_2LM_FLAGS DEFAULT_MEMORY_SETUP
#else
#define VOL_MEM_MODE_2LM_FLAGS RESET_REQUIRED
#endif

//
// Cache Memory Type
//
#if CACHE_TYPE_DEFAULT == CACHE_TYPE_DDR_CACHE_PMEM
#define CACHE_TYPE_DDR_CACHE_PMEM_FLAGS DEFAULT_MEMORY_SETUP
#else
#define CACHE_TYPE_DDR_CACHE_PMEM_FLAGS RESET_REQUIRED
#endif

#if CACHE_TYPE_DEFAULT == CACHE_TYPE_HBM_CACHE_DDR
#define CACHE_TYPE_HBM_CACHE_DDR_FLAGS DEFAULT_MEMORY_SETUP
#else
#define CACHE_TYPE_HBM_CACHE_DDR_FLAGS RESET_REQUIRED
#endif

//
// DDR Cache Size
//
#if DDR_ENCODED_CACHE_SIZE_DEFAULT == DDR_ENCODED_CACHE_SIZE_ALL
#define DDR_ENCODED_CACHE_SIZE_ALL_FLAGS DEFAULT_MEMORY_SETUP
#else
#define DDR_ENCODED_CACHE_SIZE_ALL_FLAGS RESET_REQUIRED
#endif

#if DDR_ENCODED_CACHE_SIZE_DEFAULT == DDR_ENCODED_CACHE_SIZE_8GB
#define DDR_ENCODED_CACHE_SIZE_8GB_FLAGS DEFAULT_MEMORY_SETUP
#else
#define DDR_ENCODED_CACHE_SIZE_8GB_FLAGS RESET_REQUIRED
#endif

#if DDR_ENCODED_CACHE_SIZE_DEFAULT == DDR_ENCODED_CACHE_SIZE_16GB
#define DDR_ENCODED_CACHE_SIZE_16GB_FLAGS DEFAULT_MEMORY_SETUP
#else
#define DDR_ENCODED_CACHE_SIZE_16GB_FLAGS RESET_REQUIRED
#endif

#if DDR_ENCODED_CACHE_SIZE_DEFAULT == DDR_ENCODED_CACHE_SIZE_32GB
#define DDR_ENCODED_CACHE_SIZE_32GB_FLAGS DEFAULT_MEMORY_SETUP
#else
#define DDR_ENCODED_CACHE_SIZE_32GB_FLAGS RESET_REQUIRED
#endif

#if DDR_ENCODED_CACHE_SIZE_DEFAULT == DDR_ENCODED_CACHE_SIZE_64GB
#define DDR_ENCODED_CACHE_SIZE_64GB_FLAGS DEFAULT_MEMORY_SETUP
#else
#define DDR_ENCODED_CACHE_SIZE_64GB_FLAGS RESET_REQUIRED
#endif

#if DDR_ENCODED_CACHE_SIZE_DEFAULT == DDR_ENCODED_CACHE_SIZE_128GB
#define DDR_ENCODED_CACHE_SIZE_128GB_FLAGS DEFAULT_MEMORY_SETUP
#else
#define DDR_ENCODED_CACHE_SIZE_128GB_FLAGS RESET_REQUIRED
#endif

#if DDR_ENCODED_CACHE_SIZE_DEFAULT == DDR_ENCODED_CACHE_SIZE_256GB
#define DDR_ENCODED_CACHE_SIZE_256GB_FLAGS DEFAULT_MEMORY_SETUP
#else
#define DDR_ENCODED_CACHE_SIZE_256GB_FLAGS RESET_REQUIRED
#endif

//
// Persistent cache mode
//
#if PMEM_WBCACHE_ENABLE_DEFAULT == PMEM_WBCACHE_ENABLED
#define PMEM_CACHE_ENABLE_FLAGS              DEFAULT_MEMORY_SETUP
#else   // #if PMEM_WBCACHE_ENABLE_DEFAULT == PMEM_WBCACHE_ENABLED
#define PMEM_CACHE_ENABLE_FLAGS              RESET_REQUIRED
#endif  // #if PMEM_WBCACHE_ENABLE_DEFAULT == PMEM_WBCACHE_ENABLED

#if PMEM_WBCACHE_ENABLE_DEFAULT == PMEM_WBCACHE_DISABLED
#define PMEM_CACHE_DISABLE_FLAGS             DEFAULT_MEMORY_SETUP
#else   // #if PMEM_WBCACHE_ENABLE_DEFAULT == PMEM_WBCACHE_DISABLED
#define PMEM_CACHE_DISABLE_FLAGS             RESET_REQUIRED
#endif  // #if PMEM_WBCACHE_ENABLE_DEFAULT == PMEM_WBCACHE_DISABLED

//
// eADR support
//
#if EADR_DEFAULT == EADR_DISABLED
#define EADR_DISABLED_FLAGS               DEFAULT_MEMORY_SETUP
#define EADR_ENABLED_FLAGS                RESET_REQUIRED
#define EADR_AUTO_FLAGS                   RESET_REQUIRED
#elif EADR_DEFAULT == EADR_ENABLED
#define EADR_DISABLED_FLAGS               RESET_REQUIRED
#define EADR_ENABLED_FLAGS                DEFAULT_MEMORY_SETUP
#define EADR_AUTO_FLAGS                   RESET_REQUIRED
#else
#define EADR_DISABLED_FLAGS               RESET_REQUIRED
#define EADR_ENABLED_FLAGS                RESET_REQUIRED
#define EADR_AUTO_FLAGS                   DEFAULT_MEMORY_SETUP
#endif

//
// fADR support
//
#if FADR_DEFAULT == FADR_DISABLED
#define FADR_DISABLED_FLAGS               DEFAULT_MEMORY_SETUP
#define FADR_ENABLED_FLAGS                RESET_REQUIRED
#else
#define FADR_DISABLED_FLAGS               RESET_REQUIRED
#define FADR_ENABLED_FLAGS                DEFAULT_MEMORY_SETUP
#endif

//
// Interleave Granularity 1LM
//
#if MEM_INT_GRAN_1LM_DEFAULT == MEM_INT_GRAN_1LM_256B_256B
#define MEM_INT_GRAN_1LM_256B_256B_FLAGS DEFAULT_MEMORY_SETUP
#else
#define MEM_INT_GRAN_1LM_256B_256B_FLAGS RESET_REQUIRED
#endif

#if MEM_INT_GRAN_1LM_DEFAULT == MEM_INT_GRAN_1LM_64B_64B
#define MEM_INT_GRAN_1LM_64B_64B_FLAGS DEFAULT_MEMORY_SETUP
#else
#define MEM_INT_GRAN_1LM_64B_64B_FLAGS RESET_REQUIRED
#endif

#if MEM_INT_GRAN_1LM_DEFAULT == MEM_INT_GRAN_1LM_4KB_256B_256B
#define MEM_INT_GRAN_1LM_4KB_256B_256B_FLAGS DEFAULT_MEMORY_SETUP
#else
#define MEM_INT_GRAN_1LM_4KB_256B_256B_FLAGS RESET_REQUIRED
#endif

//
// DDRT channel interleave granularity
//
#if MEM_INT_GRAN_DDRT_DEFAULT == MEM_INT_GRAN_CH_4KB_TGT_4KB
#define MEM_INT_GRAN_CH_4KB_TGT_4KB_FLAGS DEFAULT_MEMORY_SETUP
#else
#define MEM_INT_GRAN_CH_4KB_TGT_4KB_FLAGS RESET_REQUIRED
#endif

#if MEM_INT_GRAN_DDRT_DEFAULT == MEM_INT_GRAN_CH_256B_TGT_4KB
#define MEM_INT_GRAN_CH_256B_TGT_4KB_FLAGS DEFAULT_MEMORY_SETUP
#else
#define MEM_INT_GRAN_CH_256B_TGT_4KB_FLAGS RESET_REQUIRED
#endif

//
// HBM cached mode
//
#if HBM_CACHE_ENABLE_DEFAULT == HBM_CACHE_ENABLE
#define HBM_CACHE_ENABLE_FLAGS              DEFAULT_MEMORY_SETUP
#else   // #if HBM_CACHE_ENABLE_DEFAULT == HBM_CACHE_ENABLE
#define HBM_CACHE_ENABLE_FLAGS              RESET_REQUIRED
#endif  // #if HBM_CACHE_ENABLE_DEFAULT == HBM_CACHE_ENABLE

#if HBM_CACHE_ENABLE_DEFAULT == HBM_CACHE_DISABLE
#define HBM_CACHE_DISABLE_FLAGS             DEFAULT_MEMORY_SETUP
#else   // #if HBM_CACHE_ENABLE_DEFAULT == HBM_CACHE_DISABLE
#define HBM_CACHE_DISABLE_FLAGS             RESET_REQUIRED
#endif  // #if HBM_CACHE_ENABLE_DEFAULT == HBM_CACHE_DISABLE

#if HBM_CACHE_RATIO_DEFAULT == HBM_CACHE_RATIO_MIN
#define HBM_CACHE_RATIO_MIN_FLAGS           DEFAULT_MEMORY_SETUP
#else   // #if HBM_CACHE_RATIO_DEFAULT == HBM_CACHE_RATIO_MIN
#define HBM_CACHE_RATIO_MIN_FLAGS           RESET_REQUIRED
#endif  // #if HBM_CACHE_RATIO_DEFAULT == HBM_CACHE_RATIO_MIN

#if HBM_CACHE_RATIO_DEFAULT == HBM_CACHE_RATIO_25_PERCENT
#define HBM_CACHE_RATIO_25_PERCENT_FLAGS    DEFAULT_MEMORY_SETUP
#else   // #if HBM_CACHE_RATIO_DEFAULT == HBM_CACHE_RATIO_25_PERCENT
#define HBM_CACHE_RATIO_25_PERCENT_FLAGS    RESET_REQUIRED
#endif  // #if HBM_CACHE_RATIO_DEFAULT == HBM_CACHE_RATIO_25_PERCENT

#if HBM_CACHE_RATIO_DEFAULT == HBM_CACHE_RATIO_50_PERCENT
#define HBM_CACHE_RATIO_50_PERCENT_FLAGS    DEFAULT_MEMORY_SETUP
#else   // #if HBM_CACHE_RATIO_DEFAULT == HBM_CACHE_RATIO_50_PERCENT
#define HBM_CACHE_RATIO_50_PERCENT_FLAGS    RESET_REQUIRED
#endif  // #if HBM_CACHE_RATIO_DEFAULT == HBM_CACHE_RATIO_50_PERCENT

#if HBM_CACHE_RATIO_DEFAULT == HBM_CACHE_RATIO_100_PERCENT
#define HBM_CACHE_RATIO_100_PERCENT_FLAGS   DEFAULT_MEMORY_SETUP
#else   // #if HBM_CACHE_RATIO_DEFAULT == HBM_CACHE_RATIO_100_PERCENT
#define HBM_CACHE_RATIO_100_PERCENT_FLAGS   RESET_REQUIRED
#endif  // #if HBM_CACHE_RATIO_DEFAULT == HBM_CACHE_RATIO_100_PERCENT

#if HBM_CACHE_FM_TYPE_DEFAULT == HBM_CACHE_FM_TYPE_DDR4
#define HBM_CACHE_FM_TYPE_DDR4_FLAGS        DEFAULT_MEMORY_SETUP
#else   // #if HBM_CACHE_FM_TYPE_DEFAULT == HBM_CACHE_FM_TYPE_DDR4
#define HBM_CACHE_FM_TYPE_DDR4_FLAGS        RESET_REQUIRED
#endif  // #if HBM_CACHE_FM_TYPE_DEFAULT == HBM_CACHE_FM_TYPE_DDR4

#if HBM_CACHE_FM_TYPE_DEFAULT == HBM_CACHE_FM_TYPE_DDRT
#define HBM_CACHE_FM_TYPE_DDRT_FLAGS        DEFAULT_MEMORY_SETUP
#else   // #if HBM_CACHE_FM_TYPE_DEFAULT == HBM_CACHE_FM_TYPE_DDRT
#define HBM_CACHE_FM_TYPE_DDRT_FLAGS        RESET_REQUIRED
#endif  // #if HBM_CACHE_FM_TYPE_DEFAULT == HBM_CACHE_FM_TYPE_DDRT

#if HBM_CACHE_FM_TYPE_DEFAULT == HBM_CACHE_FM_TYPE_AUTO
#define HBM_CACHE_FM_TYPE_AUTO_FLAGS        DEFAULT_MEMORY_SETUP
#else   // #if HBM_CACHE_FM_TYPE_DEFAULT == HBM_CACHE_FM_TYPE_AUTO
#define HBM_CACHE_FM_TYPE_AUTO_FLAGS        RESET_REQUIRED
#endif  // #if HBM_CACHE_FM_TYPE_DEFAULT == HBM_CACHE_FM_TYPE_AUTO

#if HBM_CACHE_DDRT_GRAN_DEFAULT == HBM_CACHE_DDRT_GRAN_256B
#define HBM_CACHE_DDRT_GRAN_256B_FLAGS      DEFAULT_MEMORY_SETUP
#else   // #if HBM_CACHE_DDRT_GRAN_DEFAULT == HBM_CACHE_DDRT_GRAN_256B
#define HBM_CACHE_DDRT_GRAN_256B_FLAGS      RESET_REQUIRED
#endif  // #if HBM_CACHE_DDRT_GRAN_DEFAULT == HBM_CACHE_DDRT_GRAN_256B

#if HBM_CACHE_DDRT_GRAN_DEFAULT == HBM_CACHE_DDRT_GRAN_4KB
#define HBM_CACHE_DDRT_GRAN_4KB_FLAGS      DEFAULT_MEMORY_SETUP
#else   // #if HBM_CACHE_DDRT_GRAN_DEFAULT == HBM_CACHE_DDRT_GRAN_4KB
#define HBM_CACHE_DDRT_GRAN_4KB_FLAGS      RESET_REQUIRED
#endif  // #if HBM_CACHE_DDRT_GRAN_DEFAULT == HBM_CACHE_DDRT_GRAN_4KB

//
// Socket Interleave Below 4GB
//
#if SOCKET_INTER_BELOW_4G_DEFAULT == SOCKET_INTER_BELOW_4G_DISABLE
#define SOCKET_INTER_BELOW_4G_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SOCKET_INTER_BELOW_4G_EN_FLAGS  RESET_REQUIRED
#else
#define SOCKET_INTER_BELOW_4G_DIS_FLAGS RESET_REQUIRED
#define SOCKET_INTER_BELOW_4G_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// TDP POWER
//
#if TDP_POWER_DEFAULT == TDP_POWER_10W
#define TDP_POWER_10W_FLAGS DEFAULT_MEMORY_SETUP
#else
#define TDP_POWER_10W_FLAGS RESET_REQUIRED
#endif

#if TDP_POWER_DEFAULT == TDP_POWER_12W
#define TDP_POWER_12W_FLAGS DEFAULT_MEMORY_SETUP
#else
#define TDP_POWER_12W_FLAGS RESET_REQUIRED
#endif

#if TDP_POWER_DEFAULT == TDP_POWER_15W
#define TDP_POWER_15W_FLAGS DEFAULT_MEMORY_SETUP
#else
#define TDP_POWER_15W_FLAGS RESET_REQUIRED
#endif

#if TDP_POWER_DEFAULT == TDP_POWER_18W
#define TDP_POWER_18W_FLAGS DEFAULT_MEMORY_SETUP
#else
#define TDP_POWER_18W_FLAGS RESET_REQUIRED
#endif

//
// LOCK NGN
//
#if LOCK_NGN_CSR_DEFAULT == LOCK_NGN_CSR_DISABLE
#define LOCK_NGN_CSR_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define LOCK_NGN_CSR_EN_FLAGS  RESET_REQUIRED
#else
#define LOCK_NGN_CSR_DIS_FLAGS RESET_REQUIRED
#define LOCK_NGN_CSR_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// NGN DEBUG LOCK
//
#if NGN_DEBUG_LOCK_DEFAULT == NGN_DEBUG_LOCK_DISABLE
#define NGN_DEBUG_LOCK_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define NGN_DEBUG_LOCK_EN_FLAGS  RESET_REQUIRED
#else
#define NGN_DEBUG_LOCK_DIS_FLAGS RESET_REQUIRED
#define NGN_DEBUG_LOCK_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// NGN CMD
//
#if NGN_CMD_TIME_DEFAULT == NGN_CMD_TIME_AUTO
#define NGN_CMD_TIME_AUTO_FLAGS DEFAULT_MEMORY_SETUP
#else
#define NGN_CMD_TIME_AUTO_FLAGS RESET_REQUIRED
#endif

#if NGN_CMD_TIME_DEFAULT == NGN_CMD_1N
#define NGN_CMD_1N_FLAGS        DEFAULT_MEMORY_SETUP
#else
#define NGN_CMD_1N_FLAGS        RESET_REQUIRED
#endif

#if NGN_CMD_TIME_DEFAULT == NGN_CMD_2N
#define NGN_CMD_2N_FLAGS        DEFAULT_MEMORY_SETUP
#else
#define NGN_CMD_2N_FLAGS        RESET_REQUIRED
#endif

//
// NGN ECC CORR
//
#if NGN_ECC_CORR_DEFAULT == NGN_ECC_CORR_DISABLE
#define NGN_ECC_CORR_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define NGN_ECC_CORR_EN_FLAGS  RESET_REQUIRED
#else
#define NGN_ECC_CORR_DIS_FLAGS RESET_REQUIRED
#define NGN_ECC_CORR_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// NGN ECC WR CHK
//
#if NGN_ECC_WR_CHK_DEFAULT == NGN_ECC_WR_CHK_DISABLE
#define NGN_ECC_WR_CHK_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define NGN_ECC_WR_CHK_EN_FLAGS  RESET_REQUIRED
#else
#define NGN_ECC_WR_CHK_DIS_FLAGS RESET_REQUIRED
#define NGN_ECC_WR_CHK_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// NGN ECC RD CHK
//
#if NGN_ECC_RD_CHK_DEFAULT == NGN_ECC_RD_CHK_DISABLE
#define NGN_ECC_RD_CHK_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define NGN_ECC_RD_CHK_EN_FLAGS  RESET_REQUIRED
#else
#define NGN_ECC_RD_CHK_DIS_FLAGS RESET_REQUIRED
#define NGN_ECC_RD_CHK_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// NGN Publishing ARS capability
//
#if NGN_ARS_PUBLISH_DEFAULT == NGN_ARS_PUBLISH_DIS
#define NGN_ARS_PUBLISH_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define NGN_ARS_PUBLISH_EN_FLAGS  RESET_REQUIRED
#else
#define NGN_ARS_PUBLISH_DIS_FLAGS RESET_REQUIRED
#define NGN_ARS_PUBLISH_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// NGN boot time ARS
//
#if NGN_ARS_ON_BOOT_DEFAULT == NGN_ARS_ON_BOOT_DIS
#define NGN_ARS_ON_BOOT_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define NGN_ARS_ON_BOOT_EN_FLAGS  RESET_REQUIRED
#else
#define NGN_ARS_ON_BOOT_DIS_FLAGS RESET_REQUIRED
#define NGN_ARS_ON_BOOT_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// CR pcommit lock
//
#if CR_PCOMMIT_LOCK_DEFAULT == CR_PCOMMIT_LOCK_DISABLE
#define CR_PCOMMIT_LOCK_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define CR_PCOMMIT_LOCK_EN_FLAGS  RESET_REQUIRED
#else
#define CR_PCOMMIT_LOCK_DIS_FLAGS RESET_REQUIRED
#define CR_PCOMMIT_LOCK_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// CR QOS CONFIG
//
#ifdef ICX_HOST

#if FixedPcdGet8 (PcdMrcCrQosConfigDefault) == CR_FASTGO_AUTOMATIC
#define CR_QOS_FASTGO_AUTOMATIC_FLAGS DEFAULT_MEMORY_SETUP
#else
#define CR_QOS_FASTGO_AUTOMATIC_FLAGS RESET_REQUIRED
#endif

#if FixedPcdGet8 (PcdMrcCrQosConfigDefault) == CR_FASTGO_DEFAULT
#define CR_QOS_DEFAULT_FLAGS DEFAULT_MEMORY_SETUP
#else
#define CR_QOS_DEFAULT_FLAGS RESET_REQUIRED
#endif

#if FixedPcdGet8 (PcdMrcCrQosConfigDefault) == CR_FASTGO_DISABLE
#define CR_QOS_FASTGO_DISABLE_FLAGS DEFAULT_MEMORY_SETUP
#else
#define CR_QOS_FASTGO_DISABLE_FLAGS RESET_REQUIRED
#endif

#else  // ICX_HOST

#if CR_FASTGO_KNOB_DEFAULT == CR_FASTGO_AUTOMATIC
#define CR_QOS_FASTGO_AUTOMATIC_FLAGS DEFAULT_MEMORY_SETUP
#else
#define CR_QOS_FASTGO_AUTOMATIC_FLAGS RESET_REQUIRED
#endif

#if CR_FASTGO_KNOB_DEFAULT == CR_FASTGO_DEFAULT
#define CR_QOS_DEFAULT_FLAGS DEFAULT_MEMORY_SETUP
#else
#define CR_QOS_DEFAULT_FLAGS RESET_REQUIRED
#endif

#if FixedPcdGet8 (PcdMrcCrQosConfigDefault) == CR_FASTGO_DISABLE
#define CR_QOS_FASTGO_DISABLE_FLAGS DEFAULT_MEMORY_SETUP
#else
#define CR_QOS_FASTGO_DISABLE_FLAGS RESET_REQUIRED
#endif

#if FixedPcdGet8 (PcdMrcCrQosConfigDefault) == CR_FASTGO_DISABLE_MLC_SQ_THRESHOLD_5
#define CR_QOS_FASTGO_DISABLE_MLC_SQ_THRESHOLD_5_FLAGS DEFAULT_MEMORY_SETUP
#else
#define CR_QOS_FASTGO_DISABLE_MLC_SQ_THRESHOLD_5_FLAGS RESET_REQUIRED
#endif

#if FixedPcdGet8 (PcdMrcCrQosConfigDefault) == CR_FASTGO_DISABLE_MLC_SQ_THRESHOLD_6
#define CR_QOS_FASTGO_DISABLE_MLC_SQ_THRESHOLD_6_FLAGS DEFAULT_MEMORY_SETUP
#else
#define CR_QOS_FASTGO_DISABLE_MLC_SQ_THRESHOLD_6_FLAGS RESET_REQUIRED
#endif

#if FixedPcdGet8 (PcdMrcCrQosConfigDefault) == CR_FASTGO_DISABLE_MLC_SQ_THRESHOLD_8
#define CR_QOS_FASTGO_DISABLE_MLC_SQ_THRESHOLD_8_FLAGS DEFAULT_MEMORY_SETUP
#else
#define CR_QOS_FASTGO_DISABLE_MLC_SQ_THRESHOLD_8_FLAGS RESET_REQUIRED
#endif

#if FixedPcdGet8 (PcdMrcCrQosConfigDefault) == CR_FASTGO_DISABLE_MLC_SQ_THRESHOLD_10
#define CR_QOS_FASTGO_DISABLE_MLC_SQ_THRESHOLD_10_FLAGS DEFAULT_MEMORY_SETUP
#else
#define CR_QOS_FASTGO_DISABLE_MLC_SQ_THRESHOLD_10_FLAGS RESET_REQUIRED
#endif

#endif // ICX_HOST

//
// Secure Erase Unit
//
#if SECURE_ERASE_ALL_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_ALL_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_ALL_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_ALL_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_ALL_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT0_CH0_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT0_CH0_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT0_CH0_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT0_CH0_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT0_CH0_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT0_CH1_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT0_CH1_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT0_CH1_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT0_CH1_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT0_CH1_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT0_CH2_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT0_CH2_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT0_CH2_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT0_CH2_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT0_CH2_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT0_CH3_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT0_CH3_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT0_CH3_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT0_CH3_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT0_CH3_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT0_CH4_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT0_CH4_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT0_CH4_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT0_CH4_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT0_CH4_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT0_CH5_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT0_CH5_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT0_CH5_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT0_CH5_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT0_CH5_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT0_CH6_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT0_CH6_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT0_CH6_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT0_CH6_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT0_CH6_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT0_CH7_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT0_CH7_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT0_CH7_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT0_CH7_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT0_CH7_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT1_CH0_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT1_CH0_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT1_CH0_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT1_CH0_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT1_CH0_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT1_CH1_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT1_CH1_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT1_CH1_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT1_CH1_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT1_CH1_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT1_CH2_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT1_CH2_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT1_CH2_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT1_CH2_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT1_CH2_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT1_CH3_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT1_CH3_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT1_CH3_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT1_CH3_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT1_CH3_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT1_CH4_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT1_CH4_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT1_CH4_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT1_CH4_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT1_CH4_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT1_CH5_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT1_CH5_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT1_CH5_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT1_CH5_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT1_CH5_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT1_CH6_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT1_CH6_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT1_CH6_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT1_CH6_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT1_CH6_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT1_CH7_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT1_CH7_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT1_CH7_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT1_CH7_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT1_CH7_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT2_CH0_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT2_CH0_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT2_CH0_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT2_CH0_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT2_CH0_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT2_CH1_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT2_CH1_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT2_CH1_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT2_CH1_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT2_CH1_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT2_CH2_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT2_CH2_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT2_CH2_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT2_CH2_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT2_CH2_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT2_CH3_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT2_CH3_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT2_CH3_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT2_CH3_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT2_CH3_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT2_CH4_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT2_CH4_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT2_CH4_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT2_CH4_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT2_CH4_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT2_CH5_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT2_CH5_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT2_CH5_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT2_CH5_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT2_CH5_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT2_CH6_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT2_CH6_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT2_CH6_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT2_CH6_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT2_CH6_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT2_CH7_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT2_CH7_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT2_CH7_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT2_CH7_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT2_CH7_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT3_CH0_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT3_CH0_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT3_CH0_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT3_CH0_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT3_CH0_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT3_CH1_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT3_CH1_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT3_CH1_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT3_CH1_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT3_CH1_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT3_CH2_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT3_CH2_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT3_CH2_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT3_CH2_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT3_CH2_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT3_CH3_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT3_CH3_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT3_CH3_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT3_CH3_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT3_CH3_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT3_CH4_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT3_CH4_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT3_CH4_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT3_CH4_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT3_CH4_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT3_CH5_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT3_CH5_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT3_CH5_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT3_CH5_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT3_CH5_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT3_CH6_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT3_CH6_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT3_CH6_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT3_CH6_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT3_CH6_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT3_CH7_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT3_CH7_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT3_CH7_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT3_CH7_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT3_CH7_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT4_CH0_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT4_CH0_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT4_CH0_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT4_CH0_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT4_CH0_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT4_CH1_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT4_CH1_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT4_CH1_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT4_CH1_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT4_CH1_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT4_CH2_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT4_CH2_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT4_CH2_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT4_CH2_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT4_CH2_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT4_CH3_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT4_CH3_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT4_CH3_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT4_CH3_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT4_CH3_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT4_CH4_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT4_CH4_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT4_CH4_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT4_CH4_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT4_CH4_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT4_CH5_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT4_CH5_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT4_CH5_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT4_CH5_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT4_CH5_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT4_CH6_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT4_CH6_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT4_CH6_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT4_CH6_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT4_CH6_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT4_CH7_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT4_CH7_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT4_CH7_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT4_CH7_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT4_CH7_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT5_CH0_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT5_CH0_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT5_CH0_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT5_CH0_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT5_CH0_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT5_CH1_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT5_CH1_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT5_CH1_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT5_CH1_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT5_CH1_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT5_CH2_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT5_CH2_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT5_CH2_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT5_CH2_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT5_CH2_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT5_CH3_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT5_CH3_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT5_CH3_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT5_CH3_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT5_CH3_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT5_CH4_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT5_CH4_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT5_CH4_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT5_CH4_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT5_CH4_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT5_CH5_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT5_CH5_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT5_CH5_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT5_CH5_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT5_CH5_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT5_CH6_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT5_CH6_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT5_CH6_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT5_CH6_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT5_CH6_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT5_CH7_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT5_CH7_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT5_CH7_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT5_CH7_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT5_CH7_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT6_CH0_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT6_CH0_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT6_CH0_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT6_CH0_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT6_CH0_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT6_CH1_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT6_CH1_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT6_CH1_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT6_CH1_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT6_CH1_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT6_CH2_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT6_CH2_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT6_CH2_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT6_CH2_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT6_CH2_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT6_CH3_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT6_CH3_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT6_CH3_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT6_CH3_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT6_CH3_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT6_CH4_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT6_CH4_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT6_CH4_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT6_CH4_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT6_CH4_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT6_CH5_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT6_CH5_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT6_CH5_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT6_CH5_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT6_CH5_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT6_CH6_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT6_CH6_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT6_CH6_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT6_CH6_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT6_CH6_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT6_CH7_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT6_CH7_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT6_CH7_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT6_CH7_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT6_CH7_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT7_CH0_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT7_CH0_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT7_CH0_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT7_CH0_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT7_CH0_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT7_CH1_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT7_CH1_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT7_CH1_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT7_CH1_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT7_CH1_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT7_CH2_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT7_CH2_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT7_CH2_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT7_CH2_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT7_CH2_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT7_CH3_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT7_CH3_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT7_CH3_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT7_CH3_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT7_CH3_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT7_CH4_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT7_CH4_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT7_CH4_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT7_CH4_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT7_CH4_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT7_CH5_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT7_CH5_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT7_CH5_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT7_CH5_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT7_CH5_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT7_CH6_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT7_CH6_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT7_CH6_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT7_CH6_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT7_CH6_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SECURE_ERASE_SKT7_CH7_DEFAULT == DISABLE_SECURE_ERASE
#define SECURE_ERASE_SKT7_CH7_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define SECURE_ERASE_SKT7_CH7_EN_FLAGS  RESET_REQUIRED
#else
#define SECURE_ERASE_SKT7_CH7_DIS_FLAGS RESET_REQUIRED
#define SECURE_ERASE_SKT7_CH7_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// Biased 2-way near memory cache support
//
#if TWO_WAY_NM_CACHE_DEFAULT == TWO_WAY_NM_CACHE_DISABLED
#define TWO_WAY_NM_CACHE_DISABLED_FLAGS     DEFAULT_MEMORY_SETUP
#define TWO_WAY_NM_CACHE_ENABLED_FLAGS      RESET_REQUIRED
#else
#define TWO_WAY_NM_CACHE_DISABLED_FLAGS     RESET_REQUIRED
#define TWO_WAY_NM_CACHE_ENABLED_FLAGS      DEFAULT_MEMORY_SETUP
#endif

#if PREFERRED_READ_FIRST_DEFAULT == PREFERRED_WAY_READ_FIRST
#define PREFERRED_WAY_READ_FIRST_FLAGS      DEFAULT_MEMORY_SETUP
#define NON_PREFERRED_WAY_READ_FIRST_FLAGS  RESET_REQUIRED
#else
#define PREFERRED_WAY_READ_FIRST_FLAGS      RESET_REQUIRED
#define NON_PREFERRED_WAY_READ_FIRST_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// Boot-time fast zero memory setup flags
//
#if FAST_ZERO_MEM_DEFAULT == FAST_ZERO_MEM_DISABLED
#define FAST_ZERO_MEM_DISABLED_FLAGS        DEFAULT_MEMORY_SETUP
#define FAST_ZERO_MEM_ENABLED_FLAGS         RESET_REQUIRED
#else
#define FAST_ZERO_MEM_DISABLED_FLAGS        RESET_REQUIRED
#define FAST_ZERO_MEM_ENABLED_FLAGS         DEFAULT_MEMORY_SETUP
#endif

//
// Enabling the BIOS SSA loader
//
#if FixedPcdGetBool (PcdSsaLoaderEnable) == BIOS_SSA_LOADER_DISABLE
#define BIOS_SSA_LOADER_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define BIOS_SSA_LOADER_EN_FLAGS  RESET_REQUIRED
#else
#define BIOS_SSA_LOADER_DIS_FLAGS RESET_REQUIRED
#define BIOS_SSA_LOADER_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// Define for SSA BIOS LOADER knob
//
#define BIOS_SSA_LOADER_KNOB_DISABLE 0
#define BIOS_SSA_LOADER_KNOB_ENABLE  1

//
// Define for SSA BIOS LOADER knob
//
#define BIOS_SSA_RMT_KNOB_DISABLE 0
#define BIOS_SSA_RMT_KNOB_ENABLE  1

//
// Enable RMT on every advanced memory training step
//
#if FixedPcdGetBool (PcdRmtAdvancedTraining) == RMT_ON_ADVANCED_TRAINING_DISABLE
#define RMT_ON_ADVANCED_TRAINING_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define RMT_ON_ADVANCED_TRAINING_EN_FLAGS  RESET_REQUIRED
#else
#define RMT_ON_ADVANCED_TRAINING_DIS_FLAGS RESET_REQUIRED
#define RMT_ON_ADVANCED_TRAINING_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// Enable NVDIMM BCOM Margining
//
#if FeaturePcdGet (PcdEnableNgnBcomMargining) == NGN_BCOM_MARGINING_DISABLE
#define NGN_BCOM_MARGINING_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define NGN_BCOM_MARGINING_EN_FLAGS  RESET_REQUIRED
#else
#define NGN_BCOM_MARGINING_DIS_FLAGS RESET_REQUIRED
#define NGN_BCOM_MARGINING_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// Enabling the BIOS SSA Stitched Mode (RMT)
//
#if FixedPcdGetBool (PcdSsaBuiltInRmtEnable) == BIOS_SSA_RMT_DISABLE
#define BIOS_SSA_RMT_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define BIOS_SSA_RMT_EN_FLAGS  RESET_REQUIRED
#else
#define BIOS_SSA_RMT_DIS_FLAGS RESET_REQUIRED
#define BIOS_SSA_RMT_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// Enabling the BIOS SSA Stitched Mode (RMT) on FAST COLD BOOT(FCB)
//
#if BIOS_SSA_RMT_FCB_DEFAULT == BIOS_SSA_RMT_FCB_DISABLE
#define BIOS_SSA_RMT_FCB_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define BIOS_SSA_RMT_FCB_EN_FLAGS  RESET_REQUIRED
#else
#define BIOS_SSA_RMT_FCB_DIS_FLAGS RESET_REQUIRED
#define BIOS_SSA_RMT_FCB_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// BSSA RMT Per-Bit Margining
//
#if BIOS_SSA_PER_BIT_MARGINING_DEFAULT == BIOS_SSA_PER_BIT_MARGINING_DISABLE
#define BIOS_SSA_PER_BIT_MARGINING_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define BIOS_SSA_PER_BIT_MARGINING_EN_FLAGS  RESET_REQUIRED
#else
#define BIOS_SSA_PER_BIT_MARGINING_DIS_FLAGS RESET_REQUIRED
#define BIOS_SSA_PER_BIT_MARGINING_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// BSSA RMT Display Tables
//
#if BIOS_SSA_DISPLAY_TABLE_DEFAULT == BIOS_SSA_DISPLAY_TABLE_DISABLE
#define BIOS_SSA_DISPLAY_TABLE_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define BIOS_SSA_DISPLAY_TABLE_EN_FLAGS  RESET_REQUIRED
#else
#define BIOS_SSA_DISPLAY_TABLE_DIS_FLAGS RESET_REQUIRED
#define BIOS_SSA_DISPLAY_TABLE_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// BSSA RMT Display Plots
//
#if BIOS_SSA_DISPLAY_PLOTS_DEFAULT == BIOS_SSA_DISPLAY_PLOTS_DISABLE
#define BIOS_SSA_DISPLAY_PLOTS_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define BIOS_SSA_DISPLAY_PLOTS_EN_FLAGS  RESET_REQUIRED
#else
#define BIOS_SSA_DISPLAY_PLOTS_DIS_FLAGS RESET_REQUIRED
#define BIOS_SSA_DISPLAY_PLOTS_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// BSSA RMT Backside Margining
//
#if BIOS_SSA_BACKSIDE_MARGINING_DEFAULT == BIOS_SSA_BACKSIDE_MARGINING_DISABLE
#define BIOS_SSA_BACKSIDE_MARGINING_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define BIOS_SSA_BACKSIDE_MARGINING_EN_FLAGS  RESET_REQUIRED
#else
#define BIOS_SSA_BACKSIDE_MARGINING_DIS_FLAGS RESET_REQUIRED
#define BIOS_SSA_BACKSIDE_MARGINING_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// BSSA RMT Early Read ID Margining
//
#if BIOS_SSA_EARLY_READ_ID_DEFAULT == BIOS_SSA_EARLY_READ_ID_DISABLE
#define BIOS_SSA_EARLY_READ_ID_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define BIOS_SSA_EARLY_READ_ID_EN_FLAGS  RESET_REQUIRED
#else
#define BIOS_SSA_EARLY_READ_ID_DIS_FLAGS RESET_REQUIRED
#define BIOS_SSA_EARLY_READ_ID_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// BSSA RMT Step Size Override
//
#if BIOS_SSA_STEP_SIZE_OVERRIDE_DEFAULT == BIOS_SSA_STEP_SIZE_OVERRIDE_DISABLE
#define BIOS_SSA_STEP_SIZE_OVERRIDE_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define BIOS_SSA_STEP_SIZE_OVERRIDE_EN_FLAGS  RESET_REQUIRED
#else
#define BIOS_SSA_STEP_SIZE_OVERRIDE_DIS_FLAGS RESET_REQUIRED
#define BIOS_SSA_STEP_SIZE_OVERRIDE_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// BSSA
//
#if BIOS_SSA_RMT_DEFAULT_VALUE == BSSA_VALUE_1
#define BSSA_VALUE_1_FLAGS DEFAULT_MEMORY_SETUP
#else
#define BSSA_VALUE_1_FLAGS RESET_REQUIRED
#endif

#if BIOS_SSA_RMT_DEFAULT_VALUE == BSSA_VALUE_2
#define BSSA_VALUE_2_FLAGS DEFAULT_MEMORY_SETUP
#else
#define BSSA_VALUE_2_FLAGS RESET_REQUIRED
#endif

#if BIOS_SSA_RMT_DEFAULT_VALUE == BSSA_VALUE_4
#define BSSA_VALUE_4_FLAGS DEFAULT_MEMORY_SETUP
#else
#define BSSA_VALUE_4_FLAGS RESET_REQUIRED
#endif

#if BIOS_SSA_RMT_DEFAULT_VALUE == BSSA_VALUE_8
#define BSSA_VALUE_8_FLAGS DEFAULT_MEMORY_SETUP
#else
#define BSSA_VALUE_8_FLAGS RESET_REQUIRED
#endif

//
// BSSA RMT Debug Messages
//
#if BIOS_SSA_RMT_DEBUG_MSGS_DEFAULT == BIOS_SSA_RMT_DEBUG_MSGS_DISABLE
#define BIOS_SSA_RMT_DEBUG_MSGS_DIS_FLAGS DEFAULT_MEMORY_SETUP
#define BIOS_SSA_RMT_DEBUG_MSGS_EN_FLAGS  RESET_REQUIRED
#else
#define BIOS_SSA_RMT_DEBUG_MSGS_DIS_FLAGS RESET_REQUIRED
#define BIOS_SSA_RMT_DEBUG_MSGS_EN_FLAGS  DEFAULT_MEMORY_SETUP
#endif

// MemorySetup.hfr finishes

//
// CMI INIT
//
#if FixedPcdGetBool (PcdMrcCmiInitUseResetDefault) == CMI_INIT_AUTO
#define CMI_INIT_AUTO_FLAGS   DEFAULT_MEMORY_SETUP
#define CMI_INIT_RESET_FLAGS RESET_REQUIRED
#else
#define CMI_INIT_AUTO_FLAGS   RESET_REQUIRED
#define CMI_INIT_RESET_FLAGS DEFAULT_MEMORY_SETUP
#endif

#if DRAM_RX_EQ_DEFAULT == DRAM_RX_EQ_ENABLE
#define DRAM_RX_EQ_EN_FLAGS  DEFAULT_MEMORY_SETUP
#define DRAM_RX_EQ_DIS_FLAGS RESET_REQUIRED
#else
#define DRAM_RX_EQ_EN_FLAGS  RESET_REQUIRED
#define DRAM_RX_EQ_DIS_FLAGS DEFAULT_MEMORY_SETUP
#endif

//
// Force ODT ON
//
#if FORCE_ODT_ON_DEFAULT == FORCE_ODT_ON_ENABLE
#define FORCE_ODT_ON_EN_FLAGS  DEFAULT_MEMORY_SETUP
#define FORCE_ODT_ON_DIS_FLAGS RESET_REQUIRED
#else
#define FORCE_ODT_ON_EN_FLAGS  RESET_REQUIRED
#define FORCE_ODT_ON_DIS_FLAGS DEFAULT_MEMORY_SETUP
#endif

#if TME_CMI_CPL_FAB_CREDIT_WORKAROUND_DEFAULT == TME_CMI_CPL_FAB_CREDIT_WORKAROUND_ENABLE
#define DFX_TME_CMI_CPL_FAB_CREDIT_WORKAROUND_EN_FLAGS  DEFAULT_MEMORY_SETUP
#define DFX_TME_CMI_CPL_FAB_CREDIT_WORKAROUND_DIS_FLAGS RESET_REQUIRED
#else
#define DFX_TME_CMI_CPL_FAB_CREDIT_WORKAROUND_EN_FLAGS  RESET_REQUIRED
#define DFX_TME_CMI_CPL_FAB_CREDIT_WORKAROUND_DIS_FLAGS DEFAULT_MEMORY_SETUP
#endif

#if DRAM_TX_ECHO_CANCEL_DEFAULT == DRAM_TX_ECHO_CANCEL_ENABLE
#define DRAM_TX_ECHO_CANCEL_EN_FLAGS  DEFAULT_MEMORY_SETUP
#define DRAM_TX_ECHO_CANCEL_DIS_FLAGS RESET_REQUIRED
#else
#define DRAM_TX_ECHO_CANCEL_EN_FLAGS  RESET_REQUIRED
#define DRAM_TX_ECHO_CANCEL_DIS_FLAGS DEFAULT_MEMORY_SETUP
#endif

#if DRAM_LEGACY_RXDFE_DEFAULT == DRAM_LEGACY_RXDFE_ENABLE
#define DRAM_LEGACY_RXDFE_EN_FLAGS  DEFAULT_MEMORY_SETUP
#define DRAM_LEGACY_RXDFE_DIS_FLAGS RESET_REQUIRED
#else
#define DRAM_LEGACY_RXDFE_EN_FLAGS  RESET_REQUIRED
#define DRAM_LEGACY_RXDFE_DIS_FLAGS DEFAULT_MEMORY_SETUP
#endif

#if RX_CTLE_EXTENDED_RANGE_DEFAULT == RX_CTLE_EXTENDED_RANGE_ENABLE
#define RX_CTLE_EXTENDED_RANGE_EN_FLAGS  DEFAULT_MEMORY_SETUP
#define RX_CTLE_EXTENDED_RANGE_DIS_FLAGS RESET_REQUIRED
#else
#define RX_CTLE_EXTENDED_RANGE_EN_FLAGS  RESET_REQUIRED
#define RX_CTLE_EXTENDED_RANGE_DIS_FLAGS DEFAULT_MEMORY_SETUP
#endif

//
// DDRT Scheduler Logic Debug
//
#if FixedPcdGetBool (PcdDdrtSchedulerDebugDefault) == DDRT_SCHEDULER_DBG_ENABLE
#define DDRT_SCHEDULER_EN_FLAGS  DEFAULT_MEMORY_SETUP
#define DDRT_SCHEDULER_DIS_FLAGS RESET_REQUIRED
#else
#define DDRT_SCHEDULER_EN_FLAGS  RESET_REQUIRED
#define DDRT_SCHEDULER_DIS_FLAGS DEFAULT_MEMORY_SETUP
#endif

//
//  Get default option from PCD for SSA RMT ReceiveEnable Denormalize option
//
#if FixedPcdGetBool (PcdDfxSsaRmtRecvEnableDenormalize) == DFX_SSA_RMT_RECV_ENABLE_DENORMALIZE_ENABLE
#define DFX_SSA_RMT_RECV_ENABLE_DENORMALIZE_ENABLE_FLAGS   DEFAULT_MEMORY_SETUP
#define DFX_SSA_RMT_RECV_ENABLE_DENORMALIZE_DISABLE_FLAGS  RESET_REQUIRED
#else
#define DFX_SSA_RMT_RECV_ENABLE_DENORMALIZE_ENABLE_FLAGS   RESET_REQUIRED
#define DFX_SSA_RMT_RECV_ENABLE_DENORMALIZE_DISABLE_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// Get default selection of SW Xover mode setting
//
#if FixedPcdGet8 (PcdDfxXoverSwCalibParallelMode) == DFX_XOVER_SW_SERIAL
 #define DFX_SW_XOVER_SERIAL_FLAGS   DEFAULT_MEMORY_SETUP
 #define DFX_SW_XOVER_PARALLEL_FLAGS RESET_REQUIRED
#else
 #define DFX_SW_XOVER_SERIAL_FLAGS   RESET_REQUIRED
 #define DFX_SW_XOVER_PARALLEL_FLAGS DEFAULT_MEMORY_SETUP
#endif

//
// Early completion setup flags
//
#if DDR_EARLY_CMP_DEFAULT == DDR_EARLY_CMP_ENABLED
#define DDR_EARLY_CMP_ENABLED_FLAGS    DEFAULT_MEMORY_SETUP
#define DDR_EARLY_CMP_DISABLED_FLAGS   RESET_REQUIRED
#else
#define DDR_EARLY_CMP_ENABLED_FLAGS    RESET_REQUIRED
#define DDR_EARLY_CMP_DISABLED_FLAGS   DEFAULT_MEMORY_SETUP
#endif

#if HBM_EARLY_CMP_DEFAULT == HBM_EARLY_CMP_ENABLED
#define HBM_EARLY_CMP_ENABLED_FLAGS    DEFAULT_MEMORY_SETUP
#define HBM_EARLY_CMP_DISABLED_FLAGS   RESET_REQUIRED
#else
#define HBM_EARLY_CMP_ENABLED_FLAGS    RESET_REQUIRED
#define HBM_EARLY_CMP_DISABLED_FLAGS   DEFAULT_MEMORY_SETUP
#endif

//
// XOR decoder setup flags
//
#if CLUSTER_XOR_DEFAULT == CLUSTER_XOR_ENABLED
#define CLUSTER_XOR_ENABLED_FLAGS   DEFAULT_MEMORY_SETUP
#define CLUSTER_XOR_DISABLED_FLAGS  RESET_REQUIRED
#else
#define CLUSTER_XOR_ENABLED_FLAGS   RESET_REQUIRED
#define CLUSTER_XOR_DISABLED_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if CHANNEL_XOR_DEFAULT == CHANNEL_XOR_ENABLED
#define CHANNEL_XOR_ENABLED_FLAGS   DEFAULT_MEMORY_SETUP
#define CHANNEL_XOR_DISABLED_FLAGS  RESET_REQUIRED
#else
#define CHANNEL_XOR_ENABLED_FLAGS   RESET_REQUIRED
#define CHANNEL_XOR_DISABLED_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if PSEUDO_CHANNEL_XOR_DEFAULT == PSEUDO_CHANNEL_XOR_ENABLED
#define PSEUDO_CHANNEL_XOR_ENABLED_FLAGS   DEFAULT_MEMORY_SETUP
#define PSEUDO_CHANNEL_XOR_DISABLED_FLAGS  RESET_REQUIRED
#else
#define PSEUDO_CHANNEL_XOR_ENABLED_FLAGS   RESET_REQUIRED
#define PSEUDO_CHANNEL_XOR_DISABLED_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if DIMM_XOR_DEFAULT == DIMM_XOR_ENABLED
#define DIMM_XOR_ENABLED_FLAGS   DEFAULT_MEMORY_SETUP
#define DIMM_XOR_DISABLED_FLAGS  RESET_REQUIRED
#else
#define DIMM_XOR_ENABLED_FLAGS   RESET_REQUIRED
#define DIMM_XOR_DISABLED_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if RANK_XOR_DEFAULT == RANK_XOR_ENABLED
#define RANK_XOR_ENABLED_FLAGS   DEFAULT_MEMORY_SETUP
#define RANK_XOR_DISABLED_FLAGS  RESET_REQUIRED
#else
#define RANK_XOR_ENABLED_FLAGS   RESET_REQUIRED
#define RANK_XOR_DISABLED_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if SID_XOR_DEFAULT == SID_XOR_ENABLED
#define SID_XOR_ENABLED_FLAGS   DEFAULT_MEMORY_SETUP
#define SID_XOR_DISABLED_FLAGS  RESET_REQUIRED
#else
#define SID_XOR_ENABLED_FLAGS   RESET_REQUIRED
#define SID_XOR_DISABLED_FLAGS  DEFAULT_MEMORY_SETUP
#endif

#if BANK_XOR_DEFAULT == BANK_XOR_ENABLED
#define BANK_XOR_ENABLED_FLAGS   DEFAULT_MEMORY_SETUP
#define BANK_XOR_DISABLED_FLAGS  RESET_REQUIRED
#else
#define BANK_XOR_ENABLED_FLAGS   RESET_REQUIRED
#define BANK_XOR_DISABLED_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// Memory Training Comp Options Values
//
#if TRAINING_COMP_DEFAULT == TRAINING_COMP_MMRC_INIT
#define TRAINING_COMP_MMRC_INIT_FLAGS         DEFAULT_MEMORY_SETUP
#define TRAINING_COMP_EVERY_JEDEC_INIT_FLAGS  RESET_REQUIRED
#define TRAINING_COMP_EVERY_TRAINING_FLAGS    RESET_REQUIRED
#elif TRAINING_COMP_DEFAULT == TRAINING_COMP_EVERY_JEDEC_INIT
#define TRAINING_COMP_MMRC_INIT_FLAGS         RESET_REQUIRED
#define TRAINING_COMP_EVERY_JEDEC_INIT_FLAGS  DEFAULT_MEMORY_SETUP
#define TRAINING_COMP_EVERY_TRAINING_FLAGS    RESET_REQUIRED
#elif TRAINING_COMP_DEFAULT == TRAINING_COMP_EVERY_TRAINING
#define TRAINING_COMP_MMRC_INIT_FLAGS         RESET_REQUIRED
#define TRAINING_COMP_EVERY_JEDEC_INIT_FLAGS  RESET_REQUIRED
#define TRAINING_COMP_EVERY_TRAINING_FLAGS    DEFAULT_MEMORY_SETUP
#else
#define TRAINING_COMP_MMRC_INIT_FLAGS         DEFAULT_MEMORY_SETUP
#define TRAINING_COMP_EVERY_JEDEC_INIT_FLAGS  RESET_REQUIRED
#define TRAINING_COMP_EVERY_TRAINING_FLAGS    RESET_REQUIRED
#endif

//
// Memory Periodic Rcomp.
//
#if PERIODIC_RCOMP_DEFAULT == PERIODIC_RCOMP_DISABLE
#define PERIODIC_RCOMP_DIS_FLAGS   DEFAULT_MEMORY_SETUP
#define PERIODIC_RCOMP_EN_FLAGS    RESET_REQUIRED
#define PERIODIC_RCOMP_AUTO_FLAGS  RESET_REQUIRED
#elif PERIODIC_RCOMP_DEFAULT == PERIODIC_RCOMP_ENABLE
#define PERIODIC_RCOMP_DIS_FLAGS   RESET_REQUIRED
#define PERIODIC_RCOMP_EN_FLAGS    DEFAULT_MEMORY_SETUP
#define PERIODIC_RCOMP_AUTO_FLAGS  RESET_REQUIRED
#else
#define PERIODIC_RCOMP_DIS_FLAGS   RESET_REQUIRED
#define PERIODIC_RCOMP_EN_FLAGS    RESET_REQUIRED
#define PERIODIC_RCOMP_AUTO_FLAGS  DEFAULT_MEMORY_SETUP
#endif

//
// MC Data Parity Check
//
#if MC_DATA_PARITY_CHECK_DEFAULT == MC_DATA_PARITY_CHECK_AUTO
#define DFX_MC_DATA_PARITY_CHECK_DIS_FLAGS   RESET_REQUIRED
#define DFX_MC_DATA_PARITY_CHECK_EN_FLAGS    RESET_REQUIRED
#define DFX_MC_DATA_PARITY_CHECK_AUTO_FLAGS  DEFAULT_MEMORY_SETUP
#elif MC_DATA_PARITY_CHECK_DEFAULT == MC_DATA_PARITY_CHECK_DISABLE
#define DFX_MC_DATA_PARITY_CHECK_DIS_FLAGS   DEFAULT_MEMORY_SETUP
#define DFX_MC_DATA_PARITY_CHECK_EN_FLAGS    RESET_REQUIRED
#define DFX_MC_DATA_PARITY_CHECK_AUTO_FLAGS  RESET_REQUIRED
#else
#define DFX_MC_DATA_PARITY_CHECK_DIS_FLAGS   RESET_REQUIRED
#define DFX_MC_DATA_PARITY_CHECK_EN_FLAGS    DEFAULT_MEMORY_SETUP
#define DFX_MC_DATA_PARITY_CHECK_AUTO_FLAGS  RESET_REQUIRED
#endif

//
//  DRAM Duty Cycle Adjuster Training
//
#if FixedPcdGet8 (PcdMrcDramDutyCycleAdjusterTrainingDefault) == DRAM_DUTY_CYCLE_ADJUSTER_DISABLE
#define DRAM_DUTY_CYCLE_ADJUSTER_DIS_FLAGS  DEFAULT_MEMORY_SETUP
#define DRAM_DUTY_CYCLE_ADJUSTER_EN_FLAGS   RESET_REQUIRED
#else
#define DRAM_DUTY_CYCLE_ADJUSTER_DIS_FLAGS  RESET_REQUIRED
#define DRAM_DUTY_CYCLE_ADJUSTER_EN_FLAGS   DEFAULT_MEMORY_SETUP
#endif

#endif   // _memory_setup_h
