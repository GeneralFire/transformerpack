/** @file

  @copyright
  INTEL CONFIDENTIAL
  Copyright 1999 - 2020 Intel Corporation. <BR>

  The source code contained or described herein and all documents related to the
  source code ("Material") are owned by Intel Corporation or its suppliers or
  licensors. Title to the Material remains with Intel Corporation or its suppliers
  and licensors. The Material may contain trade secrets and proprietary    and
  confidential information of Intel Corporation and its suppliers and licensors,
  and is protected by worldwide copyright and trade secret laws and treaty
  provisions. No part of the Material may be used, copied, reproduced, modified,
  published, uploaded, posted, transmitted, distributed, or disclosed in any way
  without Intel's prior express written permission.

  No license under any patent, copyright, trade secret or other intellectual
  property right is granted to or conferred upon you by disclosure or delivery
  of the Materials, either expressly, by implication, inducement, estoppel or
  otherwise. Any license under such intellectual property rights must be
  express and approved by Intel in writing.

  Unless otherwise agreed by Intel in writing, you may not remove or alter
  this notice or any other notice embedded in Materials by Intel or
  Intel's suppliers or licensors in any way.
**/

  form formid = VFR_FORMID_PWRMGT,

    title         = STRING_TOKEN(STR_POWER_MGT_CONFIG_FORM_TITLE);
    subtitle text = STRING_TOKEN(STR_POWER_MGT_CONFIG_FORM_TITLE);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);

    oneof varid = SOCKET_POWERMANAGEMENT_CONFIGURATION.PcodeWdogTimerEn,
            prompt  = STRING_TOKEN(STR_PCODE_WATCHDOG_TIMER_EN),
            help    = STRING_TOKEN(STR_PCODE_WATCHDOG_TIMER_EN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),      value = 0,  flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_ENABLE),       value = 1,  flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_AUTO_STRING),  value = 2,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
    endoneof;

  //CPU P State Control
  goto P_STATE_CONTROL_FORMID,
  prompt  = STRING_TOKEN(STR_P_STATE_CONTROL_FORM_TITLE),
  help    = STRING_TOKEN(STR_P_STATE_CONTROL_FORM_HELP);

  suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SNR OR
             ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_TNR;
    //Hardware PM State Control
    goto HWPM_STATE_CONTROL_FORMID,
    prompt  = STRING_TOKEN(STR_HWPM_STATE_CONTROL_FORM_TITLE),
    help    = STRING_TOKEN(STR_HWPM_STATE_CONTROL_FORM_HELP);
  endif;

  //Frequency Prioritization
  goto FREQUENCY_PRIORITIZATION_FORMID,
  prompt  = STRING_TOKEN(STR_FREQUENCY_PRIORITIZATION_CONTROL_FORM_TITLE),
  help    = STRING_TOKEN(STR_FREQUENCY_PRIORITIZATION_CONTROL_FORM_HELP);

  //Overclocking
  goto XE_RATIO_LIMIT_FORMID,
  prompt  = STRING_TOKEN(STR_XE_RATIO_LIMIT_FORM_TITLE),
  help    = STRING_TOKEN(STR_XE_RATIO_LIMIT_FORM_HELP);

  //CPU C State Control
  goto CPU0_CSTATE_CONTROL_FORM_ID,
  prompt  = STRING_TOKEN(STR_CPU_C_STATE_CONTROL_FORM_TITLE),
  help    = STRING_TOKEN(STR_CPU_C_STATE_CONTROL_FORM_HELP);

  //Package C State Control
  suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SNR;
    goto PACKAGE_CSTATE_CONTROL_FORM_ID,
    prompt  = STRING_TOKEN(STR_PACKAGE_C_STATE_CONTROL_FORM_TITLE),
    help    = STRING_TOKEN(STR_PACKAGE_C_STATE_CONTROL_FORM_HELP);
  endif;

  //Cpu Thermal Management Form Entry
  goto CPU_THERMMAL_MANAGE_FORM_ID,
  prompt  = STRING_TOKEN(STR_CPU_THERMAL_MANAGE_FORM_TITLE),
  help    = STRING_TOKEN(STR_CPU_THERMAL_MANAGE_FORM_HELP);

  //Advanced PM Tuning Form
  goto CPU_POWER_ADVANCED_CONFIG_FORM_ID,
  prompt = STRING_TOKEN(STR_CPU_POWER_ADVANCED_CONFIG_TITLE),
  help = STRING_TOKEN(STR_CPU_POWER_ADVANCED_CONFIG_HELP);

  //Package Current Config
  goto PROG_MSR_PP_CURT_CFG_CTRL_FORM_ID,
  prompt  = STRING_TOKEN(STR_MSR_PP_CURT_CFG_CTRL_FORM),
  help    = STRING_TOKEN(STR_MSR_PP_CURT_CFG_CTRL_FORM_HELP);

  suppressif TRUE;
    //EPB Override Control
    goto PROG_CSR_DYNAMIC_PERF_POWER_CTL_FORM_ID,
    prompt  = STRING_TOKEN(STR_CSR_DYNAMIC_PERF_POWER_CTL_FORM),
    help    = STRING_TOKEN(STR_CSR_DYNAMIC_PERF_POWER_CTL_FORM_HELP);
  endif;

  //SOCKET RAPL Config
  goto SOCKET_RAPL_FORMID,
  prompt = STRING_TOKEN(STR_SOCKET_RAPL_FORM),
  help = STRING_TOKEN(STR_SOCKET_RAPL_FORM_HELP);

  //Platform power limit
  suppressif NOT ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SPRSP;
    goto PLATFORM_POWER_LIMIT_FORMID,
    prompt = STRING_TOKEN(STR_PSYS_FORM),
    help = STRING_TOKEN(STR_PSYS_FORM_HELP);
  endif;

  //PMAX CONFIG Config
  goto PMAX_CONFIG_FORM_ID,
  prompt = STRING_TOKEN(STR_PMAX_CONFIG_FORM),
  help = STRING_TOKEN(STR_PMAX_CONFIG_FORM_HELP);

  suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SNR OR
             ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_TNR;
    //ACPI Sx State Control individually
    goto ACPI_S_STATE_FORMID,
    prompt = STRING_TOKEN(ACPI_S_STATE_CONTROLORM_TITLE),
    help = STRING_TOKEN(ACPI_S_STATE_CONTROLORM_HELP);
  endif;

  // Memory Configuration
  goto VFR_FORMID_MEM_PM_CFG_ID,
  prompt  = STRING_TOKEN(STR_MEMORY_PM_CONFIG_FORM_TITLE),
  help    = STRING_TOKEN(STR_MEMORY_PM_CONFIG_FORM_HELP);

  // SPR,GNR,SRF: default is run in PEI
  // Others: default is run in DXE
suppressif NOT (ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SPRSP OR
                ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_GNRSP OR
                ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SRFSP);
  oneof varid = SOCKET_POWERMANAGEMENT_CONFIGURATION.RunCpuPpmInPei,
      prompt  = STRING_TOKEN(STR_RUN_CPUPPM_IN_PEI_EN),
      help    = STRING_TOKEN(STR_RUN_CPUPPM_IN_PEI_EN_HELP),
#if defined (SPR_HOST) || defined (GNRSRF_HOST)
      option text = STRING_TOKEN(STR_DISABLE),      value = 0,  flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE),       value = 1,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
#else
      option text = STRING_TOKEN(STR_DISABLE),      value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
      option text = STRING_TOKEN(STR_ENABLE),       value = 1,  flags = RESET_REQUIRED;
#endif
  endoneof;
endif;

endform;    // end of VFR_FORMID_PWRMGT

    //ACPI Sx State Form start
    form formid = ACPI_S_STATE_FORMID,
    title = STRING_TOKEN(ACPI_S_STATE_CONTROLORM_TITLE);
    subtitle text = STRING_TOKEN(ACPI_S_STATE_CONTROLORM_TITLE);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

      // ACPI S3 State
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.AcpiS3Enable,
          prompt      = STRING_TOKEN(STR_ACPI_S3_STATE_REPORT),
          help        = STRING_TOKEN(STR_ACPI_S3_STATE_REPORT_HELP),
#if defined (SNR_HOST)
          option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
#else
          option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
#endif // defined (SNR_HOST)
          inconsistentif prompt = STRING_TOKEN (STR_PCLS_S3_PROMPT),
            ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.AcpiS3Enable == 1 AND
            ideqval SOCKET_MEMORY_CONFIGURATION.PclsEn == 1
          endif
        endoneof;

      // ACPI S4 State
#if defined (ICX_HOST)
    suppressif TRUE;
#endif
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.AcpiS4Enable,
          prompt      = STRING_TOKEN(STR_ACPI_S4_STATE_REPORT),
          help        = STRING_TOKEN(STR_ACPI_S4_STATE_REPORT_HELP),
#if defined (SNR_HOST) || defined(ICX_HOST)
          option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
#else
          option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
#endif // defined (SNR_HOST)
        endoneof;
#if defined (ICX_HOST)
    endif;
#endif
    endform;  //end ACPI Sx State Form

  //HWPM page starts
  form formid = HWPM_STATE_CONTROL_FORMID,
  title = STRING_TOKEN(STR_HWPM_STATE_CONTROL_FORM_TITLE);
  subtitle text = STRING_TOKEN(STR_HWPM_STATE_CONTROL_FORM_TITLE);
  subtitle text = STRING_TOKEN(STR_NULL_STRING);

    //
    // HWPM options setup option
    //

    oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorHWPMEnable,
        prompt      = STRING_TOKEN(STR_PROCESSOR_HWPM_ENABLE),
        help        = STRING_TOKEN(STR_PROCESSOR_HWPM_ENABLE_HELP),
        option text = STRING_TOKEN(STR_DISABLE),        value = 0,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_NATIVE_MODE),    value = 1,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(STR_HWPM_OOB),       value = 2,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_HWPM_NATIVE_NO_LEGACY), value = 3,  flags = RESET_REQUIRED;

        // link to PwrPerfTuning options
#ifndef CPX_HOST
        write set(SOCKET_POWERMANAGEMENT_CONFIGURATION.PwrPerfTuning, map (pushthis : 0,0; 1,0; 2,2; 3,1;));
#else
        write set(SOCKET_POWERMANAGEMENT_CONFIGURATION.PwrPerfTuning, map (pushthis : 0,0; 1,0; 2,0; 3,0; ));
#endif
    endoneof;

      grayoutif NOT ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorHWPMEnable == 1;
        oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorHWPMInterrupt,
          prompt      = STRING_TOKEN(STR_PROCESSOR_HWPM_INTERRUPT_ENABLE),
          help        = STRING_TOKEN(STR_PROCESSOR_HWPM_INTERRUPT_ENABLE_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1,  flags = RESET_REQUIRED;
        endoneof;
     endif;

     grayoutif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorHWPMEnable == 0;
       //
       // EPP Enable (Bit[12])
       //
       oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorEPPEnable,
          prompt      = STRING_TOKEN(STR_PROCESSOR_EPP_ENABLE),
          help        = STRING_TOKEN(STR_PROCESSOR_EPP_ENABLE_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        endoneof;
    endif;

    suppressif NOT ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorHWPMEnable == 2;
     grayoutif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorEPPEnable == 0;
       oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorEppProfile,
          prompt      = STRING_TOKEN(STR_PROCESSOR_EPP_PROFILE),
          help        = STRING_TOKEN(STR_PROCESSOR_EPP_PROFILE_HELP),
          option text = STRING_TOKEN(STR_ENERGY_PERF_MODE_1),   value = 0, flags = RESET_REQUIRED;
#ifdef CPX_HOST
          option text = STRING_TOKEN(STR_ENERGY_PERF_MODE_2),   value = 85, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENERGY_PERF_MODE_3),   value = 170, flags = RESET_REQUIRED;
#else
          option text = STRING_TOKEN(STR_ENERGY_PERF_MODE_2),   value = 128, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENERGY_PERF_MODE_3),   value = 192, flags = RESET_REQUIRED;
#endif //#ifdef CPX_HOST
          option text = STRING_TOKEN(STR_ENERGY_PERF_MODE_4),   value = 255, flags = RESET_REQUIRED;
        endoneof;
      endif;
    endif;

     grayoutif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorHWPMEnable == 0;
       oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorAPSrocketing,
          prompt      = STRING_TOKEN(STR_PROCESSOR_APS_ROCKETING),
          help        = STRING_TOKEN(STR_PROCESSOR_APS_ROCKETING_HELP),
          option text = STRING_TOKEN(STR_ENABLE),    value = 1,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DISABLE),   value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        endoneof;

       oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorScalability,
          prompt      = STRING_TOKEN(STR_PROCESSOR_SCALABILITY),
          help        = STRING_TOKEN(STR_PROCESSOR_SCALABILITY_HELP),
          option text = STRING_TOKEN(STR_ENABLE),    value = 1,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DISABLE),   value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        endoneof;
    endif;
//ASTDBG: Disable the ASPM(For Socekt)
    oneof varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.NativeAspmEnable,
      prompt      = STRING_TOKEN(STR_NATIVE_ASPM_PROMPT),
      help        = STRING_TOKEN(STR_NATIVE_ASPM_HELP),
      option text = STRING_TOKEN(STR_AUTO), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ACPI_ENABLED), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ACPI_DISABLED), value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
    endoneof;

  endform;  //end HWPM State Control Form
  //
  //HWPM page ends
  //

  //Frequency Prioritization page starts
  form formid = FREQUENCY_PRIORITIZATION_FORMID,
  title = STRING_TOKEN(STR_FREQUENCY_PRIORITIZATION_CONTROL_FORM_TITLE);
  subtitle text = STRING_TOKEN(STR_FREQUENCY_PRIORITIZATION_CONTROL_FORM_TITLE);
  subtitle text = STRING_TOKEN(STR_NULL_STRING);

    suppressif NOT (ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SPRSP OR
                    ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_GNRSP OR
                    ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SRFSP);
      grayoutif  ideqval SOCKET_COMMONRC_CONFIGURATION.SstCpCapableSystem == 0;
         oneof varid    = SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorSstCpSetting,
            prompt      = STRING_TOKEN(STR_PROCESSOR_SST_CP_SETTING),
            help        = STRING_TOKEN(STR_PROCESSOR_SST_CP_SETTING_HELP),
            option text = STRING_TOKEN(STR_ENABLE),    value = 1,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
            option text = STRING_TOKEN(STR_DISABLE),   value = 0,  flags = RESET_REQUIRED;
          endoneof;
      endif;
    endif;

    suppressif  (ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SPRSP OR
                 ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_GNRSP OR
                 ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SRFSP);
      grayoutif  ideqval SOCKET_COMMONRC_CONFIGURATION.SstCpCapableSystem == 0;
         oneof varid    = SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorRaplPrioritization,
            prompt      = STRING_TOKEN(STR_PROCESSOR_RAPL_PRIORITIZATION),
            help        = STRING_TOKEN(STR_PROCESSOR_RAPL_PRIORITIZATION_HELP),
            option text = STRING_TOKEN(STR_ENABLE),    value = 1,  flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DISABLE),   value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
          endoneof;
      endif;
    endif;

  endform;  //end Frequency Prioritization Control Form
  //
  //Frequency Prioritization page ends
  //

  //P State Control Form start
  form formid = P_STATE_CONTROL_FORMID,
  title = STRING_TOKEN(STR_P_STATE_CONTROL_FORM_TITLE);
  subtitle text = STRING_TOKEN(STR_P_STATE_CONTROL_FORM_TITLE);
  subtitle text = STRING_TOKEN(STR_NULL_STRING);

#if defined (SKX_HOST)
    oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.WFRWAEnable,
      prompt      = STRING_TOKEN(STR_WFR_SOCKET_WA),
      help        = STRING_TOKEN(STR_WFR_SOCKET_WA_HELP),
      option text = STRING_TOKEN(STR_DISABLE),  value = 0,  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE),  value = 1,  flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_AUTO),   value = 2,  flags = RESET_REQUIRED;
    endoneof;
#endif

    oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.AvxLicensePreGrant,
      prompt      = STRING_TOKEN(STR_AVX_LICENSE_PRE_GRANT),
      help        = STRING_TOKEN(STR_AVX_LICENSE_PRE_GRANT_HELP),
      option text = STRING_TOKEN(STR_DISABLE),  value = 0,  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE),  value = 1,  flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.AvxLicensePreGrant == 0;
    oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.AvxIccpLevel,
      prompt      = STRING_TOKEN(STR_AVX_ICCP_LEVEL_PROMPT),
      help        = STRING_TOKEN(STR_AVX_ICCP_LEVEL_HELP),
      option text = STRING_TOKEN(STR_128_HEAVY), value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
      option text = STRING_TOKEN(STR_256_LIGHT), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_256_HEAVY), value = 3, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_512_LIGHT), value = 4, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_512_HEAVY), value = 5, flags = RESET_REQUIRED;
    endoneof;
    endif;

    suppressif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorEistSupport == 0;
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorEistEnable,
      questionid      = KEY_EIST_ENABLE,
        prompt      = STRING_TOKEN(STR_PROCESSOR_EIST),
        help        = STRING_TOKEN(STR_PROCESSOR_EIST_HELP),
        option text = STRING_TOKEN(STR_DISABLE),  value = 0,  flags = INTERACTIVE | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),   value = 1,  flags = INTERACTIVE | DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    suppressif  NOT ideqval SOCKET_COMMONRC_CONFIGURATION.IssMaxLevel == 0 OR
                ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorEistEnable == 0;
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.ConfigTdpLock,
        prompt      = STRING_TOKEN(STR_CONFIG_TDP_LOCK_ENABLE),
        help        = STRING_TOKEN(STR_CONFIG_TDP_LOCK_ENABLE_HELP),
        option text = STRING_TOKEN(STR_DISABLE),  value = 0,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),   value = 1,  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    // Config TDP
    //
    suppressif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorEistEnable == 0;
      oneof varid  = SOCKET_POWERMANAGEMENT_CONFIGURATION.ConfigTdpLevel,
        prompt   = STRING_TOKEN (STR_AVX_P1_LEVEL),
        help     = STRING_TOKEN (STR_AVX_P1_LEVEL_HELP),
        option text = STRING_TOKEN(STR_NORMAL),     value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LEVEL_1),  value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LEVEL_2),  value = 2, flags = RESET_REQUIRED;
      endoneof;
    endif;

#ifndef CPX_HOST

    suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.IssMaxLevel == 0;
      oneof varid  = SOCKET_POWERMANAGEMENT_CONFIGURATION.DynamicIss,
        prompt   = STRING_TOKEN (STR_DYNAMIC_ISS_ENABLE),
        help     = STRING_TOKEN (STR_DYNAMIC_ISS_ENABLE_HELP),
        option text = STRING_TOKEN(STR_DISABLE),  value = 0,  flags = INTERACTIVE | DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),   value = 1,  flags = INTERACTIVE | RESET_REQUIRED;
      endoneof;
    endif;

    // Intel SST-PP
    //
    suppressif  ideqval SOCKET_COMMONRC_CONFIGURATION.IssMaxLevel == 0 OR
                ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorEistEnable == 0 OR
                ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.DynamicIss == 1;
        oneof varid  = SOCKET_POWERMANAGEMENT_CONFIGURATION.IssTdpLevel,
          prompt   = STRING_TOKEN (STR_CONFIG_ISS_ENABLE),
          help     = STRING_TOKEN (STR_CONFIG_ISS_ENABLE_HELP),
          option text = STRING_TOKEN(STR_BASE),       value = 0,  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_CONFIG_1),   value = 3,  flags = RESET_REQUIRED;
      suppressif  ideqval SOCKET_COMMONRC_CONFIGURATION.IssMaxLevel == 3;
          option text = STRING_TOKEN(STR_CONFIG_2),   value = 4,  flags = RESET_REQUIRED;
      endif;
        endoneof;
    endif;

    // ISS - Config TDP Level 3/4 info
    //
    suppressif  ideqval SOCKET_COMMONRC_CONFIGURATION.IssMaxLevel == 0;
      subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
      subtitle text = STRING_TOKEN(STR_ISS_CONFIG_TDP_LEVEL_VALUE);
      subtitle text = STRING_TOKEN(STR_ISS_CONFIG_TDP_CORE_VALUE);
      subtitle text = STRING_TOKEN(STR_ISS_CONFIG_TDP_RATIO_VALUE);
      subtitle text = STRING_TOKEN(STR_ISS_CONFIG_TDP_POWER_VALUE);
      subtitle text = STRING_TOKEN(STR_ISS_CONFIG_TDP_TJMAX_VALUE);
      subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    endif;
#endif  //#ifndef CPX_HOST

    //
    // Active PBF (Prioritized Base Frequency)
    //
    suppressif  ideqval SOCKET_COMMONRC_CONFIGURATION.PbfCapableSystem == 0;
      oneof varid  = SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorActivePbf,
        prompt   = STRING_TOKEN (STR_ACTIVATE_PBF),
        help     = STRING_TOKEN (STR_ACTIVATE_PBF_HELP),
        option text = STRING_TOKEN(STR_DISABLE),  value = 0,  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),   value = 1,  flags = RESET_REQUIRED;
      endoneof;
    endif;

    //
    // Configure PBF High Priority Cores
    //
    suppressif  ideqval SOCKET_COMMONRC_CONFIGURATION.PbfCapableSystem == 0;
      grayoutif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorActivePbf == 0;
        oneof varid  = SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorConfigurePbf,
          prompt   = STRING_TOKEN (STR_CONFIGURE_PBF),
          help     = STRING_TOKEN (STR_CONFIGURE_PBF_HELP),
          option text = STRING_TOKEN(STR_DISABLE),  value = 0,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),   value = 1,  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          endoneof;
      endif;
    endif;

    // EIST/GV3 PSD Function Control
    //
    grayoutif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorEistEnable == 0x00;
        oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorEistPsdFunc,
            prompt      = STRING_TOKEN(STR_PROCESSOR_PSD_FUNC),
            help        = STRING_TOKEN(STR_PROCESSOR_PSD_FUNC_HELP),
            option text = STRING_TOKEN(STR_HW_ALL),   value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
            option text = STRING_TOKEN(STR_SW_ALL),   value = 1,  flags = RESET_REQUIRED;
      endoneof;
      endif;

    grayoutif  ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorEistEnable == 0;
      oneof varid = SOCKET_POWERMANAGEMENT_CONFIGURATION.BootPState,
        prompt  = STRING_TOKEN (STR_BOOT_P_STATE),
        help    = STRING_TOKEN (STR_BOOT_P_STATE_HELP),
        option text = STRING_TOKEN (STR_BOOT_P_STATE_MAX), value = 0, flags = DEFAULT | MANUFACTURING;
        option text = STRING_TOKEN (STR_BOOT_P_STATE_MIN), value = 1, flags = 0;
#if ME_SPS_SUPPORT
        option text = STRING_TOKEN (STR_BOOT_P_STATE_SPS_NM), value = 2, flags = 0;
#endif
      endoneof;
    endif;

      // VIRTUAL_MSR_CR_POWER_CTL.EE_TURBO_DISABLE - MSR 0x1FC Bit[19]
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.EETurboDisable,
          prompt      = STRING_TOKEN(STR_EE_TURBO_DISABLE),
          help        = STRING_TOKEN(STR_EE_TURBO_DISABLE_HELP),
          option text = STRING_TOKEN(STR_ENABLE),    value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DISABLE),   value = 1, flags = RESET_REQUIRED;
      endoneof;

    suppressif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorEistEnable == 0;
      oneof varid  = SOCKET_POWERMANAGEMENT_CONFIGURATION.TurboMode,
          prompt   = STRING_TOKEN (STR_TURBO_MODE_ENABLE),
          help     = STRING_TOKEN (STR_TURBO_MODE_ENABLE_HELP),
          option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    //
    // Flexible Ratio
    //
  suppressif  ideqval SOCKET_PROCESSORCORE_CONFIGURATION.AllowMixedPowerOnCpuRatio == 1;
    oneof varid     = SOCKET_PROCESSORCORE_CONFIGURATION.ProcessorFlexibleRatioOverrideEnable,
          prompt      = STRING_TOKEN(STR_PROCESSOR_RATIO_OVERRIDE),
          help        = STRING_TOKEN(STR_PROCESSOR_RATIO_OVERRIDE_HELP),
          option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
    endoneof;


    grayoutif ideqval SOCKET_PROCESSORCORE_CONFIGURATION.ProcessorFlexibleRatioOverrideEnable == 0;
      numeric varid = SOCKET_PROCESSORCORE_CONFIGURATION.ProcessorFlexibleRatio,
          questionid = KEY_FLEXIBLE_RATIO,
          prompt  = STRING_TOKEN(STR_PROCESSOR_CORE_RATIO),
          help    = STRING_TOKEN(STR_PROCESSOR_CORE_RATIO_HELP),
          flags   = 0 | INTERACTIVE | RESET_REQUIRED,
          minimum = 0,
          maximum = MAX_PROCESSOR_CORE_RATIO,
          step    = 1, // Stepping of 0 equates to a manual entering of a value, otherwise
                       // it will auto-increment with a left/right arrow
          default = DEFAULT_PROCESSOR_CORE_RATIO, defaultstore = MyStandardDefault,
          default = DEFAULT_PROCESSOR_CORE_RATIO, defaultstore = MyManufactureDefault,
      endnumeric;
    endif;
    endif;
    suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX;
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.GpssTimer,
        prompt      = STRING_TOKEN(STR_GPSSTIMER),
        help        = STRING_TOKEN(STR_GPSSTIMER_HELP),
        option text = STRING_TOKEN(STR_0_US),    value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_50_US),   value = 5, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_500_US),  value = 50, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

      goto PROG_CSR_PERF_P_LIMIT_FORM_ID,
      prompt  = STRING_TOKEN(STR_CSR_PERF_P_LIMIT_FORM),
      help    = STRING_TOKEN(STR_CSR_PERF_P_LIMIT_FORM_HELP);

  endform;  //end P State Control Form

  // XE Ratio Limit Setup Sub Form Start
  form formid = XE_RATIO_LIMIT_FORMID,
  title = STRING_TOKEN(STR_XE_RATIO_LIMIT_FORM_TITLE);

  subtitle text = STRING_TOKEN(STR_XE_RATIO_LIMIT_FORM_TITLE);
  subtitle text = STRING_TOKEN(STR_NULL_STRING);
    //Enable Xe
    suppressif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.TurboMode == 0
                       OR ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorEistEnable == 0;

      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.EnableXe,
        prompt      = STRING_TOKEN(STR_CPU_XE_PROMPT),
        help        = STRING_TOKEN(STR_CPU_XE_HELP),
        option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      // Overclocking Lock
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.OverclockingLock,
        prompt      = STRING_TOKEN(STR_OVERCLOCKING_LOCK),
        help        = STRING_TOKEN(STR_OVERCLOCKING_LOCK_HELP),
        option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

    endif;

    // AVX Support
    suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.OcCap == 0;
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.AvxSupport,
        prompt      = STRING_TOKEN(STR_AVX_SUPPORT_PROMPT),
        help        = STRING_TOKEN(STR_AVX_SUPPORT_PROMPT_HELP),
        option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    suppressif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.EnableXe == 0
                    OR ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.TurboMode == 0
                       OR ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorEistEnable == 0;
      numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.TurboRatioLimitRatio[0],
        prompt  = STRING_TOKEN(STR_TURBO_RATIO_LIMIT_RATIO_0),
        help    = STRING_TOKEN(STR_TURBO_RATIO_LIMIT_RATIO_HELP),
        flags   = 0 | RESET_REQUIRED,
        minimum = 0,
        maximum = 80,      //
        step    = 0,        // Stepping of 0 equates to a manual entering of a value,
                            // otherwise it will auto-increment with a left/right arrow
        default = 0, defaultstore = MyStandardDefault,
        default = 0, defaultstore = MyManufactureDefault,
      endnumeric;
    endif;

    suppressif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.EnableXe == 0
                    OR ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.TurboMode == 0
                       OR ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorEistEnable == 0;
      numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.TurboRatioLimitCores[0],
        prompt  = STRING_TOKEN(STR_TURBO_RATIO_LIMIT_CORES_0),
        help    = STRING_TOKEN(STR_TURBO_RATIO_LIMIT_CORES_HELP),
        flags   = 0 | RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum = 0,
        maximum = 0xFF,      //
        step    = 0,        // Stepping of 0 equates to a manual entering of a value,
                            // otherwise it will auto-increment with a left/right arrow
        default = 0xFF, defaultstore = MyStandardDefault,
        default = 0xFF, defaultstore = MyManufactureDefault,
      endnumeric;
    endif;

      numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.TurboRatioLimitRatio[1],
        prompt  = STRING_TOKEN(STR_TURBO_RATIO_LIMIT_RATIO_1),
        help    = STRING_TOKEN(STR_TURBO_RATIO_LIMIT_RATIO_HELP),
        flags   = 0 | RESET_REQUIRED,
        minimum = 0,
        maximum = 80,      //
        step    = 0,        // Stepping of 0 equates to a manual entering of a value,
                            // otherwise it will auto-increment with a left/right arrow
        default = 0, defaultstore = MyStandardDefault,
        default = 0, defaultstore = MyManufactureDefault,
      endnumeric;

      numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.TurboRatioLimitCores[1],
        prompt  = STRING_TOKEN(STR_TURBO_RATIO_LIMIT_CORES_1),
        help    = STRING_TOKEN(STR_TURBO_RATIO_LIMIT_CORES_HELP),
        flags   = 0 | RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum = 0,
        maximum = 0xFF,      //
        step    = 0,        // Stepping of 0 equates to a manual entering of a value,
                            // otherwise it will auto-increment with a left/right arrow
        default = 0xFF, defaultstore = MyStandardDefault,
        default = 0xFF, defaultstore = MyManufactureDefault,
      endnumeric;

      numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.TurboRatioLimitRatio[2],
        prompt  = STRING_TOKEN(STR_TURBO_RATIO_LIMIT_RATIO_2),
        help    = STRING_TOKEN(STR_TURBO_RATIO_LIMIT_RATIO_HELP),
        flags   = 0 | RESET_REQUIRED,
        minimum = 0,
        maximum = 80,      //
        step    = 0,        // Stepping of 0 equates to a manual entering of a value,
                            // otherwise it will auto-increment with a left/right arrow
        default = 0, defaultstore = MyStandardDefault,
        default = 0, defaultstore = MyManufactureDefault,
      endnumeric;

      numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.TurboRatioLimitCores[2],
        prompt  = STRING_TOKEN(STR_TURBO_RATIO_LIMIT_CORES_2),
        help    = STRING_TOKEN(STR_TURBO_RATIO_LIMIT_CORES_HELP),
        flags   = 0 | RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum = 0,
        maximum = 0xFF,      //
        step    = 0,        // Stepping of 0 equates to a manual entering of a value,
                            // otherwise it will auto-increment with a left/right arrow
        default = 0xFF, defaultstore = MyStandardDefault,
        default = 0xFF, defaultstore = MyManufactureDefault,
      endnumeric;

      numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.TurboRatioLimitRatio[3],
        prompt  = STRING_TOKEN(STR_TURBO_RATIO_LIMIT_RATIO_3),
        help    = STRING_TOKEN(STR_TURBO_RATIO_LIMIT_RATIO_HELP),
        flags   = 0 | RESET_REQUIRED,
        minimum = 0,
        maximum = 80,      //
        step    = 0,        // Stepping of 0 equates to a manual entering of a value,
                            // otherwise it will auto-increment with a left/right arrow
        default = 0, defaultstore = MyStandardDefault,
        default = 0, defaultstore = MyManufactureDefault,
      endnumeric;

      numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.TurboRatioLimitCores[3],
        prompt  = STRING_TOKEN(STR_TURBO_RATIO_LIMIT_CORES_3),
        help    = STRING_TOKEN(STR_TURBO_RATIO_LIMIT_CORES_HELP),
        flags   = 0 | RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum = 0,
        maximum = 0xFF,      //
        step    = 0,        // Stepping of 0 equates to a manual entering of a value,
                            // otherwise it will auto-increment with a left/right arrow
        default = 0xFF, defaultstore = MyStandardDefault,
        default = 0xFF, defaultstore = MyManufactureDefault,
      endnumeric;

      numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.TurboRatioLimitRatio[4],
        prompt  = STRING_TOKEN(STR_TURBO_RATIO_LIMIT_RATIO_4),
        help    = STRING_TOKEN(STR_TURBO_RATIO_LIMIT_RATIO_HELP),
        flags   = 0 | RESET_REQUIRED,
        minimum = 0,
        maximum = 80,      //
        step    = 0,        // Stepping of 0 equates to a manual entering of a value,
                            // otherwise it will auto-increment with a left/right arrow
        default = 0, defaultstore = MyStandardDefault,
        default = 0, defaultstore = MyManufactureDefault,
      endnumeric;

      numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.TurboRatioLimitCores[4],
        prompt  = STRING_TOKEN(STR_TURBO_RATIO_LIMIT_CORES_4),
        help    = STRING_TOKEN(STR_TURBO_RATIO_LIMIT_CORES_HELP),
        flags   = 0 | RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum = 0,
        maximum = 0xFF,      //
        step    = 0,        // Stepping of 0 equates to a manual entering of a value,
                            // otherwise it will auto-increment with a left/right arrow
        default = 0xFF, defaultstore = MyStandardDefault,
        default = 0xFF, defaultstore = MyManufactureDefault,
      endnumeric;

      numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.TurboRatioLimitRatio[5],
        prompt  = STRING_TOKEN(STR_TURBO_RATIO_LIMIT_RATIO_5),
        help    = STRING_TOKEN(STR_TURBO_RATIO_LIMIT_RATIO_HELP),
        flags   = 0 | RESET_REQUIRED,
        minimum = 0,
        maximum = 80,      //
        step    = 0,        // Stepping of 0 equates to a manual entering of a value,
                            // otherwise it will auto-increment with a left/right arrow
        default = 0, defaultstore = MyStandardDefault,
        default = 0, defaultstore = MyManufactureDefault,
      endnumeric;

      numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.TurboRatioLimitCores[5],
        prompt  = STRING_TOKEN(STR_TURBO_RATIO_LIMIT_CORES_5),
        help    = STRING_TOKEN(STR_TURBO_RATIO_LIMIT_CORES_HELP),
        flags   = 0 | RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum = 0,
        maximum = 0xFF,      //
        step    = 0,        // Stepping of 0 equates to a manual entering of a value,
                            // otherwise it will auto-increment with a left/right arrow
        default = 0xFF, defaultstore = MyStandardDefault,
        default = 0xFF, defaultstore = MyManufactureDefault,
      endnumeric;

      numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.TurboRatioLimitRatio[6],
        prompt  = STRING_TOKEN(STR_TURBO_RATIO_LIMIT_RATIO_6),
        help    = STRING_TOKEN(STR_TURBO_RATIO_LIMIT_RATIO_HELP),
        flags   = 0 | RESET_REQUIRED,
        minimum = 0,
        maximum = 80,      //
        step    = 0,        // Stepping of 0 equates to a manual entering of a value,
                            // otherwise it will auto-increment with a left/right arrow
        default = 0, defaultstore = MyStandardDefault,
        default = 0, defaultstore = MyManufactureDefault,
      endnumeric;

      numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.TurboRatioLimitCores[6],
        prompt  = STRING_TOKEN(STR_TURBO_RATIO_LIMIT_CORES_6),
        help    = STRING_TOKEN(STR_TURBO_RATIO_LIMIT_CORES_HELP),
        flags   = 0 | RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum = 0,
        maximum = 0xFF,      //
        step    = 0,        // Stepping of 0 equates to a manual entering of a value,
                            // otherwise it will auto-increment with a left/right arrow
        default = 0xFF, defaultstore = MyStandardDefault,
        default = 0xFF, defaultstore = MyManufactureDefault,
      endnumeric;

      numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.TurboRatioLimitRatio[7],
        prompt  = STRING_TOKEN(STR_TURBO_RATIO_LIMIT_RATIO_7),
        help    = STRING_TOKEN(STR_TURBO_RATIO_LIMIT_RATIO_HELP),
        flags   = 0 | RESET_REQUIRED,
        minimum = 0,
        maximum = 80,      //
        step    = 0,        // Stepping of 0 equates to a manual entering of a value,
                            // otherwise it will auto-increment with a left/right arrow
        default = 0, defaultstore = MyStandardDefault,
        default = 0, defaultstore = MyManufactureDefault,
      endnumeric;

      numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.TurboRatioLimitCores[7],
        prompt  = STRING_TOKEN(STR_TURBO_RATIO_LIMIT_CORES_7),
        help    = STRING_TOKEN(STR_TURBO_RATIO_LIMIT_CORES_HELP),
        flags   = 0 | RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum = 0,
        maximum = 0xFF,      //
        step    = 0,        // Stepping of 0 equates to a manual entering of a value,
                            // otherwise it will auto-increment with a left/right arrow
        default = 0xFF, defaultstore = MyStandardDefault,
        default = 0xFF, defaultstore = MyManufactureDefault,
      endnumeric;

  endform;  //end of XE Ratio Limit Setup Sub Form
  // end of XE Ratio Limit Setup Sub Form


  //C State Control Form start
  form formid = CPU0_CSTATE_CONTROL_FORM_ID,
  title = STRING_TOKEN(STR_CPU_C_STATE_CONTROL_FORM_TITLE);

  subtitle text = STRING_TOKEN(STR_CPU_C_STATE_CONTROL_FORM_TITLE);
  subtitle text = STRING_TOKEN(STR_NULL_STRING);

    //
    // Enable Monitor MWAIT
    //
    oneof varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.MonitorMWait,
      prompt      = STRING_TOKEN(STR_PROCESSOR_MWAIT),
      help        = STRING_TOKEN(STR_PROCESSOR_MWAIT_HELP),
      option text = STRING_TOKEN(STR_DISABLE),  value = 0,  flags = RESET_REQUIRED ;
      option text = STRING_TOKEN(STR_ENABLE),   value = 1,  flags = RESET_REQUIRED| MANUFACTURING | DEFAULT;
    endoneof;

    // C1 Auto Demotion/Undemotion
suppressif (ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
            ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
            ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX);
    //
    // Enable C1 Autodemotion
    //
    oneof varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.C1AutoDemotion,
      prompt      = STRING_TOKEN(STR_PROCESSOR_C1_AUTO_DEMOTION),
      help        = STRING_TOKEN(STR_PROCESSOR_C1_AUTO_DEMOTION_HELP),
      option text = STRING_TOKEN(STR_DISABLE),  value = 0,  flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE),   value = 1,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
    endoneof;

    //
    // Enable C1 Autoundemotion
    //
    oneof varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.C1AutoUnDemotion,
      prompt      = STRING_TOKEN(STR_PROCESSOR_C1_AUTO_UNDEMOTION),
      help        = STRING_TOKEN(STR_PROCESSOR_C1_AUTO_UNDEMOTION_HELP),
      option text = STRING_TOKEN(STR_DISABLE),  value = 0,  flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE),   value = 1,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
    endoneof;
endif;

    //
    // Enable ACPI C3 report to OS
    //
    //
    // Enable/Disable CPU C6(ACPI C3) report to OS
    //
//Transformers_JK027***>>
#if defined (DDR5_SUPPORT) && !defined (SPR_HOST)
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.C6Enable,
          prompt      = STRING_TOKEN(STR_C6_ENABLE),
          help        = STRING_TOKEN(STR_C6_ENABLE_HELP),
          option text = STRING_TOKEN(STR_DISABLE),  value = 0,  flags = MANUFACTURING | DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),   value = 1,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_AUTO), value = PPM_AUTO, flags = RESET_REQUIRED;
      endoneof;
#else
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.C6Enable,
          prompt      = STRING_TOKEN(STR_C6_ENABLE),
          help        = STRING_TOKEN(STR_C6_ENABLE_HELP),
          option text = STRING_TOKEN(STR_DISABLE),  value = 0,  flags = MANUFACTURING | DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),   value = 1,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_AUTO), value = PPM_AUTO, flags = RESET_REQUIRED;
      endoneof;
#endif
//Transformers_JK027***<<
    //
    // Enable CPU C1E
    //
//Transformers_JK027***>>
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorC1eEnable,
          prompt      = STRING_TOKEN(STR_PROCESSOR_C1E),
          help        = STRING_TOKEN(STR_PROCESSOR_C1E_HELP),
          option text = STRING_TOKEN(STR_DISABLE),  value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
          option text = STRING_TOKEN(STR_ENABLE),   value = 1,  flags = RESET_REQUIRED;
      endoneof;
//Transformers_JK027***<<

      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.OSCx,
          prompt      = STRING_TOKEN(STR_OSCX_REPORT),
          help        = STRING_TOKEN(STR_OSCX_REPORT_HELP),
          option text = STRING_TOKEN(STR_OSCX_C2),  value = 0, flags = DEFAULT |MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_OSCX_C3),  value = 1, flags = RESET_REQUIRED;
      endoneof;

  endform; //end C State form


  //PACKAGE C State Control Form start
  form formid = PACKAGE_CSTATE_CONTROL_FORM_ID,
  title = STRING_TOKEN(STR_PACKAGE_C_STATE_CONTROL_FORM_TITLE);

  subtitle text = STRING_TOKEN(STR_PACKAGE_C_STATE_CONTROL_FORM_TITLE);
  subtitle text = STRING_TOKEN(STR_NULL_STRING);

    //
    // Package C state limit option
    //
    suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SNR OR
               ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_TNR;
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.PackageCState,
         prompt      = STRING_TOKEN(STR_PACKAGE_CSTATE_REPORT),
         help        = STRING_TOKEN(STR_PACKAGE_CSTATE_REPORT_HELP),
//Transformers_JK019***>>
         option text = STRING_TOKEN(STR_C0SUPPORT),      value = 0,  flags = MANUFACTURING | DEFAULT | RESET_REQUIRED;
         option text = STRING_TOKEN(STR_C2SUPPORT),      value = 1,  flags = RESET_REQUIRED;
         option text = STRING_TOKEN(STR_C6SUPPORT),      value = 2,  flags = RESET_REQUIRED;
      suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_ICXSP OR
                 ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_ICXD;
         option text = STRING_TOKEN(STR_C6_RETSUPPORT),  value = 3,  flags = RESET_REQUIRED;
         option text = STRING_TOKEN(STR_NOLIMIT),        value = 7,  flags = RESET_REQUIRED;
      endif;
         option text = STRING_TOKEN(STR_AUTO), value = PPM_AUTO, flags = RESET_REQUIRED;
      endoneof;
//Transformers_JK019***<<
    endif; // suppressif

    suppressif TRUE;
      //
      // VCCSA/VCCIO disable during Package C6
      //
      oneof varid = SOCKET_POWERMANAGEMENT_CONFIGURATION.VccSAandVccIOdisable,
        prompt      = STRING_TOKEN(STR_VCCSA_VCCIO_DISABLE_PROMPT),
        help        = STRING_TOKEN(STR_VCCSA_VCCIO_DISABLE_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
      endoneof;
    endif;

    //
    // C2C3TT - C2 to C3 Transition Timer
    //
    numeric varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.C2C3TT,
        prompt      = STRING_TOKEN(STR_C2C3TT),
        help        = STRING_TOKEN(STR_C2C3TT_HELP),
          flags   = RESET_REQUIRED,
          minimum = 0,
        maximum = 255,
        step    = 1,
        default = 0,                          //0 = AUTO
        endnumeric;

#ifndef CPX_HOST
      // Dynamic L1 - PCU_MISC_CONFIG Bit[21]
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.DynamicL1,
          prompt      = STRING_TOKEN(STR_DYNNAMIC_L1),
          help        = STRING_TOKEN(STR_DYNNAMIC_L1_HELP),
#ifdef SKX_HOST
          option text = STRING_TOKEN(STR_DISABLE),    value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),   value = 0, flags = RESET_REQUIRED;
#else
          option text = STRING_TOKEN(STR_DISABLE),    value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
#endif //#ifdef SKX_HOST
      endoneof;
#endif //#ifndef CPX_HOST

      // VIRTUAL_MSR_CR_POWER_CTL.PCH_NEG_DISABLE - MSR 0x1FC Bit[30]
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.PkgCLatNeg,
          prompt      = STRING_TOKEN(STR_PKG_C_LAT_NEG),
          help        = STRING_TOKEN(STR_PKG_C_LAT_NEG_HELP),
#ifdef ICX_HOST
          option text = STRING_TOKEN(STR_DISABLE),    value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
#else // !ICX_HOST
          option text = STRING_TOKEN(STR_DISABLE),    value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED;
#endif //  ICX_HOST
      endoneof;

      // Suppressing to prevent user from altering the default values of Pkgc entry criteria masks
      suppressif TRUE;
        goto PROG_ENTRY_CRITERIA_FORM_ID,
        prompt  = STRING_TOKEN(STR_ENTRY_CRITERIA_FORM),
        help    = STRING_TOKEN(STR_ENTRY_CRITERIA_FORM_HELP);
      endif;

      // VIRTUAL_MSR_CR_POWER_CTL.LTR_IIO_DISABLE - MSR 0x1FC Bit[29]
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.LTRSwInput,
          prompt      = STRING_TOKEN(STR_LTR_IIO_INPUT),
          help        = STRING_TOKEN(STR_LTR_IIO_INPUT_HELP),
          option text = STRING_TOKEN(STR_TAKE_IIO_LTR),     value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_IGNORE_IIO_LTR),   value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      goto PROG_CSR_SWLTROVRD_FORM_ID,
      prompt  = STRING_TOKEN(STR_PROG_CSR_SWLTROVRD_FORM),
      help    = STRING_TOKEN(STR_PROG_CSR_SWLTROVRD_FORM_HELP);

      suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
                 ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
                 ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX;
      endif;

      suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_ICXSP OR
                 ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_ICXD OR
                 ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SNR OR
                 ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_TNR;
        //Pkg C-state SA Power Management Control
        goto PROG_CSR_SAPMCTL_FORM_ID,
        prompt  = STRING_TOKEN(STR_PROG_CSR_SAPMCTL_FORM),
        help    = STRING_TOKEN(STR_PROG_CSR_SAPMCTL_FORM_HELP);
      endif;

      suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
                 ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
                 ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX;
      // Enable B2P PKGC_SA_PS_CRITERIA Power Management Control
        oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.EnablePkgcCriteria,
            prompt      = STRING_TOKEN(STR_PKGC_SA_PS_CRITERIA_ENABLE),
            help        = STRING_TOKEN(STR_PKGC_SA_PS_CRITERIA_HELP),
            option text = STRING_TOKEN(STR_DISABLE),    value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_ENABLE),     value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_AUTO),       value = PPM_AUTO, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.EnablePkgcCriteria == 0 OR
                 ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
                 ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
                 ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX;
        //B2P PKGC_SA_PS_CRITERIA Power Management Control
        goto PROG_PKGC_SA_PS_CRITERIA_FORM_ID,
        prompt  = STRING_TOKEN(STR_PKGC_SA_PS_CRITERIA_FORM),
        help    = STRING_TOKEN(STR_PKGC_SA_PS_CRITERIA_HELP);
      endif;

      oneof varid = SOCKET_MEMORY_CONFIGURATION.mdllSden,
        prompt      = STRING_TOKEN(STR_MDLL_SDEN_PROMPT),
        help        = STRING_TOKEN(STR_MDLL_SDEN_PROMPT_HELP),
        option text = STRING_TOKEN(STR_AUTO),     value = MDLL_SDEN_AUTO, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(STR_DISABLED), value = MDLL_SDEN_DIS, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = MDLL_SDEN_EN, flags = RESET_REQUIRED;
      endoneof;

    //HLV SASV Control Form Entry
    goto HLV_SASV_FORM_ID,
    prompt  = STRING_TOKEN(STR_HLV_SASV_FORM_TITLE),
    help    = STRING_TOKEN(STR_HLV_SASV_CONTROL_FORM_HELP);

  endform; //end PACKAGE C State form

  //HLV SASV Control Form Entry Start
  form formid = HLV_SASV_FORM_ID,
  title = STRING_TOKEN(STR_HLV_SASV_FORM_TITLE);
  subtitle text = STRING_TOKEN(STR_HLV_SASV_FORM_TITLE);
  subtitle text = STRING_TOKEN(STR_NULL_STRING);

  subtitle text = STRING_TOKEN(STR_C_STATE_LATENCY_CTRL_0);

      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.CStateLatencyCtrlValid[0],
          prompt      = STRING_TOKEN(STR_LATENCY_CTRL_VALID_PROMPT),
          help        = STRING_TOKEN(STR_LATENCY_CTRL_VALID_HELP),
          option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.CStateLatencyCtrlValid[0] == 0;
        numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.CStateLatencyCtrlMultiplier[0],
          prompt  = STRING_TOKEN(STR_LATENCY_CTRL_MULTIPLIER_PROMPT),
          help    = STRING_TOKEN(STR_LATENCY_CTRL_MULTIPLIER_HELP),
            flags   = RESET_REQUIRED | DISPLAY_UINT_HEX,
            minimum = 0,
            maximum = 0x7,
            step    = 0,
            default = 0, defaultstore = MyStandardDefault,
            default = 0, defaultstore = MyManufactureDefault,
          endnumeric;

        numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.CStateLatencyCtrlValue[0],
          prompt  = STRING_TOKEN(STR_LATENCY_CTRL_VALUE_PROMPT),
          help    = STRING_TOKEN(STR_LATENCY_CTRL_VALUE_HELP),
            flags   = RESET_REQUIRED | DISPLAY_UINT_HEX,
            minimum = 0,
            maximum = 0x1023,
            step    = 0,
            default = 0, defaultstore = MyStandardDefault,
            default = 0, defaultstore = MyManufactureDefault,
          endnumeric;
      endif;

    subtitle text = STRING_TOKEN(STR_NULL_STRING);
    subtitle text = STRING_TOKEN(STR_C_STATE_LATENCY_CTRL_1);

      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.CStateLatencyCtrlValid[1],
          prompt      = STRING_TOKEN(STR_LATENCY_CTRL_VALID_PROMPT),
          help        = STRING_TOKEN(STR_LATENCY_CTRL_VALID_HELP),
          option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.CStateLatencyCtrlValid[1] == 0;
        numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.CStateLatencyCtrlMultiplier[1],
          prompt  = STRING_TOKEN(STR_LATENCY_CTRL_MULTIPLIER_PROMPT),
          help    = STRING_TOKEN(STR_LATENCY_CTRL_MULTIPLIER_HELP),
            flags   = RESET_REQUIRED | DISPLAY_UINT_HEX,
            minimum = 0,
            maximum = 0x7,
            step    = 0,
            default = 0, defaultstore = MyStandardDefault,
            default = 0, defaultstore = MyManufactureDefault,
          endnumeric;

        numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.CStateLatencyCtrlValue[1],
          prompt  = STRING_TOKEN(STR_LATENCY_CTRL_VALUE_PROMPT),
          help    = STRING_TOKEN(STR_LATENCY_CTRL_VALUE_HELP),
            flags   = RESET_REQUIRED | DISPLAY_UINT_HEX,
            minimum = 0,
            maximum = 0x1023,
            step    = 0,
            default = 0, defaultstore = MyStandardDefault,
            default = 0, defaultstore = MyManufactureDefault,
          endnumeric;
      endif;

    subtitle text = STRING_TOKEN(STR_NULL_STRING);
    subtitle text = STRING_TOKEN(STR_C_STATE_LATENCY_CTRL_2);

      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.CStateLatencyCtrlValid[2],
          prompt      = STRING_TOKEN(STR_LATENCY_CTRL_VALID_PROMPT),
          help        = STRING_TOKEN(STR_LATENCY_CTRL_VALID_HELP),
          option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.CStateLatencyCtrlValid[2] == 0;
        numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.CStateLatencyCtrlMultiplier[2],
          prompt  = STRING_TOKEN(STR_LATENCY_CTRL_MULTIPLIER_PROMPT),
          help    = STRING_TOKEN(STR_LATENCY_CTRL_MULTIPLIER_HELP),
            flags   = RESET_REQUIRED | DISPLAY_UINT_HEX,
            minimum = 0,
            maximum = 0x7,
            step    = 0,
            default = 0, defaultstore = MyStandardDefault,
            default = 0, defaultstore = MyManufactureDefault,
          endnumeric;

        numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.CStateLatencyCtrlValue[2],
          prompt  = STRING_TOKEN(STR_LATENCY_CTRL_VALUE_PROMPT),
          help    = STRING_TOKEN(STR_LATENCY_CTRL_VALUE_HELP),
            flags   = RESET_REQUIRED | DISPLAY_UINT_HEX,
            minimum = 0,
            maximum = 0x1023,
            step    = 0,
            default = 0, defaultstore = MyStandardDefault,
            default = 0, defaultstore = MyManufactureDefault,
          endnumeric;
      endif;

  endform; //end HLV SASV Control Form

  //T State Control Form start
  form formid = CPU_TSTATE_CONTROL_FORM_ID,
  title = STRING_TOKEN(STR_CPU_T_STATE_CONTROL_FORM_TITLE);

  subtitle text = STRING_TOKEN(STR_CPU_T_STATE_CONTROL_FORM_TITLE);
  subtitle text = STRING_TOKEN(STR_NULL_STRING);

    //
    // T state
    //
    oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.TStateEnable,
        prompt      = STRING_TOKEN(STR_ACPI_TSTATES_ENABLE),
        help        = STRING_TOKEN(STR_ACPI_TSTATES_ENABLE_HELP),
        option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED  | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.TStateEnable == 0;
      oneof varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.OnDieThermalThrottling,
        prompt      = STRING_TOKEN(STR_TT_DUTY_CYCLE),
        help        = STRING_TOKEN(STR_TT_DUTY_CYCLE_HELP),
        option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_TT_DUTY_CYCLE_1),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_TT_DUTY_CYCLE_2),  value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_TT_DUTY_CYCLE_3),  value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_TT_DUTY_CYCLE_4),  value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_TT_DUTY_CYCLE_5),  value = 5, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_TT_DUTY_CYCLE_6),  value = 6, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_TT_DUTY_CYCLE_7),  value = 7, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_TT_DUTY_CYCLE_8),  value = 8, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_TT_DUTY_CYCLE_9),  value = 9, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_TT_DUTY_CYCLE_10),  value = 10, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_TT_DUTY_CYCLE_11),  value = 11, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_TT_DUTY_CYCLE_12),  value = 12, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_TT_DUTY_CYCLE_13),  value = 13, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_TT_DUTY_CYCLE_14),  value = 14, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_TT_DUTY_CYCLE_15),  value = 15, flags = RESET_REQUIRED;
      endoneof;

  endif;

  endform; //end T State form

  //CPU Thermal Management form Start
  form formid = CPU_THERMMAL_MANAGE_FORM_ID,
  title = STRING_TOKEN(STR_CPU_THERMAL_MANAGE_FORM_TITLE);

  subtitle text = STRING_TOKEN(STR_CPU_THERMAL_MANAGE_FORM_TITLE);
  subtitle text = STRING_TOKEN(STR_NULL_STRING);

      suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SPRSP OR
                 ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_GNRSP OR
                 ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SRFSP;
      //T State Control Form Entry
      goto CPU_TSTATE_CONTROL_FORM_ID,
      prompt  = STRING_TOKEN(STR_CPU_T_STATE_CONTROL_FORM_TITLE),
      help    = STRING_TOKEN(STR_CPU_T_STATE_CONTROL_FORM_HELP);
      endif;

      // 4168664: changes to EnableProcHot bios knob to allow selection of all prochot modes
      // ENABLE_BIDIR_PROCHOT - MSR 0x1FC Bit[0]
      // DIS_PROCHOT_OUT  - MSR 0x1FC Bit[21]
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.EnableProcHot,
          prompt      = STRING_TOKEN(STR_PROC_HOT_ENABLE),
          help        = STRING_TOKEN(STR_PROC_HOT_ENABLE_HELP),
#ifndef SPR_HOST
          option text = STRING_TOKEN(STR_OUTPUT_ONLY),     value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DISABLE),         value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_BIDIRECTIONAL),   value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_INPUT_ONLY),      value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
#else
          option text = STRING_TOKEN(STR_DISABLE),         value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_INPUT_ONLY),      value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
#endif // SPR_HOST
      endoneof;

      oneof varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.EnableThermalMonitor,
        prompt      = STRING_TOKEN(STR_THERMAL_MONITOR_PROMPT),
        help        = STRING_TOKEN(STR_THERMAL_MONITOR_PROMPT_HELP),
        option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif (NOT ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SPRSP) OR
                 ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.EnableThermalMonitor == 0;
        oneof varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.ThermalMonitorStatusFilter,
          prompt      = STRING_TOKEN(STR_THERMAL_MONITOR_STATUS_FILTER_PROMPT),
          help        = STRING_TOKEN(STR_THERMAL_MONITOR_STATUS_FILTER_HELP),
          option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      //
      // These values are reported based on time window table from PM team.
      //
      suppressif NOT (ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SPRSP AND
               ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.EnableThermalMonitor == 1 AND
               ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.ThermalMonitorStatusFilter == 1);
        oneof varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.ThermalMonitorStatusFilterTimeWindow,
          prompt      = STRING_TOKEN(STR_THERMAL_MONITOR_STATUS_FILTER_TIME_WINDOW_PROMPT),
          help        = STRING_TOKEN(STR_THERMAL_MONITOR_STATUS_FILTER_TIME_WINDOW_HELP),
          option text = STRING_TOKEN(STR_TIME_WINDOW_0),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_TIME_WINDOW_0156),  value = 0x27, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_TIME_WINDOW_0375),  value = 0x48, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_TIME_WINDOW_05),    value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_TIME_WINDOW_075),   value = 0x49, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_TIME_WINDOW_1),   value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_TIME_WINDOW_2),   value = 0x0B, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_TIME_WINDOW_3),   value = 0x4B, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_TIME_WINDOW_4),   value = 0x0C, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_TIME_WINDOW_5),   value = 0x2C, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_TIME_WINDOW_6),   value = 0x4C, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_TIME_WINDOW_7),   value = 0x6C, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_TIME_WINDOW_8),   value = 0x0D, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_TIME_WINDOW_10),  value = 0x2D, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_TIME_WINDOW_12),  value = 0x4D, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_TIME_WINDOW_14),  value = 0x6D, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_TIME_WINDOW_16),  value = 0x0E, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_TIME_WINDOW_20),  value = 0x2E, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_TIME_WINDOW_24),  value = 0x4E, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_TIME_WINDOW_28),  value = 0x6E, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_TIME_WINDOW_32),  value = 0x0F, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_TIME_WINDOW_40),  value = 0x2F, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_TIME_WINDOW_48),  value = 0x4F, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_TIME_WINDOW_56),  value = 0x6F, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_TIME_WINDOW_64),  value = 0x10, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_TIME_WINDOW_80),  value = 0x30, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_TIME_WINDOW_96),  value = 0x50, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_TIME_WINDOW_112), value = 0x70, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_TIME_WINDOW_128), value = 0x11, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_TIME_WINDOW_160),  value = 0x31, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_TIME_WINDOW_192),  value = 0x51, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_TIME_WINDOW_224),  value = 0x71, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_TIME_WINDOW_256),  value = 0x12, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_TIME_WINDOW_320),  value = 0x32, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_TIME_WINDOW_384),  value = 0x52, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_TIME_WINDOW_448),  value = 0x72, flags = RESET_REQUIRED;
        endoneof;
      endif;

      // PROCHOT_RATIO - CSR PROCHOT_RESPONSE_RATIO_CFG 1:30:2:0xB0 Bit[7:0]
      numeric varid = SOCKET_POWERMANAGEMENT_CONFIGURATION.ProchotResponseRatio,
        prompt      = STRING_TOKEN(STR_PROC_HOT_RESPONSE_RATIO),
        help        = STRING_TOKEN(STR_PROC_HOT_RESPONSE_RATIO_HELP),
        flags       = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum     = 0,
        maximum     = 0xFF,
        step        = 0,
        default     = 0, defaultstore = MyStandardDefault,
        default     = 0, defaultstore = MyManufactureDefault,
      endnumeric;

      numeric varid = SOCKET_POWERMANAGEMENT_CONFIGURATION.TCCActivationOffset,
        prompt      = STRING_TOKEN(STR_TCC_ACTIVATION_OFFSET_PROMPT),
        help        = STRING_TOKEN(STR_TCC_ACTIVATION_OFFSET_PROMPT_HELP),
        flags       = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum     = 0,
        maximum     = 0x3F,
        step        = 0,
        default     = 0, defaultstore = MyStandardDefault,
        default     = 0, defaultstore = MyManufactureDefault,
      endnumeric;

  endform; //end Thermal management form

  //Advanced PM Tuning Form Entry Start
  form formid = CPU_POWER_ADVANCED_CONFIG_FORM_ID,
  title = STRING_TOKEN(STR_CPU_POWER_ADVANCED_CONFIG_TITLE);
  subtitle text = STRING_TOKEN(STR_CPU_POWER_ADVANCED_CONFIG_TITLE);
  subtitle text = STRING_TOKEN(STR_NULL_STRING);

      goto ENERGY_PERF_BIAS_FORM_ID,
      prompt  = STRING_TOKEN(STR_ENERGY_PERF_BIAS_FORM),
      help    = STRING_TOKEN(STR_ENERGY_PERF_BIAS_FORM_HELP);

      // Dynamic Power/Perf Disable SAPM Control - MSR 0x1FC Bit[22]
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.SAPMControl,
          prompt      = STRING_TOKEN(STR_SAPM_CTRL),
          help        = STRING_TOKEN(STR_SAPM_CTRL_HELP),
          option text = STRING_TOKEN(STR_ENABLE),    value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DISABLE),   value = 1, flags = RESET_REQUIRED;
      endoneof;

      grayoutif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.EETurboDisable == 1;
        // DYNAMIC_PERF_POWER_CTL.EET_Override_Enable - CSR 1:10:2:64 Bit[18]
        oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.EetOverrideEn,
            prompt      = STRING_TOKEN(STR_EET_MODE),
            help        = STRING_TOKEN(STR_EET_MODE_HELP),
            option text = STRING_TOKEN(STR_COARSE_GRAINED_MODE),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_FINE_GRAINED_MODE),     value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;


  endform;  //Advanced PM Tuning Form Entry end

  //----------- Advanced PM Tuning Form Start
    //Energy_PERF_BIAS Form Start
    form formid = ENERGY_PERF_BIAS_FORM_ID,
    title = STRING_TOKEN(STR_ENERGY_PERF_BIAS_FORM);
    subtitle text = STRING_TOKEN(STR_ENERGY_PERF_BIAS_FORM);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

      // Power Performance Tuning Configuration Mode - MSR 0x1FC [25]
      //
      // Available and default options are dynamically changed according to HWP choice
      // Refer the map in SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorHWPMEnable
      //
#ifndef CPX_HOST
  //
  // HWP is disabled: OS, BIOS and PECI control all available. OS control is default
  // HWP native mode: OS, BIOS and PECI control all available. OS control is default
  // HWP is OOB     : BIOS and PECI control both available. PECI control is default
  // HWP is native w/o legacy: BIOS and PECI control both available. BIOS control is default
  //
  oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.PwrPerfTuning,
      prompt      = STRING_TOKEN(STR_PWR_PERF_TUNING),
      help        = STRING_TOKEN(STR_PWR_PERF_TUNING_HELP),
      suppressif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorHWPMEnable == 2 OR
                 ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorHWPMEnable == 3;
        option text = STRING_TOKEN(STR_PWR_PERF_OS_EPB),    value = 0, flags = RESET_REQUIRED;
      endif;
        option text = STRING_TOKEN(STR_PWR_PERF_BIOS_EPB),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PWR_PERF_PECI_EPB),  value = 2, flags = RESET_REQUIRED;
  endoneof;
#else
  //
  // SKX/CPX setting
  //
  // HWP is disabled: OS, BIOS control both available. OS control is default
  // HWP native mode: OS, BIOS control both available. OS control is default
  // HWP is OOB     : OS control is default
  // HWP is native w/o legacy: OS, BIOS control both available. OS control is default
  //
  grayoutif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorHWPMEnable == 2;  //if HWPM = OOB Mode
    // Power Performance Tuning Configuration Mode - MSR 0x1FC [25]
    oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.PwrPerfTuning,
        prompt      = STRING_TOKEN(STR_PWR_PERF_TUNING),
        help        = STRING_TOKEN(STR_PWR_PERF_TUNING_HELP),
        option text = STRING_TOKEN(STR_PWR_PERF_OS_EPB),    value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PWR_PERF_BIOS_EPB),   value = 1, flags = RESET_REQUIRED;
    endoneof;
  endif;

#endif //#ifndef CPX_HOST

      grayoutif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.PwrPerfTuning == 1  OR
                ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorHWPMEnable == 2;  //if HWPM = OOB Mode
        oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorOutofBandAlternateEPB,
          prompt      = STRING_TOKEN(STR_PROCESSOR_PECI_PCS_EPB),
          help        = STRING_TOKEN(STR_PROCESSOR_PECI_PCS_EPB_HELP),
          option text = STRING_TOKEN(STR_PROCESSOR_EPB_OS_CTRL),   value = 0,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
          option text = STRING_TOKEN(STR_PROCESSOR_EPB_PECI_CTRL),    value = 1,  flags = RESET_REQUIRED;
        endoneof;
      endif;

      grayoutif NOT ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.PwrPerfTuning == 1;
      // Once Power Performance Tuning Configuration Mode = 1, Use input from ENERGY_PERF_BIAS_CONFIG - MSR 0xA01 [6:3] = MSR 0x1B0 [6:3]
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.AltEngPerfBIAS,
        prompt      = STRING_TOKEN(STR_PWR_ENERGY_PERF),
        help        = STRING_TOKEN(STR_PWR_ENERGY_PERF_HELP),
        option text = STRING_TOKEN(STR_ENERGY_PERF_MODE_1),    value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENERGY_PERF_MODE_2),   value = 0x7, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENERGY_PERF_MODE_3),   value = 0x8, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENERGY_PERF_MODE_4),   value = 0xf, flags = RESET_REQUIRED;
      endoneof;
      endif;

      // Enable Power/Perf Dynamic Switching - MSR 0x1FC [24]
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.PwrPerfSwitch,
          prompt      = STRING_TOKEN(STR_PWR_PERF_SWITCH),
          help        = STRING_TOKEN(STR_PWR_PERF_SWITCH_HELP),
          option text = STRING_TOKEN(STR_DISABLE),    value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),     value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      // ENERGY_PERF_BIAS_CONFIG.WORKLD_CONFIG - MSR 0xA01 [2:0]
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.WorkLdConfig,
          prompt      = STRING_TOKEN(STR_WORKLD_CONFIG),
          help        = STRING_TOKEN(STR_WORKLD_CONFIG_HELP),
          option text = STRING_TOKEN(STR_BALANCE),        value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_IO_SENSITIVE),   value = 2, flags = RESET_REQUIRED;
      endoneof;

      // ENERGY_PERF_BIAS_CONFIG.AVG_TIME_WINDOW
      numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.EngAvgTimeWdw1,
        prompt  = STRING_TOKEN(STR_AVG_TIME_WINDOW),
        help    = STRING_TOKEN(STR_AVG_TIME_WINDOW_HELP),
          flags   = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum = 0,
          maximum = 0xFF,
          step    = 0,
          default = 0x17, defaultstore = MyStandardDefault,
          default = 0x17, defaultstore = MyManufactureDefault,
        endnumeric;

      // ENERGY_PERF_BIAS_CONFIG.P0_total_time_threshold_low
      numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.P0TtlTimeLow1,
        prompt  = STRING_TOKEN(STR_P0_TOTALTIME_THSHLD_LOW),
        help    = STRING_TOKEN(STR_P0_TOTALTIME_THSHLD_LOW_HELP),
          flags   = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum = 0,
        maximum = 0x3F,
          step    = 0,
        default = 0x23, defaultstore = MyStandardDefault,
        default = 0x23, defaultstore = MyManufactureDefault,
        endnumeric;

      // ENERGY_PERF_BIAS_CONFIG.P0_total_time_threshold_high
      numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.P0TtlTimeHigh1,
        prompt  = STRING_TOKEN(STR_P0_TOTALTIME_THSHLD_HIGH),
        help    = STRING_TOKEN(STR_P0_TOTALTIME_THSHLD_HIGH_HELP),
          flags   = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum = 0,
        maximum = 0x3F,
          step    = 0,
        default = 0x3a, defaultstore = MyStandardDefault,
        default = 0x3a, defaultstore = MyManufactureDefault,
        endnumeric;

    endform;  //end of Energy_PERF_BIAS Form

    //Program PP0 Current Config Control Msr Form Start
    form formid = PROG_MSR_PP_CURT_CFG_CTRL_FORM_ID,
    title = STRING_TOKEN(STR_MSR_PP_CURT_CFG_CTRL_FORM);
    subtitle text = STRING_TOKEN(STR_MSR_PP_CURT_CFG_CTRL_FORM);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

      // PRIMARY_PLANE_CURRENT_CONFIG_CONTROL.CURRENT_LIMIT
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.CurrentConfig,
          prompt      = STRING_TOKEN(STR_CURRENT_CONFIG),
          help        = STRING_TOKEN(STR_CURRENT_CONFIG_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.CurrentConfig == 0;
      numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.CurrentLimit,
          prompt  = STRING_TOKEN (STR_CURRENT_LIMIT),
          help    = STRING_TOKEN (STR_CURRENT_LIMIT_HELP),
          flags   = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum = 0,
          maximum = 0x17E8,
          step    = 0,
          default = 0x0438, defaultstore = MyStandardDefault,
          default = 0x0438, defaultstore = MyManufactureDefault,
      endnumeric;
      endif;

      // PRIMARY_PLANE_CURRENT_CONFIG_CONTROL.LOCK
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.PpcccLock,
          prompt      = STRING_TOKEN(STR_PPCCCLOCK),
          help        = STRING_TOKEN(STR_PPCCCLOCK_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

    endform;  //end of Program PP0 Current Config Control Msr Form

    //PSI Config Sub Form Statrt
    form formid = PROG_MSR_PP_CURT_PSI_CONFIG_FORM_ID,
    title = STRING_TOKEN(STR_MSR_PP_CURT_PSI_CONFIG_FORM);
    subtitle text = STRING_TOKEN(STR_MSR_PP_CURT_PSI_CONFIG_FORM);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

    endform;  //end of PSI Config Sub Form

    //Program Entry Criteria CSR Form Start
    form formid = PROG_ENTRY_CRITERIA_FORM_ID,
    title = STRING_TOKEN(STR_ENTRY_CRITERIA_FORM);
    subtitle text = STRING_TOKEN(STR_ENTRY_CRITERIA_FORM);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.PkgCstEntryValCtl,
        prompt      = STRING_TOKEN(STR_PKGCENTRYOVRD_VALCTL),
        help        = STRING_TOKEN(STR_PKGCENTRYOVRD_VALCTL_HELP),
        option text = STRING_TOKEN(STR_SKIP),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MANUAL),   value = 1, flags = RESET_REQUIRED;
      endoneof;

      grayoutif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.PkgCstEntryValCtl == 0;
      goto SOCKET0_PKGCENTRY_FORMID,
      prompt  = STRING_TOKEN(STR_SOCKET_PKGCENTRY_0_FORM),
      help    = STRING_TOKEN(STR_SOCKET_PKGCENTRY_HELP);

#if MAX_SOCKET > 1
    suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.NumCpus == 1;
      goto SOCKET1_PKGCENTRY_FORMID,
      prompt  = STRING_TOKEN(STR_SOCKET_PKGCENTRY_1_FORM),
      help    = STRING_TOKEN(STR_SOCKET_PKGCENTRY_HELP);
    endif; // suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.NumCpus == 1;
#endif
#if MAX_SOCKET > 2
    suppressif ideqvallist SOCKET_COMMONRC_CONFIGURATION.NumCpus == 1 2;
      goto SOCKET2_PKGCENTRY_FORMID,
      prompt  = STRING_TOKEN(STR_SOCKET_PKGCENTRY_2_FORM),
      help    = STRING_TOKEN(STR_SOCKET_PKGCENTRY_HELP);
    endif; // suppressif ideqvallist SOCKET_COMMONRC_CONFIGURATION.NumCpus == 1 2;
#endif
#if MAX_SOCKET > 3
    suppressif ideqvallist SOCKET_COMMONRC_CONFIGURATION.NumCpus == 1 2;
      goto SOCKET3_PKGCENTRY_FORMID,
      prompt  = STRING_TOKEN(STR_SOCKET_PKGCENTRY_3_FORM),
      help    = STRING_TOKEN(STR_SOCKET_PKGCENTRY_HELP);
    endif; // suppressif ideqvallist SOCKET_COMMONRC_CONFIGURATION.NumCpus == 1 2;
#endif
#if MAX_SOCKET > 4
    suppressif ideqvallist SOCKET_COMMONRC_CONFIGURATION.NumCpus == 1 2 4;
      goto SOCKET4_PKGCENTRY_FORMID,
      prompt  = STRING_TOKEN(STR_SOCKET_PKGCENTRY_4_FORM),
      help    = STRING_TOKEN(STR_SOCKET_PKGCENTRY_HELP);
    endif; // suppressif ideqvallist SOCKET_COMMONRC_CONFIGURATION.NumCpus == 1 2 4;
#endif
#if MAX_SOCKET > 5
    suppressif ideqvallist SOCKET_COMMONRC_CONFIGURATION.NumCpus == 1 2 4;
      goto SOCKET5_PKGCENTRY_FORMID,
      prompt  = STRING_TOKEN(STR_SOCKET_PKGCENTRY_5_FORM),
      help    = STRING_TOKEN(STR_SOCKET_PKGCENTRY_HELP);
    endif; // suppressif ideqvallist SOCKET_COMMONRC_CONFIGURATION.NumCpus == 1 2 4;
#endif
#if MAX_SOCKET > 6
    suppressif ideqvallist SOCKET_COMMONRC_CONFIGURATION.NumCpus == 1 2 4 6;
      goto SOCKET6_PKGCENTRY_FORMID,
      prompt  = STRING_TOKEN(STR_SOCKET_PKGCENTRY_6_FORM),
      help    = STRING_TOKEN(STR_SOCKET_PKGCENTRY_HELP);
    endif; // suppressif ideqvallist SOCKET_COMMONRC_CONFIGURATION.NumCpus == 1 2 4 6;
#endif
#if MAX_SOCKET > 7
    suppressif ideqvallist SOCKET_COMMONRC_CONFIGURATION.NumCpus == 1 2 4 6;
      goto SOCKET7_PKGCENTRY_FORMID,
      prompt  = STRING_TOKEN(STR_SOCKET_PKGCENTRY_7_FORM),
      help    = STRING_TOKEN(STR_SOCKET_PKGCENTRY_HELP);
    endif; // suppressif ideqvallist SOCKET_COMMONRC_CONFIGURATION.NumCpus == 1 2 4 6;
#endif

    endif;
    endform;    //end of Program Entry Criteria CSR Form


    //Program SWLTR Override CSR Form Start
    form formid = PROG_CSR_SWLTROVRD_FORM_ID,
    title = STRING_TOKEN(STR_PROG_CSR_SWLTROVRD_FORM);
    subtitle text = STRING_TOKEN(STR_PROG_CSR_SWLTROVRD_FORM);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

    oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.SwLtrOvrdCtl,
        prompt      = STRING_TOKEN(STR_SWLTROVRD_CTL),
        help        = STRING_TOKEN(STR_SWLTROVRD_CTL_HELP),
        option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = RESET_REQUIRED;
      endoneof;

      // CSR_PCIE_ILTR_OVRD  (CSR 1:30:1:FC)
      // SW_LTR_OVRD (MSR 0xa02) -- not used
      suppressif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.SwLtrOvrdCtl == 0;
        oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.SnpLatVld,
            prompt      = STRING_TOKEN(STR_SNOOP_LATVALID_PROMPT),
            help        = STRING_TOKEN(STR_SNOOP_LATVALID_PROMPT_HELP),
            option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags =  RESET_REQUIRED;
        endoneof;

        oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.SnpLatOvrd,
            prompt      = STRING_TOKEN(STR_SNOOP_LATOVRD_PROMPT),
            help        = STRING_TOKEN(STR_SNOOP_LATOVRD_PROMPT_HELP),
            option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
        endoneof;

        numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.SnpLatMult,
            prompt      = STRING_TOKEN(STR_SNOOP_LATMULT_PROMPT),
            help        = STRING_TOKEN(STR_SNOOP_LATMULT_PROMPT_HELP),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 7,
            step        = 0,
            default     = 0, defaultstore = MyStandardDefault,
            default     = 0, defaultstore = MyManufactureDefault,
        endnumeric;

        numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.SnpLatVal,
            prompt      = STRING_TOKEN(STR_SNOOP_LATVAL_PROMPT),
            help        = STRING_TOKEN(STR_SNOOP_LATVAL_PROMPT_HELP),
            flags       = RESET_REQUIRED | DISPLAY_UINT_HEX,
            minimum     = 0,
            maximum     = 0x3FF,
            step        = 0,
            default     = 0, defaultstore = MyStandardDefault,
            default     = 0, defaultstore = MyManufactureDefault,
        endnumeric;

        oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.NonSnpLatVld,
            prompt      = STRING_TOKEN(STR_NONSNOOP_LATVALID_PROMPT),
            help        = STRING_TOKEN(STR_NONSNOOP_LATVALID_PROMPT_HELP),
            option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags =  RESET_REQUIRED;
        endoneof;

        oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.NonSnpLatOvrd,
            prompt      = STRING_TOKEN(STR_NONSNOOP_LATOVRD_PROMPT),
            help        = STRING_TOKEN(STR_NONSNOOP_LATOVRD_PROMPT_HELP),
            option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
        endoneof;

        numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.NonSnpLatMult,
            prompt      = STRING_TOKEN(STR_NONSNOOP_LATMULT_PROMPT),
            help        = STRING_TOKEN(STR_NONSNOOP_LATMULT_PROMPT_HELP),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 7,
            step        = 1,
            default     = 0, defaultstore = MyStandardDefault,
            default     = 0, defaultstore = MyManufactureDefault,
        endnumeric;

        numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.NonSnpLatVal,
            prompt      = STRING_TOKEN(STR_NONSNOOP_LATVAL_PROMPT),
            help        = STRING_TOKEN(STR_NONSNOOP_LATVAL_PROMPT_HELP),
            flags       = RESET_REQUIRED | DISPLAY_UINT_HEX,
            minimum     = 0,
            maximum     = 0x3FF,
            step        = 1,
            default     = 0, defaultstore = MyStandardDefault,
            default     = 0, defaultstore = MyManufactureDefault,
        endnumeric;
      endif;
    endform;    //end of Program SWLTR Override CSR Form

    //Power Management Override Start
    form formid = PROG_CSR_DYNAMIC_PERF_POWER_CTL_FORM_ID,
    title = STRING_TOKEN(STR_CSR_DYNAMIC_PERF_POWER_CTL_FORM);
    subtitle text = STRING_TOKEN(STR_CSR_DYNAMIC_PERF_POWER_CTL_FORM);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

      // DYNAMIC_PERF_POWER_CTL.Uncore_Perf_PLimit_Override_Enable - CSR 1:30:2:64 Bit[20]
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.UncrPerfPlmtOvrdEn,
          prompt      = STRING_TOKEN(STR_UNCORE_PERF_PLIMIT_OVRD_EN),
          help        = STRING_TOKEN(STR_UNCORE_PERF_PLIMIT_OVRD_EN_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      // DYNAMIC_PERF_POWER_CTL.IO_BW_PLimit_Override_Enable - CSR 1:30:2:64 Bit[15]
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.IoBwPlmtOvrdEn,
          prompt      = STRING_TOKEN(STR_IO_BW_PLIMIT_OVRD_EN),
          help        = STRING_TOKEN(STR_IO_BW_PLIMIT_OVRD_EN_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = RESET_REQUIRED;
      endoneof;

/*
      // DYNAMIC_PERF_POWER_CTL.IMC_APM_Override_Enable - CSR 1:30:2:64 Bit[10]
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.ImcApmOvrdEn,
          prompt      = STRING_TOKEN(STR_IMC_APM_OVERRIDE_ENABLE),
          help        = STRING_TOKEN(STR_IMC_APM_OVERRIDE_ENABLE_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = RESET_REQUIRED;
      endoneof;
*/
      // DYNAMIC_PERF_POWER_CTL.IOM_APM_Override_Enable - CSR 1:30:2:64 Bit[5]
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.IomApmOvrdEn,
          prompt      = STRING_TOKEN(STR_IOM_APM_OVERRIDE_ENABLE),
          help        = STRING_TOKEN(STR_IOM_APM_OVERRIDE_ENABLE_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = RESET_REQUIRED;
      endoneof;

      // DYNAMIC_PERF_POWER_CTL.KTI_APM_Override_Enable - CSR 1:30:2:64 Bit[0]
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.KtiApmOvrdEn,
          prompt      = STRING_TOKEN(STR_KTI_APM_OVERRIDE_ENABLE),
          help        = STRING_TOKEN(STR_KTI_APM_OVERRIDE_ENABLE_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = RESET_REQUIRED;
      endoneof;

    endform;    //end of Power Management Override Form

    //Program SAPMCTL CSR Form Start
    form formid = PROG_CSR_SAPMCTL_FORM_ID,
    title = STRING_TOKEN(STR_PROG_CSR_SAPMCTL_FORM);
    subtitle text = STRING_TOKEN(STR_PROG_CSR_SAPMCTL_FORM);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

      goto SOCKET0_PKGCSAPM_FORMID,
      prompt  = STRING_TOKEN(STR_SOCKET_PKGCSAPM_0_FORM),
      help    = STRING_TOKEN(STR_SOCKET_PKGCSAPM_HELP);

#if MAX_SOCKET > 1
    suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.NumCpus == 1;
      goto SOCKET1_PKGCSAPM_FORMID,
      prompt  = STRING_TOKEN(STR_SOCKET_PKGCSAPM_1_FORM),
      help    = STRING_TOKEN(STR_SOCKET_PKGCSAPM_HELP);
    endif; // suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.NumCpus == 1;
#endif
#if MAX_SOCKET > 2
    suppressif ideqvallist SOCKET_COMMONRC_CONFIGURATION.NumCpus == 1 2;
      goto SOCKET2_PKGCSAPM_FORMID,
      prompt  = STRING_TOKEN(STR_SOCKET_PKGCSAPM_2_FORM),
      help    = STRING_TOKEN(STR_SOCKET_PKGCSAPM_HELP);
    endif; // suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.NumCpus == 1 2;
#endif
#if MAX_SOCKET > 3
    suppressif ideqvallist SOCKET_COMMONRC_CONFIGURATION.NumCpus == 1 2;
      goto SOCKET3_PKGCSAPM_FORMID,
      prompt  = STRING_TOKEN(STR_SOCKET_PKGCSAPM_3_FORM),
      help    = STRING_TOKEN(STR_SOCKET_PKGCSAPM_HELP);
    endif; // suppressif ideqvallist SOCKET_COMMONRC_CONFIGURATION.NumCpus == 1 2;
#endif
#if MAX_SOCKET > 4
    suppressif ideqvallist SOCKET_COMMONRC_CONFIGURATION.NumCpus == 1 2 4;
      goto SOCKET4_PKGCSAPM_FORMID,
      prompt  = STRING_TOKEN(STR_SOCKET_PKGCSAPM_4_FORM),
      help    = STRING_TOKEN(STR_SOCKET_PKGCSAPM_HELP);
    endif; // suppressif ideqvallist SOCKET_COMMONRC_CONFIGURATION.NumCpus == 1 2 4;
#endif
#if MAX_SOCKET > 5
    suppressif ideqvallist SOCKET_COMMONRC_CONFIGURATION.NumCpus == 1 2 4;
      goto SOCKET5_PKGCSAPM_FORMID,
      prompt  = STRING_TOKEN(STR_SOCKET_PKGCSAPM_5_FORM),
      help    = STRING_TOKEN(STR_SOCKET_PKGCSAPM_HELP);
    endif; // suppressif ideqvallist SOCKET_COMMONRC_CONFIGURATION.NumCpus == 1 2 4;
#endif
#if MAX_SOCKET > 6
    suppressif ideqvallist SOCKET_COMMONRC_CONFIGURATION.NumCpus == 1 2 4 6;
      goto SOCKET6_PKGCSAPM_FORMID,
      prompt  = STRING_TOKEN(STR_SOCKET_PKGCSAPM_6_FORM),
      help    = STRING_TOKEN(STR_SOCKET_PKGCSAPM_HELP);
    endif; // suppressif ideqvallist SOCKET_COMMONRC_CONFIGURATION.NumCpus == 1 2 4 6;
#endif
#if MAX_SOCKET > 7
    suppressif ideqvallist SOCKET_COMMONRC_CONFIGURATION.NumCpus == 1 2 4 6;
      goto SOCKET7_PKGCSAPM_FORMID,
      prompt  = STRING_TOKEN(STR_SOCKET_PKGCSAPM_7_FORM),
      help    = STRING_TOKEN(STR_SOCKET_PKGCSAPM_HELP);
    endif; // suppressif ideqvallist SOCKET_COMMONRC_CONFIGURATION.NumCpus == 1 2 4 6;
#endif

    endform;  //end of Program SAPMCTL CSR Form

    //Program Perf_P_Limit Control CSR Form Start
    form formid = PROG_CSR_PERF_P_LIMIT_FORM_ID,
    title = STRING_TOKEN(STR_CSR_PERF_P_LIMIT_FORM);
    subtitle text = STRING_TOKEN(STR_CSR_PERF_P_LIMIT_FORM);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

      // PERF_P_LIMIT_CONTROL.PERF_PLIMIT_DIFFERENTIAL
      numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.PerfPlimitDifferential,
        prompt  = STRING_TOKEN (STR_PERF_PLIMIT_DIFFERENTIAL),
        help    = STRING_TOKEN (STR_PERF_PLIMIT_DIFFERENTIAL_HELP),
        flags   = RESET_REQUIRED,
        minimum = 0,
        maximum = 0x7,
        step    = 0,
        default = 0x1, defaultstore = MyStandardDefault,
        default = 0x1, defaultstore = MyManufactureDefault,
      endnumeric;


      // PERF_P_LIMIT_CONTROL.PERF_P_LIMIT_CLIP
      numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.PerfPLimitClipC,
        prompt  = STRING_TOKEN (STR_PERF_P_LIMIT_CLIP),
        help    = STRING_TOKEN (STR_PERF_P_LIMIT_CLIP_HELP),
        flags   = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum = 0,
        maximum = 0x1F,
        step    = 0,
        default = 0x1F, defaultstore = MyStandardDefault,
        default = 0x1F, defaultstore = MyManufactureDefault,
      endnumeric;

      // PERF_P_LIMIT_CONTROL.PERF_P_LIMIT_THRESHOLD
      numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.PerfPLmtThshld,
        prompt  = STRING_TOKEN (STR_PERF_P_LIMIT_THRESHOLD),
        help    = STRING_TOKEN (STR_PERF_P_LIMIT_THRESHOLD_HELP),
        flags   = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum = 0,
        maximum = 0x1F,
        step    = 0,
        default = 0x0F, defaultstore = MyStandardDefault,
        default = 0x0F, defaultstore = MyManufactureDefault,
      endnumeric;

      // PERF_P_LIMIT_CONTROL.PERF_P_LIMIT_EN
      oneof varid     = SOCKET_POWERMANAGEMENT_CONFIGURATION.PerfPLimitEn,
          prompt      = STRING_TOKEN(STR_PERFPLIMITEN),
          help        = STRING_TOKEN(STR_PERFPLIMITEN_HELP),
          option text = STRING_TOKEN(STR_DISABLE),   value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),    value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

    endform;    //end of Program Perf P Limit Control Csr Form

  //----------- Advanced PM Tuning Form End

  //----------- DRAM RAPL Form Start
    //Program Dram Rapl Form Start
    form formid = DRAM_RAPL_FORMID,
    title = STRING_TOKEN(STR_DRAM_RAPL_FORM);
    subtitle text = STRING_TOKEN(STR_DRAM_RAPL_FORM);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

        oneof varid = SOCKET_MEMORY_CONFIGURATION.DramRaplPwrLimitLockCsr,
            prompt  = STRING_TOKEN(STR_DRAM_RAPL_PWR_LIMIT_LOCK),
            help    = STRING_TOKEN(STR_DRAM_RAPL_PWR_LIMIT_LOCK_HELP),
            option text = STRING_TOKEN(STR_DISABLE),      value = 0,  flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_ENABLE),       value = 1,  flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        endoneof;

        subtitle text = STRING_TOKEN(STR_NULL_STRING);

        numeric varid   = SOCKET_MEMORY_CONFIGURATION.BwLimitTfOvrd,
          prompt   = STRING_TOKEN (STR_OVRDDRAMRAPLBWLIMITTF),
          help     = STRING_TOKEN (STR_OVRDDRAMRAPLBWLIMITTF_HELP),
          flags    = 0 | RESET_REQUIRED,
          minimum  = 0,
          maximum  = 16,    //
          step     = 1,    //
          default = 0, defaultstore = MyStandardDefault,
          default = 0, defaultstore = MyManufactureDefault,
        endnumeric;

        oneof varid   = SOCKET_MEMORY_CONFIGURATION.DramRaplEnable,
          prompt      = STRING_TOKEN(STR_DRAM_RAPL_ENABLE_PROMPT),
          help        = STRING_TOKEN(STR_DRAM_RAPL_ENABLE_HELP),
          option text = STRING_TOKEN(STR_DISABLE),  value = DRAM_RAPL_DISABLE, flags = DRAM_RAPL_DIS_FLAGS;
          option text = STRING_TOKEN(STR_ENABLE),   value = DRAM_RAPL_ENABLE,  flags = DRAM_RAPL_EN_FLAGS;
        endoneof;
#if defined (DDR5_SUPPORT) && !defined (SPR_HOST)
        oneof varid   = SOCKET_MEMORY_CONFIGURATION.DramRaplExtendedRange,
          prompt      = STRING_TOKEN(STR_DRAM_RAPL_EXTENDED_RANGE_PROMPT),
          help        = STRING_TOKEN(STR_DRAM_RAPL_EXTENDED_RANGE_HELP),
          option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
          option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED;
         endoneof;
        oneof varid   = SOCKET_MEMORY_CONFIGURATION.CmsEnableDramPm,
          prompt      = STRING_TOKEN(STR_CMS_DRAM_PM_ENABLE_PROMPT),
          help        = STRING_TOKEN(STR_CMS_DRAM_PM_ENABLE_HELP),
          option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
          option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED;
         endoneof;
#else
        oneof varid   = SOCKET_MEMORY_CONFIGURATION.DramRaplExtendedRange,
          prompt      = STRING_TOKEN(STR_DRAM_RAPL_EXTENDED_RANGE_PROMPT),
          help        = STRING_TOKEN(STR_DRAM_RAPL_EXTENDED_RANGE_HELP),
          option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
         endoneof;
        oneof varid   = SOCKET_MEMORY_CONFIGURATION.CmsEnableDramPm,
          prompt      = STRING_TOKEN(STR_CMS_DRAM_PM_ENABLE_PROMPT),
          help        = STRING_TOKEN(STR_CMS_DRAM_PM_ENABLE_HELP),
          option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
         endoneof;
#endif

    endform;  //end of Program Dram Rapl Form
  //----------- DRAM RAPL Form End

    //----------- SOCKET RAPL Form Start
    //Program Socket Rapl Form Start
    form formid = SOCKET_RAPL_FORMID,
    title = STRING_TOKEN(STR_SOCKET_RAPL_FORM);
    subtitle text = STRING_TOKEN(STR_SOCKET_RAPL_FORM);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);


      // FAST_RAPL_NSTRIKE_PL2_DUTY_CYCLE
        numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.FastRaplDutyCycle,
          prompt   = STRING_TOKEN (STR_FAST_RAPL_DUTY_CYCLE),
          help     = STRING_TOKEN (STR_FAST_RAPL_DUTY_CYCLE_HELP),
          flags    = 0 | RESET_REQUIRED,
          minimum  = 0,
          maximum  = 255,
          step     = 1,
          default = 64, defaultstore = MyStandardDefault,
          default = 64, defaultstore = MyManufactureDefault,
        endnumeric;

      suppressif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorEistEnable == 0
                          OR ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.TurboMode == 0;
        //
        // MSR_TURBO_POWER_LIMIT  0x610
        // CSR_TURBO_POWER_LIMIT  1:30:0:0xe8
        //
        oneof varid  = SOCKET_POWERMANAGEMENT_CONFIGURATION.TurboPowerLimitLock,
            prompt   = STRING_TOKEN (STR_TURBO_PWR_LIMIT_LOCK),
            help     = STRING_TOKEN (STR_TURBO_PWR_LIMIT_LOCK_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
            option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
        endoneof;

        oneof varid  = SOCKET_POWERMANAGEMENT_CONFIGURATION.TurboPowerLimitCsrLock,
            prompt   = STRING_TOKEN (STR_TURBO_PWR_LIMIT_CSR_LOCK),
            help     = STRING_TOKEN (STR_TURBO_PWR_LIMIT_CSR_LOCK_HELP),
            option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        oneof varid  = SOCKET_POWERMANAGEMENT_CONFIGURATION.PowerLimit1En,
            prompt   = STRING_TOKEN (STR_LONG_DUR_PWR_LIMIT_OVERRIDE),
            help     = STRING_TOKEN (STR_LONG_DUR_PWR_LIMIT_OVERRIDE_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       endif;

       suppressif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorEistEnable == 0
                       OR ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.TurboMode == 0
                       OR  ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.PowerLimit1En == 0;
          numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.PowerLimit1Power,
              prompt   = STRING_TOKEN (STR_LONG_DUR_PWR_LIMIT),
              help     = STRING_TOKEN (STR_LONG_DUR_PWR_LIMIT_HELP),
              flags    = 0 | RESET_REQUIRED,
              minimum  = 0,
              maximum  = 32767,    //
              step     = 1,        // Stepping of 0 equates to a manual entering of a value,
                                   // otherwise it will auto-increment with a left/right arrow
              default = 0, defaultstore = MyStandardDefault,
              default = 0, defaultstore = MyManufactureDefault,
          endnumeric;

          numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.PowerLimit1Time,
              prompt   = STRING_TOKEN (STR_LONG_DUR_TIME_WINDOW),
              help     = STRING_TOKEN (STR_LONG_DUR_TIME_WINDOW_HELP),
              flags    = 0 | RESET_REQUIRED,
              minimum  = 0,
              maximum  = 448,      //
              step     = 1,        // Stepping of 0 equates to a manual entering of a value,
                                   // otherwise it will auto-increment with a left/right arrow
              default = 1, defaultstore = MyStandardDefault,
              default = 1, defaultstore = MyManufactureDefault,
          endnumeric;

          oneof varid  = SOCKET_POWERMANAGEMENT_CONFIGURATION.PowerLimit2En,
             prompt   = STRING_TOKEN (STR_SHORT_DUR_PWR_LIMIT_1),
             help     = STRING_TOKEN (STR_SHORT_DUR_PWR_LIMIT_1_ENABLE_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

      endif;

      suppressif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorEistEnable == 0
                        OR ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.TurboMode == 0
                        OR ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.PowerLimit2En == 0;
          numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.PowerLimit2Power,
              prompt   = STRING_TOKEN (STR_SHORT_DUR_PWR_LIMIT),
              help     = STRING_TOKEN (STR_SHORT_DUR_PWR_LIMIT_HELP),
              flags    = 0 | RESET_REQUIRED,
              minimum  = 0,
              maximum  = 32767,    //
              step     = 1,        // Stepping of 0 equates to a manual entering of a value,
                                   // otherwise it will auto-increment with a left/right arrow
              default = 0, defaultstore = MyStandardDefault,
              default = 0, defaultstore = MyManufactureDefault,
          endnumeric;

          numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.PowerLimit2Time,
              prompt   = STRING_TOKEN (STR_SHORT_DUR_TIME_WINDOW),
              help     = STRING_TOKEN (STR_SHORT_DUR_TIME_WINDOW_HELP),
              flags    = 0 | RESET_REQUIRED,
              minimum  = 0,
              maximum  = 448,      //
              step     = 1,        // Stepping of 0 equates to a manual entering of a value,
                                   // otherwise it will auto-increment with a left/right arrow
              default = 1, defaultstore = MyStandardDefault,
              default = 1, defaultstore = MyManufactureDefault,
          endnumeric;
       endif;
    endform;  //end of Socket Rapl Form
  //----------- SOCKET RAPL Form End

    //----------- Platform power limit Form Start
    form formid = PLATFORM_POWER_LIMIT_FORMID,
    title = STRING_TOKEN(STR_PSYS_FORM);
    subtitle text = STRING_TOKEN(STR_PSYS_FORM);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

       subtitle text = STRING_TOKEN(STR_NULL_STRING);

        oneof varid  = SOCKET_POWERMANAGEMENT_CONFIGURATION.PsysMsrLock,
            prompt   = STRING_TOKEN (STR_PSYS_PWR_LIMIT_LOCK),
            help     = STRING_TOKEN (STR_PSYS_PWR_LIMIT_LOCK_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED ;
            option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
        endoneof;

        oneof varid  = SOCKET_POWERMANAGEMENT_CONFIGURATION.PsysCsrLock,
            prompt   = STRING_TOKEN (STR_PSYS_PWR_LIMIT_CSR_LOCK),
            help     = STRING_TOKEN (STR_PSYS_PWR_LIMIT_CSR_LOCK_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED ;
            option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
        endoneof;

        oneof varid  = SOCKET_POWERMANAGEMENT_CONFIGURATION.PsysPowerLimit1En,
            prompt   = STRING_TOKEN (STR_PSYS_LONG_DUR_PWR_LIMIT_OVERRIDE),
            help     = STRING_TOKEN (STR_PSYS_LONG_DUR_PWR_LIMIT_OVERRIDE_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

       suppressif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorEistEnable == 0
                       OR ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.TurboMode == 0
                       OR  ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.PsysPowerLimit1En == 0;

          numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.PsysPowerLimit1Power,
              prompt   = STRING_TOKEN (STR_PSYS_LONG_DUR_PWR_LIMIT),
              help     = STRING_TOKEN (STR_PSYS_LONG_DUR_PWR_LIMIT_HELP),
              flags    = 0 | RESET_REQUIRED,
              minimum  = 0,
              maximum  = 16383,    //
              step     = 1,        // Stepping of 0 equates to a manual entering of a value,
                                   // otherwise it will auto-increment with a left/right arrow
              default = 0, defaultstore = MyStandardDefault,
              default = 0, defaultstore = MyManufactureDefault,
          endnumeric;

          oneof varid  = SOCKET_POWERMANAGEMENT_CONFIGURATION.PsysPowerLimit1Time,
              prompt   = STRING_TOKEN (STR_PSYS_LONG_DUR_TIME_WINDOW),
              help     = STRING_TOKEN (STR_PSYS_LONG_DUR_TIME_WINDOW_HELP),
              option text = STRING_TOKEN(STR_TIME_WINDOW_0),     value = 0, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_0156),  value = 0x27, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_0375),  value = 0x48, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_05),    value = 0x09, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_075),   value = 0x49, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_1),     value = 0x0A, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_2),     value = 0x0B, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_3),     value = 0x4B, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_4),     value = 0x0C, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_5),     value = 0x2C, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_6),     value = 0x4C, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_7),     value = 0x6C, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_8),     value = 0x0D, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_10),    value = 0x2D, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_12),    value = 0x4D, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_14),    value = 0x6D, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_16),    value = 0x0E, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_20),    value = 0x2E, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_24),    value = 0x4E, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_28),    value = 0x6E, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_32),    value = 0x0F, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_40),    value = 0x2F, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_48),    value = 0x4F, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_56),    value = 0x6F, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_64),    value = 0x10, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_80),    value = 0x30, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_96),    value = 0x50, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_112),   value = 0x70, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_128),   value = 0x11, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_160),   value = 0x31, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_192),   value = 0x51, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_224),   value = 0x71, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_256),   value = 0x12, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_320),   value = 0x32, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_384),   value = 0x52, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_448),   value = 0x72, flags = RESET_REQUIRED;
          endoneof;
      endif;

      oneof varid  = SOCKET_POWERMANAGEMENT_CONFIGURATION.PsysPowerLimit2En,
          prompt   = STRING_TOKEN (STR_PSYS_SHORT_DUR_PWR_LIMIT_OVERRIDE),
          help     = STRING_TOKEN (STR_PSYS_SHORT_DUR_PWR_LIMIT_OVERRIDE_HELP),
          option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.ProcessorEistEnable == 0
                        OR ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.TurboMode == 0
                        OR ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.PsysPowerLimit2En == 0;

          numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.PsysPowerLimit2Power,
              prompt   = STRING_TOKEN (STR_PSYS_SHORT_DUR_PWR_LIMIT),
              help     = STRING_TOKEN (STR_PSYS_SHORT_DUR_PWR_LIMIT_HELP),
              flags    = 0 | RESET_REQUIRED,
              minimum  = 0,
              maximum  = 16383,    //
              step     = 1,        // Stepping of 0 equates to a manual entering of a value,
                                   // otherwise it will auto-increment with a left/right arrow
              default = 0, defaultstore = MyStandardDefault,
              default = 0, defaultstore = MyManufactureDefault,
          endnumeric;

          oneof varid  = SOCKET_POWERMANAGEMENT_CONFIGURATION.PsysPowerLimit2Time,
              prompt   = STRING_TOKEN (STR_PSYS_SHORT_DUR_TIME_WINDOW),
              help     = STRING_TOKEN (STR_PSYS_SHORT_DUR_TIME_WINDOW_HELP),
              option text = STRING_TOKEN(STR_TIME_WINDOW_0),     value = 0, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_0156),  value = 0x27, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_0375),  value = 0x48, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_05),    value = 0x09, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_075),   value = 0x49, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_1),     value = 0x0A, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_2),     value = 0x0B, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_3),     value = 0x4B, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_4),     value = 0x0C, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_5),     value = 0x2C, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_6),     value = 0x4C, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_7),     value = 0x6C, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_8),     value = 0x0D, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_10),    value = 0x2D, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_12),    value = 0x4D, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_14),    value = 0x6D, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_16),    value = 0x0E, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_20),    value = 0x2E, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_24),    value = 0x4E, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_28),    value = 0x6E, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_32),    value = 0x0F, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_40),    value = 0x2F, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_48),    value = 0x4F, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_56),    value = 0x6F, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_64),    value = 0x10, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_80),    value = 0x30, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_96),    value = 0x50, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_112),   value = 0x70, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_128),   value = 0x11, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_160),   value = 0x31, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_192),   value = 0x51, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_224),   value = 0x71, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_256),   value = 0x12, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_320),   value = 0x32, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_384),   value = 0x52, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(STR_TIME_WINDOW_448),   value = 0x72, flags = RESET_REQUIRED;
          endoneof;

       endif;

       subtitle text = STRING_TOKEN(STR_NULL_STRING);
       subtitle text = STRING_TOKEN(STR_NULL_STRING);

       goto PLATFORM_POWER_LIMIT_MAX_MIN_FORMID,
        prompt = STRING_TOKEN(STR_OVERRIDE_PPL_MAX_MIN),
        help = STRING_TOKEN(STR_OVERRIDE_PPL_MAX_MIN_HELP);

       goto PLATFORM_POWER_LIMIT_MASTER_FORMID,
        prompt = STRING_TOKEN(STR_OVERRIDE_PSYS_MASTER),
        help = STRING_TOKEN(STR_OVERRIDE_PSYS_MASTER_HELP);

    endform;  //end of Platform power limit Form

    //----------- Platform power limit MAX/MIN form
    form formid = PLATFORM_POWER_LIMIT_MAX_MIN_FORMID,
    title = STRING_TOKEN(STR_OVERRIDE_PPL_MAX_MIN);
    subtitle text = STRING_TOKEN(STR_OVERRIDE_PPL_MAX_MIN);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

       subtitle text = STRING_TOKEN(STR_NULL_STRING);

        oneof varid  = SOCKET_POWERMANAGEMENT_CONFIGURATION.OverridePplMaxMin,
            prompt   = STRING_TOKEN (STR_OVERRIDE_PPL_MAX_MIN),
            help     = STRING_TOKEN (STR_OVERRIDE_PPL_MAX_MIN_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
            option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED ;
        endoneof;

        suppressif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.OverridePplMaxMin == 0;

            numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.MinPpl1Power,
                prompt   = STRING_TOKEN (STR_OVERRIDE_PPL1_MIN),
                help     = STRING_TOKEN (STR_OVERRIDE_PPL1_MIN_HELP),
                flags    = 0 | RESET_REQUIRED,
                minimum  = 0,
                maximum  = 16383,    //
                step     = 1,        // Stepping of 0 equates to a manual entering of a value,
                                     // otherwise it will auto-increment with a left/right arrow
                default = 0, defaultstore = MyStandardDefault,
                default = 0, defaultstore = MyManufactureDefault,
            endnumeric;

            numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.MaxPpl1Power,
                prompt   = STRING_TOKEN (STR_OVERRIDE_PPL1_MAX),
                help     = STRING_TOKEN (STR_OVERRIDE_PPL1_MAX_HELP),
                flags    = 0 | RESET_REQUIRED,
                minimum  = 0,
                maximum  = 16383,    //
                step     = 1,        // Stepping of 0 equates to a manual entering of a value,
                                     // otherwise it will auto-increment with a left/right arrow
                default = 16383, defaultstore = MyStandardDefault,
                default = 16383, defaultstore = MyManufactureDefault,
            endnumeric;

            numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.MaxPpl2Power,
                prompt   = STRING_TOKEN (STR_OVERRIDE_PPL2_MAX),
                help     = STRING_TOKEN (STR_OVERRIDE_PPL2_MAX_HELP),
                flags    = 0 | RESET_REQUIRED,
                minimum  = 0,
                maximum  = 16383,    //
                step     = 1,        // Stepping of 0 equates to a manual entering of a value,
                                     // otherwise it will auto-increment with a left/right arrow
                default = 16383, defaultstore = MyStandardDefault,
                default = 16383, defaultstore = MyManufactureDefault,
            endnumeric;

            numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.MaxPplTimeWindow,
                prompt   = STRING_TOKEN (STR_OVERRIDE_PPL_MAX_TW),
                help     = STRING_TOKEN (STR_OVERRIDE_PPL_MAX_TW_HELP),
                flags    = 0 | RESET_REQUIRED,
                minimum  = 1,
                maximum  = 0x7F,     //
                step     = 1,        // Stepping of 0 equates to a manual entering of a value,
                                     // otherwise it will auto-increment with a left/right arrow
                default = 0x7F, defaultstore = MyStandardDefault,
                default = 0x7F, defaultstore = MyManufactureDefault,
            endnumeric;

        endif;

    endform;  //end of Platform power limit MAX/MIN form

    //----------- Override Psys master form
    form formid = PLATFORM_POWER_LIMIT_MASTER_FORMID,
    title = STRING_TOKEN(STR_OVERRIDE_PSYS_MASTER);
    subtitle text = STRING_TOKEN(STR_OVERRIDE_PSYS_MASTER);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

       subtitle text = STRING_TOKEN(STR_NULL_STRING);

        oneof varid  = SOCKET_POWERMANAGEMENT_CONFIGURATION.OverridePsysMaster,
            prompt   = STRING_TOKEN (STR_OVERRIDE_PSYS_MASTER),
            help     = STRING_TOKEN (STR_OVERRIDE_PSYS_MASTER_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
            option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED ;
        endoneof;

        suppressif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.OverridePsysMaster == 0;

            checkbox varid    = SOCKET_POWERMANAGEMENT_CONFIGURATION.PsysMaster[0],
                prompt   = STRING_TOKEN (STR_PSYS_MASTER_0),
                help     = STRING_TOKEN (STR_PSYS_MASTER_0_HELP),
                // Flags behavior for checkbox is overloaded so that it equals
                // a DEFAULT value.  1 = ON, 0 = OFF
                flags    = 0,
            endcheckbox;

            suppressif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.PsysMaster[0] == 0;
                numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.PsysSlaveBitmap[0],
                    prompt   = STRING_TOKEN (STR_PSYS_MASTER_SLAVES_BITMAP),
                    help     = STRING_TOKEN (STR_PSYS_MASTER0_SLAVES_BITMAP_HELP),
                    flags    = 0 | RESET_REQUIRED | DISPLAY_UINT_HEX,
                    minimum  = 0,
                    maximum  = 255,    //
                    step     = 1,        // Stepping of 0 equates to a manual entering of a value,
                                         // otherwise it will auto-increment with a left/right arrow
                    default = 0, defaultstore = MyStandardDefault,
                    default = 0, defaultstore = MyManufactureDefault,
                endnumeric;
            endif;

#if MAX_SOCKET > 1
            checkbox varid    = SOCKET_POWERMANAGEMENT_CONFIGURATION.PsysMaster[1],
                prompt   = STRING_TOKEN (STR_PSYS_MASTER_1),
                help     = STRING_TOKEN (STR_PSYS_MASTER_1_HELP),
                // Flags behavior for checkbox is overloaded so that it equals
                // a DEFAULT value.  1 = ON, 0 = OFF
                flags    = 0,
            endcheckbox;

            suppressif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.PsysMaster[1] == 0;
                numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.PsysSlaveBitmap[1],
                    prompt   = STRING_TOKEN (STR_PSYS_MASTER_SLAVES_BITMAP),
                    help     = STRING_TOKEN (STR_PSYS_MASTER1_SLAVES_BITMAP_HELP),
                    flags    = 0 | RESET_REQUIRED | DISPLAY_UINT_HEX,
                    minimum  = 0,
                    maximum  = 255,    //
                    step     = 1,        // Stepping of 0 equates to a manual entering of a value,
                                         // otherwise it will auto-increment with a left/right arrow
                    default = 0, defaultstore = MyStandardDefault,
                    default = 0, defaultstore = MyManufactureDefault,
                endnumeric;
            endif;
#endif

#if MAX_SOCKET > 2
            checkbox varid    = SOCKET_POWERMANAGEMENT_CONFIGURATION.PsysMaster[2],
                prompt   = STRING_TOKEN (STR_PSYS_MASTER_2),
                help     = STRING_TOKEN (STR_PSYS_MASTER_2_HELP),
                // Flags behavior for checkbox is overloaded so that it equals
                // a DEFAULT value.  1 = ON, 0 = OFF
                flags    = 0,
            endcheckbox;

            suppressif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.PsysMaster[2] == 0;
                numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.PsysSlaveBitmap[2],
                    prompt   = STRING_TOKEN (STR_PSYS_MASTER_SLAVES_BITMAP),
                    help     = STRING_TOKEN (STR_PSYS_MASTER2_SLAVES_BITMAP_HELP),
                    flags    = 0 | RESET_REQUIRED | DISPLAY_UINT_HEX,
                    minimum  = 0,
                    maximum  = 255,    //
                    step     = 1,        // Stepping of 0 equates to a manual entering of a value,
                                         // otherwise it will auto-increment with a left/right arrow
                    default = 0, defaultstore = MyStandardDefault,
                    default = 0, defaultstore = MyManufactureDefault,
                endnumeric;
            endif;
#endif

#if MAX_SOCKET > 3
            checkbox varid    = SOCKET_POWERMANAGEMENT_CONFIGURATION.PsysMaster[3],
                prompt   = STRING_TOKEN (STR_PSYS_MASTER_3),
                help     = STRING_TOKEN (STR_PSYS_MASTER_3_HELP),
                // Flags behavior for checkbox is overloaded so that it equals
                // a DEFAULT value.  1 = ON, 0 = OFF
                flags    = 0,
            endcheckbox;

            suppressif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.PsysMaster[3] == 0;
                numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.PsysSlaveBitmap[3],
                    prompt   = STRING_TOKEN (STR_PSYS_MASTER_SLAVES_BITMAP),
                    help     = STRING_TOKEN (STR_PSYS_MASTER3_SLAVES_BITMAP_HELP),
                    flags    = 0 | RESET_REQUIRED | DISPLAY_UINT_HEX,
                    minimum  = 0,
                    maximum  = 255,    //
                    step     = 1,        // Stepping of 0 equates to a manual entering of a value,
                                         // otherwise it will auto-increment with a left/right arrow
                    default = 0, defaultstore = MyStandardDefault,
                    default = 0, defaultstore = MyManufactureDefault,
                endnumeric;
            endif;
#endif

#if MAX_SOCKET > 4
            checkbox varid    = SOCKET_POWERMANAGEMENT_CONFIGURATION.PsysMaster[4],
                prompt   = STRING_TOKEN (STR_PSYS_MASTER_4),
                help     = STRING_TOKEN (STR_PSYS_MASTER_4_HELP),
                // Flags behavior for checkbox is overloaded so that it equals
                // a DEFAULT value.  1 = ON, 0 = OFF
                flags    = 0,
            endcheckbox;

            suppressif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.PsysMaster[4] == 0;
                numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.PsysSlaveBitmap[4],
                    prompt   = STRING_TOKEN (STR_PSYS_MASTER_SLAVES_BITMAP),
                    help     = STRING_TOKEN (STR_PSYS_MASTER4_SLAVES_BITMAP_HELP),
                    flags    = 0 | RESET_REQUIRED | DISPLAY_UINT_HEX,
                    minimum  = 0,
                    maximum  = 255,    //
                    step     = 1,        // Stepping of 0 equates to a manual entering of a value,
                                         // otherwise it will auto-increment with a left/right arrow
                    default = 0, defaultstore = MyStandardDefault,
                    default = 0, defaultstore = MyManufactureDefault,
                endnumeric;
            endif;
#endif

#if MAX_SOCKET > 5
            checkbox varid    = SOCKET_POWERMANAGEMENT_CONFIGURATION.PsysMaster[5],
                prompt   = STRING_TOKEN (STR_PSYS_MASTER_5),
                help     = STRING_TOKEN (STR_PSYS_MASTER_5_HELP),
                // Flags behavior for checkbox is overloaded so that it equals
                // a DEFAULT value.  1 = ON, 0 = OFF
                flags    = 0,
            endcheckbox;

            suppressif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.PsysMaster[5] == 0;
                numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.PsysSlaveBitmap[5],
                    prompt   = STRING_TOKEN (STR_PSYS_MASTER_SLAVES_BITMAP),
                    help     = STRING_TOKEN (STR_PSYS_MASTER5_SLAVES_BITMAP_HELP),
                    flags    = 0 | RESET_REQUIRED | DISPLAY_UINT_HEX,
                    minimum  = 0,
                    maximum  = 255,    //
                    step     = 1,        // Stepping of 0 equates to a manual entering of a value,
                                         // otherwise it will auto-increment with a left/right arrow
                    default = 0, defaultstore = MyStandardDefault,
                    default = 0, defaultstore = MyManufactureDefault,
                endnumeric;
            endif;
#endif

#if MAX_SOCKET > 6
            checkbox varid    = SOCKET_POWERMANAGEMENT_CONFIGURATION.PsysMaster[6],
                prompt   = STRING_TOKEN (STR_PSYS_MASTER_6),
                help     = STRING_TOKEN (STR_PSYS_MASTER_6_HELP),
                // Flags behavior for checkbox is overloaded so that it equals
                // a DEFAULT value.  1 = ON, 0 = OFF
                flags    = 0,
            endcheckbox;

            suppressif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.PsysMaster[6] == 0;
                numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.PsysSlaveBitmap[6],
                    prompt   = STRING_TOKEN (STR_PSYS_MASTER_SLAVES_BITMAP),
                    help     = STRING_TOKEN (STR_PSYS_MASTER6_SLAVES_BITMAP_HELP),
                    flags    = 0 | RESET_REQUIRED | DISPLAY_UINT_HEX,
                    minimum  = 0,
                    maximum  = 255,    //
                    step     = 1,        // Stepping of 0 equates to a manual entering of a value,
                                         // otherwise it will auto-increment with a left/right arrow
                    default = 0, defaultstore = MyStandardDefault,
                    default = 0, defaultstore = MyManufactureDefault,
                endnumeric;
            endif;
#endif

#if MAX_SOCKET > 7
            checkbox varid    = SOCKET_POWERMANAGEMENT_CONFIGURATION.PsysMaster[7],
                prompt   = STRING_TOKEN (STR_PSYS_MASTER_7),
                help     = STRING_TOKEN (STR_PSYS_MASTER_7_HELP),
                // Flags behavior for checkbox is overloaded so that it equals
                // a DEFAULT value.  1 = ON, 0 = OFF
                flags    = 0,
            endcheckbox;

            suppressif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.PsysMaster[7] == 0;
                numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.PsysSlaveBitmap[7],
                    prompt   = STRING_TOKEN (STR_PSYS_MASTER_SLAVES_BITMAP),
                    help     = STRING_TOKEN (STR_PSYS_MASTER7_SLAVES_BITMAP_HELP),
                    flags    = 0 | RESET_REQUIRED | DISPLAY_UINT_HEX,
                    minimum  = 0,
                    maximum  = 255,    //
                    step     = 1,        // Stepping of 0 equates to a manual entering of a value,
                                         // otherwise it will auto-increment with a left/right arrow
                    default = 0, defaultstore = MyStandardDefault,
                    default = 0, defaultstore = MyManufactureDefault,
                endnumeric;
            endif;
#endif

        endif;
    endform;  //end of Override Psys master form

    // Program PMAX_CONFIG Form Start
    form formid = PMAX_CONFIG_FORM_ID,
    title = STRING_TOKEN(STR_PMAX_CONFIG_FORM);
    subtitle text = STRING_TOKEN(STR_PMAX_CONFIG_FORM);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

      suppressif 1;   // This is used for SPR ONLY !!!
        oneof varid  = SOCKET_POWERMANAGEMENT_CONFIGURATION.PmaxLoadLine,
          prompt   = STRING_TOKEN (STR_PMAX_DC_LL_SELECT),
          help     = STRING_TOKEN (STR_PMAX_DC_LL_SELECT_HELP),
          option text = STRING_TOKEN(STR_READ_OVER_SVID),   value = 0, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LL_OPTION_1),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_LL_OPTION_2),   value = 2, flags = RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SPRSP;
        oneof varid  = SOCKET_POWERMANAGEMENT_CONFIGURATION.PmaxDetector,
          prompt   = STRING_TOKEN (STR_PMAX_DETECTOR),
          help     = STRING_TOKEN (STR_PMAX_DETECTOR_HELP),
          option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.PmaxDetector == 0;

        suppressif NOT ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SPRSP;
          oneof varid  = SOCKET_POWERMANAGEMENT_CONFIGURATION.EnhancedPmaxDetector,
            prompt   = STRING_TOKEN (STR_ENHANCED_PMAX),
            help     = STRING_TOKEN (STR_ENHANCED_PMAX_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
          endoneof;
        endif;

        suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SPRSP OR
                   ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_ICXD OR
                   ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SNR OR
                   ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_TNR;

          oneof varid  = SOCKET_POWERMANAGEMENT_CONFIGURATION.PmaxAutoAdjustment,
            prompt   = STRING_TOKEN (STR_PMAX_BIOS_AUTO_ADJUSTMENT),
            help     = STRING_TOKEN (STR_PMAX_BIOS_AUTO_ADJUSTMENT_HELP),
            option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED;
          endoneof;

        endif;

        oneof varid  = SOCKET_POWERMANAGEMENT_CONFIGURATION.PmaxSign,
          prompt   = STRING_TOKEN (STR_PMAX_SIGN),
          help     = STRING_TOKEN (STR_PMAX_SIGN_HELP),
          option text = STRING_TOKEN(STR_POSITIVE),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_NEGATIVE),  value = 1, flags = RESET_REQUIRED;
        endoneof;

        suppressif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.PmaxSign == 1;
          numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.PmaxOffset,
            prompt  = STRING_TOKEN(STR_PMAX_CONFIG_OFFSET_POSITIVE),
            #if defined (SKX_HOST) || defined (CLX_HOST) || defined (CPX_HOST)
            help    = STRING_TOKEN (STR_PMAX_CONFIG_OFFSET_SKX_HELP),
            #elif defined (SPR_HOST)
            help    = STRING_TOKEN (STR_PMAX_CONFIG_OFFSET_SPR_HELP_P),
            #else
            help    = STRING_TOKEN (STR_PMAX_CONFIG_OFFSET_10NM_HELP),
            #endif
            flags   = 0 | RESET_REQUIRED,
            minimum = 0,
            #if defined (SKX_HOST) || defined (CLX_HOST) || defined (CPX_HOST)
            maximum = 0xF,
            #elif defined (SPR_HOST)
            maximum = 0x1F,
            #else
            maximum = 0x3F,
            #endif
            step    = 1,
            default = 0x0, defaultstore = MyStandardDefault,
            default = 0x0, defaultstore = MyManufactureDefault,
          endnumeric;
        endif;

        suppressif ideqval SOCKET_POWERMANAGEMENT_CONFIGURATION.PmaxSign == 0;
          numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.PmaxOffsetNegative,
            prompt  = STRING_TOKEN(STR_PMAX_CONFIG_OFFSET_NEGATIVE),
            #if defined (SKX_HOST) || defined (CLX_HOST) || defined (CPX_HOST)
            help    = STRING_TOKEN (STR_PMAX_CONFIG_OFFSET_SKX_HELP),
            #elif defined (SPR_HOST)
            help    = STRING_TOKEN (STR_PMAX_CONFIG_OFFSET_SPR_HELP_N),
            #else
            help    = STRING_TOKEN (STR_PMAX_CONFIG_OFFSET_10NM_HELP),
            #endif
            flags   = 0 | RESET_REQUIRED,
            minimum = 0,
            #if defined (SKX_HOST) || defined (CLX_HOST) || defined (CPX_HOST)
            maximum = 0xF,
            #elif defined (SPR_HOST)
            maximum = 0x06,
            #else
            maximum = 0x3F,
            #endif
            step    = 1,
            default = 0x0, defaultstore = MyStandardDefault,
            default = 0x0, defaultstore = MyManufactureDefault,
          endnumeric;
        endif;

        suppressif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SKX OR
                   ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CLX OR
                   ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_CPX;
          numeric varid   = SOCKET_POWERMANAGEMENT_CONFIGURATION.PmaxTriggerSetup,
            prompt  = STRING_TOKEN(STR_PMAX_TRIGGER_SETUP),
            help    = STRING_TOKEN (STR_PMAX_TRIGGER_SETUP_HELP),
            flags   = 0 | RESET_REQUIRED,
            minimum = 0,
            maximum = 2,
            step    = 1,
            default = 0x0, defaultstore = MyStandardDefault,
            default = 0x0, defaultstore = MyManufactureDefault,
          endnumeric;
        endif;

      endif;

    endform;    //end of Program PMAX_CONFIG Csr Form

  //
  //  CPU Socket 0  Form
  //
  form formid = SOCKET0_PKGCENTRY_FORMID,
    title = STRING_TOKEN(STR_SOCKET_PKGCENTRY_0_FORM);

    subtitle text = STRING_TOKEN(STR_SOCKET_PKGCENTRY_0_FORM);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

    #undef  INDEX
    #define INDEX   0
    #include "CpuPMEntryCriteriaSocketSetup.hfr"

  endform;

#if (MAX_SOCKET > 1)
  //
  //  CPU Socket 1  Form
  //
  form formid = SOCKET1_PKGCENTRY_FORMID,
    title = STRING_TOKEN(STR_SOCKET_PKGCENTRY_1_FORM);

    subtitle text = STRING_TOKEN(STR_SOCKET_PKGCENTRY_1_FORM);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

    #undef  INDEX
    #define INDEX   1
    #include "CpuPMEntryCriteriaSocketSetup.hfr"

  endform;
#endif
#if (MAX_SOCKET > 2)
  //
  //  CPU Socket 2  Form
  //
  form formid = SOCKET2_PKGCENTRY_FORMID,
    title = STRING_TOKEN(STR_SOCKET_PKGCENTRY_2_FORM);

    subtitle text = STRING_TOKEN(STR_SOCKET_PKGCENTRY_2_FORM);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

    #undef  INDEX
    #define INDEX   2
    #include "CpuPMEntryCriteriaSocketSetup.hfr"

  endform;
#endif
#if (MAX_SOCKET > 3)
  //
  //  CPU Socket 3  Form
  //
  form formid = SOCKET3_PKGCENTRY_FORMID,
    title = STRING_TOKEN(STR_SOCKET_PKGCENTRY_3_FORM);

    subtitle text = STRING_TOKEN(STR_SOCKET_PKGCENTRY_3_FORM);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

    #undef  INDEX
    #define INDEX   3
    #include "CpuPMEntryCriteriaSocketSetup.hfr"

  endform;
#endif
#if (MAX_SOCKET > 4)
  //
  //  CPU Socket 4  Form
  //
  form formid = SOCKET4_PKGCENTRY_FORMID,
    title = STRING_TOKEN(STR_SOCKET_PKGCENTRY_4_FORM);

    subtitle text = STRING_TOKEN(STR_SOCKET_PKGCENTRY_4_FORM);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

    #undef  INDEX
    #define INDEX   4
    #include "CpuPMEntryCriteriaSocketSetup.hfr"

  endform;
#endif
#if (MAX_SOCKET > 5)
  //
  //  CPU Socket 5  Form
  //
  form formid = SOCKET5_PKGCENTRY_FORMID,
    title = STRING_TOKEN(STR_SOCKET_PKGCENTRY_5_FORM);

    subtitle text = STRING_TOKEN(STR_SOCKET_PKGCENTRY_5_FORM);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

    #undef  INDEX
    #define INDEX   5
    #include "CpuPMEntryCriteriaSocketSetup.hfr"

  endform;
#endif
#if (MAX_SOCKET > 6)
  //
  //  CPU Socket 6  Form
  //
  form formid = SOCKET6_PKGCENTRY_FORMID,
    title = STRING_TOKEN(STR_SOCKET_PKGCENTRY_6_FORM);

    subtitle text = STRING_TOKEN(STR_SOCKET_PKGCENTRY_6_FORM);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

    #undef  INDEX
    #define INDEX   6
    #include "CpuPMEntryCriteriaSocketSetup.hfr"

  endform;
#endif
#if (MAX_SOCKET > 7)
  //
  //  CPU Socket 7  Form
  //
  form formid = SOCKET7_PKGCENTRY_FORMID,
    title = STRING_TOKEN(STR_SOCKET_PKGCENTRY_7_FORM);

    subtitle text = STRING_TOKEN(STR_SOCKET_PKGCENTRY_7_FORM);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

    #undef  INDEX
    #define INDEX   7
    #include "CpuPMEntryCriteriaSocketSetup.hfr"

  endform;
#endif

  //
  // Socket Level Control for SAPMCTL_CFG
  //
  //  CPU Socket 0  Form
  //
  form formid = SOCKET0_PKGCSAPM_FORMID,
    title = STRING_TOKEN(STR_SOCKET_PKGCSAPM_0_FORM);

    subtitle text = STRING_TOKEN(STR_SOCKET_PKGCSAPM_0_FORM);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

    #undef  INDEX
    #define INDEX   0
    #include "CpuPMSAPMSocketSetup.hfr"

  endform;

#if (MAX_SOCKET > 1)
  //
  //  CPU Socket 1  Form
  //
  form formid = SOCKET1_PKGCSAPM_FORMID,
    title = STRING_TOKEN(STR_SOCKET_PKGCSAPM_1_FORM);

    subtitle text = STRING_TOKEN(STR_SOCKET_PKGCSAPM_1_FORM);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

    #undef  INDEX
    #define INDEX   1
    #include "CpuPMSAPMSocketSetup.hfr"

  endform;
#endif
#if (MAX_SOCKET > 2)
  //
  //  CPU Socket 2  Form
  //
  form formid = SOCKET2_PKGCSAPM_FORMID,
    title = STRING_TOKEN(STR_SOCKET_PKGCSAPM_2_FORM);

    subtitle text = STRING_TOKEN(STR_SOCKET_PKGCSAPM_2_FORM);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

    #undef  INDEX
    #define INDEX   2
    #include "CpuPMSAPMSocketSetup.hfr"

  endform;
#endif
#if (MAX_SOCKET > 3)
  //
  //  CPU Socket 3  Form
  //
  form formid = SOCKET3_PKGCSAPM_FORMID,
    title = STRING_TOKEN(STR_SOCKET_PKGCSAPM_3_FORM);

    subtitle text = STRING_TOKEN(STR_SOCKET_PKGCSAPM_3_FORM);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

    #undef  INDEX
    #define INDEX   3
    #include "CpuPMSAPMSocketSetup.hfr"

  endform;
#endif
#if (MAX_SOCKET > 4)
  //
  //  CPU Socket 4  Form
  //
  form formid = SOCKET4_PKGCSAPM_FORMID,
    title = STRING_TOKEN(STR_SOCKET_PKGCSAPM_4_FORM);

    subtitle text = STRING_TOKEN(STR_SOCKET_PKGCSAPM_4_FORM);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

    #undef  INDEX
    #define INDEX   4
    #include "CpuPMSAPMSocketSetup.hfr"

  endform;
#endif
#if (MAX_SOCKET > 5)
  //
  //  CPU Socket 5  Form
  //
  form formid = SOCKET5_PKGCSAPM_FORMID,
    title = STRING_TOKEN(STR_SOCKET_PKGCSAPM_5_FORM);

    subtitle text = STRING_TOKEN(STR_SOCKET_PKGCSAPM_5_FORM);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

    #undef  INDEX
    #define INDEX   5
    #include "CpuPMSAPMSocketSetup.hfr"

  endform;
#endif
#if (MAX_SOCKET > 6)
  //
  //  CPU Socket 6  Form
  //
  form formid = SOCKET6_PKGCSAPM_FORMID,
    title = STRING_TOKEN(STR_SOCKET_PKGCSAPM_6_FORM);

    subtitle text = STRING_TOKEN(STR_SOCKET_PKGCSAPM_6_FORM);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

    #undef  INDEX
    #define INDEX   6
    #include "CpuPMSAPMSocketSetup.hfr"

  endform;
#endif
#if (MAX_SOCKET > 7)
  //
  //  CPU Socket 7  Form
  //
  form formid = SOCKET7_PKGCSAPM_FORMID,
    title = STRING_TOKEN(STR_SOCKET_PKGCSAPM_7_FORM);

    subtitle text = STRING_TOKEN(STR_SOCKET_PKGCSAPM_7_FORM);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

    #undef  INDEX
    #define INDEX   7
    #include "CpuPMSAPMSocketSetup.hfr"

  endform;
#endif


    //For B2P PKGC_SA_PS_CRITERIA Power Management Control
    form formid = PROG_PKGC_SA_PS_CRITERIA_FORM_ID,
    title = STRING_TOKEN(STR_PKGC_SA_PS_CRITERIA_FORM);
    subtitle text = STRING_TOKEN(STR_PKGC_SA_PS_CRITERIA_FORM);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

      goto SOCKET0_PKGC_SA_PS_CRITERIA_FORMID,
      prompt  = STRING_TOKEN(STR_SOCKET_PKGC_SA_PS_CRITERIA_0_FORM),
      help    = STRING_TOKEN(STR_SOCKET_PKGC_SA_PS_CRITERIA_HELP);

#if MAX_SOCKET > 1
    disableif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_ICXD OR
              ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SNR  OR
              ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_TNR  OR
              ideqval SOCKET_COMMONRC_CONFIGURATION.NumCpus == 1;
      goto SOCKET1_PKGC_SA_PS_CRITERIA_FORMID,
      prompt  = STRING_TOKEN(STR_SOCKET_PKGC_SA_PS_CRITERIA_1_FORM),
      help    = STRING_TOKEN(STR_SOCKET_PKGC_SA_PS_CRITERIA_HELP);
    endif; // disableif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_ICXD OR
#endif
#if MAX_SOCKET > 2
    disableif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_ICXD OR
              ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SNR  OR
              ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_TNR  OR
              ideqval SOCKET_COMMONRC_CONFIGURATION.NumCpus == 1 OR
              ideqval SOCKET_COMMONRC_CONFIGURATION.NumCpus == 2;
      goto SOCKET2_PKGC_SA_PS_CRITERIA_FORMID,
      prompt  = STRING_TOKEN(STR_SOCKET_PKGC_SA_PS_CRITERIA_2_FORM),
      help    = STRING_TOKEN(STR_SOCKET_PKGC_SA_PS_CRITERIA_HELP);
    endif; // disableif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_ICXD OR
#endif
#if MAX_SOCKET > 3
    disableif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_ICXD OR
              ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_SNR  OR
              ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_TNR  OR
              ideqval SOCKET_COMMONRC_CONFIGURATION.NumCpus == 1 OR
              ideqval SOCKET_COMMONRC_CONFIGURATION.NumCpus == 2;
      goto SOCKET3_PKGC_SA_PS_CRITERIA_FORMID,
      prompt  = STRING_TOKEN(STR_SOCKET_PKGC_SA_PS_CRITERIA_3_FORM),
      help    = STRING_TOKEN(STR_SOCKET_PKGC_SA_PS_CRITERIA_HELP);
    endif; // disableif ideqval SOCKET_COMMONRC_CONFIGURATION.CpuType == CPU_ICXD OR
#endif
#if MAX_SOCKET > 4
      goto SOCKET4_PKGC_SA_PS_CRITERIA_FORMID,
      prompt  = STRING_TOKEN(STR_SOCKET_PKGC_SA_PS_CRITERIA_4_FORM),
      help    = STRING_TOKEN(STR_SOCKET_PKGC_SA_PS_CRITERIA_HELP);
#endif
#if MAX_SOCKET > 5
      goto SOCKET5_PKGC_SA_PS_CRITERIA_FORMID,
      prompt  = STRING_TOKEN(STR_SOCKET_PKGC_SA_PS_CRITERIA_5_FORM),
      help    = STRING_TOKEN(STR_SOCKET_PKGC_SA_PS_CRITERIA_HELP);
#endif
#if MAX_SOCKET > 6
      goto SOCKET6_PKGC_SA_PS_CRITERIA_FORMID,
      prompt  = STRING_TOKEN(STR_SOCKET_PKGC_SA_PS_CRITERIA_6_FORM),
      help    = STRING_TOKEN(STR_SOCKET_PKGC_SA_PS_CRITERIA_HELP);
#endif
#if MAX_SOCKET > 7
      goto SOCKET7_PKGC_SA_PS_CRITERIA_FORMID,
      prompt  = STRING_TOKEN(STR_SOCKET_PKGC_SA_PS_CRITERIA_7_FORM),
      help    = STRING_TOKEN(STR_SOCKET_PKGC_SA_PS_CRITERIA_HELP);
#endif

    endform;  //end of Program SAPMCTL CSR Form

  //
  // Socket Level Control for SAPMCTL_CFG
  //
  //  CPU Socket 0  Form
  //
  form formid = SOCKET0_PKGC_SA_PS_CRITERIA_FORMID,
    title = STRING_TOKEN(STR_SOCKET_PKGC_SA_PS_CRITERIA_0_FORM);

    subtitle text = STRING_TOKEN(STR_SOCKET_PKGC_SA_PS_CRITERIA_0_FORM);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

    #undef  INDEX
    #define INDEX   0
    #include "CpuPkgcSaPsCriteriaSocketSetup.hfr"

  endform;

#if (MAX_SOCKET > 1)
  //
  //  CPU Socket 1  Form
  //
  form formid = SOCKET1_PKGC_SA_PS_CRITERIA_FORMID,
    title = STRING_TOKEN(STR_SOCKET_PKGC_SA_PS_CRITERIA_1_FORM);

    subtitle text = STRING_TOKEN(STR_SOCKET_PKGC_SA_PS_CRITERIA_1_FORM);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

    #undef  INDEX
    #define INDEX   1
    #include "CpuPkgcSaPsCriteriaSocketSetup.hfr"

  endform;
#endif
#if (MAX_SOCKET > 2)
  //
  //  CPU Socket 2  Form
  //
  form formid = SOCKET2_PKGC_SA_PS_CRITERIA_FORMID,
    title = STRING_TOKEN(STR_SOCKET_PKGC_SA_PS_CRITERIA_2_FORM);

    subtitle text = STRING_TOKEN(STR_SOCKET_PKGC_SA_PS_CRITERIA_2_FORM);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

    #undef  INDEX
    #define INDEX   2
    #include "CpuPkgcSaPsCriteriaSocketSetup.hfr"

  endform;
#endif
#if (MAX_SOCKET > 3)
  //
  //  CPU Socket 3  Form
  //
  form formid = SOCKET3_PKGC_SA_PS_CRITERIA_FORMID,
    title = STRING_TOKEN(STR_SOCKET_PKGC_SA_PS_CRITERIA_3_FORM);

    subtitle text = STRING_TOKEN(STR_SOCKET_PKGC_SA_PS_CRITERIA_3_FORM);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

    #undef  INDEX
    #define INDEX   3
    #include "CpuPkgcSaPsCriteriaSocketSetup.hfr"

  endform;
#endif
#if (MAX_SOCKET > 4)
  //
  //  CPU Socket 4  Form
  //
  form formid = SOCKET4_PKGC_SA_PS_CRITERIA_FORMID,
    title = STRING_TOKEN(STR_SOCKET_PKGC_SA_PS_CRITERIA_4_FORM);

    subtitle text = STRING_TOKEN(STR_SOCKET_PKGC_SA_PS_CRITERIA_4_FORM);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

    #undef  INDEX
    #define INDEX   4
    #include "CpuPkgcSaPsCriteriaSocketSetup.hfr"

  endform;
#endif
#if (MAX_SOCKET > 5)
  //
  //  CPU Socket 5  Form
  //
  form formid = SOCKET5_PKGC_SA_PS_CRITERIA_FORMID,
    title = STRING_TOKEN(STR_SOCKET_PKGC_SA_PS_CRITERIA_5_FORM);

    subtitle text = STRING_TOKEN(STR_SOCKET_PKGC_SA_PS_CRITERIA_5_FORM);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

    #undef  INDEX
    #define INDEX   5
    #include "CpuPkgcSaPsCriteriaSocketSetup.hfr"

  endform;
#endif
#if (MAX_SOCKET > 6)
  //
  //  CPU Socket 6  Form
  //
  form formid = SOCKET6_PKGC_SA_PS_CRITERIA_FORMID,
    title = STRING_TOKEN(STR_SOCKET_PKGC_SA_PS_CRITERIA_6_FORM);

    subtitle text = STRING_TOKEN(STR_SOCKET_PKGC_SA_PS_CRITERIA_6_FORM);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

    #undef  INDEX
    #define INDEX   6
    #include "CpuPkgcSaPsCriteriaSocketSetup.hfr"

  endform;
#endif
#if (MAX_SOCKET > 7)
  //
  //  CPU Socket 7  Form
  //
  form formid = SOCKET7_PKGC_SA_PS_CRITERIA_FORMID,
    title = STRING_TOKEN(STR_SOCKET_PKGC_SA_PS_CRITERIA_7_FORM);

    subtitle text = STRING_TOKEN(STR_SOCKET_PKGC_SA_PS_CRITERIA_7_FORM);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

    #undef  INDEX
    #define INDEX   7
    #include "CpuPkgcSaPsCriteriaSocketSetup.hfr"

  endform;
#endif

