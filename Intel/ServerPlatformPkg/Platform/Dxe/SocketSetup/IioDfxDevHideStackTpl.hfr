/** @file

  @copyright
  INTEL CONFIDENTIAL
  Copyright 2020 Intel Corporation. <BR>

  The source code contained or described herein and all documents related to the
  source code ("Material") are owned by Intel Corporation or its suppliers or
  licensors. Title to the Material remains with Intel Corporation or its suppliers
  and licensors. The Material may contain trade secrets and proprietary    and
  confidential information of Intel Corporation and its suppliers and licensors,
  and is protected by worldwide copyright and trade secret laws and treaty
  provisions. No part of the Material may be used, copied, reproduced, modified,
  published, uploaded, posted, transmitted, distributed, or disclosed in any way
  without Intel's prior express written permission.

  No license under any patent, copyright, trade secret or other intellectual
  property right is granted to or conferred upon you by disclosure or delivery
  of the Materials, either expressly, by implication, inducement, estoppel or
  otherwise. Any license under such intellectual property rights must be
  express and approved by Intel in writing.

  Unless otherwise agreed by Intel in writing, you may not remove or alter
  this notice or any other notice embedded in Materials by Intel or
  Intel's suppliers or licensors in any way.
**/

//
// Dfx Devhide form temlate included for each stack of the socket
// Every stack contains 8 devhide bit fields for each function
//

//
// INPUT:
//   - STACK_INDEX        - index of the current stack in socket
//   - TOTAL_STACK_INDEX  - unique index of stack across all sockets
//


#define  DEVHIDE_FUNC_0   HFR_MUL_8(TOTAL_STACK_INDEX)
#define  DEVHIDE_FUNC_1   HFR_INC(DEVHIDE_FUNC_0)
#define  DEVHIDE_FUNC_2   HFR_INC(DEVHIDE_FUNC_1)
#define  DEVHIDE_FUNC_3   HFR_INC(DEVHIDE_FUNC_2)
#define  DEVHIDE_FUNC_4   HFR_INC(DEVHIDE_FUNC_3)
#define  DEVHIDE_FUNC_5   HFR_INC(DEVHIDE_FUNC_4)
#define  DEVHIDE_FUNC_6   HFR_INC(DEVHIDE_FUNC_5)
#define  DEVHIDE_FUNC_7   HFR_INC(DEVHIDE_FUNC_6)

numeric varid = SOCKET_IIO_CONFIGURATION.DfxSocketDevFuncHide[DEVHIDE_FUNC_0],
        prompt    = STRING_TOKEN(HFR_CONCAT2(STR_DEVHIDE0_, STACK_INDEX)),
        help      = STRING_TOKEN(STR_DEVHIDE_HELP),
        flags     = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum   = 0,
        maximum   = 0xffffffff,
        step      = 0,
        default   = 0, defaultstore = MyStandardDefault,
        default   = 0, defaultstore = MyManufactureDefault,
endnumeric;

numeric varid = SOCKET_IIO_CONFIGURATION.DfxSocketDevFuncHide[DEVHIDE_FUNC_1],
        prompt    = STRING_TOKEN(HFR_CONCAT2(STR_DEVHIDE1_, STACK_INDEX)),
        help      = STRING_TOKEN(STR_DEVHIDE_HELP),
        flags     = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum   = 0,
        maximum   = 0xffffffff,
        step      = 0,
        default   = 0, defaultstore = MyStandardDefault,
        default   = 0, defaultstore = MyManufactureDefault,
endnumeric;

numeric varid = SOCKET_IIO_CONFIGURATION.DfxSocketDevFuncHide[DEVHIDE_FUNC_2],
        prompt    = STRING_TOKEN(HFR_CONCAT2(STR_DEVHIDE2_, STACK_INDEX)),
        help      = STRING_TOKEN(STR_DEVHIDE_HELP),
        flags     = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum   = 0,
        maximum   = 0xffffffff,
        step      = 0,
        default   = 0, defaultstore = MyStandardDefault,
        default   = 0, defaultstore = MyManufactureDefault,
endnumeric;

numeric varid = SOCKET_IIO_CONFIGURATION.DfxSocketDevFuncHide[DEVHIDE_FUNC_3],
        prompt    = STRING_TOKEN(HFR_CONCAT2(STR_DEVHIDE3_, STACK_INDEX)),
        help      = STRING_TOKEN(STR_DEVHIDE_HELP),
        flags     = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum   = 0,
        maximum   = 0xffffffff,
        step      = 0,
        default   = 0, defaultstore = MyStandardDefault,
        default   = 0, defaultstore = MyManufactureDefault,
endnumeric;

numeric varid = SOCKET_IIO_CONFIGURATION.DfxSocketDevFuncHide[DEVHIDE_FUNC_4],
        prompt    = STRING_TOKEN(HFR_CONCAT2(STR_DEVHIDE4_, STACK_INDEX)),
        help      = STRING_TOKEN(STR_DEVHIDE_HELP),
        flags     = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum   = 0,
        maximum   = 0xffffffff,
        step      = 0,
        default   = 0, defaultstore = MyStandardDefault,
        default   = 0, defaultstore = MyManufactureDefault,
endnumeric;

numeric varid = SOCKET_IIO_CONFIGURATION.DfxSocketDevFuncHide[DEVHIDE_FUNC_5],
        prompt    = STRING_TOKEN(HFR_CONCAT2(STR_DEVHIDE5_, STACK_INDEX)),
        help      = STRING_TOKEN(STR_DEVHIDE_HELP),
        flags     = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum   = 0,
        maximum   = 0xffffffff,
        step      = 0,
        default   = 0, defaultstore = MyStandardDefault,
        default   = 0, defaultstore = MyManufactureDefault,
endnumeric;

numeric varid = SOCKET_IIO_CONFIGURATION.DfxSocketDevFuncHide[DEVHIDE_FUNC_6],
        prompt    = STRING_TOKEN(HFR_CONCAT2(STR_DEVHIDE6_, STACK_INDEX)),
        help      = STRING_TOKEN(STR_DEVHIDE_HELP),
        flags     = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum   = 0,
        maximum   = 0xffffffff,
        step      = 0,
        default   = 0, defaultstore = MyStandardDefault,
        default   = 0, defaultstore = MyManufactureDefault,
endnumeric;

numeric varid = SOCKET_IIO_CONFIGURATION.DfxSocketDevFuncHide[DEVHIDE_FUNC_7],
        prompt    = STRING_TOKEN(HFR_CONCAT2(STR_DEVHIDE7_, STACK_INDEX)),
        help      = STRING_TOKEN(STR_DEVHIDE_HELP),
        flags     = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum   = 0,
        maximum   = 0xffffffff,
        step      = 0,
        default   = 0, defaultstore = MyStandardDefault,
        default   = 0, defaultstore = MyManufactureDefault,
endnumeric;

//
// cleanup
//
#undef  DEVHIDE_FUNC_0
#undef  DEVHIDE_FUNC_1
#undef  DEVHIDE_FUNC_2
#undef  DEVHIDE_FUNC_3
#undef  DEVHIDE_FUNC_4
#undef  DEVHIDE_FUNC_5
#undef  DEVHIDE_FUNC_6
#undef  DEVHIDE_FUNC_7
