#***********************************************************************
#*                                                                     *
#*   Copyright (c) 1985-2020, American Megatrends International LLC.   *
#*                                                                     *
#*      All rights reserved. Subject to AMI licensing agreement.       *
#*                                                                     *
#***********************************************************************

## @file BootGuard.mak
#   This make file updates the final ROM file
##
Prepare: LINUX_TOOLS_RIGHTS

export BOOTGUARD_BUILD_TIME_SUPPORT_USING_BATCH_FILE
export MULTIPLE_KM_SUPPORT

LINUX_TOOLS_RIGHTS:
ifeq ($(BUILD_OS), $(BUILD_OS_LINUX))
	chmod +x $(BOOTGUARD_DIR)$(PATH_SLASH)BpmKmGen
	chmod +x $(BOOTGUARD_DIR)$(PATH_SLASH)CutRom
	chmod +x $(BOOTGUARD_DIR)$(PATH_SLASH)CryptoCon
	chmod +x $(BOOTGUARD_DIR)$(PATH_SLASH)RomAlignment
	chmod +x $(BOOTGUARD_DIR)$(PATH_SLASH)SignScript_Cryptocon.sh
	chmod +x $(BOOTGUARD_DIR)$(PATH_SLASH)openssl
	
	$(BOOTGUARD_DIR)$(PATH_SLASH)RomAlignment $(ReserveBinary_DIR)$(PATH_SLASH)Reserve.bin $(ReserveBinary_DIR)$(PATH_SLASH)ReserveBpmTable.bin $(RESERVE_BPM_BIN_SIZE)
	$(BOOTGUARD_DIR)$(PATH_SLASH)RomAlignment $(ReserveBinary_DIR)$(PATH_SLASH)Reserve.bin $(ReserveBinary_DIR)$(PATH_SLASH)ReserveKmTable.bin $(RESERVE_KM_BIN_SIZE)
else
	$(RM) $(ReserveBinary_DIR)$(PATH_SLASH)ReserveBpmTable.bin
	$(RM) $(ReserveBinary_DIR)$(PATH_SLASH)ReserveKmTable.bin
	$(BOOTGUARD_DIR)$(PATH_SLASH)RomAlignment.exe $(ReserveBinary_DIR)$(PATH_SLASH)Reserve.bin $(ReserveBinary_DIR)$(PATH_SLASH)ReserveBpmTable.bin $(RESERVE_BPM_BIN_SIZE)
	$(BOOTGUARD_DIR)$(PATH_SLASH)RomAlignment.exe $(ReserveBinary_DIR)$(PATH_SLASH)Reserve.bin $(ReserveBinary_DIR)$(PATH_SLASH)ReserveKmTable.bin $(RESERVE_KM_BIN_SIZE)
endif

RomPatch : Fit

.PHONY : Fit

ifeq ($(BOOTGUARD_BUILD_TIME_SUPPORT_USING_BATCH_FILE), 0)

Fit:
	$(ECHO) Inside BootGuard.mak

ifeq ($(INTEL_BOOT_GUARD_SUPPORT), 1)
ifeq ($(BOOT_GUARD_SIGNING_INTERLOCK_SUPPORT), 0)

ifneq ($(BOOT_GUARD_BPM_PEM_KEY_FILENAME),)
ifeq ($(BUILD_OS), $(BUILD_OS_LINUX))
ifneq ($(wildcard $(BOOT_GUARD_BPM_PEM_KEY_FILENAME)),$(BOOT_GUARD_BPM_PEM_KEY_FILENAME))
	$(ECHO) WARNING: BPM PEM key and BPM Modulus Key is Missing.BPMKMGEN tool will not work properly!!!
endif
####
else# else case of -  ifeq ($(BUILD_OS), $(BUILD_OS_LINUX))
####
	@if not exist $(BOOT_GUARD_BPM_PEM_KEY_FILENAME) $(BOOTGUARD_DIR)\keygen.exe $(BOOT_GUARD_BPM_PEM_KEY_FILENAME) $(BOOT_GUARD_BPM_MODULUS_KEY_FILENAME) $(BOOT_GUARD_PBULIC_KEY_EXPONENT)
	$(BOOTGUARD_DIR)\CryptoCon.exe -w -u -k $(BOOT_GUARD_BPM_PEM_KEY_FILENAME) -o $(BOOT_GUARD_BPM_MODULUS_KEY_FILENAME)
endif
endif

ifneq ($(BOOT_GUARD_KM_PEM_KEY_FILENAME),)
ifeq ($(BUILD_OS), $(BUILD_OS_LINUX))
ifneq ($(wildcard $(BOOT_GUARD_KM_PEM_KEY_FILENAME)),$(BOOT_GUARD_KM_PEM_KEY_FILENAME))
	$(ECHO) WARNING: KM PEM key and KM Modulus Key is Missing.BPMKMGEN tool will not work properly!!!
endif
####
else# else case of -  ifeq ($(BUILD_OS), $(BUILD_OS_LINUX))
####
	if not exist $(BOOT_GUARD_KM_PEM_KEY_FILENAME) $(BOOTGUARD_DIR)\keygen.exe $(BOOT_GUARD_KM_PEM_KEY_FILENAME) $(BOOT_GUARD_KM_MODULUS_KEY_FILENAME) $(BOOT_GUARD_PBULIC_KEY_EXPONENT)
	$(BOOTGUARD_DIR)\CryptoCon.exe -w -u -k $(BOOT_GUARD_KM_PEM_KEY_FILENAME) -o $(BOOT_GUARD_KM_MODULUS_KEY_FILENAME)
endif
endif

ifeq ($(PFR_ROOT_CSK_KEY_GENERATION), 2)
ifneq ($(PFR_ROOT_KEY_PEM_KEY_FILENAME),)
	if not exist $(PFR_ROOT_KEY_PEM_KEY_FILENAME) $(BOOTGUARD_DIR)\openssl ecparam -name secp256r1 -genkey -noout -out $(PFR_ROOT_KEY_PEM_KEY_FILENAME)
	$(BOOTGUARD_DIR)\openssl ec -in $(PFR_ROOT_KEY_PEM_KEY_FILENAME) -pubout -out $(PFR_ROOT_KEY_MODULUS_KEY_FILENAME)
	if not exist $(PFR_ROOT_KEY_PEM_KEY_FILENAME) @$(ECHO) Make sure the root keys is already exist
endif

ifneq ($(PFR_CSK_KEY_PEM_KEY_FILENAME),)
	if not exist $(PFR_CSK_KEY_PEM_KEY_FILENAME) $(BOOTGUARD_DIR)\openssl ecparam -name secp256r1 -genkey -noout -out $(PFR_CSK_KEY_PEM_KEY_FILENAME)
	$(BOOTGUARD_DIR)\openssl ec -in $(PFR_CSK_KEY_PEM_KEY_FILENAME) -pubout -out $(PFR_CSK_KEY__MODULUS_KEY_FILENAME)
endif
endif

ifeq ($(PFR_ROOT_CSK_KEY_GENERATION), 1)
ifneq ($(PFR_CSK_KEY_PEM_KEY_FILENAME),)
	if not exist $(PFR_CSK_KEY_PEM_KEY_FILENAME) $(BOOTGUARD_DIR)\openssl ecparam -name secp256r1 -genkey -noout -out $(PFR_CSK_KEY_PEM_KEY_FILENAME)
	$(BOOTGUARD_DIR)\openssl ec -in $(PFR_CSK_KEY_PEM_KEY_FILENAME) -pubout -out $(PFR_CSK_KEY__MODULUS_KEY_FILENAME)
endif
endif

ifeq ($(PFR_ROOT_CSK_KEY_GENERATION), 0)
	$(ECHO) Both RK and CSK key will not be generated by BIOS, will use OEMs RK and CSK!!!!
	$(ECHO) Please make sure RK and CSK are ported in SDL otherwise PFR feature wont work!!!!
endif

ifeq ($(INTEL_BOOT_GUARD_CHAIN_OF_TRUST_SUPPORT), 1)
	$(BOOTGUARD_DIR)$(PATH_SLASH)$(BPMKMGEN_TOOL) -PFVMAIN $(FitFirstEndPatchBIOSRomPath) $(BOOTGUARD_DIR) $(BIOS_STARTING_ADDRESS) $(DXE_SEGMENT_BASE) $(DXE_SEGMENT_SIZE) $(SUPPORT_BUILD_TIME_FV_BB_OFFSET)
endif

	$(BOOTGUARD_DIR)$(PATH_SLASH)$(BPMKMGEN_TOOL) -DATAOUT $(FitFirstEndPatchBIOSRomPath) $(BootGuardSaveTokenValue) $(BPM_IBB_SEGMENTS_2_to_8) $(BootGuardSaveTokenValue2) $(BootGuardSignInterLockTokens)
ifeq ($(MULTI_KM_HASH_SUPPORT), 1)
	$(BOOTGUARD_DIR)$(PATH_SLASH)$(BPMKMGEN_TOOL) -BPMKMHASH $(FitFirstEndPatchBIOSRomPath) $(BOOTGUARD_DIR) $(BOOT_GUARD_KM_PEM_KEY_FILENAME) $(KMHASH_1_USAGE) $(KMHASH_1_HASH_ALG) $(KMHASH_1_KEY) $(KMHASH_2_USAGE) $(KMHASH_2_HASH_ALG) $(KMHASH_2_KEY) $(KMHASH_3_USAGE) $(KMHASH_3_HASH_ALG) $(KMHASH_3_KEY) $(KMHASH_4_USAGE) $(KMHASH_4_HASH_ALG) $(KMHASH_4_KEY)
else
	$(BOOTGUARD_DIR)$(PATH_SLASH)$(BPMKMGEN_TOOL) -SBPMKM $(FitFirstEndPatchBIOSRomPath) $(BOOTGUARD_DIR) $(BOOT_GUARD_BPM_PEM_KEY_FILENAME) $(BOOT_GUARD_KM_PEM_KEY_FILENAME) $(MULTIPLE_KM_TOKENS)
endif	
	$(BOOTGUARD_DIR)$(PATH_SLASH)$(BPMKMGEN_TOOL) -BPMKMSIZE $(FitFirstEndPatchBIOSRomPath) $(RESERVE_BPM_BIN_SIZE) $(RESERVE_KM_BIN_SIZE)
#####	
endif# ifeq ($(BOOT_GUARD_SIGNING_INTERLOCK_SUPPORT), 0)
#####
ifeq ($(BOOT_GUARD_SIGNING_INTERLOCK_SUPPORT), 1)
	
ifeq ($(INTEL_BOOT_GUARD_CHAIN_OF_TRUST_SUPPORT), 1)
	$(BOOTGUARD_DIR)$(PATH_SLASH)$(BPMKMGEN_TOOL) -PFVMAIN $(FitFirstEndPatchBIOSRomPath) $(BOOTGUARD_DIR) $(BIOS_STARTING_ADDRESS) $(DXE_SEGMENT_BASE) $(DXE_SEGMENT_SIZE) $(SUPPORT_BUILD_TIME_FV_BB_OFFSET)
endif
####
#### PUBLIC KEY passed as Input for sign tool
####
ifneq ($(BOOT_GUARD_BPM_MODULUS_KEY_FILENAME),)
ifneq ($(wildcard $(BOOT_GUARD_BPM_MODULUS_KEY_FILENAME)),$(BOOT_GUARD_BPM_MODULUS_KEY_FILENAME))
	$(ECHO) WARNING BPM Modulus is missing. BPMKMGEN tool will not work properly!!!
endif
endif
ifneq ($(BOOT_GUARD_KM_MODULUS_KEY_FILENAME),)
ifneq ($(wildcard $(BOOT_GUARD_KM_MODULUS_KEY_FILENAME)),$(BOOT_GUARD_KM_MODULUS_KEY_FILENAME))
	$(ECHO) WARNING KM Modulus is missing. BPMKMGEN tool will not work properly!!!
endif
endif

ifneq ($(BOOT_GUARD_BPM_MODULUS_KEY_FILENAME),)
ifneq ($(BOOT_GUARD_KM_MODULUS_KEY_FILENAME),)
ifeq ($(wildcard $(BOOT_GUARD_BPM_MODULUS_KEY_FILENAME)),$(BOOT_GUARD_BPM_MODULUS_KEY_FILENAME))
ifeq ($(wildcard $(BOOT_GUARD_KM_MODULUS_KEY_FILENAME)),$(BOOT_GUARD_KM_MODULUS_KEY_FILENAME))
	$(BOOTGUARD_DIR)$(PATH_SLASH)$(BPMKMGEN_TOOL) -DATAOUT $(FitFirstEndPatchBIOSRomPath) $(BootGuardSaveTokenValue) $(BPM_IBB_SEGMENTS_2_to_8) $(BootGuardSaveTokenValue2) $(BootGuardSignInterLockTokens) 
	$(BOOTGUARD_DIR)$(PATH_SLASH)$(BPMKMGEN_TOOL) -SBPMKM $(FitFirstEndPatchBIOSRomPath) $(BOOTGUARD_DIR) $(BOOT_GUARD_BPM_MODULUS_KEY_FILENAME) $(BOOT_GUARD_KM_MODULUS_KEY_FILENAME) $(MULTIPLE_KM_TOKENS)
	$(BOOTGUARD_DIR)$(PATH_SLASH)$(BPMKMGEN_TOOL) -BPMKMSIZE $(FitFirstEndPatchBIOSRomPath) $(RESERVE_BPM_BIN_SIZE) $(RESERVE_KM_BIN_SIZE)
endif
endif
endif
endif
#####
endif# ifeq ($(BOOT_GUARD_SIGNING_INTERLOCK_SUPPORT), 1)
#####
	$(RM) $(ReserveBinary_DIR)$(PATH_SLASH)ReserveBpmTable.bin
	$(RM) $(ReserveBinary_DIR)$(PATH_SLASH)ReserveKmTable.bin
#####	
endif# ifeq ($(INTEL_BOOT_GUARD_SUPPORT), 1)
#####
##### 
else# else case of (BOOTGUARD_BUILD_TIME_SUPPORT_USING_BATCH_FILE = 0)
#####
ifeq ($(INTEL_BOOT_GUARD_SUPPORT), 1)

BOOT_GUARD_SIGN_BUILD_DIR=$(BUILD_DIR)$(PATH_SLASH)BootGuard
ifeq ($(BUILD_OS), $(BUILD_OS_LINUX))
BOOT_GUARD_SIGN_BATCH_FILE=$(BOOT_GUARD_SIGN_BUILD_DIR)$(PATH_SLASH)BootGuardSign.sh
else
BOOT_GUARD_SIGN_BATCH_FILE=$(BOOT_GUARD_SIGN_BUILD_DIR)$(PATH_SLASH)BootGuardSign.bat
endif

DOLLAR:=\$$
DOUBLE_QUOTE:=\""
STAR:=*
PCNT:=%%
SEMI_COLON:=";"

ifeq ($(BOOT_GUARD_SIGNING_INTERLOCK_SUPPORT), 0)

ifeq ($(INTEL_BOOT_GUARD_CHAIN_OF_TRUST_SUPPORT), 1)
ifeq ($(BUILD_OS), $(BUILD_OS_LINUX))
BOOT_GUARD_HASH_CMD_LINE="./$(BPMKMGEN_TOOL) -PFVMAIN $(DOLLAR)BIOS_ROM_PATH $(WORKSPACE)$(PATH_SLASH)$(BOOT_GUARD_SIGN_BUILD_DIR) $(BIOS_STARTING_ADDRESS) $(DXE_SEGMENT_BASE) $(DXE_SEGMENT_SIZE) $(SUPPORT_BUILD_TIME_FV_BB_OFFSET)"
else
BOOT_GUARD_HASH_CMD_LINE="$(BPMKMGEN_TOOL) -PFVMAIN $(PCNT)BIOS_ROM_PATH$(PCNT) $(WORKSPACE)$(PATH_SLASH)$(BOOT_GUARD_SIGN_BUILD_DIR) $(BIOS_STARTING_ADDRESS) $(DXE_SEGMENT_BASE) $(DXE_SEGMENT_SIZE) $(SUPPORT_BUILD_TIME_FV_BB_OFFSET)"
endif
endif

ifeq ($(BUILD_OS), $(BUILD_OS_LINUX))
BOOT_GUARD_SIGN_CMD_LINE="./$(BPMKMGEN_TOOL) -DATAOUT $(DOLLAR)BIOS_ROM_PATH $(DOLLAR)BootGuardSaveTokenValue $(DOLLAR)BPM_IBB_SEGMENTS_2_to_8 $(DOLLAR)BootGuardSaveTokenValue2 $(DOLLAR)BootGuardSignInterLockTokens"
BOOT_GUARD_SIGN_CMD_LINE:=$(BOOT_GUARD_SIGN_CMD_LINE)\$(EOL)"./$(BPMKMGEN_TOOL) -SBPMKM $(DOLLAR)BIOS_ROM_PATH ../../$(BOOT_GUARD_SIGN_BUILD_DIR) $(DOLLAR)BOOT_GUARD_BPM_PEM_KEY_FILENAME $(DOLLAR)BOOT_GUARD_KM_PEM_KEY_FILENAME $(DOLLAR)MULTIPLE_KM_TOKENS"
BOOT_GUARD_SIGN_CMD_LINE:=$(BOOT_GUARD_SIGN_CMD_LINE)\$(EOL)"./$(BPMKMGEN_TOOL) -BPMKMSIZE $(DOLLAR)BIOS_ROM_PATH $(DOLLAR)RESERVE_BPM_BIN_SIZE $(DOLLAR)RESERVE_KM_BIN_SIZE"
else
BOOT_GUARD_SIGN_CMD_LINE="$(BPMKMGEN_TOOL) -DATAOUT $(PCNT)BIOS_ROM_PATH$(PCNT) $(PCNT)BootGuardSaveTokenValue$(PCNT) $(PCNT)BPM_IBB_SEGMENTS_2_to_8$(PCNT) $(PCNT)BootGuardSaveTokenValue2$(PCNT) $(PCNT)BootGuardSignInterLockTokens$(PCNT)"
BOOT_GUARD_SIGN_CMD_LINE:=$(BOOT_GUARD_SIGN_CMD_LINE)$(EOL)"$(BPMKMGEN_TOOL) -SBPMKM $(PCNT)BIOS_ROM_PATH$(PCNT) ..\..\$(BOOT_GUARD_SIGN_BUILD_DIR) $(PCNT)BOOT_GUARD_BPM_PEM_KEY_FILENAME$(PCNT) $(PCNT)BOOT_GUARD_KM_PEM_KEY_FILENAME$(PCNT) $(PCNT)MULTIPLE_KM_TOKENS$(PCNT)"
BOOT_GUARD_SIGN_CMD_LINE:=$(BOOT_GUARD_SIGN_CMD_LINE)$(EOL)"$(BPMKMGEN_TOOL) -BPMKMSIZE $(PCNT)BIOS_ROM_PATH$(PCNT) $(PCNT)RESERVE_BPM_BIN_SIZE$(PCNT) $(PCNT)RESERVE_KM_BIN_SIZE$(PCNT)"
endif
#####
endif# ifeq ($(BOOT_GUARD_SIGNING_INTERLOCK_SUPPORT), 0)
#####
ifeq ($(BOOT_GUARD_SIGNING_INTERLOCK_SUPPORT), 1)

ifeq ($(INTEL_BOOT_GUARD_CHAIN_OF_TRUST_SUPPORT), 1)
ifeq ($(BUILD_OS), $(BUILD_OS_LINUX))
BOOT_GUARD_HASH_CMD_LINE="./$(BPMKMGEN_TOOL) -PFVMAIN $(DOLLAR)BIOS_ROM_PATH ../../$(BOOT_GUARD_SIGN_BUILD_DIR) $(BIOS_STARTING_ADDRESS) $(DXE_SEGMENT_BASE) $(DXE_SEGMENT_SIZE) $(SUPPORT_BUILD_TIME_FV_BB_OFFSET)"
else
BOOT_GUARD_HASH_CMD_LINE="$(BPMKMGEN_TOOL) -PFVMAIN $(PCNT)BIOS_ROM_PATH$(PCNT) ..\..\$(BOOT_GUARD_SIGN_BUILD_DIR) $(BIOS_STARTING_ADDRESS) $(DXE_SEGMENT_BASE) $(DXE_SEGMENT_SIZE) $(SUPPORT_BUILD_TIME_FV_BB_OFFSET)"
endif
endif
####
#### PUBLIC KEY passed as Input for sign tool
####

ifneq ($(BOOT_GUARD_BPM_MODULUS_KEY_FILENAME),)
ifneq ($(BOOT_GUARD_KM_MODULUS_KEY_FILENAME),)
ifeq ($(wildcard $(BOOT_GUARD_BPM_MODULUS_KEY_FILENAME)),$(BOOT_GUARD_BPM_MODULUS_KEY_FILENAME))
ifeq ($(wildcard $(BOOT_GUARD_KM_MODULUS_KEY_FILENAME)),$(BOOT_GUARD_KM_MODULUS_KEY_FILENAME))
ifeq ($(BUILD_OS), $(BUILD_OS_LINUX))
BOOT_GUARD_SIGN_CMD_LINE="./$(BPMKMGEN_TOOL) -DATAOUT $(DOLLAR)BIOS_ROM_PATH $(DOLLAR)BootGuardSaveTokenValue $(DOLLAR)BPM_IBB_SEGMENTS_2_to_8 $(DOLLAR)BootGuardSaveTokenValue2 $(DOLLAR)BootGuardSignInterLockTokens"
BOOT_GUARD_SIGN_CMD_LINE:=$(BOOT_GUARD_SIGN_CMD_LINE)\$(EOL)"./$(BPMKMGEN_TOOL) -SBPMKM $(DOLLAR)BIOS_ROM_PATH ../../$(BOOT_GUARD_SIGN_BUILD_DIR) $(DOLLAR)BOOT_GUARD_BPM_MODULUS_KEY_FILENAME $(DOLLAR)BOOT_GUARD_KM_MODULUS_KEY_FILENAME $(DOLLAR)MULTIPLE_KM_TOKENS"
BOOT_GUARD_SIGN_CMD_LINE:=$(BOOT_GUARD_SIGN_CMD_LINE)\$(EOL)"./$(BPMKMGEN_TOOL) -BPMKMSIZE $(DOLLAR)BIOS_ROM_PATH $(DOLLAR)RESERVE_BPM_BIN_SIZE $(DOLLAR)RESERVE_KM_BIN_SIZE"
else
BOOT_GUARD_SIGN_CMD_LINE="$(BPMKMGEN_TOOL) -DATAOUT $(PCNT)BIOS_ROM_PATH$(PCNT) $(PCNT)BootGuardSaveTokenValue$(PCNT) $(PCNT)BPM_IBB_SEGMENTS_2_to_8$(PCNT) $(PCNT)BootGuardSaveTokenValue2$(PCNT) $(PCNT)BootGuardSignInterLockTokens$(PCNT)"
BOOT_GUARD_SIGN_CMD_LINE:=$(BOOT_GUARD_SIGN_CMD_LINE)$(EOL)"$(BPMKMGEN_TOOL) -SBPMKM $(PCNT)BIOS_ROM_PATH$(PCNT) ..\..\$(BOOT_GUARD_SIGN_BUILD_DIR) $(PCNT)BOOT_GUARD_BPM_MODULUS_KEY_FILENAME$(PCNT) $(PCNT)BOOT_GUARD_KM_MODULUS_KEY_FILENAME$(PCNT) $(PCNT)MULTIPLE_KM_TOKENS$(PCNT)"
BOOT_GUARD_SIGN_CMD_LINE:=$(BOOT_GUARD_SIGN_CMD_LINE)$(EOL)"$(BPMKMGEN_TOOL) -BPMKMSIZE $(PCNT)BIOS_ROM_PATH$(PCNT) $(PCNT)RESERVE_BPM_BIN_SIZE$(PCNT) $(PCNT)RESERVE_KM_BIN_SIZE$(PCNT)"
endif
endif
endif
endif
endif
#####
endif# ifeq ($(BOOT_GUARD_SIGNING_INTERLOCK_SUPPORT), 1)
#####
#####
endif# ifeq ($(INTEL_BOOT_GUARD_SUPPORT), 1)
#####
Fit:

	$(ECHO) Inside BootGuard.mak Using BATCH file

ifeq ($(INTEL_BOOT_GUARD_SUPPORT), 1)

ifeq ($(BOOT_GUARD_SIGNING_INTERLOCK_SUPPORT), 0)

ifneq ($(BOOT_GUARD_BPM_PEM_KEY_FILENAME),)
ifeq ($(BUILD_OS), $(BUILD_OS_LINUX))
ifneq ($(wildcard $(BOOT_GUARD_BPM_PEM_KEY_FILENAME)),$(BOOT_GUARD_BPM_PEM_KEY_FILENAME))
	$(ECHO) WARNING: BPM PEM key and BPM Modulus Key is Missing.BPMKMGEN tool will not work properly!!!
endif
####
else# else case of -  ifeq ($(BUILD_OS), $(BUILD_OS_LINUX))
####
	@if not exist $(BOOT_GUARD_BPM_PEM_KEY_FILENAME) $(BOOTGUARD_DIR)\keygen.exe $(BOOT_GUARD_BPM_PEM_KEY_FILENAME) $(BOOT_GUARD_BPM_MODULUS_KEY_FILENAME) $(BOOT_GUARD_PBULIC_KEY_EXPONENT)
	$(BOOTGUARD_DIR)\CryptoCon.exe -w -u -k $(BOOT_GUARD_BPM_PEM_KEY_FILENAME) -o $(BOOT_GUARD_BPM_MODULUS_KEY_FILENAME)
endif
endif

ifneq ($(BOOT_GUARD_KM_PEM_KEY_FILENAME),)
ifeq ($(BUILD_OS), $(BUILD_OS_LINUX))
ifneq ($(wildcard $(BOOT_GUARD_KM_PEM_KEY_FILENAME)),$(BOOT_GUARD_KM_PEM_KEY_FILENAME))
	$(ECHO) WARNING: KM PEM key and KM Modulus Key is Missing.BPMKMGEN tool will not work properly!!!
endif
####
else# else case of -  ifeq ($(BUILD_OS), $(BUILD_OS_LINUX))
####
	if not exist $(BOOT_GUARD_KM_PEM_KEY_FILENAME) $(BOOTGUARD_DIR)\keygen.exe $(BOOT_GUARD_KM_PEM_KEY_FILENAME) $(BOOT_GUARD_KM_MODULUS_KEY_FILENAME) $(BOOT_GUARD_PBULIC_KEY_EXPONENT)
	$(BOOTGUARD_DIR)\CryptoCon.exe -w -u -k $(BOOT_GUARD_KM_PEM_KEY_FILENAME) -o $(BOOT_GUARD_KM_MODULUS_KEY_FILENAME)
endif
endif
#####
endif# ifeq ($(BOOT_GUARD_SIGNING_INTERLOCK_SUPPORT), 0
#####
ifeq ($(BOOT_GUARD_SIGNING_INTERLOCK_SUPPORT), 1)

####
#### PUBLIC KEY passed as Input for sign tool
####

ifneq ($(BOOT_GUARD_BPM_MODULUS_KEY_FILENAME),)
ifneq ($(wildcard $(BOOT_GUARD_BPM_MODULUS_KEY_FILENAME)),$(BOOT_GUARD_BPM_MODULUS_KEY_FILENAME))
	$(ECHO) WARNING BPM Modulus is missing. BPMKMGEN tool will not work properly!!!
endif
endif
ifneq ($(BOOT_GUARD_KM_MODULUS_KEY_FILENAME),)
ifneq ($(wildcard $(BOOT_GUARD_KM_MODULUS_KEY_FILENAME)),$(BOOT_GUARD_KM_MODULUS_KEY_FILENAME))
	$(ECHO) WARNING KM Modulus is missing. BPMKMGEN tool will not work properly!!!
endif
endif
#####
endif# ifeq ($(BOOT_GUARD_SIGNING_INTERLOCK_SUPPORT), 1)
#####

ifneq ($(wildcard $(BOOT_GUARD_SIGN_BUILD_DIR)),$(BOOT_GUARD_SIGN_BUILD_DIR))
	$(MKDIR) $(BOOT_GUARD_SIGN_BUILD_DIR)
endif

ifeq ($(BUILD_OS), $(BUILD_OS_LINUX))
	$(CP) $(BOOTGUARD_DIR)$(PATH_SLASH){BpmKmGen,CutRom,CryptoCon,RomAlignment,SignScript_Cryptocon.sh,openssl} $(BOOT_GUARD_SIGN_BUILD_DIR)
	$(ECHO) 	\#!/bin/bash\$(EOL)\
	cd $(WORKSPACE)$(PATH_SLASH)$(BOOT_GUARD_SIGN_BUILD_DIR)\$(EOL)\
export BootGuardSaveTokenValue=$(DOUBLE_QUOTE)$(BootGuardSaveTokenValue)$(DOUBLE_QUOTE)\$(EOL)\
export BootGuardSaveTokenValue2=$(DOUBLE_QUOTE)$(BootGuardSaveTokenValue2)$(DOUBLE_QUOTE)\$(EOL)\
export BootGuardSignInterLockTokens=$(BootGuardSignInterLockTokens)\$(EOL)\
export BPM_IBB_SEGMENTS_2_to_8=$(DOUBLE_QUOTE)$(BPM_IBB_SEGMENTS_2_to_8)$(DOUBLE_QUOTE)\$(EOL)\
if [ $(DOUBLE_QUOTE)$(DOLLAR)MULTIPLE_KM_SUPPORT$(DOUBLE_QUOTE) = $(DOUBLE_QUOTE)1$(DOUBLE_QUOTE) ]$(SEMI_COLON)then\$(EOL)\
export MULTIPLE_KM_TOKENS=$(DOUBLE_QUOTE)$(MULTIPLE_KM_TOKENS)$(DOUBLE_QUOTE)\$(EOL)\
fi\$(EOL)\
export BootGuardInterLockSupport=$(BOOT_GUARD_SIGNING_INTERLOCK_SUPPORT)\$(EOL)\
export BOOT_GUARD_BPM_PEM_KEY_FILENAME="../../$(BOOT_GUARD_BPM_PEM_KEY_FILENAME)" \$(EOL)\
export BOOT_GUARD_KM_PEM_KEY_FILENAME="../../$(BOOT_GUARD_KM_PEM_KEY_FILENAME)" \$(EOL)\
export BOOT_GUARD_BPM_MODULUS_KEY_FILENAME="../../$(BOOT_GUARD_BPM_MODULUS_KEY_FILENAME)" \$(EOL)\
export BOOT_GUARD_KM_MODULUS_KEY_FILENAME="../../$(BOOT_GUARD_KM_MODULUS_KEY_FILENAME)" \$(EOL)\
export RESERVE_BPM_BIN_SIZE=$(RESERVE_BPM_BIN_SIZE)\$(EOL)\
export RESERVE_KM_BIN_SIZE=$(RESERVE_KM_BIN_SIZE)\$(EOL)\
export BIOS_ROM_PATH="../../$(FitFirstEndPatchBIOSRomPath)" \$(EOL)\
export BOOTGUARD_BUILD_TIME_SUPPORT_USING_BATCH_FILE=$(BOOTGUARD_BUILD_TIME_SUPPORT_USING_BATCH_FILE) \$(EOL)\
$(BOOT_GUARD_HASH_CMD_LINE) \$(EOL)\
$(BOOT_GUARD_SIGN_CMD_LINE) \$(EOL)\
>>$(BOOT_GUARD_SIGN_BATCH_FILE)
	chmod +x $(BOOT_GUARD_SIGN_BUILD_DIR)$(PATH_SLASH)BootGuardSign.sh
	$(BOOT_GUARD_SIGN_BATCH_FILE)
####	
else# else case of -  ifeq ($(BUILD_OS), $(BUILD_OS_LINUX))
####
	$(CP) $(BOOTGUARD_DIR)$(PATH_SLASH)*.exe $(BOOT_GUARD_SIGN_BUILD_DIR)
	$(CP) $(BOOTGUARD_DIR)$(PATH_SLASH)*.bat $(BOOT_GUARD_SIGN_BUILD_DIR)
	$(CP) $(BOOTGUARD_DIR)$(PATH_SLASH)*.dll $(BOOT_GUARD_SIGN_BUILD_DIR)
	$(ECHO) \
cd $(WORKSPACE)\$(BOOT_GUARD_SIGN_BUILD_DIR) $(EOL)\
@set BootGuardSaveTokenValue=$(BootGuardSaveTokenValue)$(EOL)\
@set BootGuardSaveTokenValue2=$(BootGuardSaveTokenValue2)$(EOL)\
@set BootGuardSignInterLockTokens=$(BootGuardSignInterLockTokens)$(EOL)\
@set BPM_IBB_SEGMENTS_2_to_8=$(BPM_IBB_SEGMENTS_2_to_8)$(EOL)\
@set MULTIPLE_KM_TOKENS=$(MULTIPLE_KM_TOKENS)$(EOL)\
@set BootGuardInterLockSupport=$(BOOT_GUARD_SIGNING_INTERLOCK_SUPPORT)$(EOL)\
@set BOOT_GUARD_BPM_PEM_KEY_FILENAME="..\..\$(BOOT_GUARD_BPM_PEM_KEY_FILENAME)" $(EOL)\
@set BOOT_GUARD_KM_PEM_KEY_FILENAME="..\..\$(BOOT_GUARD_KM_PEM_KEY_FILENAME)" $(EOL)\
@set BOOT_GUARD_BPM_MODULUS_KEY_FILENAME="..\..\$(BOOT_GUARD_BPM_MODULUS_KEY_FILENAME)" $(EOL)\
@set BOOT_GUARD_KM_MODULUS_KEY_FILENAME="..\..\$(BOOT_GUARD_KM_MODULUS_KEY_FILENAME)" $(EOL)\
@set RESERVE_BPM_BIN_SIZE=$(RESERVE_BPM_BIN_SIZE)$(EOL)\
@set RESERVE_KM_BIN_SIZE=$(RESERVE_KM_BIN_SIZE)$(EOL)\
@set BIOS_ROM_PATH="..\..\$(FitFirstEndPatchBIOSRomPath)" $(EOL)\
@set BOOTGUARD_BUILD_TIME_SUPPORT_USING_BATCH_FILE=$(BOOTGUARD_BUILD_TIME_SUPPORT_USING_BATCH_FILE)$(EOL)\
$(BOOT_GUARD_HASH_CMD_LINE) $(EOL)\
$(BOOT_GUARD_SIGN_CMD_LINE) $(EOL)\
> $(BOOT_GUARD_SIGN_BATCH_FILE)
	$(BOOT_GUARD_SIGN_BATCH_FILE)
#####
endif# ifeq ($(BUILD_OS), $(BUILD_OS_LINUX))
#####
#####
endif# ifeq ($(INTEL_BOOT_GUARD_SUPPORT), 1)
#####
	$(RM) $(ReserveBinary_DIR)$(PATH_SLASH)ReserveBpmTable.bin
	$(RM) $(ReserveBinary_DIR)$(PATH_SLASH)ReserveKmTable.bin
#####	
endif# ifeq ($(BOOTGUARD_BUILD_TIME_SUPPORT_USING_BATCH_FILE), 0)
#####
