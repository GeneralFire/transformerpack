/** @file

  @copyright
  INTEL CONFIDENTIAL
  Copyright 2020 Intel Corporation. <BR>

  The source code contained or described herein and all documents related to the
  source code ("Material") are owned by Intel Corporation or its suppliers or
  licensors. Title to the Material remains with Intel Corporation or its suppliers
  and licensors. The Material may contain trade secrets and proprietary    and
  confidential information of Intel Corporation and its suppliers and licensors,
  and is protected by worldwide copyright and trade secret laws and treaty
  provisions. No part of the Material may be used, copied, reproduced, modified,
  published, uploaded, posted, transmitted, distributed, or disclosed in any way
  without Intel's prior express written permission.

  No license under any patent, copyright, trade secret or other intellectual
  property right is granted to or conferred upon you by disclosure or delivery
  of the Materials, either expressly, by implication, inducement, estoppel or
  otherwise. Any license under such intellectual property rights must be
  express and approved by Intel in writing.

  Unless otherwise agreed by Intel in writing, you may not remove or alter
  this notice or any other notice embedded in Materials by Intel or
  Intel's suppliers or licensors in any way.

  Module Name:
    ServerPlatformPkg/Features/Acpi/AcpiTables/Dsdt/IioCxlRootBridge.asi
**/

#define CXL_SUPPORT_FIELD_OFFSET  12
#define CXL_CONTROL_FIELD_OFFSET  16


  External (DBGM, FieldUnitObj)
  Name (SUPP, 0)
  Name (CTRL, 0)
  Name (SUPC, 0)
  Name (CTRC, 0)

  //
  // _BBN is ACPI method called by OS to read PCI base bus number for CXL Root bus stack.
  //
  Method(_BBN, 0, NotSerialized)
  {
    // CXL Root Bus assigned with PCIe Root Bus + 1
    Store(CONCATENATE3(BB, SOCKET, STACK), Local0)
    Add(Local0, 1, Local0)
    Return(Local0)
  }

  //
  // _PXM is ACPI method called by OS to read Proximity Domain (aka NUMA Node) where IIO stack belongs to.
  //
  Method(_PXM, 0, NotSerialized)
  {
    Store(SOCKET, Local0)
    If (CLOD) {
      //
      // If Sub-NUMA Cluster (SNC) enabled report PCI in the first of SNC domains of a socket,
      // so multiplicate socket number by the number of SNC domains.
      //
      Multiply(Local0, CLOD, Local0)
    }
    Return(Local0)
  }

  //
  // _SEG is ACPI method called by OS to read PCI segment of IIO stack.
  //
  Method(_SEG, 0, NotSerialized)
  {
    Return(CONCATENATE2(SG0, SOCKET))
  }

  //
  // _STA is ACPI method called by OS to read status of ACPI device, IIO stack in this case.
  //
  Method(_STA, 0, NotSerialized)
  { //
    // Check in processor present bitmap (PRBM) if processor is present, then
    // in CXL present bitmap of given processor (CXLx) if CXL is present.
    //
    ShiftLeft(1, SOCKET, Local0)
    If (And(PRBM, Local0)) {

      ShiftLeft(1, CONCATENATE2(0x,STACK), Local1)
      if (And(CONCATENATE2(CXL, SOCKET), Local1)) {
        Return(0x0F)
      }
    }
    Return(0x00)
  }

  Method(_OSC, 4)
  {
      //
      // Create DWord-addressable fields from the capabilities Buffer
      //
      CreateDWordField(Arg3,0,CDW1)
      If (LOr(LEqual(Arg0,ToUUID("33DB4D5B-1FF7-401C-9657-7441C03DD766")),
             (LEqual(Arg0,ToUUID("68F2D50B-C469-4D8A-BD3D-941A103FD3FC")))
          )) {

        //
        // Create DWord-addressable fields from the capabilities Buffer
        //
        CreateDWordField(Arg3,4,CDW2)

        //
        // Fill 3rd capability DWORD only if the count is greater than 2.
        //
        If(LGreater(Arg2,2)) {
          CreateDWordField(Arg3,8,CDW3)
        }

        //
        // Save Capabilities DWord2 & 3
        //
        Store(CDW2,SUPP)
        Store(CDW3,CTRL)

        //
        // Only allow native hot plug control if OS supports
        // * ASPM
        // * MSI/MSI-X
        //
        If (LOr(AHPE, LNotEqual(And(SUPP, 0x16), 0x16))) { // Conditions not met?
          And(CTRL, Not(1), CTRL) // Mask bit 0 to deny.
          Sleep(1000)
        }

        //
        // Never allow SHPC (no SHPC controller in system), Mask bit 1
        //
        And(CTRL, Not(2), CTRL)


        //
        // Select Native PCIe AER/eDPC handling from OS or Firmware First model
        //
        If (CondRefOf (\_SB.OSNC))
        {
          //in case OS has AER capability.
          If (LEqual ( And(CTRL, 8), 8)) {

            //in case OS support multiple segment.
            If (And (SUPP, 8)) {
              If (CondRefof (^_SEG))
              {
                Store (^_SEG, Local0)
              } Else {
                Store (0, Local0)
              }
            } Else {
              Store (0, Local0)
            }

            Store (^_BBN, Local1)

            // if BIOS allows OS take. Do nothing.
            If (\_SB.OSNC(Local0, Local1, SUPP, CTRL)) {

            } Else {
              And (CTRL, Not(0x88), CTRL)
            }
          } Else {
            And (CTRL, Not(0x88), CTRL)
          }
        } Else {
          //
          //Disable Native PCIe AER/eDPC handling from OS, AER is bit3, eDPC is bit7
          //
          And (CTRL, Not(0x88), CTRL)
        }

        If (Not(And(CDW1,1))) { // Query Flag Clear?
          //
          // Disable GPEs for Features granted native control
          //
          If (And(CTRL, 0x01)) { // Native Hot plug control granted?
            \_SB.OSCM (_UID)
            Store (0x01, GPSH)                // Clear Hotplug SCI Enable in GPE0
          }
        }

        If (LNotEqual(Arg1,one)) { // unknown revision
          Or(CDW1,0x08,CDW1)
        }

        If(LNotEqual(CDW3,CTRL)) { // capabilities bits were masked
          Or(CDW1,0x10,CDW1)
        }
        //
        // update DWORD3 in the buffer
        //
        Store(CTRL,CDW3)

        //
        // Evaluate CXL OS capability
        //
        If (LEqual(Arg0,ToUUID("68F2D50B-C469-4D8A-BD3D-941A103FD3FC"))) {
          //
          // Fetch 4th and 5th capability DWORD only if they are availlble.
          //
          If(LGreater(Arg2,3)) {
            CreateDWordField(Arg3,CXL_SUPPORT_FIELD_OFFSET,CDW4) // CXL Support Field
          }
          If(LGreater(Arg2,4)) {
            CreateDWordField(Arg3,CXL_CONTROL_FIELD_OFFSET,CDW5) // CXL Control Field
          }

          // Save CXL capabilities Support and Capabilities
          Store (CDW4, SUPC)
          Store (CDW5, CTRC)

          //
          // Modify control based on support
          //
          If (And(SUPC, 0x1)) {
            Or(CTRC, 0x01, CTRC)
          }
          Store (CTRC, CDW5)
        } // End of CXL OS Capability Evaluation
        Return(Arg3)

      } Else {
        //
        // Just indicate unrecognized UUID
        // Leave it at that
        //
        Or (CDW1,4,CDW1)
        if(LEqual(DBGM, 0x01)){
          Store (0xEE, IO80)
        }
        Return(Arg3)
      }
  } // End _OSC

  Name(RBRS, ResourceTemplate() {
    //RESOURCE_CHUNK1_OFF
    WORDBusNumber(            //Bus number resource (0); the bridge produces bus numbers for its subsequent buses
      ResourceProducer,       // bit 0 of general flags is 1
      MinFixed,               // Range is fixed
      MaxFixed,               // Range is fixed
      PosDecode,              // PosDecode
      0x0000,                 // Granularity (FIX1 - Patched by ACPI Platform Driver during POST)
      0x0000,                 // Min         (FIX1 - Patched by ACPI Platform Driver during POST)
      0x0000,                 // Max         (FIX1 - Patched by ACPI Platform Driver during POST)
      0x0000,                 // Translation
      0x0001,                 // Range Length = Max-Min+1 (FIX1 - Patched by ACPI Platform Driver during POST)
            ,
            ,
      FIX1                    // DescriptorName populated so iASL outputs offset for it in a .h file
    )

    //: Off board video card not detected in device manager when it is connected to CPU
    //RESOURCE_CHUNK5_OFF
    DWORDMEMORY(              // descriptor for video RAM on video card
      ResourceProducer,       // bit 0 of general flags is 0
      PosDecode,
      MinFixed,               // Range is fixed
      MaxFixed,               // Range is Fixed
      Cacheable,
      ReadWrite,
      0x00000000,             // Granularity  (FIX5 - Patched by ACPI Platform Driver during POST)
      0x00000000,             // Min          (FIX5 - Patched by ACPI Platform Driver during POST)
      0x00000000,             // Max          (FIX5 - Patched by ACPI Platform Driver during POST)
      0x00000000,             // Translation
      0x00000000,             // Range Length (FIX5 - Patched by ACPI Platform Driver during POST)
                ,
                ,
      FIX5                    // DescriptorName populated so iASL outputs offset for it in a .h file
    )

    //RESOURCE_CHUNK2_OFF
    WORDIO(                   //Consumed-and-produced resource (all I/O above CFF)
      ResourceProducer,       // bit 0 of general flags is 0
      MinFixed,               // Range is fixed
      MaxFixed,               // Range is fixed
      PosDecode,
      EntireRange,
      0x0000,                 // Granularity (FIX2 - Patched by ACPI Platform Driver during POST)
      0x0000,                 // Min         (FIX2 - Patched by ACPI Platform Driver during POST)
      0x0000,                 // Max         (FIX2 - Patched by ACPI Platform Driver during POST)
      0x0000,                 // Translation
      0x0001,                 // Range Length = Max-Min+1 (FIX2 - Patched by ACPI Platform Driver during POST)
            ,
            ,
      FIX2                    // DescriptorName populated so iASL outputs offset for it in a .h file
    )

    //Off board video card not detected in device manager when it is connected to CPU
    //Descriptor for IO space of the video card.
    WORDIO(                   // Consumed-and-produced resource (all I/O below CF8)
      ResourceProducer,       // bit 0 of general flags is 0
      MinFixed,               // Range is fixed
      MaxFixed,               // Range is fixed
      PosDecode,
      EntireRange,
      0x0000,                 // Granularity (FIX6 - Patched by ACPI Platform Driver during POST)
      0x0000,                 // Min         (FIX6 - Patched by ACPI Platform Driver during POST)
      0x0000,                 // Max         (FIX6 - Patched by ACPI Platform Driver during POST)
      0x0000,                 // Translation
      0x0000,                 // Range Length
            ,
            ,
      FIX6                    // DescriptorName populated so iASL outputs offset for it in a .h file
    )

    //Off board video card not detected in device manager when it is connected to CPU
    //Descriptor for IO space of the video card.
    WORDIO(                   // Consumed-and-produced resource (all I/O below CF8)
      ResourceProducer,       // bit 0 of general flags is 0
      MinFixed,               // Range is fixed
      MaxFixed,               // Range is fixed
      PosDecode,
      EntireRange,
      0x0000,                 // Granularity (FIX7 - Patched by ACPI Platform Driver during POST)
      0x0000,                 // Min         (FIX7 - Patched by ACPI Platform Driver during POST)
      0x0000,                 // Max         (FIX7 - Patched by ACPI Platform Driver during POST)
      0x0000,                 // Translation
      0x0000,                 // Range Length
            ,
            ,
      FIX7                    // DescriptorName populated so iASL outputs offset for it in a .h file
    )

    //
    // PCI RESOURCE_32bit
    //
    DWORDMemory(              // Consumed-and-produced resource(all of memory space)
      ResourceProducer,       // bit 0 of general flags is 0
      PosDecode,              // positive Decode
      MinFixed,               // Range is fixed
      MaxFixed,               // Range is fixed
      NonCacheable,
      ReadWrite,
      0x00000000,             // Granularity (FIX3 - Patched by ACPI Platform Driver during POST)
      0x00000000,             // Min (calculated dynamically) (FIX3 - Patched by ACPI Platform Driver during POST)
      0x00000000,             // Max = 4GB - 1MB  (fwh + fwh alias) (FIX3 - Patched by ACPI Platform Driver during POST)
      0x00000000,             // Translation
      0x00000000,             // Range Length (calculated dynamically) (FIX3 - Patched by ACPI Platform Driver during POST)
                ,
                ,
      FIX3                    // DescriptorName populated so iASL outputs offset for it in a .h file
    )

    //
    // PCI RESOURCE_64bit
    //
    QWORDMemory(              // Consumed-and-produced resource(all of memory space)
      ResourceProducer,       // bit 0 of general flags is 0
      PosDecode,              // positive Decode
      MinFixed,               // Range is fixed
      MaxFixed,               // Range is fixed
      NonCacheable,
      ReadWrite,
      0x00000000000,          // Granularity (FIX4 - Patched by ACPI Platform Driver during POST)
      0x00000000000,          // Min (calculated dynamically) (FIX4 - Patched by ACPI Platform Driver during POST)
      0x00000000000,          // Max = 4GB - 1MB  (fwh + fwh alias) (FIX4 - Patched by ACPI Platform Driver during POST)
      0x00000000000,          // Translation
      0x00000000000,          // Range Length (calculated dynamically) (FIX4 - Patched by ACPI Platform Driver during POST)
                   ,
                   ,
      FIX4                    // DescriptorName populated so iASL outputs offset for it in a .h file
    )
  }) // end of PRXX Buffer

    // Current resource template return
  Method(_CRS, 0x0, NotSerialized)
  {
    Return(RBRS)
  }


