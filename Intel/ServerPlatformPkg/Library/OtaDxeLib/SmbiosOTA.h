/** @file

  @copyright
  INTEL CONFIDENTIAL
  Copyright 1999 - 2018 Intel Corporation. <BR>

  The source code contained or described herein and all documents related to the
  source code ("Material") are owned by Intel Corporation or its suppliers or
  licensors. Title to the Material remains with Intel Corporation or its suppliers
  and licensors. The Material may contain trade secrets and proprietary    and
  confidential information of Intel Corporation and its suppliers and licensors,
  and is protected by worldwide copyright and trade secret laws and treaty
  provisions. No part of the Material may be used, copied, reproduced, modified,
  published, uploaded, posted, transmitted, distributed, or disclosed in any way
  without Intel's prior express written permission.

  No license under any patent, copyright, trade secret or other intellectual
  property right is granted to or conferred upon you by disclosure or delivery
  of the Materials, either expressly, by implication, inducement, estoppel or
  otherwise. Any license under such intellectual property rights must be
  express and approved by Intel in writing.

  Unless otherwise agreed by Intel in writing, you may not remove or alter
  this notice or any other notice embedded in Materials by Intel or
  Intel's suppliers or licensors in any way.
**/
#ifndef _SMBIOS_OTA_H_
#define _SMBIOS_OTA_H_

//#include <Base.h>
//#include <Uefi.h>

#include <DxeOobOneTouch.h>

//
#pragma pack(push, 1)
//
//---------------------------------------------------------------------------
// One OEM Specific SMBIOS Structure required for OTA Specific Information.
//   1) OEM Specific Structure for OTA General Information
// The OEM Specific Structure is associated with a Group Association Structure.
//
#define MAX_OEM_STRUCTURE           0x01  // Max #of OEM Structures
//
// Choose OEM Specific Structure Types to be used
//   NOTE: OEM STructure Type MUST BE CHOSEN in a CONFLICT-FREE manner and hence can be different for different platform.
//
#define OEM_STRUCTURE_TYPE_OTA      0xA8  // OEM Structure Type for OTA General Information
//
//-----------------------------------------------------------------------
// Max length of ASCIIZ string in bytes including NULL terminator
#define MAX_ASCIIZ_STRING_LENGTH_B  0x100 // Max length of ASCIIZ string in bytes including NULL terminator
//
//-----------------------------------------------------------------------
// Group Association Structure for OTA Information Groups
//
#define GROUP_ASSOCIATION_STRUCTURE_TYPE    0x0E  // Structure Type
//
typedef  struct {                 // Offset Length Description
  UINT8  Type;                    // 00h    BYTE   Structure Type
  UINT8  Length;                  // 01h    BYTE   Length of formatted area of the structure in bytes
  UINT16 Handle;                  // 02h    WORD   Structure Handle, unique 16bit value generated by BIOS
  UINT8  GroupName;               // 04h    BYTE   String# of the string describing the Group
  UINT8  Item1Type;               // 05h    BYTE   Structure Type of OEM-Specific Structure of first (only as of now) member of the Group
  UINT16 Item1Handle;             // 06h    WORD   Handle of OEM-Specific Structure of first (only as of now) member of the Group
} GROUP_ASSOCIATION_STRUCTURE_OTA;
//
//-----------------------------------------------------------------------
// OEM Structure: OTA General Information
//
typedef  struct {                    // Offset  Length   Description
  UINT8  Type;                       // 00h     BYTE     Structure Type
  UINT8  Length;                     // 01h     BYTE     Length of formatted area of the structure in bytes
  UINT16 Handle;                     // 02h     WORD     Structure Handle, unique 16bit value generated by BIOS
  UINT16 MemberIdentifier;           // 04h     WORD     Bit-mapped information identifying the member that this structure represents
  UINT8  MemberName;                 // 06h     BYTE     String# of the string for the member that this structure represents
  UINT8  SpecificationVersion;       // 07h     BYTE     Version# of OTA Specification supported in BIOS
  UINT8  ImplementationMajorVersion; // 08h     BYTE     Major Version# of OTA Implementation in BIOS
  UINT8  ImplementationMinorVersion; // 09h     BYTE     Minor Version# of OTA Implementation in BIOS
  UINT16 FeatureSupported;           // 0Ah     WORD     Bit-mapped information of supported features
  UINT16 FeatureEnabled;             // 0Ch     WORD     Bit-mapped information of enabled features
  UINT16 TpmUsage;                   // 0Eh     WORD     Bit-mapped information of TPM Usage
  UINT8  UseCaseSupported[0x10];     // 10h     16 BYTE  Bit-mapped information of different Use-Case (Task) supported
  UINT16 MaxMkTmeKeys;               // 20h     WORD     Maximum #of MK-TME Keys available for use
  UINT8  MaxMkTmeKeyIdBits;          // 22h     BYTE     Maximum #of Bits allowed for use as Key Identifiers for MK-TME
  UINT8  MkTmeKeyIdBits;             // 23h     BYTE     #of Bits allocated for use as Key Identifiers for MK-TME
  UINT16 PfrState;                   // 24h     WORD     Bit-mapped information of PFR State
  UINT8  PfrRecoveryCount;           // 26h     BYTE     #of Recovery since last AC power cycle
  UINT8  PfrLastRecoveryReason;      // 27h     BYTE     Last Recovery Reason
  UINT8  PfrPanicEventCount;         // 28h     BYTE     #of Panic events since last AC power cycle
  UINT8  PfrLastPanicReason;         // 29h     BYTE     Last Panic Reason
} OEM_STRUCTURE_OTA;
//
// MemberIdentifier: Bit-mapped information identifying the member represented by this structure.
#define OEM_OTA_GENERAL_INFORMATION_BIT     0x01 // Bit-0  : OTA General Information (OEM Structure)
                                                 // Bit15-1: Reserved (set to 0)
//
// SpecificationVersion: Version number of the OTA Specification supported in the BIOS.
//
// ImplementationMajorVersion: Major Version# of OTA Implementation in the BIOS.
// ImplementationMinorVersion; Minor Version# of OTA Implementation in the BIOS.
//
// FeatureSupported: Bit-mapped information of TXT/TPM features supported in the platform.
//   Bit-definitions are identical to that of OXP_HEADER.FeatureSupported.
//
// FeatureEnabled: Bit-mapped information of TXT/TPM features that are currently enabled in the platform.
//   Bit-definitions are identical to that of OXP_HEADER.FeatureEnabled.
//   NOTE: Since this information may change from boot to boot, it represents the features that
//   are enabled in the current boot (if the task is performed in runtime i.e. when the system
//   is ON and running) or in the last boot (if the task is performed while the system is OFF).
//
// UseCaseSupported: Bit-mapped information of different Use-Case (Task) supported in OTA implementation.
//   Bit-T = 0/1, Use-Case T not/yes supported
//
// MaxMkTmeKeys: Provides the maximum number of MK-TME Keys available for use.
//   This value of this field may not be a power of 2.
//   The maximum value of this field is (2^MaxMkTmeKeyIdBits) – 1.
//   A value of 0 in this field indicates that MK-TME is not supported.
//
// MaxMkTmeKeyIdBits: Provides the maximum number of bits allowed for use as Key Identifiers for MK-TME.
//   A value of 0 in this field indicates that MK-TME is not supported.
//
// MkTmeKeyIdBits: Provides the number of bits allocated for use as Key Identifiers for MK-TME.
//   This field is valid only if MK-TME is enabled.
//
// PfrState: Provides bit-mapped information of current state of PFR.
//   This field is valid only if PFR is supported in the platform.
//   Bit-definitions are identical to that of OXP_DISCOVERY_INFO.PfrState.
//
// PfrRecoveryCount: Provides the number of firmware recovery action since last AC Power Cycle.
//   This field is valid only (if PFR is supported) AND (if PFR is provisioned).
//   Please see PFR HAS 1.2 for details.
//
// PfrLastRecoveryReason: Provides the enumerated value of the last recovery reason.
//   This field is valid only (if PFR is supported) AND (if PFR is provisioned).
//   Please see PFR HAS 1.2 for details.
//
// PfrPanicEventCount: Provides the number of panic events (T0 mode to T-1 mode transitions) since last AC Power Cycle.
//   This field is valid only (if PFR is supported) AND (if PFR is provisioned).
//   Please see PFR HAS 1.2 for details.
//
// PfrLastPanicReason: Provides the enumerated value of the last panic reason.
//   This field is valid only (if PFR is supported) AND (if PFR is provisioned).
//   Please see PFR HAS 1.2 for details.
//
//--------------------------------------------------------------------------
// -------------------- FUNCTION PROTOTYPES --------------------------------
//--------------------------------------------------------------------------
/*
  This function generates the SMBIOS Structures for OTA.

  @param  Ott         INPUT: OXP_TXT_TPM*, Ptr to OXP_TXT_TPM
  @param  Opd         INPUT: OT_PLATFORM_DATA*, Ptr to OT_PLATFORM_DATA

  @retval EFI_STATUS  EFI_SUCCESS, Success
                      Other,       Error
*/
//--------------------------------------------------------------------------
EFI_STATUS
GenerateSmbiosStructuresOTA (
  IN  OOB_TXT_TPM      *Ott,
  IN  OT_PLATFORM_DATA *Opd
  );
//
//--------------------------------------------------------------------------
//
#pragma pack(pop)
//
#endif
