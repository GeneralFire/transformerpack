/** @file

  @copyright
  INTEL CONFIDENTIAL
  Copyright 1999 - 2020 Intel Corporation. <BR>

  The source code contained or described herein and all documents related to the
  source code ("Material") are owned by Intel Corporation or its suppliers or
  licensors. Title to the Material remains with Intel Corporation or its suppliers
  and licensors. The Material may contain trade secrets and proprietary    and
  confidential information of Intel Corporation and its suppliers and licensors,
  and is protected by worldwide copyright and trade secret laws and treaty
  provisions. No part of the Material may be used, copied, reproduced, modified,
  published, uploaded, posted, transmitted, distributed, or disclosed in any way
  without Intel's prior express written permission.

  No license under any patent, copyright, trade secret or other intellectual
  property right is granted to or conferred upon you by disclosure or delivery
  of the Materials, either expressly, by implication, inducement, estoppel or
  otherwise. Any license under such intellectual property rights must be
  express and approved by Intel in writing.

  Unless otherwise agreed by Intel in writing, you may not remove or alter
  this notice or any other notice embedded in Materials by Intel or
  Intel's suppliers or licensors in any way.
**/

#include <Upi/RasTypes.h>
// APTIOV_SERVER_OVERRIDE_RC_START : Added to get the value of sdl tokens
#include "Token.h"
// APTIOV_SERVER_OVERRIDE_RC_END : Added to get the value of sdl tokens

  form formid = VFR_FORMID_EVENT_LOG,

    title  = STRING_TOKEN(STR_EVENT_LOG_FORM_TITLE);

    subtitle text = STRING_TOKEN(STR_EVENT_LOG_FORM_TITLE);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
// APTIOV_SERVER_OVERRIDE_RC_START : Extra Horizontal Lines display removal
//    subtitle text = STRING_TOKEN(STR_NULL_STRING);
// APTIOV_SERVER_OVERRIDE_RC_END : Extra Horizontal Lines display removal

    //
    // Log Errors
    //
    oneof varid = SYSTEM_CONFIGURATION.SystemErrorEn,
      prompt      = STRING_TOKEN(STR_SYSTEM_ERRORS_PROMPT),
      help        = STRING_TOKEN(STR_SYSTEM_ERRORS_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED ;
      option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
// APTIOV_SERVER_OVERRIDE_RC_START : Decided to comment the Auto Option
#if 0
      option text = STRING_TOKEN(STR_AUTO),    value = 2, flags = RESET_REQUIRED;
#endif
// APTIOV_SERVER_OVERRIDE_RC_END : Decided to comment the Auto Option
    endoneof;
// APTIOV_SERVER_OVERRIDE_RC_START: Unlocking the MSR 0x790 for the ErrorInjection to work from RAS tools
#if ENABLE_ERROR_INJECTOR_SUPPORT
    suppressif  ideqval SYSTEM_CONFIGURATION.SystemErrorEn == 0x00;
        oneof varid    = SYSTEM_CONFIGURATION.UnlockMsr,
           prompt      = STRING_TOKEN(STR_UNLOCK_MSR_PROMPT),
           help        = STRING_TOKEN(STR_UNLOCK_MSR_HELP),
           option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
           option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;
#endif
// APTIOV_SERVER_OVERRIDE_RC_END: Unlocking the MSR 0x790 for the ErrorInjection to work from RAS tools

    oneof varid = SYSTEM_CONFIGURATION.RasLogLevel,
      prompt      = STRING_TOKEN(STR_RAS_LOG_PROMPT),
      help        = STRING_TOKEN(STR_RAS_LOG_HELP),
      option text = STRING_TOKEN(STR_RAS_LOG_NONE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_RAS_LOG_MIN),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      option text = STRING_TOKEN(STR_RAS_LOG_MID),  value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_RAS_LOG_MAX),  value = 3, flags = RESET_REQUIRED;
    endoneof;

    suppressif  ideqval SYSTEM_CONFIGURATION.SystemErrorEn == 0x00 OR ideqval SYSTEM_CONFIGURATION.SystemErrorEn == 0x02;
      oneof varid = SYSTEM_CONFIGURATION.PoisonEn,
        prompt      = STRING_TOKEN(STR_POISON_EN_PROMPT),
        help        = STRING_TOKEN(STR_POISON_EN_HELP),
#ifdef SPR_PO_FLAG
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
        option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
#else
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
#endif
      endoneof;
    endif;

    grayoutif ideqval SYSTEM_CONFIGURATION.SystemErrorEn == 0x00 OR ideqval SYSTEM_CONFIGURATION.SystemErrorEn == 0x02 OR ideqvallist SOCKET_COMMONRC_CONFIGURATION.SystemRasType == HEDT_RAS STANDARD_RAS CORE_RAS OR ideqval SYSTEM_CONFIGURATION.PoisonEn == 0x00;
      oneof varid = SYSTEM_CONFIGURATION.ViralEn,
        prompt      = STRING_TOKEN(STR_VIRAL_EN_PROMPT),
        help        = STRING_TOKEN(STR_VIRAL_EN_HELP),
        option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
        option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED;

      endoneof;
    endif;

    suppressif ideqval SYSTEM_CONFIGURATION.SystemErrorEn == 0x00 OR ideqval SYSTEM_CONFIGURATION.SystemErrorEn == 0x02 OR ideqval SYSTEM_CONFIGURATION.ViralEn == 0x00;
      grayoutif ideqval SYSTEM_CONFIGURATION.PoisonEn == 0x00;
        oneof varid     = SYSTEM_CONFIGURATION.ClearViralStatus,
          prompt      = STRING_TOKEN(STR_VIRAL_CLEAR_STATUS_PROMPT),
          help        = STRING_TOKEN(STR_VIRAL_CLEAR_STATUS_HELP),
          option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
          option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;
    endif;

    oneof varid = SYSTEM_CONFIGURATION.CloakDevHideRegistersOs,
      prompt      = STRING_TOKEN(STR_CLOAK_DEV_HIDE_PROMPT),
      help        = STRING_TOKEN(STR_CLOAK_DEV_HIDE_HELP),
      option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED;
    endoneof;

    suppressif  ideqval SYSTEM_CONFIGURATION.SystemErrorEn == 0x00;
      grayoutif ideqval SYSTEM_CONFIGURATION.EmcaEn == 0x00;
        oneof varid = SYSTEM_CONFIGURATION.CloakingEn,
          prompt      = STRING_TOKEN(STR_CLOAKING_EN_PROMPT),
          help        = STRING_TOKEN(STR_CLOAKING_EN_HELP),
          option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED  | DEFAULT;
          option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;
    endif;

    suppressif  ideqval SYSTEM_CONFIGURATION.SystemErrorEn == 0x00;
      grayoutif TRUE;
        oneof varid = SYSTEM_CONFIGURATION.UboxToPcuMcaEn,
          prompt      = STRING_TOKEN(STR_UBOX_PCU_MCA_EN_PROMPT),
          help        = STRING_TOKEN(STR_UBOX_PCU_MCA_EN_HELP),
          option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
        endoneof;
      endif;
    endif;

  //
  //for UC/PCC=1 error
  //
    suppressif  ideqval SYSTEM_CONFIGURATION.SystemErrorEn == 0x00;
    oneof varid = SYSTEM_CONFIGURATION.FatalErrSpinLoopEn,
      prompt      = STRING_TOKEN(STR_SPINLOOP_PROMPT),
      help        = STRING_TOKEN(STR_SPINLOOP_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
    endoneof;
    endif;

    oneof varid = SYSTEM_CONFIGURATION.McBankWarmBootClearError,
      prompt      = STRING_TOKEN(STR_MCA_BANK_WARM_BOOT_CLEAR_ERRORS_PROMPT),
      help        = STRING_TOKEN(STR_MCA_BANK_WARM_BOOT_CLEAR_ERRORS_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
    endoneof;

    oneof varid = SYSTEM_CONFIGURATION.ShutdownSuppression,
      prompt      = STRING_TOKEN(STR_SUPPRESS_SHUTDOWN_PROMPT),
      help        = STRING_TOKEN(STR_SUPPRESS_SHUTDOWN_HELP),
      option text = STRING_TOKEN(STR_DISABLE),                            value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      option text = STRING_TOKEN(STR_SUPPRESS_SHUTDOWN_AND_LOGMCA_IERR),  value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_SHUTDOWN_LOGMCA_IERR),               value = 2, flags = RESET_REQUIRED;
    endoneof;

    //
    // eMCA setup options
    //
    grayoutif  ideqval SYSTEM_CONFIGURATION.SystemErrorEn == 0x00;
      goto VFR_FORMID_EMCA_SETTING,
      prompt = STRING_TOKEN(STR_EMCA_FORM_TITLE),
      help   = STRING_TOKEN(STR_EMCA_FORM_HELP);
    endif;

    //
    // Whea setup options
    //
    grayoutif  ideqval SYSTEM_CONFIGURATION.SystemErrorEn == 0x00;
//APTIOV_SERVER_OVERRIDE_RC_START : Added support for setup based on Whea Master Token
#ifdef WHEA_SUPPORT
// APTIOV_SERVER_OVERRIDE_RC_END : Added support for setup based on Whea Master Token
      goto VFR_FORMID_WHEA_SETTING,
      prompt = STRING_TOKEN(STR_WHEA_FORM_TITLE),
      help   = STRING_TOKEN(STR_WHEA_FORM_HELP);
//APTIOV_SERVER_OVERRIDE_RC_START : Added support for setup based on Whea Master Token
#endif
// APTIOV_SERVER_OVERRIDE_RC_END : Added support for setup based on Whea Master Token
    endif;

    //
    // Error Injection
    //
    grayoutif  ideqval SYSTEM_CONFIGURATION.SystemErrorEn == 0x00;
      goto VFR_FORMID_ERROR_INJ,
      prompt = STRING_TOKEN(STR_ERR_INJ_FORM_TITLE),
      help   = STRING_TOKEN(STR_ERR_INJ_FORM_HELP);
    endif;

  //
  // KTI Errors
  //
  suppressif  ideqval SYSTEM_CONFIGURATION.SystemErrorEn == 0x00 OR ideqval SYSTEM_CONFIGURATION.SystemErrorEn == 0x02 OR ideqvallist SOCKET_COMMONRC_CONFIGURATION.SystemRasType == HEDT_RAS STANDARD_RAS CORE_RAS;
    goto VFR_FORMID_KTI_ERR,
    prompt = STRING_TOKEN(STR_KTI_ERR_FORM_TITLE),
    help   = STRING_TOKEN(STR_KTI_ERR_FORM_HELP);
  endif;

    //
    // Memory Errors
    //
    grayoutif ideqval SYSTEM_CONFIGURATION.SystemErrorEn == 0x00 OR ideqval SYSTEM_CONFIGURATION.SystemErrorEn == 0x02;
      goto VFR_FORMID_MEM_ERROR,
      prompt = STRING_TOKEN(STR_MEM_ERR_FORM_TITLE),
      help   = STRING_TOKEN(STR_MEM_ERR_FORM_HELP);
    endif;

    //
    // IIO Errors
    //
    grayoutif ideqval SYSTEM_CONFIGURATION.SystemErrorEn == 0x00 OR ideqval SYSTEM_CONFIGURATION.SystemErrorEn == 0x02;
      goto VFR_FORMID_IIO_ERROR,
      prompt = STRING_TOKEN(STR_IIO_ERR_FORM_TITLE),
      help   = STRING_TOKEN(STR_IIO_ERR_FORM_HELP);
    endif;

    //
    // Pci-Ex Errors
    //
    grayoutif ideqval SYSTEM_CONFIGURATION.SystemErrorEn == 0x00 OR ideqval SYSTEM_CONFIGURATION.SystemErrorEn == 0x02;
      goto VFR_FORMID_PCI_ERROR,
      prompt = STRING_TOKEN(STR_PCI_ERR_FORM_TITLE),
      help   = STRING_TOKEN(STR_PCI_ERR_FORM_HELP);
    endif;

    //
    // Error Control Setting
    //
    grayoutif ideqval SYSTEM_CONFIGURATION.SystemErrorEn == 0x00 OR ideqval SYSTEM_CONFIGURATION.SystemErrorEn == 0x02;
      goto VFR_FORMID_ERROR_CONTROL,
      prompt = STRING_TOKEN(STR_ERR_CONTROL_FORM_TITLE),
      help   = STRING_TOKEN(STR_ERR_CONTROL_FORM_HELP);
    endif;

    goto VFR_FORMID_CRASHLOG_SETTING,
    prompt = STRING_TOKEN(STR_CRASHLOG_FORM_TITLE),
    help   = STRING_TOKEN(STR_CRASHLOG_FORM_HELP);

  endform;


  //
  // eMCA form
  //
  form formid = VFR_FORMID_EMCA_SETTING,

    title  = STRING_TOKEN(STR_EMCA_FORM_TITLE);
    subtitle text = STRING_TOKEN(STR_EMCA_FORM_TITLE);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

    oneof varid = SYSTEM_CONFIGURATION.EmcaEn,
      prompt      = STRING_TOKEN(STR_EMCALOG_SUPPORT_EN_PROMPT),
      help        = STRING_TOKEN(STR_EMCALOG_SUPPORT_EN_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
    endoneof;

    suppressif ideqval SYSTEM_CONFIGURATION.PoisonEn == 0x00;
      oneof varid = SYSTEM_CONFIGURATION.LmceEn,
        prompt      = STRING_TOKEN(STR_LMCE_SUPPORT_EN_PROMPT),
        help        = STRING_TOKEN(STR_LMCE_SUPPORT_EN_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      endoneof;
    endif;

    suppressif ideqval SYSTEM_CONFIGURATION.EmcaEn == 0x00;
      oneof varid     = SYSTEM_CONFIGURATION.EmcaIgnOptin,
        prompt      = STRING_TOKEN(STR_EMCAIGN_OPTIN_PROMPT),
        help        = STRING_TOKEN(STR_EMCAIGN_OPTIN_HELP),
          option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
          option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
      endoneof;
    endif;

    suppressif ideqval SYSTEM_CONFIGURATION.EmcaEn == 0x00;
      oneof varid = SYSTEM_CONFIGURATION.EmcaCsmiEn,
        prompt      = STRING_TOKEN(STR_EMCA_CSMI_EN_PROMPT),
        help        = STRING_TOKEN(STR_EMCA_CSMI_EN_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_EMCACSMIGEN2),  value = 2, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      endoneof;

      suppressif ideqval SYSTEM_CONFIGURATION.EmcaCsmiEn == 0x00;
        numeric varid = SYSTEM_CONFIGURATION.EmcaCsmiThreshold,
          prompt  = STRING_TOKEN (STR_EMCA_CSMI_THRESHOLD_PROMPT),
          help    = STRING_TOKEN (STR_EMCA_CSMI_THRESHOLD_HELP),
          flags   = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum = 0,
          maximum = 0x7FFF,
          step    = 1,
          default = 0, defaultstore = MyStandardDefault,
          default = 0, defaultstore = MyManufactureDefault,
        endnumeric;
      endif;

      suppressif NOT ideqval SYSTEM_CONFIGURATION.EmcaCsmiEn == 2;
      suppressif ideqval SOCKET_MEMORY_CONFIGURATION.volMemMode == VOL_MEM_MODE_2LM;
        oneof varid = SYSTEM_CONFIGURATION.CsmiDynamicDisable,
          prompt      = STRING_TOKEN(STR_CSMI_DYNAMIC_DISABLE_PROMPT),
          help        = STRING_TOKEN(STR_CSMI_DYNAMIC_DISABLE_HELP),
          option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
          option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;
      endif;
    endif;

    suppressif ideqval SYSTEM_CONFIGURATION.EmcaEn == 0x00;
      oneof varid = SYSTEM_CONFIGURATION.EmcaMsmiEn,
        prompt      = STRING_TOKEN(STR_EMCA_MSMI_EN_PROMPT),
        help        = STRING_TOKEN(STR_EMCA_MSMI_EN_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_EMCAGEN2),  value = 2, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      endoneof;
    endif;

    suppressif ideqval SYSTEM_CONFIGURATION.EmcaEn == 0x00;
      oneof varid = SYSTEM_CONFIGURATION.ElogCorrErrEn,
        prompt      = STRING_TOKEN(STR_CORR_ERR_ELOG_EN_PROMPT),
        help        = STRING_TOKEN(STR_CORR_ERR_ELOG_EN_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      endoneof;
    endif;

    suppressif ideqval SYSTEM_CONFIGURATION.EmcaEn == 0x00;
      oneof varid = SYSTEM_CONFIGURATION.ElogMemErrEn,
        prompt      = STRING_TOKEN(STR_MEM_ERR_ELOG_EN_PROMPT),
        help        = STRING_TOKEN(STR_MEM_ERR_ELOG_EN_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      endoneof;
    endif;

    suppressif ideqval SYSTEM_CONFIGURATION.EmcaEn == 0x00;
      oneof varid = SYSTEM_CONFIGURATION.ElogProcErrEn,
        prompt      = STRING_TOKEN(STR_PROC_ERR_ELOG_EN_PROMPT),
        help        = STRING_TOKEN(STR_PROC_ERR_ELOG_EN_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      endoneof;
    endif;


    suppressif ideqval SYSTEM_CONFIGURATION.EmcaEn == 0x00;
      oneof varid = SYSTEM_CONFIGURATION.OscEn,
        prompt      = STRING_TOKEN(STR_OSC_EN_PROMPT),
        help        = STRING_TOKEN(STR_OSC_EN_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
        option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
      endoneof;
    endif;


    suppressif ideqval SYSTEM_CONFIGURATION.EmcaEn == 0x00;
      oneof varid     = SYSTEM_CONFIGURATION.UboxErrorMask,
        prompt      = STRING_TOKEN(STR_UBOX_ERROR_MASK_PROMPT),
        help        = STRING_TOKEN(STR_UBOX_ERROR_MASK_HELP),
          option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
          option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
      endoneof;
    endif;

  endform;
// APTIOV_SERVER_OVERRIDE_RC_START
//Added support for setup based on Whea Master Token
#ifdef WHEA_SUPPORT
// APTIOV_SERVER_OVERRIDE_RC_END
  //
  // Whea form
  //
  form formid = VFR_FORMID_WHEA_SETTING,

    title  = STRING_TOKEN(STR_WHEA_FORM_TITLE);
    subtitle text = STRING_TOKEN(STR_WHEA_FORM_TITLE);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
// APTIOV_SERVER_OVERRIDE_RC_START : Extra Horizontal Lines display removal
//	subtitle text = STRING_TOKEN(STR_NULL_STRING);
// APTIOV_SERVER_OVERRIDE_RC_END : Extra Horizontal Lines display removal

    oneof varid = SYSTEM_CONFIGURATION.WheaSupportEn,
      prompt      = STRING_TOKEN(STR_WHEA_SUPPORT_EN_PROMPT),
      help        = STRING_TOKEN(STR_WHEA_SUPPORT_EN_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
    endoneof;

    suppressif ideqval SYSTEM_CONFIGURATION.WheaSupportEn == 0x00;
      oneof varid = SYSTEM_CONFIGURATION.WheaLogMemoryEn,
        prompt      = STRING_TOKEN(STR_WHEA_LOG_MEM_ERR_EN_PROMPT),
        help        = STRING_TOKEN(STR_WHEA_LOG_MEM_ERR_EN_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      endoneof;
    endif;

    suppressif ideqval SYSTEM_CONFIGURATION.WheaSupportEn == 0x00;
      oneof varid = SYSTEM_CONFIGURATION.WheaLogProcEn,
        prompt      = STRING_TOKEN(STR_WHEA_LOG_PROC_ERR_EN_PROMPT),
        help        = STRING_TOKEN(STR_WHEA_LOG_PROC_ERR_EN_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      endoneof;
    endif;

    suppressif ideqval SYSTEM_CONFIGURATION.WheaSupportEn == 0x00;
      oneof varid = SYSTEM_CONFIGURATION.WheaLogPciEn,
        prompt      = STRING_TOKEN(STR_WHEA_LOG_PCI_ERR_EN_PROMPT),
        help        = STRING_TOKEN(STR_WHEA_LOG_PCI_ERR_EN_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      endoneof;
    endif;

  endform;
// APTIOV_SERVER_OVERRIDE_RC_START
  #endif
// APTIOV_SERVER_OVERRIDE_RC_END

  //
  // Error Injection form
  //
  form formid = VFR_FORMID_ERROR_INJ,

    title  = STRING_TOKEN(STR_ERR_INJ_FORM_TITLE);
      subtitle text = STRING_TOKEN(STR_ERR_INJ_FORM_TITLE);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
// APTIOV_SERVER_OVERRIDE_RC_START : Extra Horizontal Lines display removal
//	subtitle text = STRING_TOKEN(STR_NULL_STRING); 
// APTIOV_SERVER_OVERRIDE_RC_END : Extra Horizontal Lines display removal

    oneof varid = SYSTEM_CONFIGURATION.McaBankErrInjEn,
      prompt      = STRING_TOKEN(STR_MCA_BANK_INJ_EN_PROMPT),
      help        = STRING_TOKEN(STR_MCA_BANK_INJ_EN_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid = SYSTEM_CONFIGURATION.AEPErrorInjEn,
      prompt      = STRING_TOKEN(STR_AEP_ERROR_INJ_ENABLE_PROMPT),
      help        = STRING_TOKEN(STR_AEP_ERROR_INJ_ENABLE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid = SYSTEM_CONFIGURATION.WheaErrorInjSupportEn,
      prompt      = STRING_TOKEN(STR_WHEA_ERROR_INJ_SUPPORT_PROMPT),
      help        = STRING_TOKEN(STR_WHEA_ERROR_INJ_SUPPORT_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval SYSTEM_CONFIGURATION.WheaErrorInjSupportEn == 0x00;
    oneof varid = SYSTEM_CONFIGURATION.WheaErrInjEn,
      prompt      = STRING_TOKEN(STR_WHEA_ACPI5_SUPPORT_PROMPT),
      help        = STRING_TOKEN(STR_WHEA_ACPI5_SUPPORT_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED  | DEFAULT | MANUFACTURING;
    endoneof;
    endif;

    suppressif ideqval SYSTEM_CONFIGURATION.WheaErrorInjSupportEn == 0x00;
      oneof varid = SYSTEM_CONFIGURATION.WheaPcieErrInjEn,
        prompt      = STRING_TOKEN(STR_WHEA_PCIE_ERR_INJ_EN_PROMPT),
        help        = STRING_TOKEN(STR_WHEA_PCIE_ERR_INJ_EN_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
        option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
      endoneof;
    endif;

    suppressif ideqval SYSTEM_CONFIGURATION.WheaErrorInjSupportEn == 0x00;
      oneof varid = SYSTEM_CONFIGURATION.PcieErrInjActionTable,
        prompt = STRING_TOKEN(STR_WHEA_PCIE_EINJAT_PROMPT),
        help = STRING_TOKEN(STR_WHEA_PCIE_EINJAT_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
        option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
      endoneof;
    endif;
// APTIOV_SERVER_OVERRIDE_RC_START : Resolve build error for Work station
#if SPS_SUPPORT
// APTIOV_SERVER_OVERRIDE_RC_END : Resolve build error for Work station
    suppressif ideqval SYSTEM_CONFIGURATION.WheaErrorInjSupportEn == 0x00;
      oneof varid = SYSTEM_CONFIGURATION.MeSegErrorInjEn,
        prompt = STRING_TOKEN(STR_ME_SEG_ERR_INJ_EN_PROMPT),
        help = STRING_TOKEN(STR_ME_SEG_ERR_INJ_EN_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED  | DEFAULT;
        option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
      endoneof;
    endif;
// APTIOV_SERVER_OVERRIDE_RC_START : Resolve build error for Work station
#endif
// APTIOV_SERVER_OVERRIDE_RC_END : Resolve build error for Work station

  endform;

  //
  // KTI Errors form
  //
  form formid = VFR_FORMID_KTI_ERR,
    title       = STRING_TOKEN(STR_KTI_ERR_FORM_TITLE);
    subtitle text = STRING_TOKEN(STR_KTI_ERR_FORM_TITLE);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
// APTIOV_SERVER_OVERRIDE_RC_START : Extra Horizontal Lines display removal
//	subtitle text = STRING_TOKEN(STR_NULL_STRING);
// APTIOV_SERVER_OVERRIDE_RC_END : Extra Horizontal Lines display removal
    //
    // KTI link failover SMI
    //
    suppressif  ideqvallist SOCKET_COMMONRC_CONFIGURATION.SystemRasType == HEDT_RAS STANDARD_RAS CORE_RAS;
      oneof varid   = SYSTEM_CONFIGURATION.KTIFailoverSmiEn,
        prompt      = STRING_TOKEN(STR_KTIFOSMI_PROMPT),
        help        = STRING_TOKEN(STR_KTIFOSMI_HELP),
        option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
        option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED;
      endoneof;
    endif;
  endform;


  //
  // Memory Errors form
  //
  form formid = VFR_FORMID_MEM_ERROR,

    title  = STRING_TOKEN(STR_MEM_ERR_FORM_TITLE);
    subtitle text = STRING_TOKEN(STR_MEM_ERR_FORM_TITLE);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
// APTIOV_SERVER_OVERRIDE_RC_START : Extra Horizontal Lines display removal
//	subtitle text = STRING_TOKEN(STR_NULL_STRING);
// APTIOV_SERVER_OVERRIDE_RC_END : Extra Horizontal Lines display removal

    oneof varid = SYSTEM_CONFIGURATION.MemErrEn,
      prompt      = STRING_TOKEN(STR_MEM_ERR_EN_PROMPT),
      help        = STRING_TOKEN(STR_MEM_ERR_EN_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
    endoneof;

    suppressif ideqval SYSTEM_CONFIGURATION.MemErrEn == 0x00;
      oneof varid = SYSTEM_CONFIGURATION.CorrMemErrEn,
        prompt      = STRING_TOKEN(STR_MEM_COR_ERR_EN_PROMPT),
        help        = STRING_TOKEN(STR_MEM_COR_ERR_EN_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      endoneof;
    endif;

    suppressif ideqval SYSTEM_CONFIGURATION.MemErrEn == 0x00;
      suppressif ideqval SYSTEM_CONFIGURATION.CorrMemErrEn == 0x00;
        oneof varid = SYSTEM_CONFIGURATION.SpareIntSelect,
          prompt      = STRING_TOKEN(STR_SPARE_INT_PROMPT),
          help        = STRING_TOKEN(STR_SPARE_INT_HELP),
          option text = STRING_TOKEN(STR_DISABLE),    value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_SMI_SIGNAL), value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
          option text = STRING_TOKEN(STR_ERRPIN),     value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_CMCI),       value = 4, flags = RESET_REQUIRED;
        endoneof;
      endif;
    endif;

    oneof varid = SYSTEM_CONFIGURATION.PfdEn,
      prompt      = STRING_TOKEN(STR_PFD_EN_PROMPT),
        help        = STRING_TOKEN(STR_PFD_EN_HELP),
        option text = STRING_TOKEN(STR_DISABLE),    value = 0, flags = RESET_REQUIRED| MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval SYSTEM_CONFIGURATION.MemErrEn == 0x00;
      //
      // FNV Error Logging
      //
      oneof varid = SYSTEM_CONFIGURATION.FnvErrorEn,
        prompt = STRING_TOKEN(STR_FNV_ERRORS_PROMPT),
        help        = STRING_TOKEN(STR_FNV_ERRORS_HELP),
          option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
      endoneof;

      //
      // FNV Low Priority Error Signaling
      //
      oneof varid = SYSTEM_CONFIGURATION.FnvErrorLowPrioritySignal,
        prompt = STRING_TOKEN(STR_FNV_LOW_PRIORITY_SIGNAL_PROMPT),
        help        = STRING_TOKEN(STR_FNV_LOW_PRIORITY_SIGNAL_HELP),
          option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_SMI_SIGNAL), value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
          option text = STRING_TOKEN(STR_ERR0_PIN),  value = 2, flags = RESET_REQUIRED;
      endoneof;

      //
      // FNV High Priority Error Signaling
      //
      oneof varid = SYSTEM_CONFIGURATION.FnvErrorHighPrioritySignal,
        prompt = STRING_TOKEN(STR_FNV_HIGH_PRIORITY_SIGNAL_PROMPT),
        help        = STRING_TOKEN(STR_FNV_HIGH_PRIORITY_SIGNAL_PROMPT),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_SMI_SIGNAL), value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(STR_ERR0_PIN),  value = 2, flags = RESET_REQUIRED;
      endoneof;

    oneof varid = SYSTEM_CONFIGURATION.NgnAddressRangeScrub,
        prompt  = STRING_TOKEN(NGN_ADDRESS_RANGE_SCRUB_PROMPT),
        help    = STRING_TOKEN(NGN_ADDRESS_RANGE_SCRUB_HELP),
        option text = STRING_TOKEN(STR_DISABLE),          value = NGN_ADDRESS_RANGE_SCRUB_DIS, flags = MANUFACTURING | DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),           value = NGN_ADDRESS_RANGE_SCRUB_EN, flags = RESET_REQUIRED;
    endoneof;

    oneof varid = SYSTEM_CONFIGURATION.NgnHostAlertPatrolScrubUNC,
        prompt  = STRING_TOKEN(NGN_HOST_ALERT_UNC_PATROL_SCRUB_PROMPT),
        help    = STRING_TOKEN(NGN_HOST_ALERT_UNC_PATROL_SCRUB_HELP),
        option text = STRING_TOKEN(STR_DISABLE),          value = NGN_HOST_ALERT_UNC_PATROL_SCRUB_DIS, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),           value = NGN_HOST_ALERT_UNC_PATROL_SCRUB_EN, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
    endoneof;

    oneof varid = SYSTEM_CONFIGURATION.ReportAlertSPA,
        prompt  = STRING_TOKEN(REPORT_ALERT_SPA_PROMPT),
        help    = STRING_TOKEN(REPORT_ALERT_SPA_HELP),
        option text = STRING_TOKEN(STR_DISABLE),          value = NGN_HOST_ALERT_UNC_PATROL_SCRUB_DIS, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),           value = NGN_HOST_ALERT_UNC_PATROL_SCRUB_EN, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
    endoneof;

  grayoutif ideqvallist SOCKET_COMMONRC_CONFIGURATION.SystemRasType == HEDT_RAS STANDARD_RAS CORE_RAS;
      oneof varid = SYSTEM_CONFIGURATION.NgnHostAlertDpa,
        prompt  = STRING_TOKEN(NGN_HOST_ALERT_DPA_PROMPT),
        help    = STRING_TOKEN(NGN_HOST_ALERT_DPA_HELP),
        option text = STRING_TOKEN(STR_POISON),          value = NGN_HOST_ALERT_POISON_EN, flags = MANUFACTURING | DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_VIRAL),           value = NGN_HOST_ALERT_VIRAL_EN, flags = RESET_REQUIRED;
      endoneof;
  endif;

    endif;

  endform;


  //
  // IIO Errors form
  //
  form formid = VFR_FORMID_IIO_ERROR,

    title  = STRING_TOKEN(STR_IIO_ERR_FORM_TITLE);
    subtitle text = STRING_TOKEN(STR_IIO_ERR_FORM_TITLE);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

    suppressif  ideqval SYSTEM_CONFIGURATION.SystemErrorEn == 0x00 OR ideqval SYSTEM_CONFIGURATION.SystemErrorEn == 0x02;
      oneof varid = SYSTEM_CONFIGURATION.IioErrorEn,
        prompt      = STRING_TOKEN(STR_IIO_ERR_SUPPORT_EN_PROMPT),
        help        = STRING_TOKEN(STR_IIO_ERR_SUPPORT_EN_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      endoneof;
    endif;

    suppressif ideqval SYSTEM_CONFIGURATION.IioErrorEn == 0x0;
        oneof varid   = SYSTEM_CONFIGURATION.OsNativeAerSupport,
          prompt      = STRING_TOKEN(STR_IIO_OS_NATIVE_AER_SUPPORT_EN_PROMPT),
          help        = STRING_TOKEN(STR_IIO_OS_NATIVE_AER_SUPPORT_EN_HELP),
          option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
          option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED  ;
        endoneof;
    endif;

    suppressif ideqval SYSTEM_CONFIGURATION.IioErrorEn == 0x0;
      grayoutif ideqvallist SOCKET_COMMONRC_CONFIGURATION.SystemRasType == HEDT_RAS UNDEFINED_RAS;
          oneof varid   = SYSTEM_CONFIGURATION.IoMcaEn,
            prompt      = STRING_TOKEN(STR_IIO_MCA_SUPPORT_EN_PROMPT),
            help        = STRING_TOKEN(STR_IIO_MCA_SUPPORT_EN_HELP),
            option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED  | DEFAULT | MANUFACTURING;
          endoneof;
      endif;
    endif;

    suppressif ideqval SYSTEM_CONFIGURATION.IioErrorEn == 0x00;
      suppressif ideqval SYSTEM_CONFIGURATION.IoMcaEn == 0x00;
        suppressif ideqval SOCKET_PROCESSORCORE_CONFIGURATION.EnableSgx == 0x01;
          oneof varid = SYSTEM_CONFIGURATION.IioSev1Pcc,
            prompt      = STRING_TOKEN(STR_IIO_SEV1_PCC_EN_PROMPT),
            help        = STRING_TOKEN(STR_IIO_SEV1_PCC_EN_HELP),
            option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
          endoneof;
        endif;
      endif;
    endif;

    suppressif ideqval SYSTEM_CONFIGURATION.IioErrorEn == 0x00;
      oneof varid = SYSTEM_CONFIGURATION.IioErrorPin0En,
        prompt      = STRING_TOKEN(STR_IIO_ERR_PIN0_PROG_EN_PROMPT),
        help        = STRING_TOKEN(STR_IIO_ERR_PIN0_PROG_EN_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
        option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED ;
      endoneof;

      suppressif ideqval SYSTEM_CONFIGURATION.IoMcaEn == 0x01;
        oneof varid = SYSTEM_CONFIGURATION.IioErrorPin1En,
          prompt      = STRING_TOKEN(STR_IIO_ERR_PIN1_PROG_EN_PROMPT),
          help        = STRING_TOKEN(STR_IIO_ERR_PIN1_PROG_EN_HELP),
          option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
          option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED ;
        endoneof;

        oneof varid = SYSTEM_CONFIGURATION.IioErrorPin2En,
          prompt      = STRING_TOKEN(STR_IIO_ERR_PIN2_PROG_EN_PROMPT),
          help        = STRING_TOKEN(STR_IIO_ERR_PIN2_PROG_EN_HELP),
          option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
          option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED ;
        endoneof;
      endif;
    endif;

    suppressif ideqval SYSTEM_CONFIGURATION.IioErrorEn == 0x00;
      oneof varid = SYSTEM_CONFIGURATION.IioOOBMode,
        prompt      = STRING_TOKEN(STR_IIO_OOB_MODE_EN_PROMPT),
        help        = STRING_TOKEN(STR_IIO_OOB_MODE_EN_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED ;
        option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      endoneof;
    endif;

    suppressif ideqval SYSTEM_CONFIGURATION.IioErrorEn == 0x00;
     oneof varid = SYSTEM_CONFIGURATION.IioErrRegistersClearEn,
        prompt      = STRING_TOKEN(STR_IIO_ERROR_REG_CLEAR_EN_PROMPT),
        help        = STRING_TOKEN(STR_IIO_ERROR_REG_CLEAR_EN_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      endoneof;
    endif;

    suppressif ideqval SYSTEM_CONFIGURATION.IioErrorEn == 0x00;
      grayoutif ideqval SYSTEM_CONFIGURATION.SystemErrorEn == 0x00 OR ideqval SYSTEM_CONFIGURATION.SystemErrorEn == 0x02;
        oneof varid = SYSTEM_CONFIGURATION.EdpcEn,
          prompt      = STRING_TOKEN(STR_IIO_EDPC_SUPPORT_EN_PROMPT),
          help        = STRING_TOKEN(STR_IIO_EDPC_SUPPORT_EN_HELP),
          option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
          option text = STRING_TOKEN(STR_IIO_EDPC_FATAL_ONLY),  value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_IIO_EDPC_FATAL_NON_FATAL),  value = 2, flags = RESET_REQUIRED;
        endoneof;
      endif;
    endif;

    suppressif ideqval SYSTEM_CONFIGURATION.IioErrorEn == 0x00 OR ideqval SYSTEM_CONFIGURATION.EdpcEn == 00;
      oneof varid = SYSTEM_CONFIGURATION.EdpcInterrupt,
        prompt      = STRING_TOKEN(STR_IIO_EDPC_INTERRUPT_EN_PROMPT),
        help        = STRING_TOKEN(STR_IIO_EDPC_INTERRUPT_EN_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
      endoneof;
    endif;

    suppressif ideqval SYSTEM_CONFIGURATION.IioErrorEn == 0x00 OR ideqval SYSTEM_CONFIGURATION.EdpcEn == 00;
      oneof varid = SYSTEM_CONFIGURATION.EdpcErrCorMsg,
        prompt      = STRING_TOKEN(STR_IIO_EDPC_CORR_MSG_EN_PROMPT),
        help        = STRING_TOKEN(STR_IIO_EDPC_CORR_MSG_EN_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),   value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
      endoneof;
    endif;

    suppressif ideqval SYSTEM_CONFIGURATION.IioErrorEn == 0x00;
      oneof varid = SYSTEM_CONFIGURATION.IioIrpErrorEn,
        prompt      = STRING_TOKEN(STR_IIO_COH_INTERFACE_ERR_EN_PROMPT),
        help        = STRING_TOKEN(STR_IIO_COH_INTERFACE_ERR_EN_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      endoneof;
    endif;

    suppressif ideqval SYSTEM_CONFIGURATION.IioErrorEn == 0x00;
    grayoutif ideqval  SYSTEM_CONFIGURATION.IioIrpErrorEn == 0x00;
      oneof varid = SYSTEM_CONFIGURATION.irpp0_parityError,
          prompt = STRING_TOKEN(STR_LOG_IRP0_PARITY_ERROR_PROMPT),
          help        = STRING_TOKEN(STR_LOG_IRP_PARITY_ERROR_HELP),
          option text = STRING_TOKEN(STR_DISABLE),  value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED  | DEFAULT | MANUFACTURING;
      endoneof;

      oneof varid = SYSTEM_CONFIGURATION.irpp0_qtOverflow,
          prompt = STRING_TOKEN(STR_LOG_IRP0_QTOVERFLOW_ERROR_PROMPT),
          help        = STRING_TOKEN(STR_LOG_IRP_QTOVERFLOW_ERROR_HELP),
          option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED  | DEFAULT | MANUFACTURING;
      endoneof;

      oneof varid = SYSTEM_CONFIGURATION.irpp0_unexprsp,
          prompt = STRING_TOKEN(STR_LOG_IRP0_UNEXPRSP_ERROR_PROMPT),
          help        = STRING_TOKEN(STR_LOG_IRP_UNEXPRSP_ERROR_HELP),
          option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED  | DEFAULT | MANUFACTURING;
      endoneof;

      oneof varid = SYSTEM_CONFIGURATION.irpp0_csraccunaligned,
          prompt = STRING_TOKEN(STR_LOG_IRP0_UNALIGNEDACC_ERROR_PROMPT),
          help        = STRING_TOKEN(STR_LOG_IRP_UNALIGNEDACC_ERROR_HELP),
          option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED  | DEFAULT | MANUFACTURING;
      endoneof;

      oneof varid = SYSTEM_CONFIGURATION.irpp0_unceccCs0,
          prompt = STRING_TOKEN(STR_LOG_IRP0_UNCECCCS0_ERROR_PROMPT),
          help        = STRING_TOKEN(STR_LOG_IRP_UNCECC_ERROR_HELP),
          option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED  | DEFAULT | MANUFACTURING;
      endoneof;

      oneof varid = SYSTEM_CONFIGURATION.irpp0_unceccCs1,
          prompt = STRING_TOKEN(STR_LOG_IRP0_UNCECCCS1_ERROR_PROMPT),
          help        = STRING_TOKEN(STR_LOG_IRP_UNCECC_ERROR_HELP),
          option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED  | DEFAULT | MANUFACTURING;
      endoneof;

      oneof varid = SYSTEM_CONFIGURATION.irpp0_rcvdpoison,
          prompt = STRING_TOKEN(STR_LOG_IRP0_RCVDPOISON_ERROR_PROMPT),
          help        = STRING_TOKEN(STR_LOG_IRP_RCVDPOISON_ERROR_HELP),
          option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED  | DEFAULT | MANUFACTURING;
      endoneof;

      oneof varid = SYSTEM_CONFIGURATION.irpp0_crreccCs0,
          prompt = STRING_TOKEN(STR_LOG_IRP0_CRRECCCS0_ERROR_PROMPT),
          help        = STRING_TOKEN(STR_LOG_IRP_CRRECC_ERROR_HELP),
          option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      endoneof;

      oneof varid = SYSTEM_CONFIGURATION.irpp0_crreccCs1,
          prompt = STRING_TOKEN(STR_LOG_IRP0_CRRECCCS1_ERROR_PROMPT),
          help        = STRING_TOKEN(STR_LOG_IRP_CRRECC_ERROR_HELP),
          option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      endoneof;
    endif; //grayoutif IioIrpErrorEn
    endif;

    suppressif ideqval SYSTEM_CONFIGURATION.IioErrorEn == 0x00;
      oneof varid = SYSTEM_CONFIGURATION.IioMiscErrorEn,
        prompt      = STRING_TOKEN(STR_IIO_MISC_ERR_EN_PROMPT),
        help        = STRING_TOKEN(STR_IIO_MISC_ERR_EN_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      endoneof;
    endif;

    suppressif ideqval SYSTEM_CONFIGURATION.IioErrorEn == 0x00;
      oneof varid = SYSTEM_CONFIGURATION.IioVtdErrorEn,
        prompt      = STRING_TOKEN(STR_IIO_VTD_ERR_EN_PROMPT),
        help        = STRING_TOKEN(STR_IIO_VTD_ERR_EN_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      endoneof;
    endif;

    suppressif ideqval SYSTEM_CONFIGURATION.IioErrorEn == 0x00;
      oneof varid = SYSTEM_CONFIGURATION.IioDmaErrorEn,
        prompt      = STRING_TOKEN(STR_IIO_DMA_ERR_EN_PROMPT),
        help        = STRING_TOKEN(STR_IIO_DMA_ERR_EN_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      endoneof;

      oneof varid = SYSTEM_CONFIGURATION.IioDmiErrorEn,
        prompt      = STRING_TOKEN(STR_IIO_DMI_ERR_EN_PROMPT),
        help        = STRING_TOKEN(STR_IIO_DMI_ERR_EN_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      endoneof;
    endif;

    suppressif ideqval SYSTEM_CONFIGURATION.IioErrorEn == 0x00;
      oneof varid = SYSTEM_CONFIGURATION.PcieErrEn,
        prompt      = STRING_TOKEN(STR_PCIE_ERR_EN_PROMPT),
        help        = STRING_TOKEN(STR_PCIE_ERR_EN_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      endoneof;
    endif;

    suppressif ideqval SYSTEM_CONFIGURATION.IioErrorEn == 0x00;
      oneof varid = SYSTEM_CONFIGURATION.IioPcieAddCorrErrorEn,
        prompt      = STRING_TOKEN(STR_IIO_PCIE_ADD_COR_ERR_EN_PROMPT),
        help        = STRING_TOKEN(STR_IIO_PCIE_ADD_COR_ERR_EN_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      endoneof;
    endif;

    suppressif ideqval SYSTEM_CONFIGURATION.IioErrorEn == 0x00;
      oneof varid = SYSTEM_CONFIGURATION.IioPcieAddUnCorrEn,
        prompt      = STRING_TOKEN(STR_IIO_PCIE_ADD_UR_ERR_EN_PROMPT),
        help        = STRING_TOKEN(STR_IIO_PCIE_ADD_UR_ERR_EN_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      endoneof;
    endif;


    suppressif ideqval SYSTEM_CONFIGURATION.IioErrorEn == 0x00;
      oneof varid = SYSTEM_CONFIGURATION.IioPcieAddRcvComWithUr,
        prompt      = STRING_TOKEN(STR_IIO_PCIE_ADD_RCV_COM_WITH_UR_PROMPT),
        help        = STRING_TOKEN(STR_IIO_PCIE_ADD_RCV_COM_WITH_UR_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
        option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
      endoneof;
    endif;

    suppressif ideqval SYSTEM_CONFIGURATION.IioErrorEn == 0;
      oneof varid = SYSTEM_CONFIGURATION.ItcOtcCaMaEnable,
        prompt      = STRING_TOKEN (STR_IIO_ITC_OTC_CA_MA_PROMPT),
        help        = STRING_TOKEN (STR_IIO_ITC_OTC_CA_MA_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
        option text = STRING_TOKEN (STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
      endoneof;
    endif;

    suppressif ideqval SYSTEM_CONFIGURATION.IioErrorEn == 0x00;
      oneof varid = SYSTEM_CONFIGURATION.PsfUrEnable,
        prompt      = STRING_TOKEN(STR_IIO_PSF_UR_PROMPT),
        help        = STRING_TOKEN(STR_IIO_PSF_UR_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      endoneof;
    endif;

    suppressif ideqval SYSTEM_CONFIGURATION.IioErrorEn == 0;
      oneof varid = SYSTEM_CONFIGURATION.PmsbRouterParityErrEn,
        prompt      = STRING_TOKEN (STR_IIO_PMSB_RTR_PAR_ERR_PROMPT),
        help        = STRING_TOKEN (STR_IIO_PMSB_RTR_PAR_ERR_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      endoneof;
    endif;

  endform;


  //
  // PCI Errors form
  //
  form formid = VFR_FORMID_PCI_ERROR,

    title  = STRING_TOKEN(STR_PCI_ERR_FORM_TITLE);
    subtitle text = STRING_TOKEN(STR_PCI_ERR_FORM_TITLE);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

    oneof varid = SYSTEM_CONFIGURATION.PcieCorrErrEn,
      prompt      = STRING_TOKEN(STR_PCIEX_COR_ERR_PROMPT),
      help        = STRING_TOKEN(STR_PCIEX_COR_ERR_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
    endoneof;

    oneof varid = SYSTEM_CONFIGURATION.PcieUncorrErrEn,
      prompt      = STRING_TOKEN(STR_PCIEX_UR_ERR_PROMPT),
      help        = STRING_TOKEN(STR_PCIEX_UR_ERR_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
    endoneof;

    oneof varid = SYSTEM_CONFIGURATION.PcieFatalErrEn,
      prompt      = STRING_TOKEN(STR_PCIEX_FATAL_ERR_PROMPT),
      help        = STRING_TOKEN(STR_PCIEX_FATAL_ERR_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
    endoneof;

    suppressif ideqval SYSTEM_CONFIGURATION.PcieCorrErrEn == 0x00;
      oneof varid = SYSTEM_CONFIGURATION.PcieCorErrCntr,
        prompt = STRING_TOKEN(STR_PCIE_COR_ERR_CNTR_PROMPT),
        help = STRING_TOKEN(STR_PCIE_COR_ERR_CNTR_HELP),
        option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
        option text = STRING_TOKEN(STR_ENABLE), value = 1, flags = RESET_REQUIRED;
      endoneof;
    endif;

    suppressif ideqval SYSTEM_CONFIGURATION.PcieCorrErrEn == 0x00;
      numeric varid = SYSTEM_CONFIGURATION.PcieCorErrThres,
        prompt  = STRING_TOKEN(STR_PCIE_COR_ERR_THRES_PROMPT),
        help    = STRING_TOKEN(STR_PCIE_COR_ERR_THRES_HELP),
        flags   = DISPLAY_UINT_HEX | RESET_REQUIRED,
        minimum = 0,
        maximum = 0x7FFF,
        step    = 0,
        default = 1, defaultstore = MyStandardDefault,
        default = 1, defaultstore = MyManufactureDefault,
      endnumeric;
    endif;

    suppressif ideqval SYSTEM_CONFIGURATION.PcieCorrErrEn == 0;

      oneof varid   = SYSTEM_CONFIGURATION.PcieCorErrLimitEn,
        prompt      = STRING_TOKEN (STR_PCIE_COR_ERR_LIMIT_EN_PROMPT),
        help        = STRING_TOKEN (STR_PCIE_COR_ERR_LIMIT_EN_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
        option text = STRING_TOKEN (STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      grayoutif ideqval SYSTEM_CONFIGURATION.PcieCorErrLimitEn == 0;
        numeric varid = SYSTEM_CONFIGURATION.PcieCorErrLimit,
          prompt      = STRING_TOKEN (STR_PCIE_COR_ERR_LIMIT_PROMPT),
          help        = STRING_TOKEN (STR_PCIE_COR_ERR_LIMIT_HELP),
          flags       = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 0xFFFFFFFF,
          step        = 0,
          default     = 80, defaultstore = MyStandardDefault,
          default     = 80, defaultstore = MyManufactureDefault,
        endnumeric;
      endif; // grayoutif PcieCorErrLimitEn == 0

    endif; // suppressif PcieCorrErrEn == 0

    oneof varid = SYSTEM_CONFIGURATION.PcieAerCorrErrEn,
      prompt      = STRING_TOKEN(STR_PCIE_AER_COR_ERR_EN_PROMPT),
      help        = STRING_TOKEN(STR_PCIE_AER_COR_ERR_EN_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
    endoneof;

    oneof varid = SYSTEM_CONFIGURATION.PcieAerNfatErrEn,
      prompt      = STRING_TOKEN(STR_PCIE_AER_NFATL_ERR_EN_PROMPT),
      help        = STRING_TOKEN(STR_PCIE_AER_NFATL_ERR_EN_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
    endoneof;

    oneof varid = SYSTEM_CONFIGURATION.PcieAerFatErrEn,
      prompt      = STRING_TOKEN(STR_PCIE_AER_FATL_ERR_EN_PROMPT),
      help        = STRING_TOKEN(STR_PCIE_AER_FATL_ERR_EN_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
    endoneof;

    oneof varid = SYSTEM_CONFIGURATION.PcieAerAdNfatErrEn,
      prompt      = STRING_TOKEN(STR_PCIE_AER_ANF_ERR_EN_PROMPT),
      help        = STRING_TOKEN(STR_PCIE_AER_ANF_ERR_EN_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid = SYSTEM_CONFIGURATION.PcieAerEcrcEn,
      prompt      = STRING_TOKEN(STR_PCIE_AER_ECRC_ERR_EN_PROMPT),
      help        = STRING_TOKEN(STR_PCIE_AER_ECRC_ERR_EN_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
    endoneof;


    oneof varid = SYSTEM_CONFIGURATION.PcieAerSurpriseLinkDownEn,
      prompt      = STRING_TOKEN(STR_PCIE_AER_SLDP_ERR_EN_PROMPT),
      help        = STRING_TOKEN(STR_PCIE_AER_SLDP_ERR_EN_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid = SYSTEM_CONFIGURATION.PcieAerUreEn,
      prompt      = STRING_TOKEN(STR_PCIE_AER_UR_ERR_EN_PROMPT),
      help        = STRING_TOKEN(STR_PCIE_AER_UR_ERR_EN_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid = SYSTEM_CONFIGURATION.PcieAerSurpriseLinkDownEn,
      prompt      = STRING_TOKEN(STR_PCIE_AER_SLDP_ERR_EN_PROMPT),
      help        = STRING_TOKEN(STR_PCIE_AER_SLDP_ERR_EN_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid     = SYSTEM_CONFIGURATION.PropagateSerr,
      prompt      = STRING_TOKEN(STR_ENAB_SERR_PROP_PROMPT),
      help        = STRING_TOKEN(STR_ENAB_SERR_PROP_HELP),
      option text = STRING_TOKEN(STR_ENABLED_STRING),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      option text = STRING_TOKEN(STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED;
    endoneof;

    grayoutif ideqval SYSTEM_CONFIGURATION.PropagateSerr == 0;
    oneof varid     = SYSTEM_CONFIGURATION.PropagatePerr,
      prompt      = STRING_TOKEN(STR_ENAB_PERR_PROP_PROMPT),
      help        = STRING_TOKEN(STR_ENAB_PERR_PROP_HELP),
      option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
    endoneof;
    endif;

    //
    // Leaky Bucket Feature
    //
    subtitle text = STRING_TOKEN (STR_NULL_STRING);
    subtitle text = STRING_TOKEN (STR_PCIE_LEAKY_BUCKET_SUBTITLE);

    numeric varid = SYSTEM_CONFIGURATION.ExpectedBer,
      prompt      = STRING_TOKEN (STR_PCIE_EXPECTED_BER_PROMPT),
      help        = STRING_TOKEN (STR_PCIE_EXPECTED_BER_HELP),
      flags       = RESET_REQUIRED,
      minimum     = 0x0000000000000000,
      maximum     = 0x0003FFFFFFFFFFFF,
      step        = 0,
      default     = 0x00000007FFFFFFFF, defaultstore = MyStandardDefault,
      default     = 0x00000007FFFFFFFF, defaultstore = MyManufactureDefault,
    endnumeric;

    numeric varid = SYSTEM_CONFIGURATION.Gen12TimeWindow,
      prompt      = STRING_TOKEN (STR_PCIE_GEN12_TIME_WINDOW_PROMPT),
      help        = STRING_TOKEN (STR_PCIE_GEN12_TIME_WINDOW_HELP),
      flags       = RESET_REQUIRED,
      minimum     = 0x00000000,
      maximum     = 0x000FFFFF,
      step        = 0,
      default     = 0x0000FFFF, defaultstore = MyStandardDefault,
      default     = 0x0000FFFF, defaultstore = MyManufactureDefault,
    endnumeric;

    numeric varid = SYSTEM_CONFIGURATION.Gen34TimeWindow,
      prompt      = STRING_TOKEN (STR_PCIE_GEN34_TIME_WINDOW_PROMPT),
      help        = STRING_TOKEN (STR_PCIE_GEN34_TIME_WINDOW_HELP),
      flags       = RESET_REQUIRED,
      minimum     = 0x00,
      maximum     = 0xFF,
      step        = 0,
      default     = 0x02, defaultstore = MyStandardDefault,
      default     = 0x02, defaultstore = MyManufactureDefault,
    endnumeric;

    numeric varid = SYSTEM_CONFIGURATION.Gen12ErrorThreshold,
      prompt      = STRING_TOKEN (STR_PCIE_GEN12_ERROR_THRESHOLD_PROMPT),
      help        = STRING_TOKEN (STR_PCIE_GEN12_ERROR_THRESHOLD_HELP),
      flags       = RESET_REQUIRED,
      minimum     = 0x00,
      maximum     = 0x1F,
      step        = 0,
      default     = 0x00, defaultstore = MyStandardDefault,
      default     = 0x00, defaultstore = MyManufactureDefault,
    endnumeric;

    numeric varid = SYSTEM_CONFIGURATION.Gen34ErrorThreshold,
      prompt      = STRING_TOKEN (STR_PCIE_GEN34_ERROR_THRESHOLD_PROMPT),
      help        = STRING_TOKEN (STR_PCIE_GEN34_ERROR_THRESHOLD_HELP),
      flags       = RESET_REQUIRED,
      minimum     = 0x00,
      maximum     = 0x1F,
      step        = 0,
      default     = 0x10, defaultstore = MyStandardDefault,
      default     = 0x10, defaultstore = MyManufactureDefault,
    endnumeric;

    oneof varid = SYSTEM_CONFIGURATION.Gen34ReEqualization,
      prompt      = STRING_TOKEN (STR_PCIE_GEN34_RE_EQUALIZATION_PROMPT),
      help        = STRING_TOKEN (STR_PCIE_GEN34_RE_EQUALIZATION_HELP),
      option text = STRING_TOKEN (STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (STR_ENABLE),  value = 1,  flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
    endoneof;

    oneof varid = SYSTEM_CONFIGURATION.Gen2LinkDegradation,
      prompt      = STRING_TOKEN (STR_PCIE_GEN2_LINK_DEGRADATION_PROMPT),
      help        = STRING_TOKEN (STR_PCIE_GEN2_LINK_DEGRADATION_HELP),
      option text = STRING_TOKEN (STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (STR_ENABLE),  value = 1,  flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
    endoneof;

    oneof varid = SYSTEM_CONFIGURATION.Gen3LinkDegradation,
      prompt      = STRING_TOKEN (STR_PCIE_GEN3_LINK_DEGRADATION_PROMPT),
      help        = STRING_TOKEN (STR_PCIE_GEN3_LINK_DEGRADATION_HELP),
      option text = STRING_TOKEN (STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (STR_ENABLE),  value = 1,  flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
    endoneof;

    oneof varid = SYSTEM_CONFIGURATION.Gen4LinkDegradation,
      prompt      = STRING_TOKEN (STR_PCIE_GEN4_LINK_DEGRADATION_PROMPT),
      help        = STRING_TOKEN (STR_PCIE_GEN4_LINK_DEGRADATION_HELP),
      option text = STRING_TOKEN (STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (STR_ENABLE),  value = 1,  flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
    endoneof;

    subtitle text = STRING_TOKEN (STR_NULL_STRING);

  endform;

  //
  // Error Control Setting form
  //
  form formid = VFR_FORMID_ERROR_CONTROL,

    title  = STRING_TOKEN(STR_ERR_CONTROL_FORM_TITLE);
    subtitle text = STRING_TOKEN(STR_ERR_CONTROL_FORM_TITLE);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);

    oneof varid = SYSTEM_CONFIGURATION.Ce2LmLoggingEn,
      prompt      = STRING_TOKEN(STR_2LM_CORR_ERROR_LOGGING_PROMPT),
      help        = STRING_TOKEN(STR_2LM_CORR_ERROR_LOGGING_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
    endoneof;

    oneof varid = SYSTEM_CONFIGURATION.KtiFirstCeLatchEn,
      prompt      = STRING_TOKEN(STR_KTI_LATCH_FIRST_CE_PROMPT),
      help        = STRING_TOKEN(STR_KTI_LATCH_FIRST_CE_HELP),
      option text = STRING_TOKEN(STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
    endoneof;

    suppressif ideqval SYSTEM_CONFIGURATION.PoisonEn == 0x00;
      oneof varid = SYSTEM_CONFIGURATION.PatrolScrubErrorReporting,
        prompt = STRING_TOKEN(STR_PATROL_SCRUB_ERROR_REPORTING_PROMPT),
        help        = STRING_TOKEN(STR_PATROL_SCRUB_ERROR_REPORTING_HELP),
        option text = STRING_TOKEN(STR_CE), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_UCNA), value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        suppressif ideqval SYSTEM_CONFIGURATION.LmceEn == 0x01;
          option text = STRING_TOKEN(STR_SRAO),  value = 2, flags = RESET_REQUIRED;
        endif;
      endoneof;
    endif;

    oneof varid = SYSTEM_CONFIGURATION.LlcEwbErrorControl,
      prompt      = STRING_TOKEN(STR_LLC_EWB_ERROR_CONTROL_PROMPT),
      help        = STRING_TOKEN(STR_LLC_EWB_ERROR_CONTROL_HELP),
      option text = STRING_TOKEN(STR_UCNA), value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      option text = STRING_TOKEN(STR_SRAO), value = 1, flags = RESET_REQUIRED;
    endoneof;
  endform;

  //
  // Crash Log Setting form
  //
  form formid = VFR_FORMID_CRASHLOG_SETTING,

    title  = STRING_TOKEN(STR_CRASHLOG_FORM_TITLE);
    subtitle text = STRING_TOKEN(STR_CRASHLOG_FORM_TITLE);
    subtitle text = STRING_TOKEN(STR_HORIZONTAL_LINE);
    subtitle text = STRING_TOKEN(STR_NULL_STRING);


    oneof varid = SYSTEM_CONFIGURATION.CrashLogFeature,
      prompt      = STRING_TOKEN (STR_CRASH_LOG_PROMPT),
      help        = STRING_TOKEN (STR_CRASH_LOG_HELP),
      option text = STRING_TOKEN (STR_DISABLE), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
    endoneof;

    suppressif ideqval SYSTEM_CONFIGURATION.CrashLogFeature == 0;
      oneof varid = SYSTEM_CONFIGURATION.CrashLogOnAllReset,
        prompt      = STRING_TOKEN (STR_COLLECT_CRASH_LOG_ON_ALL_RESET_PROMPT),
        help        = STRING_TOKEN (STR_COLLECT_CRASH_LOG_ON_ALL_RESET_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      endoneof;
    endif;

    suppressif ideqval SYSTEM_CONFIGURATION.CrashLogFeature == 0;
      oneof varid = SYSTEM_CONFIGURATION.CrashLogClear,
        prompt      = STRING_TOKEN (STR_CRASHLOG_CLEAR_PROMPT),
        help        = STRING_TOKEN (STR_CRASHLOG_CLEAR_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      endoneof;
    endif;

    suppressif ideqval SYSTEM_CONFIGURATION.CrashLogFeature == 0;
      oneof varid = SYSTEM_CONFIGURATION.CrashLogReArm,
        prompt      = STRING_TOKEN (STR_CRASHLOG_REARM_PROMPT),
        help        = STRING_TOKEN (STR_CRASHLOG_REARM_HELP),
        option text = STRING_TOKEN (STR_DISABLE), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (STR_ENABLE),  value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      endoneof;
    endif;

  endform;
