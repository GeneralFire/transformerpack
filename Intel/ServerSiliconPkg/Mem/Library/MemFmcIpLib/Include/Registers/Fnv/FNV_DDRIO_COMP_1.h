
/** @file
  FNV_DDRIO_COMP_1.h

  @copyright
  INTEL CONFIDENTIAL
  Copyright 2007 - 2018 Intel Corporation. <BR>
  
  The source code contained or described herein and all documents related to the
  source code ("Material") are owned by Intel Corporation or its suppliers or
  licensors. Title to the Material remains with Intel Corporation or its suppliers
  and licensors. The Material may contain trade secrets and proprietary    and
  confidential information of Intel Corporation and its suppliers and licensors,
  and is protected by worldwide copyright and trade secret laws and treaty
  provisions. No part of the Material may be used, copied, reproduced, modified,
  published, uploaded, posted, transmitted, distributed, or disclosed in any way
  without Intel's prior express written permission.
  
  No license under any patent, copyright, trade secret or other intellectual
  property right is granted to or conferred upon you by disclosure or delivery
  of the Materials, either expressly, by implication, inducement, estoppel or
  otherwise. Any license under such intellectual property rights must be
  express and approved by Intel in writing.
  
  Unless otherwise agreed by Intel in writing, you may not remove or alter
  this notice or any other notice embedded in Materials by Intel or
  Intel's suppliers or licensors in any way.
  
  This file contains Silicon register definitions.
  
  This is a generated file; please do not modify it directly.
  
**/

/* The following security policy groups are used by registers in this file:     */

/* BWV Security Policy Groups:                                                  */


#ifndef _FNV_DDRIO_COMP_1_h
#define _FNV_DDRIO_COMP_1_h
#include "DataTypes.h"


/* DDRCRDATACOMP1_CH_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0108)                                                        */
/* Register default value on BWV: 0x0C00C000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* This CR holds the second (of two) 32-bit register set for Data fub Compensation
*/


#define DDRCRDATACOMP1_CH_FNV_DDRIO_COMP_1_REG 0x1B140108

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd_0 : 12;

                            /* Bits[11:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 panicdrvdn : 10;

                            /* Bits[21:12], Access Type=RWV, default=0x0000000C*/

                            /*
                               Sets the resistive value of the VssHi Panic
                               driver pulldown to move VssHi by a precise dV
                               when it gets out of spec
                            */
    UINT32 panicdrvup : 10;

                            /* Bits[31:22], Access Type=RWV, default=0x00000030*/

                            /*
                               Sets the resistive value of the VssHi Panic
                               driver pullup to move VssHi by a precise dV when
                               it gets out of spec.
                            */

  } Bits;
  UINT32 Data;

} DDRCRDATACOMP1_CH_FNV_DDRIO_COMP_1_STRUCT;


/* DDRCRCTLCOMP_CH_FNV_DDRIO_COMP_1_REG supported on:                           */
/*      BWV (0x402b0110)                                                        */
/* Register default value on BWV: 0x34000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* This CR holds the 32-bit register set for Ctl fub Compensation
*/


#define DDRCRCTLCOMP_CH_FNV_DDRIO_COMP_1_REG 0x1B140110

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd_0 : 28;

                            /* Bits[27:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ctlstatlegen : 2;

                            /* Bits[29:28], Access Type=RWV, default=0x00000003*/

                            /* Ctl Comp Loop Static Leg Config */
    UINT32 rcompvtt : 1;

                            /* Bits[30:30], Access Type=RWV, default=0x00000000*/

                            /*
                               Select COMP VTT termination mode. This is an
                               active low CSR. Default value is 1(disabled) as
                               VTT mode is never enabled on ngn side
                            */
    UINT32 rsvd_31 : 1;

                            /* Bits[31:31], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DDRCRCTLCOMP_CH_FNV_DDRIO_COMP_1_STRUCT;


/* DDRCRCOMPCTL0_CH_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b0118)                                                        */
/* Register default value on BWV: 0x40800007                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* This CR holds Compensation Controls like Vref Offset etc
*/


#define DDRCRCOMPCTL0_CH_FNV_DDRIO_COMP_1_REG 0x1B140118

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 lvmodevalid : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000001*/

                            /* desc is missing */
    UINT32 rsvd_1 : 2;

                            /* Bits[2:1], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 visabusenable : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /* Enable Visa debug bus LCB for COMP fub */
    UINT32 dqodtupdnoff : 6;

                            /* Bits[9:4], Access Type=RW, default=0x00000000*/

                            /* Offset between DqOdt Up and Down */
    UINT32 fixodtd : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /*
                               Skip DqRcomOdtDn compensation and use DqOdtDn =
                               DqOdtUp + DqOdtUpDnOff
                            */
    UINT32 dqdrvpupvref : 7;

                            /* Bits[17:11], Access Type=RW, default=0x00000000*/

                            /*
                               2's compliment analog offset for DqRcompDrvUp
                               Vref with step size of Vccddq/64
                            */
    UINT32 dqdrvpdnvref : 7;

                            /* Bits[24:18], Access Type=RW, default=0x00000020*/

                            /*
                               2's compliment analog offset for DqRcompDrvDown
                               Vref with step size of Vccddq/96
                            */
    UINT32 dqodtpupvref : 7;

                            /* Bits[31:25], Access Type=RW, default=0x00000020*/

                            /*
                               2's compliment analog offset for DqOdtcompDrvUp
                               Vref with step size of Vccddq/96
                            */

  } Bits;
  UINT32 Data;

} DDRCRCOMPCTL0_CH_FNV_DDRIO_COMP_1_STRUCT;

/* DDRCRCOMPCTL1_CH_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b011c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* This CR holds Compensation Controls like Scomp Offset etc
*/


#define DDRCRCOMPCTL1_CH_FNV_DDRIO_COMP_1_REG 0x1B14011C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 dqscompcells : 4;

                            /* Bits[3:0], Access Type=RW, default=0x00000000*/

                            /*
                               # of delay cells in DqScomp delayline. (Min
                               Setting > 3)
                            */
    UINT32 dqscomppc : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               When set (1'b1), SCOMP locks to a cycle,
                               otherwise locks to a phase
                            */
    UINT32 cmdscompcells : 4;

                            /* Bits[8:5], Access Type=RW, default=0x00000000*/

                            /*
                               # of delay cells in CmdScomp delayline =
                               CmdScompCells
                            */
    UINT32 cmdscomppc : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /*
                               When set (1'b1), SCOMP locks to a cycle,
                               otherwise locks to a phase
                            */
    UINT32 ctlscompcells : 4;

                            /* Bits[13:10], Access Type=RW, default=0x00000000*/

                            /*
                               # of delay cells in CtlScomp delayline =
                               CtlScompCells
                            */
    UINT32 ctlscomppc : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000000*/

                            /*
                               When set (1'b1), SCOMP locks to a cycle,
                               otherwise locks to a phase
                            */
    UINT32 rsvd_15 : 6;

                            /* Bits[20:15], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 tcovref : 7;

                            /* Bits[27:21], Access Type=RW, default=0x00000000*/

                            /*
                               Vref control for TcoComp loop, can be used to
                               offset FSM result
                            */
    UINT32 rsvd_28 : 4;

                            /* Bits[31:28], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DDRCRCOMPCTL1_CH_FNV_DDRIO_COMP_1_STRUCT;

/* DDRCRCOMPCTL2_CH_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b0120)                                                        */
/* Register default value on BWV: 0x8204083F                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* This CR holds Compensation Controls like ODT static leg, Rxbias etc
*/


#define DDRCRCOMPCTL2_CH_FNV_DDRIO_COMP_1_REG 0x1B140120

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 odtstatlegen : 2;

                            /* Bits[1:0], Access Type=RW, default=0x00000003*/

                            /*
                               ODT Comp Loop Staic Leg Config. 00: 0-leg; 01:
                               3-leg; 10: 6-leg; 11: 12-leg
                            */
    UINT32 txdqstatlegen : 2;

                            /* Bits[3:2], Access Type=RW, default=0x00000003*/

                            /*
                               DQ Comp Loop Staic Leg Config. 00: 0-leg; 01:
                               3-leg; 10: 6-leg; 11: 12-leg
                            */
    UINT32 cmdstatlegen : 2;

                            /* Bits[5:4], Access Type=RW, default=0x00000003*/

                            /*
                               Cmd Comp Loop Staic Leg Config. 00: 0-leg; 01:
                               3-leg; 10: 6-leg; 11: 12-leg
                            */
    UINT32 dqodtpdnvref : 7;

                            /* Bits[12:6], Access Type=RW, default=0x00000020*/

                            /*
                               unsiged analog offset for DqOdtRcompDrvDown Vref
                               with step size of 0.75mW
                            */
    UINT32 clkdrvpupvref : 7;

                            /* Bits[19:13], Access Type=RW, default=0x00000020*/

                            /*
                               unsiged analog offset for ClkRcompDrvUp Vref
                               with step size of 0.75mV
                            */
    UINT32 clkdrvpdnvref : 7;

                            /* Bits[26:20], Access Type=RW, default=0x00000020*/

                            /*
                               unsigned analog offset for ClkRcompDrvDown Vref
                               with step size of 0.75mV
                            */
    UINT32 rsvd_27 : 1;

                            /* Bits[27:27], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 lvlshft_holden : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               level shift hold enable[br] Holds the HV control
                               values and power down the level shifters.[br]
                               Apply '1' after training. Slow timing - not
                               advised for fast enabling.
                            */
    UINT32 forceodton : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Force ODT on used in dq/clk/ctl rcomp AIP */
    UINT32 ddr3nren : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /* DDR3 Narrow Range */
    UINT32 highbwen : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000001*/

                            /* highbwen for panicvtcomp */

  } Bits;
  UINT32 Data;

} DDRCRCOMPCTL2_CH_FNV_DDRIO_COMP_1_STRUCT;

/* DDRCRCOMPVSSHI_CH_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0124)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* This CR holds Compensation Controls for VssHi
*/


#define DDRCRCOMPVSSHI_CH_FNV_DDRIO_COMP_1_REG 0x1B140124

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 panicdrvdnvref : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000000*/

                            /*
                               Unsigned integer to select Vref for Panic
                               DriverDn compensation. Step size of VccIO/128
                            */
    UINT32 panicdrvupvref : 6;

                            /* Bits[11:6], Access Type=RW, default=0x00000000*/

                            /*
                               Unsigned integer to select Vref for Panic
                               DriverUp compensation. Step size of VccIO/128
                            */
    UINT32 vtoffset : 5;

                            /* Bits[16:12], Access Type=RW, default=0x00000000*/

                            /*
                               Digital Offset to VtComp value. Unsigned
                               interger in the VccIO domain with a step size of
                               VccIO/128
                            */
    UINT32 vtslopea : 3;

                            /* Bits[19:17], Access Type=RW, default=0x00000000*/

                            /*
                               Slope adjustment to the VtComp value. {0: 0, 1:
                               -1/4, 2: -1/8, 3: -1/16, 4: +1/2, 5: +1/4, 6:
                               +1/8, 7: +1/16}
                            */
    UINT32 vtslopeb : 3;

                            /* Bits[22:20], Access Type=RW, default=0x00000000*/

                            /*
                               Slope adjustment to the VtComp value. {0: 0, 1:
                               -1/4, 2: -1/8, 3: -1/16, 4: +1/2, 5: +1/4, 6:
                               +1/8, 7: +1/16}
                            */
    UINT32 clkdiv : 3;

                            /* Bits[25:23], Access Type=RW, default=0x00000000*/

                            /* divide by clk select for panicvt comp */
    UINT32 ddrdmvrfs3localpwrgoodoverride : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /*
                               When this CSR bit is cleared, S3LocalVcc in DIMM
                               Vref is always on
                            */
    UINT32 disablemcdfxclkqnnnh : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /* Spare */
    UINT32 spare : 4;

                            /* Bits[31:28], Access Type=RW, default=0x00000000*/

                            /* Spare */

  } Bits;
  UINT32 Data;

} DDRCRCOMPVSSHI_CH_FNV_DDRIO_COMP_1_STRUCT;

/* DDRCRCOMPOVR_CH_FNV_DDRIO_COMP_1_REG supported on:                           */
/*      BWV (0x402b0128)                                                        */
/* Register default value on BWV: 0x210F0000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* This CR holds bits for Override Enable for different Compensations
*/


#define DDRCRCOMPOVR_CH_FNV_DDRIO_COMP_1_REG 0x1B140128

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 dqdrvu : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Override Data Rcomp DriveUp Value */
    UINT32 dqdrvd : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /* Override Data Rcomp DriveDn Value */
    UINT32 dqodtu : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /* Override Data Rcomp OdtUp Value */
    UINT32 dqodtd : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /* Override Data Rcomp OdtDn Value */
    UINT32 cmddrvu : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /* Override Cmd Rcomp DriveUp Value */
    UINT32 cmddrvd : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /* Override Cmd Rcomp DriveDn Value */
    UINT32 ctldrvu : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /* Override Ctl Rcomp DriveUp Value */
    UINT32 ctldrvd : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /* Override Ctl Rcomp DriveDn Value */
    UINT32 clkdrvu : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /* Override Clk Rcomp DriveUp Value */
    UINT32 clkdrvd : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* Override Clk Rcomp DriveDn Value */
    UINT32 dqsr : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /* Override Data Scomp Value */
    UINT32 cmdsr : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /* Override Cmd Scomp Value */
    UINT32 ctlsr : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /* Override Ctl Scomp Value */
    UINT32 clksr : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /* Override Clk Scomp Value */
    UINT32 dqtcooff : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000000*/

                            /* Override Data TcoOffset Value */
    UINT32 cmdtcooff : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /* Override Cmd TcoOffset Value */
    UINT32 dqtco : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000001*/

                            /* Override Data Tco Value */
    UINT32 cmdtco : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000001*/

                            /* Override Cmd Tco Value */
    UINT32 ctltco : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000001*/

                            /* Override Ctl Tco Value */
    UINT32 clktco : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000001*/

                            /* Override Clk Tco Value */
    UINT32 ddr4extend : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000000*/

                            /* Enable finer vref resolution in ddr4 */
    UINT32 rsvd_21 : 4;

                            /* Bits[24:21], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 cttermination : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /*
                               used to be VccddqHi in HSW, both are
                               equivalent[br] 1 - Nominal Vccddq voltage is
                               1.5v[br] 0 - Nominal Vccddq voltage is 1.35v or
                               1.2v
                            */
    UINT32 centerrptclkenovrd : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /* Override Clkgating signal for lcben in ifc */
    UINT32 scompfsmctl : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000004*/

                            /*
                               Controlling SCOMP initial training thru CSR for
                               more flexibility/range
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DDRCRCOMPOVR_CH_FNV_DDRIO_COMP_1_STRUCT;

/* DDRCRCOMPVSSHICONTROL_CH_FNV_DDRIO_COMP_1_REG supported on:                  */
/*      BWV (0x402b012c)                                                        */
/* Register default value on BWV: 0x004D8238                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* This CR holds bits to control the VssHi Generation
*/


#define DDRCRCOMPVSSHICONTROL_CH_FNV_DDRIO_COMP_1_REG 0x1B14012C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 vsshiorvrefctl : 24;

                            /* Bits[23:0], Access Type=RW, default=0x004D8238*/

                            /* VssHi control bits */
    UINT32 outputcode : 8;

                            /* Bits[31:24], Access Type=ROV, default=0x00000000*/

                            /*
                               Read the current code being generated by the
                               VssHi feedback loop. Use SelCode field to
                               control which instance is read.
                            */

  } Bits;
  UINT32 Data;

} DDRCRCOMPVSSHICONTROL_CH_FNV_DDRIO_COMP_1_STRUCT;

/* DDRCRDIMMVREFCONTROL1_CH_FNV_DDRIO_COMP_1_REG supported on:                  */
/*      BWV (0x402b0130)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* DimmVref Adjust Controls.
*/


#define DDRCRDIMMVREFCONTROL1_CH_FNV_DDRIO_COMP_1_REG 0x1B140130

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch0cavrefctl : 8;

                            /* Bits[7:0], Access Type=RW, default=0x00000000*/

                            /*
                               Ch0 CA DIMM Vref Control. [br] 2s compliment
                               encoding with 0 = Vdd/2, range of +/- Vdd/6 and
                               step size of Vdd/384 (3.9mV)[br] NOTE: LSB (bit
                               0) is a DFX feature (averaging between two
                               codes) - only use even codes so that LSB is '0'.
                            */
    UINT32 ch2cavrefctl : 8;

                            /* Bits[15:8], Access Type=RW, default=0x00000000*/

                            /*
                               ch2 DQ DIMM Vref Control.[br] 2s compliment
                               encoding with 0 = Vdd/2, range of +/- Vdd/6 and
                               step size of Vdd/384 (3.9mV)[br] NOTE: LSB (bit
                               7) is a DFX feature (averaging between two
                               codes) - only use even codes so that LSB is '0'.
                            */
    UINT32 ch1cavrefctl : 8;

                            /* Bits[23:16], Access Type=RW, default=0x00000000*/

                            /*
                               ch1 DQ DIMM Vref Control.[br] 2s compliment
                               encoding with 0 = Vdd/2, range of +/- Vdd/6 and
                               step size of Vdd/384 (3.9mV)[br] NOTE: LSB (bit
                               14) is a DFX feature - only use even codes so
                               that LSB is '0'.
                            */
    UINT32 ch0caendimmvref : 1;

                            /* Bits[24:24], Access Type=RW, default=0x00000000*/

                            /* Enables Ch0 CA DIMM Vref */
    UINT32 ch2caendimmvref : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /* Enables Channel 2 DIMM Vref */
    UINT32 ch1caendimmvref : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /* Enables Channel 1 DIMM Vref */
    UINT32 hiztimerctrl : 2;

                            /* Bits[28:27], Access Type=RW, default=0x00000000*/

                            /*
                               For the HiZ Timer, selects the number of clocks
                               for the timer to expire [br] {0: 4 cycles, 1: 8
                               cycles, 2: 16 cycles, 3: 32 cycles}
                            */
    UINT32 ch0caslowbw : 1;

                            /* Bits[29:29], Access Type=ROV, default=0x00000000*/

                            /*
                               Ch0 CA Vref controller has completed initial
                               convergence and is in slow BW mode. If used as a
                               lock detector, add 5uS after slow BW mode is
                               achieved for full convergence
                            */
    UINT32 ch1caslowbw : 1;

                            /* Bits[30:30], Access Type=ROV, default=0x00000000*/

                            /*
                               Ch1 Vref controller has completed initial
                               convergence and is in slow BW mode. If used as a
                               lock detector, add 5uS after slow BW mode is
                               achieved for full convergence
                            */
    UINT32 ch2caslowbw : 1;

                            /* Bits[31:31], Access Type=ROV, default=0x00000000*/

                            /*
                               Ch2 Vref controller has completed initial
                               convergence and is in slow BW mode. If used as a
                               lock detector, add 5uS after slow BW mode is
                               achieved for full convergence
                            */

  } Bits;
  UINT32 Data;

} DDRCRDIMMVREFCONTROL1_CH_FNV_DDRIO_COMP_1_STRUCT;

/* DDRCRDIMMVREFCONTROL2_CH_FNV_DDRIO_COMP_1_REG supported on:                  */
/*      BWV (0x402b0134)                                                        */
/* Register default value on BWV: 0x000E4500                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, only.
*/


#define DDRCRDIMMVREFCONTROL2_CH_FNV_DDRIO_COMP_1_REG 0x1B140134

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 dimmvrefctl : 24;

                            /* Bits[23:0], Access Type=RW, default=0x000E4500*/

                            /*
                               DIMM VREF adjust settings.[br] Field Bits
                               Description[br] ------- ---- -------------------
                               ------------------------------------------------
                               ------------------------------------------------
                               --------------------------------------------[br]
                               SelCode 23:21 Selects the code to output: [0] =
                               {0: Code, 1: TCode} [2:1] = {0: Select Ch0 CA
                               Code, 1: Select DQCh1 Code, 2: Select DQCh2
                               Code} [br] VtOffset 20:18 Offset for VtComp to
                               convert from VccIO to VccDDQ. Signed integer in
                               VccDDQ domain with a step size of VccDDQ/48 (32
                               mV)[br] VtSlopeA 17:15 Slope correction to
                               convert between VtComp in VccIO to VccDDQ: {0:
                               0, 1: -1/8, 2: -1/16, 3: -1/32. 4: +1/4, 5:
                               +1/8, 6: +1/16. 7: +1/32}[br] VtSlopeB 14:12
                               Slope correction to convert between VtComp in
                               VccIO to VccDDQ: {0: 0, 1: -1/8, 2: -1/16, 3:
                               -1/32. 4: +1/4, 5: +1/8, 6: +1/16. 7: +1/32}[br]
                               Reserved 11 Reserved for future usage[br]
                               HiBWEnable 10 Enables high bandwidth mode after
                               a code change to allow fast loop convergence[br]
                               SlowBWError 9:8 In slow BW mode, limits the loop
                               gain (ie: difference between code and tcode) to
                               +/- 2^(SlowBWError)[br] OpenLoop 7 Operates the
                               dimm vref in open loop mode with the target Vref
                               code directly driving the output DAC with no
                               feedback involved[br] SampleDivider 6:4 Controls
                               the loop bandwidth by dividing down the input
                               clock: {0: Qclk, 1: Qclk/2, 2: Qclk/4, 3:
                               Qclk/8, 4: Qclk/16, 5: Qclk/32, 6: Qclk/64, 7:
                               Qclk/128}[br] LoBWDivider 3:2 For the slow
                               integrator, selects the net number of samples in
                               a given direction to trip the filter. {0: 4
                               samples, 1: 8 samples, 2: 16 samples, 3: 32
                               samples} [br] HiBWDivider 1:0 For the fast
                               integrator, selects the net number of samples in
                               a given direction to trip the filter. {0: 4
                               samples, 1: 8 samples, 2: 16 samples, 3: 32
                               samples}
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DDRCRDIMMVREFCONTROL2_CH_FNV_DDRIO_COMP_1_STRUCT;

/* DDRCRSPDCFG1_CH_FNV_DDRIO_COMP_1_REG supported on:                           */
/*      BWV (0x402b0138)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* SPD Comp Config
*/


#define DDRCRSPDCFG1_CH_FNV_DDRIO_COMP_1_REG 0x1B140138

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 crspdcfg1 : 22;

                            /* Bits[21:0], Access Type=RW, default=0x00000000*/

                            /*
                               SPD config1[br] Field Description: [br] Field
                               Bits Description[br] ------- ---- --------------
                               ------------------------------------------------
                               ------------------------------------------------
                               ------------------------------------------------
                               - [br] spd_rcomp 21:15 view CComp[br]
                               spd_scomp_p 14:9 view SComp[br] spd_scomp_n 8:3
                               view SComp[br] spd_slowbuffer_ctl2 2 View Slow
                               buffer control / Control ddr_viewdig1 [br]
                               spd_slowbuffer_ctl1 1 View Slow buffer control /
                               Control ddr_viewdig0 [br] spd_ddr_chdbg_sel 0
                               View Debug mux select in spd, / 1'b1 - select
                               ch0
                            */
    UINT32 odtupsegen : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /* Odt up segment Enable */
    UINT32 odtdnsegen : 2;

                            /* Bits[25:24], Access Type=RW, default=0x00000000*/

                            /* Odt down segment Enable */
    UINT32 odtsegovrd : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /* Dq segment Override */
    UINT32 rsvd : 5;

                            /* Bits[31:27], Access Type=RW, default=0x00000000*/

                            /* Reserved for future usage */

  } Bits;
  UINT32 Data;

} DDRCRSPDCFG1_CH_FNV_DDRIO_COMP_1_STRUCT;

/* DDRCRSPDCFG2_CH_FNV_DDRIO_COMP_1_REG supported on:                           */
/*      BWV (0x402b013c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* SPD Comp Config
*/


#define DDRCRSPDCFG2_CH_FNV_DDRIO_COMP_1_REG 0x1B14013C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 crspdcfg2 : 15;

                            /* Bits[14:0], Access Type=RW, default=0x00000000*/

                            /*
                               SPD config2[br] Field Description: [br] [br]
                               Field Bits Description[br] ------- ---- --------
                               ------------------------------------------------
                               ------------------------------------------------
                               ------------------------------------------------
                               ------- [br] spd_smbus1b 14 SPD/[br]
                               spd_hys_configp 13:12 SPD/Memhot/View[br]
                               spd_hys_confign_b 11:10 SPD/Memhot/View[br]
                               spd_rcompnctl 9:5 SPD/Memhot RComp[br]
                               spd_scompnctl 4:0 SPD/Memhot SComp
                            */
    UINT32 dqupsegen : 2;

                            /* Bits[16:15], Access Type=RW, default=0x00000000*/

                            /* Dq up segment Enable */
    UINT32 dqdnsegen : 2;

                            /* Bits[18:17], Access Type=RW, default=0x00000000*/

                            /* Dq down segment Enable */
    UINT32 dqsegovrd : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000000*/

                            /* Dq segment Override */
    UINT32 clkupsegen : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /* Clk up segment Enable */
    UINT32 clkdnsegen : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /* Clk down segment Enable */
    UINT32 clksegovrd : 1;

                            /* Bits[24:24], Access Type=RW, default=0x00000000*/

                            /* Clk segment Override */
    UINT32 ctlupsegen : 2;

                            /* Bits[26:25], Access Type=RW, default=0x00000000*/

                            /* Ctl up segment Enable */
    UINT32 ctldnsegen : 2;

                            /* Bits[28:27], Access Type=RW, default=0x00000000*/

                            /* Ctl down segment Enable */
    UINT32 ctlsegovrd : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Ctl segment Override */
    UINT32 rsvd : 2;

                            /* Bits[31:30], Access Type=RW, default=0x00000000*/

                            /* Reserved for future usage */

  } Bits;
  UINT32 Data;

} DDRCRSPDCFG2_CH_FNV_DDRIO_COMP_1_STRUCT;

/* DDRCRCOMPCTL3_CH_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b0140)                                                        */
/* Register default value on BWV: 0x24081020                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* This CR holds Compensation Controls like cmd vref ctl, ctl vref ctl etc
*/


#define DDRCRCOMPCTL3_CH_FNV_DDRIO_COMP_1_REG 0x1B140140

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 cmddrvpupvref : 7;

                            /* Bits[6:0], Access Type=RW, default=0x00000020*/

                            /*
                               2's compliment analog offset for CmdRcompDrvUp
                               Vref with step size of Vccddq/96
                            */
    UINT32 cmddrvpdnvref : 7;

                            /* Bits[13:7], Access Type=RW, default=0x00000020*/

                            /*
                               2's compliment analog offset for CmdRcompDrvDown
                               Vref with step size of Vccddq/96
                            */
    UINT32 ctldrvpupvref : 7;

                            /* Bits[20:14], Access Type=RW, default=0x00000020*/

                            /*
                               2's compliment analog offset for CtlRcompDrvUp
                               Vref with step size of Vccddq/96
                            */
    UINT32 ctldrvpdnvref : 7;

                            /* Bits[27:21], Access Type=RW, default=0x00000020*/

                            /*
                               2's compliment analog offset for CtlRcompDrvDown
                               Vref with step size of Vccddq/96
                            */
    UINT32 swcapcmpclksel : 2;

                            /* Bits[29:28], Access Type=RW, default=0x00000002*/

                            /* Switch capacitor comparator clock select */
    UINT32 halflsbshiften : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /* Half LSB Shift Enable */
    UINT32 dfxsel : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* dfxsel for cmd rcomp */

  } Bits;
  UINT32 Data;

} DDRCRCOMPCTL3_CH_FNV_DDRIO_COMP_1_STRUCT;


/* RXGROUP0N0RANK0_0_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0200)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank0. Broadcast reads are not supported.
*/


#define RXGROUP0N0RANK0_0_FNV_DDRIO_COMP_1_REG 0x1B140200

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* readx4modeenb */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_P to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_N to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS (0: 1/16 UI offset, [br] 1:
                               3/16 UI Offset, 2: 5/16 UI Offsets, 3: 7/16 UI
                               Offsets, 4: 9/16 UI Offsets, 5,6,7: 11/16 UI
                               Offsets.)
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               CTLE current steering tuning (0=no eq, 7=max
                               eq). It is decoded to[br] CTLE resistor tuning:
                               00 - 3R (10.8Kohms), 01/10 - R (3.6Kohms), 11 -
                               R/3 (1.2Kohms)[br] CTLE capacitor tuning: 00 -
                               0C (not used), 01 - 1C (200ff), 10 - 2C (400ff),
                               11 - 3C (600ff)
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N0RANK0_0_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N0RANK1_0_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0204)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank1. Broadcast reads are not supported.
*/


#define RXGROUP0N0RANK1_0_FNV_DDRIO_COMP_1_REG 0x1B140204

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* readx4modeenb */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_P to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_N to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               CTLE current steering tuning (0=no eq, 7=max
                               eq). It is decoded to[br] CTLE resistor tuning:
                               00 - 3R (10.8Kohms), 01/10 - R (3.6Kohms), 11 -
                               R/3 (1.2Kohms)[br] CTLE capacitor tuning: 00 -
                               0C (not used), 01 - 1C (200ff), 10 - 2C (400ff),
                               11 - 3C (600ff)
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N0RANK1_0_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N0RANK2_0_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0208)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank2. Broadcast read not supported.
*/


#define RXGROUP0N0RANK2_0_FNV_DDRIO_COMP_1_REG 0x1B140208

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* readx4modeenb */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_P to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_P to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               CTLE current steering tuning (0=no eq, 7=max
                               eq). It is decoded to[br] CTLE resistor tuning:
                               00 - 3R (10.8Kohms), 01/10 - R (3.6Kohms), 11 -
                               R/3 (1.2Kohms)[br] CTLE capacitor tuning: 00 -
                               0C (not used), 01 - 1C (200ff), 10 - 2C (400ff),
                               11 - 3C (600ff)
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N0RANK2_0_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N0RANK3_0_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b020c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank3. Broadcast read not supported.
*/


#define RXGROUP0N0RANK3_0_FNV_DDRIO_COMP_1_REG 0x1B14020C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* readx4modeenb */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_P to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_N to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               CTLE current steering tuning (0=no eq, 7=max
                               eq). It is decoded to[br] CTLE resistor tuning:
                               00 - 3R (10.8Kohms), 01/10 - R (3.6Kohms), 11 -
                               R/3 (1.2Kohms)[br] CTLE capacitor tuning: 00 -
                               0C (not used), 01 - 1C (200ff), 10 - 2C (400ff),
                               11 - 3C (600ff)
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N0RANK3_0_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N0RANK0_0_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0240)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N0RANK0_0_FNV_DDRIO_COMP_1_REG 0x1B140240

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* select one of the four DQ Clk */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N0RANK0_0_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N0RANK1_0_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0244)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N0RANK1_0_FNV_DDRIO_COMP_1_REG 0x1B140244

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* Select one of the four DQ clks */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N0RANK1_0_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N0RANK2_0_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0248)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N0RANK2_0_FNV_DDRIO_COMP_1_REG 0x1B140248

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* Select one of the four DQ clks */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N0RANK2_0_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N0RANK3_0_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b024c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N0RANK3_0_FNV_DDRIO_COMP_1_REG 0x1B14024C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* Select one of the four DQ clk */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N0RANK3_0_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN0RANK0_0_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0280)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN0RANK0_0_FNV_DDRIO_COMP_1_REG 0x1B140280

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               selects which skewed DQSP (to sample even bits)
                               is used in the RX FIFO. For proper operation,
                               always pick latest DQSP
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               selects which skewed DQSN (to sample odd bits)
                               is used in the RX FIFO. For proper operation,
                               always pick latest DQSN
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN0RANK0_0_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN0RANK1_0_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0284)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN0RANK1_0_FNV_DDRIO_COMP_1_REG 0x1B140284

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               [0]=0 selects the raw output from the nibble DQS
                               amplifier; [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN0RANK1_0_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN0RANK2_0_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0288)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN0RANK2_0_FNV_DDRIO_COMP_1_REG 0x1B140288

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               [0]=0 selects the raw output from the nibble DQS
                               amplifier; [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN0RANK2_0_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN0RANK3_0_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b028c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN0RANK3_0_FNV_DDRIO_COMP_1_REG 0x1B14028C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               [0]=0 selects the raw output from the nibble DQS
                               amplifier; [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN0RANK3_0_FNV_DDRIO_COMP_1_STRUCT;

/* RXVREFCTRLN0_0_FNV_DDRIO_COMP_1_REG supported on:                            */
/*      BWV (0x402b02a4)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* RxVrefCtrl. Broadcast read not supported.
*/


#define RXVREFCTRLN0_0_FNV_DDRIO_COMP_1_REG 0x1B1402A4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 vrefperbit0 : 7;

                            /* Bits[6:0], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben0 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 vrefperbit1 : 7;

                            /* Bits[14:8], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben1 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /*
                               enables fine grain Vref control, shift down the
                               Vref voltage by ~0.5 stepsize
                            */
    UINT32 vrefperbit2 : 7;

                            /* Bits[22:16], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben2 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /*
                               enables fine grain Vref control, shift down the
                               Vref voltage by ~0.5 stepsize
                            */
    UINT32 vrefperbit3 : 7;

                            /* Bits[30:24], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben3 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* shift down the Vref voltage by ~0.5 stepsize */

  } Bits;
  UINT32 Data;

} RXVREFCTRLN0_0_FNV_DDRIO_COMP_1_STRUCT;

/* DATATRAINFEEDBACKN0_0_FNV_DDRIO_COMP_1_REG supported on:                     */
/*      BWV (0x402b02a8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Training Feedback Results. Broadcast read not supported.
*/


#define DATATRAINFEEDBACKN0_0_FNV_DDRIO_COMP_1_REG 0x1B1402A8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 datatrainfeedback : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Data Training Feedback Storage[br] [br]
                               DataTrainFeedback Description:[br] Training Step
                               Bits Nibble Description[br] -------------- ----
                               ------- --------------------------[br] Cross
                               Over Cal 0 0 Tx Dqs Phase Detection[br] Cross
                               Over Cal 1 0 Tx Dq Phase Detection[br] Cross
                               Over Cal 2 0 Rec En Phase Detection[br] RcvEn
                               8:0 0 Byte detection[br] [br] Wr Leveling 8:0 0
                               Byte detection[br] Senseamp offset 3:0 0 Dq
                               Senseamp offset Detection
                            */
    UINT32 rsvd_9 : 23;

                            /* Bits[31:9], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATATRAINFEEDBACKN0_0_FNV_DDRIO_COMP_1_STRUCT;

/* DDRCRFSMCALN0_0_FNV_DDRIO_COMP_1_REG supported on:                           */
/*      BWV (0x402b02c8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Fsm for  Voc and Xover caliberation, Voc caliberation is a procedure that cancel out intrinsic offset in analogue receivers and Xover training ,it aligns all the local dll to the global qclk
*/


#define DDRCRFSMCALN0_0_FNV_DDRIO_COMP_1_REG 0x1B1402C8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0fsm : 5;

                            /* Bits[4:0], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of first receiver is done(read only)
                            */
    UINT32 saoffset1fsm : 5;

                            /* Bits[9:5], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of second receiver is done(read only)
                            */
    UINT32 saoffset2fsm : 5;

                            /* Bits[14:10], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of third receiver is done(read only)
                            */
    UINT32 saoffset3fsm : 5;

                            /* Bits[19:15], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of fourth receiver is done(read only)
                            */
    UINT32 fsmcalcomplete : 1;

                            /* Bits[20:20], Access Type=ROV, default=0x00000000*/

                            /* when the caliberation is done */
    UINT32 refpiclkdelayfsm : 6;

                            /* Bits[26:21], Access Type=ROV, default=0x00000000*/

                            /*
                               Load FSM with a code at which , the transition
                               is detected.
                            */
    UINT32 fsmcaldone : 1;

                            /* Bits[27:27], Access Type=ROV, default=0x00000000*/

                            /* when the caliberation of voc or x-over is done */
    UINT32 fsmtimersel : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /* Timer is set for either 8 cycles or 16 cycles */
    UINT32 fsmpatternsel : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               It selects whther the pattern of three bit or
                               two bit is selected when the transition happen
                               from 1-->0 for pdout and receiver , to avoid
                               glitch
                            */
    UINT32 fsmvoccal : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               This bit tells , wether the xover or voc
                               caliberation will be done, if its zero x-over
                               caliberation is done and vice-versa
                            */
    UINT32 fsmcalen : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* FsmCalEn starts the voc-Xover Fsm */

  } Bits;
  UINT32 Data;

} DDRCRFSMCALN0_0_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL4N0_0_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b02cc)                                                        */
/* Register default value on BWV: 0x801F0000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* static configurations of tx and rx. Broadcast read not supported.
*/


#define DATACONTROL4N0_0_FNV_DDRIO_COMP_1_REG 0x1B1402CC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd_0 : 1;

                            /* Bits[0:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vsshiorvrefctl1 : 8;

                            /* Bits[8:1], Access Type=RW, default=0x00000000*/

                            /*
                               VssHi control bits[br] Field Description: [br]
                               [br] Field Bits Description[br] ------- ----
                               ---------------------------------[br]
                               disoverflow 24 Disable overflow logic from
                               BDW[br] fast panic enable 25 Bypass 2 flops in
                               panic path for faster panic response[br]
                               vsshivccd2by3cfgen 26 Forces the driver DAC to
                               get supply from 2/3 vccd[br] vsshivccd2by3cfg
                               27:29 Current trim setting for 2/3 vccd mode,
                               001 fast, 011 typical, 111 slow silicon [br]
                               ddrvssh2ndcompen 30 Enable second comparator
                               (ZBB mode)[br] comp high bwen 31 Improve
                               comparator performance to support low digital
                               voltage range
                            */
    UINT32 dqtxeqsel : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* DQ TxEq setting selection to achieve constant EQ */
    UINT32 rsvd_10 : 2;

                            /* Bits[11:10], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vrefpwrsave : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               If set to 0 (default), Vref generators selected
                               through RxVrefSel[3:0] are always on.[br] If set
                               to 1, Vref generators are switched off while in
                               Self Refresh.
                            */
    UINT32 vreftonblbus : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000008*/

                            /* Per-bit Enable connection to share Vref Bus */
    UINT32 rxvrefsel : 4;

                            /* Bits[20:17], Access Type=RW, default=0x0000000F*/

                            /* Per Bit Verf generator Enable */
    UINT32 refpiclkdelay : 6;

                            /* Bits[26:21], Access Type=RW, default=0x00000000*/

                            /* RefPiClkDelay */
    UINT32 fnvcrsdlbypassen : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /* FNV Slave Delay Line Bypass Enable */
    UINT32 fnvcrdllbypassen : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /* FNV DLL Bypass Enable */
    UINT32 fnvcrvisaen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               FNV Visa Fub Enable - data fub used for VISA if
                               asserted
                            */
    UINT32 writecrcenable : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /* Enable write crc mode */
    UINT32 rsvd_31 : 1;

                            /* Bits[31:31], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL4N0_0_FNV_DDRIO_COMP_1_STRUCT;

/* COMPDATA0N0_0_FNV_DDRIO_COMP_1_REG supported on:                             */
/*      BWV (0x402b02d4)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Comp Values. Broadcast read not supported.
*/


#define COMPDATA0N0_0_FNV_DDRIO_COMP_1_REG 0x1B1402D4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcompdrvup : 6;

                            /* Bits[5:0], Access Type=RWV, default=0x00000000*/

                            /*
                               Data Rcomp DrvUp Comp Value can be overriden via
                               message channel if periodical retrain is disable
                            */
    UINT32 spare0 : 3;

                            /* Bits[8:6], Access Type=RWV, default=0x00000000*/

                            /* Spare */
    UINT32 rcompdrvdown : 6;

                            /* Bits[14:9], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp DrvDown Comp Value */
    UINT32 vtcomp : 5;

                            /* Bits[19:15], Access Type=RWV, default=0x00000000*/

                            /* VT Comp Values */
    UINT32 tcocomp : 7;

                            /* Bits[26:20], Access Type=RWV, default=0x00000000*/

                            /* Data TCO Comp Value. */
    UINT32 slewratecomp : 5;

                            /* Bits[31:27], Access Type=RWV, default=0x00000000*/

                            /* Data Slew Rate Comp Value. */

  } Bits;
  UINT32 Data;

} COMPDATA0N0_0_FNV_DDRIO_COMP_1_STRUCT;

/* COMPDATA1N0_0_FNV_DDRIO_COMP_1_REG supported on:                             */
/*      BWV (0x402b02d8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Comp Values. Broadcast read not supported.
*/


#define COMPDATA1N0_0_FNV_DDRIO_COMP_1_REG 0x1B1402D8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcompodtup : 6;

                            /* Bits[5:0], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp OdtUp Comp Value */
    UINT32 rcompodtdown : 6;

                            /* Bits[11:6], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp Odt-Down Comp Value */
    UINT32 panicdrvdn : 10;

                            /* Bits[21:12], Access Type=RWV, default=0x00000000*/

                            /* Panic DrvDn RComp Value. */
    UINT32 panicdrvup : 10;

                            /* Bits[31:22], Access Type=RWV, default=0x00000000*/

                            /* Panic DrvUp RComp Comp Value. */

  } Bits;
  UINT32 Data;

} COMPDATA1N0_0_FNV_DDRIO_COMP_1_STRUCT;

/* DATAOFFSETTRAINN0_0_FNV_DDRIO_COMP_1_REG supported on:                       */
/*      BWV (0x402b02dc)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATAOFFSETTRAINN0_0_FNV_DDRIO_COMP_1_REG 0x1B1402DC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvenoffset : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained RxRcvEn Value. */
    UINT32 rxdqsoffset : 7;

                            /* Bits[12:6], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained Rx DQS Value. */
    UINT32 txdqoffset : 6;

                            /* Bits[18:13], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained Tx DQ Value. */
    UINT32 txdqsoffset : 6;

                            /* Bits[24:19], Access Type=RW, default=0x00000000*/

                            /* Ooffset added to Trained Tx DQS Value. */
    UINT32 vrefoffset : 7;

                            /* Bits[31:25], Access Type=RW, default=0x00000000*/

                            /*
                               2s Compliment offset added to Trained Vref
                               Value. Positive number increases Vref, and each
                               step is Vdd/384.
                            */

  } Bits;
  UINT32 Data;

} DATAOFFSETTRAINN0_0_FNV_DDRIO_COMP_1_STRUCT;


/* DATACONTROL0N0_0_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b02e8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL0N0_0_FNV_DDRIO_COMP_1_REG 0x1B1402E8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rxtrainingmode : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enables Read DqDqs Training Mode */
    UINT32 wltrainingmode : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /* Enables Write Leveling Training Mode */
    UINT32 rltrainingmode : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /* Enables Read Leveling Training Mode. */
    UINT32 senseamptrainingmode : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Enables SenseAmp offset cancellation training
                               mode.
                            */
    UINT32 txon : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               When set, forces DQ/DQS drive enable to active.
                               Used in power measurements and IO loopback mode
                            */
    UINT32 rfon : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down Disable: Forces register file read,
                               overriding the rank power down logic.
                            */
    UINT32 rxpion : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /* Power-down Disable: Forces RxDqs PI clocks on. */
    UINT32 txpion : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down Disable: Forces TxDq and TxDqs PI
                               clocks on.
                            */
    UINT32 internalclockson : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Forces on master DLL and all PI enables ON,
                               despite both channel in SelfRefresh, etc. low
                               power states.
                            */
    UINT32 saoffsettraintxon : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* SaOffsetTrainTxon */
    UINT32 txdisable : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down: All write commands are ignored for
                               this data-byte. Used in single-channel MCI mode.
                            */
    UINT32 rxdisable : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down: All read commands are ignored for
                               this data-byte. Used in single-channel MCI mode.
                            */
    UINT32 txlong : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Sets the duration of the first transmitted DQ
                               bit of the burst. 0=1UI, 1=2UI.
                            */
    UINT32 rsvd_13 : 5;

                            /* Bits[17:13], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 driversegmentenable : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Controls which segements of the driver are
                               enabled: {0: All, 1: Only ODT}.
                            */
    UINT32 rsvd_19 : 1;

                            /* Bits[19:19], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 readrfrd : 1;

                            /* Bits[20:20], Access Type=RWV, default=0x00000000*/

                            /*
                               Self clearing command bit. When set, it will
                               download the three 32 bit lines from the RegFile
                               associated with a read command to Rank =
                               ReadRFRank
                            */
    UINT32 readrfwr : 1;

                            /* Bits[21:21], Access Type=RWV, default=0x00000000*/

                            /*
                               Self clearing command bit. When set, it will
                               download the three 32 bit lines from the RegFile
                               associated with a write command to Rank =
                               ReadRFRank
                            */
    UINT32 readrfrank : 3;

                            /* Bits[24:22], Access Type=RWV, default=0x00000000*/

                            /*
                               Specifies the rank that ReadRFRd or ReadRFWr
                               will manually download the CR values from
                            */
    UINT32 forceodton : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /* ODT is forced-on. */
    UINT32 odtsampoff : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /* ODT and Senseamp are forced-off. */
    UINT32 disableodtstatic : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /* not used */
    UINT32 ddrcrforceodton : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               force ODT to the transmitter on, regardless of
                               state of DriveEnable
                            */
    UINT32 spare : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* spare */
    UINT32 xovercal : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /* Enables Xover Calibration Training Mode */
    UINT32 longpreambleenable : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* Enables long preamble for DDR4 devices */

  } Bits;
  UINT32 Data;

} DATACONTROL0N0_0_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL1N0_0_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b02ec)                                                        */
/* Register default value on BWV: 0x0000003C                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL1N0_0_FNV_DDRIO_COMP_1_REG 0x1B1402EC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd_0 : 10;

                            /* Bits[9:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rxbiasctl : 3;

                            /* Bits[12:10], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the Current and BW of the Receiver: {0:
                               0.34Idll, 1: 0.66Idll, 2: 0.88Idll, 3: Idll, 4:
                               1.33Idll, 5: 1.66Idll[br] , 6: 2.00Idll, 7:
                               2.33Idll}
                            */
    UINT32 odtdelay : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000000*/

                            /*
                               Controls ODT turn-on delay. To turn on N tQCK
                               before RcvEn, program to RcvEn[8:6] N + 4.
                            */
    UINT32 odtduration : 3;

                            /* Bits[19:17], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the ODT ON duration from (Code,
                               Duration) = (0x0, 11 tQCK) to (0x7, 18 tQCK)
                            */
    UINT32 senseampdelay : 4;

                            /* Bits[23:20], Access Type=RW, default=0x00000000*/

                            /*
                               Controls Senseamp turn-on delay. To turn on N
                               tQCK before RcvEn, program to RcvEn[8:6] N + 4.
                            */
    UINT32 senseampduration : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the SenseAmp ON duration from (Code,
                               Duration) = (0x0, 11 tQCK) to (0x7, 18 tQCK)
                            */
    UINT32 rsvd_27 : 5;

                            /* Bits[31:27], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL1N0_0_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL2N0_0_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b02f0)                                                        */
/* Register default value on BWV: 0x07800000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL2N0_0_FNV_DDRIO_COMP_1_REG 0x1B1402F0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rxvocselqnnnh : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Enables SenseAmp offset cancellation training
                               mode
                            */
    UINT32 forcebiason : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Force on the internal Vref and Rx bias circuit,
                               regardless of any other power downs
                            */
    UINT32 forcerxon : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Force on the RxAmp only (as opposed to
                               OdtSampOn, which turns on both ODT and the
                               amplifier).[br] Use for overclocking support
                               where we may not be able to hit the fast exit
                               latency
                            */
    UINT32 ddr4extend : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /* Enable finer vref resolution in ddr4 */
    UINT32 cttermination : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /* DDRCOMP_CR_DDRCRCOMPOVR CTTermination */
    UINT32 dfelben : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* Digital far end loopback enable */
    UINT32 dfelbtxdmuxsel : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /* Digital far end loopback TX FIFO data mux sel */
    UINT32 spare1 : 2;

                            /* Bits[12:11], Access Type=RW, default=0x00000000*/

                            /* Spare1 */
    UINT32 txddjcen : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000000*/

                            /* TxddjcEn */
    UINT32 dfeenable : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /* DfeEnable */
    UINT32 dfedlysel : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /* DfeDlySel */
    UINT32 dfecode : 4;

                            /* Bits[22:19], Access Type=RW, default=0x00000000*/

                            /*
                               DfeCode: binary code 0000 to 1000 for DFE
                               offset, mid-code code for zero offset is 0100
                            */
    UINT32 rxdqssaoffset : 5;

                            /* Bits[27:23], Access Type=RW, default=0x0000000F*/

                            /* strobe Rx Amp offset control */
    UINT32 rsvd_28 : 4;

                            /* Bits[31:28], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL2N0_0_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL3N0_0_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b02f4)                                                        */
/* Register default value on BWV: 0x00000FCF                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* static configurations of tx and rx. Broadcast read not supported.
*/


#define DATACONTROL3N0_0_FNV_DDRIO_COMP_1_REG 0x1B1402F4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 drvstaticlegcfg : 2;

                            /* Bits[1:0], Access Type=RW, default=0x00000003*/

                            /*
                               binary default setting for static legs in DRV
                               mode[br] 0 0 0 legs (EQ disabled)[br] 0 1 3 legs
                               (EQ max 3 legs)[br] 1 0 6 legs (EQ max 6
                               legs)[br] 1 1 12 legs (EQ max 12 legs)[br] In
                               most cases, we would set this to be 11, but for
                               some configurations that require a higher [br]
                               Ron value, we need to reduce the number of
                               static legs enabled so that fast corner can hit
                               [br] the higher Ron target value.
                            */
    UINT32 odtstaticlegcfg : 2;

                            /* Bits[3:2], Access Type=RW, default=0x00000003*/

                            /*
                               binary default setting for static legs in ODT
                               mode[br] 0 0 0 legs (EQ disabled)[br] 0 1 3 legs
                               (EQ max 3 legs)[br] 1 0 6 legs (EQ max 6
                               legs)[br] 1 1 12 legs (EQ max 12 legs)[br] In
                               most cases, we would set this to be 11, but for
                               some configurations that require a higher [br]
                               Ron value, we need to reduce the number of
                               static legs enabled so that fast corner can hit
                               [br] the higher Ron target value.
                            */
    UINT32 lvlshft_holden : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               level shift hold enable[br] Holds the HV control
                               values and power down mode the level
                               shifters.[br] Apply '1' after training. Slow
                               timing - not advised for fast enabling
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 odtsegmentenable : 3;

                            /* Bits[8:6], Access Type=RW, default=0x00000007*/

                            /*
                               This will tell which segments are enabled out of
                               reset. [br] After that, a shift register will
                               determine the enabled segments
                            */
    UINT32 datasegmentenable : 3;

                            /* Bits[11:9], Access Type=RW, default=0x00000007*/

                            /*
                               This will tell which segments are enabled out of
                               reset.
                            */
    UINT32 longodtr2w : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               When set, it will extends ODT by 1 qclk on read
                               to write turnarounds. hsd 230773
                            */
    UINT32 spare1 : 8;

                            /* Bits[20:13], Access Type=RW, default=0x00000000*/

                            /* Spare1 */
    UINT32 ddrcrctlecapen : 2;

                            /* Bits[22:21], Access Type=RW, default=0x00000000*/

                            /* ctle capacitor setting */
    UINT32 ddrcrctleresen : 2;

                            /* Bits[24:23], Access Type=RW, default=0x00000000*/

                            /* ctle resistor setting */
    UINT32 pcasbiasclosedloopen : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiassel : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiasfoldedlegtrim : 2;

                            /* Bits[28:27], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiasgcncomp : 2;

                            /* Bits[30:29], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 postambleenable : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* Spare */

  } Bits;
  UINT32 Data;

} DATACONTROL3N0_0_FNV_DDRIO_COMP_1_STRUCT;

/* VSSHIORVREFCONTROLN0_0_FNV_DDRIO_COMP_1_REG supported on:                    */
/*      BWV (0x402b02f8)                                                        */
/* Register default value on BWV: 0x004D8238                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, only. Broadcast read not supported.
*/


#define VSSHIORVREFCONTROLN0_0_FNV_DDRIO_COMP_1_REG 0x1B1402F8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 vsshiorvrefctl : 24;

                            /* Bits[23:0], Access Type=RW, default=0x004D8238*/

                            /*
                               Channel 0 fubs : VssHi adjust setting. Channel1
                               fubs: DIMM VREF adjust settings.[br] [br] VssHi
                               Field Description: [br] [br] Field Bits
                               Description[br] ------- ---- -------------------
                               ------------------------------------------------
                               ------------------------------------------------
                               --------------------------------------------[br]
                               SelCode 23 Selects the code to output: {0: Code,
                               1: TCode}[br] GainBoost 22 Enable gain boost is
                               panic mode by updating code/tcode [br]
                               PanicVoltage 21:18 Unsigned integer controlling
                               the voltage error on VssHi that will trigger the
                               panic driver. Step size of VccDDQ/192 (0 to
                               117mV)[br] CloseLoop 17 Enables the VssHi close
                               loop tracking [br] PanicEn 16 Enables the VssHi
                               Panic Driver[br] BWError 15:14 Limits the loop
                               gain (ie: difference between code and tcode) to
                               +/- 2^(SlowBWError)[br] OpenLoop 13 Operates
                               VssHi in open loop mode with the target Vref
                               code directly driving the output DAC with no
                               feedback involved[br] SampleDivider 12:10
                               Controls the loop bandwidth by dividing down the
                               input clock: {0: Qclk, 1: Qclk/2, 2: Qclk/4, 3:
                               Qclk/8, 4: Qclk/16, 5: Qclk/32, 6: Qclk/64, 7:
                               Qclk/128}[br] LoBWDivider 9:8 For the slow
                               integrator, selects the net number of samples in
                               a given direction to trip the filter. {0: 4
                               samples, 1: 16 samples, 2: 32 samples, 3: 64
                               samples}[br] HiBWDivider 7:6 For the fast
                               integrator, selects the net number of samples in
                               a given direction to trip the filter. {0: 4
                               samples, 1: 16 samples, 2: 32 samples, 3: 64
                               samples}[br] Target 5:0 Unsigned integer
                               controlling the target VssHi voltage. Step size
                               of VccDDQ/192 and starting value of
                               VccDDQ*20/192
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} VSSHIORVREFCONTROLN0_0_FNV_DDRIO_COMP_1_STRUCT;


/* RXGROUP0N1RANK0_0_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0300)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank0. Broadcast read not supported.
*/


#define RXGROUP0N1RANK0_0_FNV_DDRIO_COMP_1_REG 0x1B140300

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* ReadX8ModeEn */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /* common DQS_P delay control, per nibble */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /* common DQS_N delay control, per nibble */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               Rx Equalization code: {4:3} controls the cap
                               tuning 0: (not used), 1: 200ff, 2: 400ff, 3:
                               600ff, [br] controls the resistor tuning (0: 3R,
                               1: 1R, 2: 1R, 3: R/3).
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N1RANK0_0_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N1RANK1_0_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0304)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank0. Broadcast read not supported.
*/


#define RXGROUP0N1RANK1_0_FNV_DDRIO_COMP_1_REG 0x1B140304

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* ReadX8ModeEn */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /* common DQS_P delay control, per nibble */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /* common DQS_N delay control, per nibble */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               Rx Equalization code: {4:3} controls the cap
                               tuning 0: (not used), 1: 200ff, 2: 400ff, 3:
                               600ff, [br] controls the resistor tuning (0: 3R,
                               1: 1R, 2: 1R, 3: R/3).
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N1RANK1_0_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N1RANK2_0_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0308)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank0.Broadcast read not supported.
*/


#define RXGROUP0N1RANK2_0_FNV_DDRIO_COMP_1_REG 0x1B140308

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* ReadX8ModeEn */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /* common DQS_P delay control, per nibble */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /* common DQS_N delay control, per nibble */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               Rx Equalization code: {4:3} controls the cap
                               tuning 0: (not used), 1: 200ff, 2: 400ff, 3:
                               600ff, [br] controls the resistor tuning (0: 3R,
                               1: 1R, 2: 1R, 3: R/3).
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N1RANK2_0_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N1RANK3_0_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b030c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank0. Broadcast read not supported.
*/


#define RXGROUP0N1RANK3_0_FNV_DDRIO_COMP_1_REG 0x1B14030C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* ReadX8ModeEn */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /* common DQS_P delay control, per nibble */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /* common DQS_N delay control, per nibble */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               Rx Equalization code: {4:3} controls the cap
                               tuning 0: (not used), 1: 200ff, 2: 400ff, 3:
                               600ff, [br] controls the resistor tuning (0: 3R,
                               1: 1R, 2: 1R, 3: R/3).
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N1RANK3_0_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N1RANK0_0_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0340)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N1RANK0_0_FNV_DDRIO_COMP_1_REG 0x1B140340

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* one of the four clocks */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N1RANK0_0_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N1RANK1_0_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0344)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N1RANK1_0_FNV_DDRIO_COMP_1_REG 0x1B140344

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* one of the four clocks */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N1RANK1_0_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N1RANK2_0_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0348)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N1RANK2_0_FNV_DDRIO_COMP_1_REG 0x1B140348

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* one of the 4 clocks */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N1RANK2_0_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N1RANK3_0_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b034c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N1RANK3_0_FNV_DDRIO_COMP_1_REG 0x1B14034C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from PiRef to PiN for bit 1 */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N1RANK3_0_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN1RANK0_0_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0380)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN1RANK0_0_FNV_DDRIO_COMP_1_REG 0x1B140380

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               x4/x8 DQS mux select[br] [0]=1 selects the raw
                               output from the nibble0 DQS amplifier in x8
                               mode; [br] [0]=0 select nibble1 amplifier output
                               in x4 mode; [br] [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN1RANK0_0_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN1RANK1_0_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0384)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN1RANK1_0_FNV_DDRIO_COMP_1_REG 0x1B140384

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               x4/x8 DQS mux select[br] [0]=1 selects the raw
                               output from the nibble0 DQS amplifier in x8
                               mode; [br] [0]=0 select nibble1 amplifier output
                               in x4 mode; [br] [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN1RANK1_0_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN1RANK2_0_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0388)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN1RANK2_0_FNV_DDRIO_COMP_1_REG 0x1B140388

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               x4/x8 DQS mux select[br] [0]=1 selects the raw
                               output from the nibble0 DQS amplifier in x8
                               mode; [br] [0]=0 select nibble1 amplifier output
                               in x4 mode; [br] [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN1RANK2_0_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN1RANK3_0_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b038c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN1RANK3_0_FNV_DDRIO_COMP_1_REG 0x1B14038C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               x4/x8 DQS mux select[br] [0]=1 selects the raw
                               output from the nibble0 DQS amplifier in x8
                               mode; [br] [0]=0 select nibble1 amplifier output
                               in x4 mode; [br] [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN1RANK3_0_FNV_DDRIO_COMP_1_STRUCT;

/* RXVREFCTRLN1_0_FNV_DDRIO_COMP_1_REG supported on:                            */
/*      BWV (0x402b03a4)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* RxVrefCtrl. Broadcast read not supported.
*/


#define RXVREFCTRLN1_0_FNV_DDRIO_COMP_1_REG 0x1B1403A4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 vrefperbit0 : 7;

                            /* Bits[6:0], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben0 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 vrefperbit1 : 7;

                            /* Bits[14:8], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben1 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 vrefperbit2 : 7;

                            /* Bits[22:16], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben2 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 vrefperbit3 : 7;

                            /* Bits[30:24], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben3 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* shift down the Vref voltage by ~0.5 stepsize */

  } Bits;
  UINT32 Data;

} RXVREFCTRLN1_0_FNV_DDRIO_COMP_1_STRUCT;

/* DATATRAINFEEDBACKN1_0_FNV_DDRIO_COMP_1_REG supported on:                     */
/*      BWV (0x402b03a8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Training Feedback Results. Broadcast read not supported.
*/


#define DATATRAINFEEDBACKN1_0_FNV_DDRIO_COMP_1_REG 0x1B1403A8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 datatrainfeedback : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Data Training Feedback Storage [br] Training
                               Step Bits Nibble Description[br] --------------
                               ---- ------- ---------------[br] Cross Over Cal
                               0 1 Tx Dqs Phase Detection[br] Cross Over Cal 1
                               1 Tx Dq Phase Detection[br] Cross Over Cal 2 1
                               Rec En Phase Detection[br] RcvEn 8:0 1 Byte
                               detection[br] Wr Leveling 8:0 1 Byte
                               detection[br] Senseamp offset 3:0 1 Dq Senseamp
                               offset Detection
                            */
    UINT32 rsvd_9 : 23;

                            /* Bits[31:9], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATATRAINFEEDBACKN1_0_FNV_DDRIO_COMP_1_STRUCT;

/* DDRCRFSMCALN1_0_FNV_DDRIO_COMP_1_REG supported on:                           */
/*      BWV (0x402b03c8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Fsm for  Voc and Xover caliberation, Voc caliberation is a procedure that cancel out intrinsic offset in analogue receivers and Xover training ,it aligns all the local dll to the global qclk
*/


#define DDRCRFSMCALN1_0_FNV_DDRIO_COMP_1_REG 0x1B1403C8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0fsm : 5;

                            /* Bits[4:0], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of first receiver is done(read only)
                            */
    UINT32 saoffset1fsm : 5;

                            /* Bits[9:5], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of second receiver is done(read only)
                            */
    UINT32 saoffset2fsm : 5;

                            /* Bits[14:10], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of third receiver is done(read only)
                            */
    UINT32 saoffset3fsm : 5;

                            /* Bits[19:15], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of fourth receiver is done(read only)
                            */
    UINT32 fsmcalcomplete : 1;

                            /* Bits[20:20], Access Type=ROV, default=0x00000000*/

                            /* when the caliberation is done */
    UINT32 refpiclkdelayfsm : 6;

                            /* Bits[26:21], Access Type=ROV, default=0x00000000*/

                            /*
                               Load FSM with a code at which , the transition
                               is detected.
                            */
    UINT32 fsmcaldone : 1;

                            /* Bits[27:27], Access Type=ROV, default=0x00000000*/

                            /* when the caliberation of voc or x-over is done */
    UINT32 fsmtimersel : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /* Timer is set for either 8 cycles or 16 cycles */
    UINT32 fsmpatternsel : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               It selects whther the pattern of three bit or
                               two bit is selected when the transition happen
                               from 1-->0 for pdout and receiver , to avoid
                               glitch
                            */
    UINT32 fsmvoccal : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               This bit tells , wether the xover or voc
                               caliberation will be done, if its zero x-over
                               caliberation is done and vice-versa
                            */
    UINT32 fsmcalen : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* FsmCalEn starts the voc-Xover Fsm */

  } Bits;
  UINT32 Data;

} DDRCRFSMCALN1_0_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL4N1_0_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b03cc)                                                        */
/* Register default value on BWV: 0x801F0000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* static configurations of tx and rx. Broadcast read not supported.
*/


#define DATACONTROL4N1_0_FNV_DDRIO_COMP_1_REG 0x1B1403CC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd_0 : 1;

                            /* Bits[0:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vsshiorvrefctl1 : 8;

                            /* Bits[8:1], Access Type=RW, default=0x00000000*/

                            /*
                               VssHi control bits[br] Field Description: [br]
                               [br] Field Bits Description[br] ------- ----
                               ---------------------------------[br]
                               disoverflow 24 Disable overflow logic from
                               BDW[br] fast panic enable 25 Bypass 2 flops in
                               panic path for faster panic response[br]
                               vsshivccd2by3cfgen 26 Forces the driver DAC to
                               get supply from 2/3 vccd[br] vsshivccd2by3cfg
                               27:29 Current trim setting for 2/3 vccd mode,
                               001 fast, 011 typical, 111 slow silicon [br]
                               ddrvssh2ndcompen 30 Enable second comparator
                               (ZBB mode)[br] comp high bwen 31 Improve
                               comparator performance to support low digital
                               voltage range
                            */
    UINT32 dqtxeqsel : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* DQ TxEq setting selection to achieve constant EQ */
    UINT32 rsvd_10 : 2;

                            /* Bits[11:10], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vrefpwrsave : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               If set to 0 (default), Vref generators selected
                               through RxVrefSel[3:0] are always on.[br] If set
                               to 1, Vref generators are switched off while in
                               Self Refresh.
                            */
    UINT32 vreftonblbus : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000008*/

                            /* Per-bit Enable connection to share Vref Bus */
    UINT32 rxvrefsel : 4;

                            /* Bits[20:17], Access Type=RW, default=0x0000000F*/

                            /* Per Bit Verf generator Enable */
    UINT32 refpiclkdelay : 6;

                            /* Bits[26:21], Access Type=RW, default=0x00000000*/

                            /* RefPiClkDelay */
    UINT32 fnvcrsdlbypassen : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /* FNV Slave Delay Line Bypass Enable */
    UINT32 fnvcrdllbypassen : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /* FNV DLL Bypass Enable */
    UINT32 fnvcrvisaen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               FNV Visa Fub Enable - data fub used for VISA if
                               asserted
                            */
    UINT32 writecrcenable : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /* Enable write crc mode */
    UINT32 rsvd_31 : 1;

                            /* Bits[31:31], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL4N1_0_FNV_DDRIO_COMP_1_STRUCT;

/* COMPDATA0N1_0_FNV_DDRIO_COMP_1_REG supported on:                             */
/*      BWV (0x402b03d4)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Comp Values. Broadcast read not supported.
*/


#define COMPDATA0N1_0_FNV_DDRIO_COMP_1_REG 0x1B1403D4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcompdrvup : 6;

                            /* Bits[5:0], Access Type=RWV, default=0x00000000*/

                            /*
                               Data Rcomp DrvUp Comp Value can be overriden via
                               message channel if periodical retrain is disable
                            */
    UINT32 spare0 : 3;

                            /* Bits[8:6], Access Type=RWV, default=0x00000000*/

                            /* Spare */
    UINT32 rcompdrvdown : 6;

                            /* Bits[14:9], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp DrvDown Comp Value */
    UINT32 vtcomp : 5;

                            /* Bits[19:15], Access Type=RWV, default=0x00000000*/

                            /* VT Comp Values */
    UINT32 tcocomp : 7;

                            /* Bits[26:20], Access Type=RWV, default=0x00000000*/

                            /* Data TCO Comp Value. */
    UINT32 slewratecomp : 5;

                            /* Bits[31:27], Access Type=RWV, default=0x00000000*/

                            /* Data Slew Rate Comp Value. */

  } Bits;
  UINT32 Data;

} COMPDATA0N1_0_FNV_DDRIO_COMP_1_STRUCT;

/* COMPDATA1N1_0_FNV_DDRIO_COMP_1_REG supported on:                             */
/*      BWV (0x402b03d8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Comp Values. Broadcast read not supported.
*/


#define COMPDATA1N1_0_FNV_DDRIO_COMP_1_REG 0x1B1403D8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcompodtup : 6;

                            /* Bits[5:0], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp OdtUp Comp Value */
    UINT32 rcompodtdown : 6;

                            /* Bits[11:6], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp Odt-Down Comp Value */
    UINT32 panicdrvdn : 10;

                            /* Bits[21:12], Access Type=RWV, default=0x00000000*/

                            /* Panic DrvDn RComp Value. */
    UINT32 panicdrvup : 10;

                            /* Bits[31:22], Access Type=RWV, default=0x00000000*/

                            /* Panic DrvUp RComp Comp Value. */

  } Bits;
  UINT32 Data;

} COMPDATA1N1_0_FNV_DDRIO_COMP_1_STRUCT;

/* DATAOFFSETTRAINN1_0_FNV_DDRIO_COMP_1_REG supported on:                       */
/*      BWV (0x402b03dc)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATAOFFSETTRAINN1_0_FNV_DDRIO_COMP_1_REG 0x1B1403DC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvenoffset : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained RxRcvEn Value. */
    UINT32 rxdqsoffset : 7;

                            /* Bits[12:6], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained Rx DQS Value. */
    UINT32 txdqoffset : 6;

                            /* Bits[18:13], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained Tx DQ Value. */
    UINT32 txdqsoffset : 6;

                            /* Bits[24:19], Access Type=RW, default=0x00000000*/

                            /* Ooffset added to Trained Tx DQS Value. */
    UINT32 vrefoffset : 7;

                            /* Bits[31:25], Access Type=RW, default=0x00000000*/

                            /*
                               2s Compliment offset added to Trained Vref
                               Value. Positive number increases Vref, and each
                               step is Vdd/384.
                            */

  } Bits;
  UINT32 Data;

} DATAOFFSETTRAINN1_0_FNV_DDRIO_COMP_1_STRUCT;


/* DATACONTROL0N1_0_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b03e8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL0N1_0_FNV_DDRIO_COMP_1_REG 0x1B1403E8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rxtrainingmode : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enables Read DqDqs Training Mode */
    UINT32 wltrainingmode : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /* Enables Write Leveling Training Mode */
    UINT32 rltrainingmode : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /* Enables Read Leveling Training Mode. */
    UINT32 senseamptrainingmode : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Enables SenseAmp offset cancellation training
                               mode.
                            */
    UINT32 txon : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               When set, forces DQ/DQS drive enable to active.
                               Used in power measurements and IO loopback mode
                            */
    UINT32 rfon : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down Disable: Forces register file read,
                               overriding the rank power down logic.
                            */
    UINT32 rxpion : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /* Power-down Disable: Forces RxDqs PI clocks on. */
    UINT32 txpion : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down Disable: Forces TxDq and TxDqs PI
                               clocks on.
                            */
    UINT32 internalclockson : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Forces on master DLL and all PI enables ON,
                               despite both channel in SelfRefresh, etc. low
                               power states.
                            */
    UINT32 saoffsettraintxon : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* SaOffsetTrainTxon */
    UINT32 txdisable : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down: All write commands are ignored for
                               this data-byte. Used in single-channel MCI mode.
                            */
    UINT32 rxdisable : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down: All read commands are ignored for
                               this data-byte. Used in single-channel MCI mode.
                            */
    UINT32 txlong : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Sets the duration of the first transmitted DQ
                               bit of the burst. 0=1UI, 1=2UI.
                            */
    UINT32 rsvd_13 : 5;

                            /* Bits[17:13], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 driversegmentenable : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Controls which segements of the driver are
                               enabled: {0: All, 1: Only ODT}.
                            */
    UINT32 rsvd_19 : 1;

                            /* Bits[19:19], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 readrfrd : 1;

                            /* Bits[20:20], Access Type=RWV, default=0x00000000*/

                            /*
                               Self clearing command bit. When set, it will
                               download the three 32 bit lines from the RegFile
                               associated with a read command to Rank =
                               ReadRFRank
                            */
    UINT32 readrfwr : 1;

                            /* Bits[21:21], Access Type=RWV, default=0x00000000*/

                            /*
                               Self clearing command bit. When set, it will
                               download the three 32 bit lines from the RegFile
                               associated with a write command to Rank =
                               ReadRFRank
                            */
    UINT32 readrfrank : 3;

                            /* Bits[24:22], Access Type=RWV, default=0x00000000*/

                            /*
                               Specifies the rank that ReadRFRd or ReadRFWr
                               will manually download the CR values from
                            */
    UINT32 forceodton : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /* ODT is forced-on. */
    UINT32 odtsampoff : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /* ODT and Senseamp are forced-off. */
    UINT32 disableodtstatic : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /* not used */
    UINT32 ddrcrforceodton : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               force ODT to the transmitter on, regardless of
                               state of DriveEnable
                            */
    UINT32 spare : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* spare */
    UINT32 xovercal : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /* Enables Xover Calibration Training Mode */
    UINT32 longpreambleenable : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* Enables long preamble for DDR4 devices */

  } Bits;
  UINT32 Data;

} DATACONTROL0N1_0_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL1N1_0_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b03ec)                                                        */
/* Register default value on BWV: 0x0000003C                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL1N1_0_FNV_DDRIO_COMP_1_REG 0x1B1403EC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd_0 : 10;

                            /* Bits[9:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rxbiasctl : 3;

                            /* Bits[12:10], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the Current and BW of the Receiver: {0:
                               0.34Idll, 1: 0.66Idll, 2: 0.88Idll, 3: Idll, 4:
                               1.33Idll, 5: 1.66Idll[br] , 6: 2.00Idll, 7:
                               2.33Idll}
                            */
    UINT32 odtdelay : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000000*/

                            /*
                               Controls ODT turn-on delay. To turn on N tQCK
                               before RcvEn, program to RcvEn[8:6] N + 4.
                            */
    UINT32 odtduration : 3;

                            /* Bits[19:17], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the ODT ON duration from (Code,
                               Duration) = (0x0, 11 tQCK) to (0x7, 18 tQCK)
                            */
    UINT32 senseampdelay : 4;

                            /* Bits[23:20], Access Type=RW, default=0x00000000*/

                            /*
                               Controls Senseamp turn-on delay. To turn on N
                               tQCK before RcvEn, program to RcvEn[8:6] N + 4.
                            */
    UINT32 senseampduration : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the SenseAmp ON duration from (Code,
                               Duration) = (0x0, 11 tQCK) to (0x7, 18 tQCK)
                            */
    UINT32 rsvd_27 : 5;

                            /* Bits[31:27], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL1N1_0_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL2N1_0_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b03f0)                                                        */
/* Register default value on BWV: 0x07800000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL2N1_0_FNV_DDRIO_COMP_1_REG 0x1B1403F0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rxvocselqnnnh : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Enables SenseAmp offset cancellation training
                               mode
                            */
    UINT32 forcebiason : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Force on the internal Vref and Rx bias circuit,
                               regardless of any other power downs
                            */
    UINT32 forcerxon : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Force on the RxAmp only (as opposed to
                               OdtSampOn, which turns on both ODT and the
                               amplifier).[br] Use for overclocking support
                               where we may not be able to hit the fast exit
                               latency
                            */
    UINT32 ddr4extend : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /* Enable finer vref resolution in ddr4 */
    UINT32 cttermination : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /* DDRCOMP_CR_DDRCRCOMPOVR CTTermination */
    UINT32 dfelben : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* Digital far end loopback enable */
    UINT32 dfelbtxdmuxsel : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /* Digital far end loopback TX FIFO data mux sel */
    UINT32 spare1 : 2;

                            /* Bits[12:11], Access Type=RW, default=0x00000000*/

                            /* Spare1 */
    UINT32 txddjcen : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000000*/

                            /* TxddjcEn */
    UINT32 dfeenable : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /* DfeEnable */
    UINT32 dfedlysel : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /* DfeDlySel */
    UINT32 dfecode : 4;

                            /* Bits[22:19], Access Type=RW, default=0x00000000*/

                            /*
                               DfeCode: binary code 0000 to 1000 for DFE
                               offset, mid-code code for zero offset is 0100
                            */
    UINT32 rxdqssaoffset : 5;

                            /* Bits[27:23], Access Type=RW, default=0x0000000F*/

                            /* strobe Rx Amp offset control */
    UINT32 rsvd_28 : 4;

                            /* Bits[31:28], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL2N1_0_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL3N1_0_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b03f4)                                                        */
/* Register default value on BWV: 0x00000FCF                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* static configurations of tx and rx. Broadcast read not supported.
*/


#define DATACONTROL3N1_0_FNV_DDRIO_COMP_1_REG 0x1B1403F4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 drvstaticlegcfg : 2;

                            /* Bits[1:0], Access Type=RW, default=0x00000003*/

                            /*
                               binary default setting for static legs in DRV
                               mode[br] 0 0 0 legs (EQ disabled)[br] 0 1 3 legs
                               (EQ max 3 legs)[br] 1 0 6 legs (EQ max 6
                               legs)[br] 1 1 12 legs (EQ max 12 legs)[br] In
                               most cases, we would set this to be 11, but for
                               some configurations that require a higher [br]
                               Ron value, we need to reduce the number of
                               static legs enabled so that fast corner can hit
                               [br] the higher Ron target value.
                            */
    UINT32 odtstaticlegcfg : 2;

                            /* Bits[3:2], Access Type=RW, default=0x00000003*/

                            /*
                               binary default setting for static legs in ODT
                               mode[br] 0 0 0 legs (EQ disabled)[br] 0 1 3 legs
                               (EQ max 3 legs)[br] 1 0 6 legs (EQ max 6
                               legs)[br] 1 1 12 legs (EQ max 12 legs)[br] In
                               most cases, we would set this to be 11, but for
                               some configurations that require a higher [br]
                               Ron value, we need to reduce the number of
                               static legs enabled so that fast corner can hit
                               [br] the higher Ron target value.
                            */
    UINT32 lvlshft_holden : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               level shift hold enable[br] Holds the HV control
                               values and power down mode the level
                               shifters.[br] Apply '1' after training. Slow
                               timing - not advised for fast enabling
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 odtsegmentenable : 3;

                            /* Bits[8:6], Access Type=RW, default=0x00000007*/

                            /*
                               This will tell which segments are enabled out of
                               reset. [br] After that, a shift register will
                               determine the enabled segments
                            */
    UINT32 datasegmentenable : 3;

                            /* Bits[11:9], Access Type=RW, default=0x00000007*/

                            /*
                               This will tell which segments are enabled out of
                               reset.
                            */
    UINT32 longodtr2w : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               When set, it will extends ODT by 1 qclk on read
                               to write turnarounds. hsd 230773
                            */
    UINT32 spare1 : 8;

                            /* Bits[20:13], Access Type=RW, default=0x00000000*/

                            /* Spare1 */
    UINT32 ddrcrctlecapen : 2;

                            /* Bits[22:21], Access Type=RW, default=0x00000000*/

                            /* ctle capacitor setting */
    UINT32 ddrcrctleresen : 2;

                            /* Bits[24:23], Access Type=RW, default=0x00000000*/

                            /* ctle resistor setting */
    UINT32 pcasbiasclosedloopen : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiassel : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiasfoldedlegtrim : 2;

                            /* Bits[28:27], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiasgcncomp : 2;

                            /* Bits[30:29], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 postambleenable : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* Spare */

  } Bits;
  UINT32 Data;

} DATACONTROL3N1_0_FNV_DDRIO_COMP_1_STRUCT;

/* VSSHIORVREFCONTROLN1_0_FNV_DDRIO_COMP_1_REG supported on:                    */
/*      BWV (0x402b03f8)                                                        */
/* Register default value on BWV: 0x004D8238                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, only. Broadcast read not supported.
*/


#define VSSHIORVREFCONTROLN1_0_FNV_DDRIO_COMP_1_REG 0x1B1403F8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 vsshiorvrefctl : 24;

                            /* Bits[23:0], Access Type=RW, default=0x004D8238*/

                            /*
                               Channel 0 fubs : VssHi adjust setting. Channel1
                               fubs: DIMM VREF adjust settings.[br] [br] VssHi
                               Field Description: [br] [br] Field Bits
                               Description[br] ------- ---- -------------------
                               ------------------------------------------------
                               ------------------------------------------------
                               --------------------------------------------[br]
                               SelCode 23 Selects the code to output: {0: Code,
                               1: TCode}[br] GainBoost 22 Enable gain boost is
                               panic mode by updating code/tcode [br]
                               PanicVoltage 21:18 Unsigned integer controlling
                               the voltage error on VssHi that will trigger the
                               panic driver. Step size of VccDDQ/192 (0 to
                               117mV)[br] CloseLoop 17 Enables the VssHi close
                               loop tracking [br] PanicEn 16 Enables the VssHi
                               Panic Driver[br] BWError 15:14 Limits the loop
                               gain (ie: difference between code and tcode) to
                               +/- 2^(SlowBWError)[br] OpenLoop 13 Operates
                               VssHi in open loop mode with the target Vref
                               code directly driving the output DAC with no
                               feedback involved[br] SampleDivider 12:10
                               Controls the loop bandwidth by dividing down the
                               input clock: {0: Qclk, 1: Qclk/2, 2: Qclk/4, 3:
                               Qclk/8, 4: Qclk/16, 5: Qclk/32, 6: Qclk/64, 7:
                               Qclk/128}[br] LoBWDivider 9:8 For the slow
                               integrator, selects the net number of samples in
                               a given direction to trip the filter. {0: 4
                               samples, 1: 16 samples, 2: 32 samples, 3: 64
                               samples}[br] HiBWDivider 7:6 For the fast
                               integrator, selects the net number of samples in
                               a given direction to trip the filter. {0: 4
                               samples, 1: 16 samples, 2: 32 samples, 3: 64
                               samples}[br] Target 5:0 Unsigned integer
                               controlling the target VssHi voltage. Step size
                               of VccDDQ/192 and starting value of
                               VccDDQ*20/192
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} VSSHIORVREFCONTROLN1_0_FNV_DDRIO_COMP_1_STRUCT;


/* RXGROUP0N0RANK0_1_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0400)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank0. Broadcast reads are not supported.
*/


#define RXGROUP0N0RANK0_1_FNV_DDRIO_COMP_1_REG 0x1B140400

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* readx4modeenb */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_P to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_N to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS (0: 1/16 UI offset, [br] 1:
                               3/16 UI Offset, 2: 5/16 UI Offsets, 3: 7/16 UI
                               Offsets, 4: 9/16 UI Offsets, 5,6,7: 11/16 UI
                               Offsets.)
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               CTLE current steering tuning (0=no eq, 7=max
                               eq). It is decoded to[br] CTLE resistor tuning:
                               00 - 3R (10.8Kohms), 01/10 - R (3.6Kohms), 11 -
                               R/3 (1.2Kohms)[br] CTLE capacitor tuning: 00 -
                               0C (not used), 01 - 1C (200ff), 10 - 2C (400ff),
                               11 - 3C (600ff)
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N0RANK0_1_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N0RANK1_1_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0404)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank1. Broadcast reads are not supported.
*/


#define RXGROUP0N0RANK1_1_FNV_DDRIO_COMP_1_REG 0x1B140404

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* readx4modeenb */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_P to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_N to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               CTLE current steering tuning (0=no eq, 7=max
                               eq). It is decoded to[br] CTLE resistor tuning:
                               00 - 3R (10.8Kohms), 01/10 - R (3.6Kohms), 11 -
                               R/3 (1.2Kohms)[br] CTLE capacitor tuning: 00 -
                               0C (not used), 01 - 1C (200ff), 10 - 2C (400ff),
                               11 - 3C (600ff)
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N0RANK1_1_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N0RANK2_1_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0408)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank2. Broadcast read not supported.
*/


#define RXGROUP0N0RANK2_1_FNV_DDRIO_COMP_1_REG 0x1B140408

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* readx4modeenb */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_P to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_P to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               CTLE current steering tuning (0=no eq, 7=max
                               eq). It is decoded to[br] CTLE resistor tuning:
                               00 - 3R (10.8Kohms), 01/10 - R (3.6Kohms), 11 -
                               R/3 (1.2Kohms)[br] CTLE capacitor tuning: 00 -
                               0C (not used), 01 - 1C (200ff), 10 - 2C (400ff),
                               11 - 3C (600ff)
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N0RANK2_1_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N0RANK3_1_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b040c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank3. Broadcast read not supported.
*/


#define RXGROUP0N0RANK3_1_FNV_DDRIO_COMP_1_REG 0x1B14040C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* readx4modeenb */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_P to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_N to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               CTLE current steering tuning (0=no eq, 7=max
                               eq). It is decoded to[br] CTLE resistor tuning:
                               00 - 3R (10.8Kohms), 01/10 - R (3.6Kohms), 11 -
                               R/3 (1.2Kohms)[br] CTLE capacitor tuning: 00 -
                               0C (not used), 01 - 1C (200ff), 10 - 2C (400ff),
                               11 - 3C (600ff)
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N0RANK3_1_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N0RANK0_1_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0440)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N0RANK0_1_FNV_DDRIO_COMP_1_REG 0x1B140440

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* select one of the four DQ Clk */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N0RANK0_1_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N0RANK1_1_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0444)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N0RANK1_1_FNV_DDRIO_COMP_1_REG 0x1B140444

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* Select one of the four DQ clks */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N0RANK1_1_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N0RANK2_1_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0448)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N0RANK2_1_FNV_DDRIO_COMP_1_REG 0x1B140448

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* Select one of the four DQ clks */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N0RANK2_1_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N0RANK3_1_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b044c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N0RANK3_1_FNV_DDRIO_COMP_1_REG 0x1B14044C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* Select one of the four DQ clk */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N0RANK3_1_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN0RANK0_1_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0480)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN0RANK0_1_FNV_DDRIO_COMP_1_REG 0x1B140480

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               selects which skewed DQSP (to sample even bits)
                               is used in the RX FIFO. For proper operation,
                               always pick latest DQSP
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               selects which skewed DQSN (to sample odd bits)
                               is used in the RX FIFO. For proper operation,
                               always pick latest DQSN
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN0RANK0_1_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN0RANK1_1_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0484)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN0RANK1_1_FNV_DDRIO_COMP_1_REG 0x1B140484

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               [0]=0 selects the raw output from the nibble DQS
                               amplifier; [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN0RANK1_1_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN0RANK2_1_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0488)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN0RANK2_1_FNV_DDRIO_COMP_1_REG 0x1B140488

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               [0]=0 selects the raw output from the nibble DQS
                               amplifier; [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN0RANK2_1_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN0RANK3_1_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b048c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN0RANK3_1_FNV_DDRIO_COMP_1_REG 0x1B14048C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               [0]=0 selects the raw output from the nibble DQS
                               amplifier; [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN0RANK3_1_FNV_DDRIO_COMP_1_STRUCT;

/* RXVREFCTRLN0_1_FNV_DDRIO_COMP_1_REG supported on:                            */
/*      BWV (0x402b04a4)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* RxVrefCtrl. Broadcast read not supported.
*/


#define RXVREFCTRLN0_1_FNV_DDRIO_COMP_1_REG 0x1B1404A4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 vrefperbit0 : 7;

                            /* Bits[6:0], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben0 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 vrefperbit1 : 7;

                            /* Bits[14:8], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben1 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /*
                               enables fine grain Vref control, shift down the
                               Vref voltage by ~0.5 stepsize
                            */
    UINT32 vrefperbit2 : 7;

                            /* Bits[22:16], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben2 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /*
                               enables fine grain Vref control, shift down the
                               Vref voltage by ~0.5 stepsize
                            */
    UINT32 vrefperbit3 : 7;

                            /* Bits[30:24], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben3 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* shift down the Vref voltage by ~0.5 stepsize */

  } Bits;
  UINT32 Data;

} RXVREFCTRLN0_1_FNV_DDRIO_COMP_1_STRUCT;

/* DATATRAINFEEDBACKN0_1_FNV_DDRIO_COMP_1_REG supported on:                     */
/*      BWV (0x402b04a8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Training Feedback Results. Broadcast read not supported.
*/


#define DATATRAINFEEDBACKN0_1_FNV_DDRIO_COMP_1_REG 0x1B1404A8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 datatrainfeedback : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Data Training Feedback Storage[br] [br]
                               DataTrainFeedback Description:[br] Training Step
                               Bits Nibble Description[br] -------------- ----
                               ------- --------------------------[br] Cross
                               Over Cal 0 0 Tx Dqs Phase Detection[br] Cross
                               Over Cal 1 0 Tx Dq Phase Detection[br] Cross
                               Over Cal 2 0 Rec En Phase Detection[br] RcvEn
                               8:0 0 Byte detection[br] [br] Wr Leveling 8:0 0
                               Byte detection[br] Senseamp offset 3:0 0 Dq
                               Senseamp offset Detection
                            */
    UINT32 rsvd_9 : 23;

                            /* Bits[31:9], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATATRAINFEEDBACKN0_1_FNV_DDRIO_COMP_1_STRUCT;

/* DDRCRFSMCALN0_1_FNV_DDRIO_COMP_1_REG supported on:                           */
/*      BWV (0x402b04c8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Fsm for  Voc and Xover caliberation, Voc caliberation is a procedure that cancel out intrinsic offset in analogue receivers and Xover training ,it aligns all the local dll to the global qclk
*/


#define DDRCRFSMCALN0_1_FNV_DDRIO_COMP_1_REG 0x1B1404C8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0fsm : 5;

                            /* Bits[4:0], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of first receiver is done(read only)
                            */
    UINT32 saoffset1fsm : 5;

                            /* Bits[9:5], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of second receiver is done(read only)
                            */
    UINT32 saoffset2fsm : 5;

                            /* Bits[14:10], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of third receiver is done(read only)
                            */
    UINT32 saoffset3fsm : 5;

                            /* Bits[19:15], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of fourth receiver is done(read only)
                            */
    UINT32 fsmcalcomplete : 1;

                            /* Bits[20:20], Access Type=ROV, default=0x00000000*/

                            /* when the caliberation is done */
    UINT32 refpiclkdelayfsm : 6;

                            /* Bits[26:21], Access Type=ROV, default=0x00000000*/

                            /*
                               Load FSM with a code at which , the transition
                               is detected.
                            */
    UINT32 fsmcaldone : 1;

                            /* Bits[27:27], Access Type=ROV, default=0x00000000*/

                            /* when the caliberation of voc or x-over is done */
    UINT32 fsmtimersel : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /* Timer is set for either 8 cycles or 16 cycles */
    UINT32 fsmpatternsel : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               It selects whther the pattern of three bit or
                               two bit is selected when the transition happen
                               from 1-->0 for pdout and receiver , to avoid
                               glitch
                            */
    UINT32 fsmvoccal : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               This bit tells , wether the xover or voc
                               caliberation will be done, if its zero x-over
                               caliberation is done and vice-versa
                            */
    UINT32 fsmcalen : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* FsmCalEn starts the voc-Xover Fsm */

  } Bits;
  UINT32 Data;

} DDRCRFSMCALN0_1_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL4N0_1_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b04cc)                                                        */
/* Register default value on BWV: 0x801F0000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* static configurations of tx and rx. Broadcast read not supported.
*/


#define DATACONTROL4N0_1_FNV_DDRIO_COMP_1_REG 0x1B1404CC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd_0 : 1;

                            /* Bits[0:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vsshiorvrefctl1 : 8;

                            /* Bits[8:1], Access Type=RW, default=0x00000000*/

                            /*
                               VssHi control bits[br] Field Description: [br]
                               [br] Field Bits Description[br] ------- ----
                               ---------------------------------[br]
                               disoverflow 24 Disable overflow logic from
                               BDW[br] fast panic enable 25 Bypass 2 flops in
                               panic path for faster panic response[br]
                               vsshivccd2by3cfgen 26 Forces the driver DAC to
                               get supply from 2/3 vccd[br] vsshivccd2by3cfg
                               27:29 Current trim setting for 2/3 vccd mode,
                               001 fast, 011 typical, 111 slow silicon [br]
                               ddrvssh2ndcompen 30 Enable second comparator
                               (ZBB mode)[br] comp high bwen 31 Improve
                               comparator performance to support low digital
                               voltage range
                            */
    UINT32 dqtxeqsel : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* DQ TxEq setting selection to achieve constant EQ */
    UINT32 rsvd_10 : 2;

                            /* Bits[11:10], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vrefpwrsave : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               If set to 0 (default), Vref generators selected
                               through RxVrefSel[3:0] are always on.[br] If set
                               to 1, Vref generators are switched off while in
                               Self Refresh.
                            */
    UINT32 vreftonblbus : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000008*/

                            /* Per-bit Enable connection to share Vref Bus */
    UINT32 rxvrefsel : 4;

                            /* Bits[20:17], Access Type=RW, default=0x0000000F*/

                            /* Per Bit Verf generator Enable */
    UINT32 refpiclkdelay : 6;

                            /* Bits[26:21], Access Type=RW, default=0x00000000*/

                            /* RefPiClkDelay */
    UINT32 fnvcrsdlbypassen : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /* FNV Slave Delay Line Bypass Enable */
    UINT32 fnvcrdllbypassen : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /* FNV DLL Bypass Enable */
    UINT32 fnvcrvisaen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               FNV Visa Fub Enable - data fub used for VISA if
                               asserted
                            */
    UINT32 writecrcenable : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /* Enable write crc mode */
    UINT32 rsvd_31 : 1;

                            /* Bits[31:31], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL4N0_1_FNV_DDRIO_COMP_1_STRUCT;

/* COMPDATA0N0_1_FNV_DDRIO_COMP_1_REG supported on:                             */
/*      BWV (0x402b04d4)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Comp Values. Broadcast read not supported.
*/


#define COMPDATA0N0_1_FNV_DDRIO_COMP_1_REG 0x1B1404D4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcompdrvup : 6;

                            /* Bits[5:0], Access Type=RWV, default=0x00000000*/

                            /*
                               Data Rcomp DrvUp Comp Value can be overriden via
                               message channel if periodical retrain is disable
                            */
    UINT32 spare0 : 3;

                            /* Bits[8:6], Access Type=RWV, default=0x00000000*/

                            /* Spare */
    UINT32 rcompdrvdown : 6;

                            /* Bits[14:9], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp DrvDown Comp Value */
    UINT32 vtcomp : 5;

                            /* Bits[19:15], Access Type=RWV, default=0x00000000*/

                            /* VT Comp Values */
    UINT32 tcocomp : 7;

                            /* Bits[26:20], Access Type=RWV, default=0x00000000*/

                            /* Data TCO Comp Value. */
    UINT32 slewratecomp : 5;

                            /* Bits[31:27], Access Type=RWV, default=0x00000000*/

                            /* Data Slew Rate Comp Value. */

  } Bits;
  UINT32 Data;

} COMPDATA0N0_1_FNV_DDRIO_COMP_1_STRUCT;

/* COMPDATA1N0_1_FNV_DDRIO_COMP_1_REG supported on:                             */
/*      BWV (0x402b04d8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Comp Values. Broadcast read not supported.
*/


#define COMPDATA1N0_1_FNV_DDRIO_COMP_1_REG 0x1B1404D8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcompodtup : 6;

                            /* Bits[5:0], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp OdtUp Comp Value */
    UINT32 rcompodtdown : 6;

                            /* Bits[11:6], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp Odt-Down Comp Value */
    UINT32 panicdrvdn : 10;

                            /* Bits[21:12], Access Type=RWV, default=0x00000000*/

                            /* Panic DrvDn RComp Value. */
    UINT32 panicdrvup : 10;

                            /* Bits[31:22], Access Type=RWV, default=0x00000000*/

                            /* Panic DrvUp RComp Comp Value. */

  } Bits;
  UINT32 Data;

} COMPDATA1N0_1_FNV_DDRIO_COMP_1_STRUCT;

/* DATAOFFSETTRAINN0_1_FNV_DDRIO_COMP_1_REG supported on:                       */
/*      BWV (0x402b04dc)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATAOFFSETTRAINN0_1_FNV_DDRIO_COMP_1_REG 0x1B1404DC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvenoffset : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained RxRcvEn Value. */
    UINT32 rxdqsoffset : 7;

                            /* Bits[12:6], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained Rx DQS Value. */
    UINT32 txdqoffset : 6;

                            /* Bits[18:13], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained Tx DQ Value. */
    UINT32 txdqsoffset : 6;

                            /* Bits[24:19], Access Type=RW, default=0x00000000*/

                            /* Ooffset added to Trained Tx DQS Value. */
    UINT32 vrefoffset : 7;

                            /* Bits[31:25], Access Type=RW, default=0x00000000*/

                            /*
                               2s Compliment offset added to Trained Vref
                               Value. Positive number increases Vref, and each
                               step is Vdd/384.
                            */

  } Bits;
  UINT32 Data;

} DATAOFFSETTRAINN0_1_FNV_DDRIO_COMP_1_STRUCT;


/* DATACONTROL0N0_1_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b04e8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL0N0_1_FNV_DDRIO_COMP_1_REG 0x1B1404E8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rxtrainingmode : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enables Read DqDqs Training Mode */
    UINT32 wltrainingmode : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /* Enables Write Leveling Training Mode */
    UINT32 rltrainingmode : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /* Enables Read Leveling Training Mode. */
    UINT32 senseamptrainingmode : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Enables SenseAmp offset cancellation training
                               mode.
                            */
    UINT32 txon : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               When set, forces DQ/DQS drive enable to active.
                               Used in power measurements and IO loopback mode
                            */
    UINT32 rfon : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down Disable: Forces register file read,
                               overriding the rank power down logic.
                            */
    UINT32 rxpion : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /* Power-down Disable: Forces RxDqs PI clocks on. */
    UINT32 txpion : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down Disable: Forces TxDq and TxDqs PI
                               clocks on.
                            */
    UINT32 internalclockson : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Forces on master DLL and all PI enables ON,
                               despite both channel in SelfRefresh, etc. low
                               power states.
                            */
    UINT32 saoffsettraintxon : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* SaOffsetTrainTxon */
    UINT32 txdisable : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down: All write commands are ignored for
                               this data-byte. Used in single-channel MCI mode.
                            */
    UINT32 rxdisable : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down: All read commands are ignored for
                               this data-byte. Used in single-channel MCI mode.
                            */
    UINT32 txlong : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Sets the duration of the first transmitted DQ
                               bit of the burst. 0=1UI, 1=2UI.
                            */
    UINT32 rsvd_13 : 5;

                            /* Bits[17:13], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 driversegmentenable : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Controls which segements of the driver are
                               enabled: {0: All, 1: Only ODT}.
                            */
    UINT32 rsvd_19 : 1;

                            /* Bits[19:19], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 readrfrd : 1;

                            /* Bits[20:20], Access Type=RWV, default=0x00000000*/

                            /*
                               Self clearing command bit. When set, it will
                               download the three 32 bit lines from the RegFile
                               associated with a read command to Rank =
                               ReadRFRank
                            */
    UINT32 readrfwr : 1;

                            /* Bits[21:21], Access Type=RWV, default=0x00000000*/

                            /*
                               Self clearing command bit. When set, it will
                               download the three 32 bit lines from the RegFile
                               associated with a write command to Rank =
                               ReadRFRank
                            */
    UINT32 readrfrank : 3;

                            /* Bits[24:22], Access Type=RWV, default=0x00000000*/

                            /*
                               Specifies the rank that ReadRFRd or ReadRFWr
                               will manually download the CR values from
                            */
    UINT32 forceodton : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /* ODT is forced-on. */
    UINT32 odtsampoff : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /* ODT and Senseamp are forced-off. */
    UINT32 disableodtstatic : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /* not used */
    UINT32 ddrcrforceodton : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               force ODT to the transmitter on, regardless of
                               state of DriveEnable
                            */
    UINT32 spare : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* spare */
    UINT32 xovercal : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /* Enables Xover Calibration Training Mode */
    UINT32 longpreambleenable : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* Enables long preamble for DDR4 devices */

  } Bits;
  UINT32 Data;

} DATACONTROL0N0_1_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL1N0_1_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b04ec)                                                        */
/* Register default value on BWV: 0x0000003C                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL1N0_1_FNV_DDRIO_COMP_1_REG 0x1B1404EC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd_0 : 10;

                            /* Bits[9:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rxbiasctl : 3;

                            /* Bits[12:10], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the Current and BW of the Receiver: {0:
                               0.34Idll, 1: 0.66Idll, 2: 0.88Idll, 3: Idll, 4:
                               1.33Idll, 5: 1.66Idll[br] , 6: 2.00Idll, 7:
                               2.33Idll}
                            */
    UINT32 odtdelay : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000000*/

                            /*
                               Controls ODT turn-on delay. To turn on N tQCK
                               before RcvEn, program to RcvEn[8:6] N + 4.
                            */
    UINT32 odtduration : 3;

                            /* Bits[19:17], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the ODT ON duration from (Code,
                               Duration) = (0x0, 11 tQCK) to (0x7, 18 tQCK)
                            */
    UINT32 senseampdelay : 4;

                            /* Bits[23:20], Access Type=RW, default=0x00000000*/

                            /*
                               Controls Senseamp turn-on delay. To turn on N
                               tQCK before RcvEn, program to RcvEn[8:6] N + 4.
                            */
    UINT32 senseampduration : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the SenseAmp ON duration from (Code,
                               Duration) = (0x0, 11 tQCK) to (0x7, 18 tQCK)
                            */
    UINT32 rsvd_27 : 5;

                            /* Bits[31:27], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL1N0_1_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL2N0_1_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b04f0)                                                        */
/* Register default value on BWV: 0x07800000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL2N0_1_FNV_DDRIO_COMP_1_REG 0x1B1404F0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rxvocselqnnnh : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Enables SenseAmp offset cancellation training
                               mode
                            */
    UINT32 forcebiason : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Force on the internal Vref and Rx bias circuit,
                               regardless of any other power downs
                            */
    UINT32 forcerxon : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Force on the RxAmp only (as opposed to
                               OdtSampOn, which turns on both ODT and the
                               amplifier).[br] Use for overclocking support
                               where we may not be able to hit the fast exit
                               latency
                            */
    UINT32 ddr4extend : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /* Enable finer vref resolution in ddr4 */
    UINT32 cttermination : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /* DDRCOMP_CR_DDRCRCOMPOVR CTTermination */
    UINT32 dfelben : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* Digital far end loopback enable */
    UINT32 dfelbtxdmuxsel : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /* Digital far end loopback TX FIFO data mux sel */
    UINT32 spare1 : 2;

                            /* Bits[12:11], Access Type=RW, default=0x00000000*/

                            /* Spare1 */
    UINT32 txddjcen : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000000*/

                            /* TxddjcEn */
    UINT32 dfeenable : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /* DfeEnable */
    UINT32 dfedlysel : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /* DfeDlySel */
    UINT32 dfecode : 4;

                            /* Bits[22:19], Access Type=RW, default=0x00000000*/

                            /*
                               DfeCode: binary code 0000 to 1000 for DFE
                               offset, mid-code code for zero offset is 0100
                            */
    UINT32 rxdqssaoffset : 5;

                            /* Bits[27:23], Access Type=RW, default=0x0000000F*/

                            /* strobe Rx Amp offset control */
    UINT32 rsvd_28 : 4;

                            /* Bits[31:28], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL2N0_1_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL3N0_1_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b04f4)                                                        */
/* Register default value on BWV: 0x00000FCF                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* static configurations of tx and rx. Broadcast read not supported.
*/


#define DATACONTROL3N0_1_FNV_DDRIO_COMP_1_REG 0x1B1404F4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 drvstaticlegcfg : 2;

                            /* Bits[1:0], Access Type=RW, default=0x00000003*/

                            /*
                               binary default setting for static legs in DRV
                               mode[br] 0 0 0 legs (EQ disabled)[br] 0 1 3 legs
                               (EQ max 3 legs)[br] 1 0 6 legs (EQ max 6
                               legs)[br] 1 1 12 legs (EQ max 12 legs)[br] In
                               most cases, we would set this to be 11, but for
                               some configurations that require a higher [br]
                               Ron value, we need to reduce the number of
                               static legs enabled so that fast corner can hit
                               [br] the higher Ron target value.
                            */
    UINT32 odtstaticlegcfg : 2;

                            /* Bits[3:2], Access Type=RW, default=0x00000003*/

                            /*
                               binary default setting for static legs in ODT
                               mode[br] 0 0 0 legs (EQ disabled)[br] 0 1 3 legs
                               (EQ max 3 legs)[br] 1 0 6 legs (EQ max 6
                               legs)[br] 1 1 12 legs (EQ max 12 legs)[br] In
                               most cases, we would set this to be 11, but for
                               some configurations that require a higher [br]
                               Ron value, we need to reduce the number of
                               static legs enabled so that fast corner can hit
                               [br] the higher Ron target value.
                            */
    UINT32 lvlshft_holden : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               level shift hold enable[br] Holds the HV control
                               values and power down mode the level
                               shifters.[br] Apply '1' after training. Slow
                               timing - not advised for fast enabling
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 odtsegmentenable : 3;

                            /* Bits[8:6], Access Type=RW, default=0x00000007*/

                            /*
                               This will tell which segments are enabled out of
                               reset. [br] After that, a shift register will
                               determine the enabled segments
                            */
    UINT32 datasegmentenable : 3;

                            /* Bits[11:9], Access Type=RW, default=0x00000007*/

                            /*
                               This will tell which segments are enabled out of
                               reset.
                            */
    UINT32 longodtr2w : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               When set, it will extends ODT by 1 qclk on read
                               to write turnarounds. hsd 230773
                            */
    UINT32 spare1 : 8;

                            /* Bits[20:13], Access Type=RW, default=0x00000000*/

                            /* Spare1 */
    UINT32 ddrcrctlecapen : 2;

                            /* Bits[22:21], Access Type=RW, default=0x00000000*/

                            /* ctle capacitor setting */
    UINT32 ddrcrctleresen : 2;

                            /* Bits[24:23], Access Type=RW, default=0x00000000*/

                            /* ctle resistor setting */
    UINT32 pcasbiasclosedloopen : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiassel : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiasfoldedlegtrim : 2;

                            /* Bits[28:27], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiasgcncomp : 2;

                            /* Bits[30:29], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 postambleenable : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* Spare */

  } Bits;
  UINT32 Data;

} DATACONTROL3N0_1_FNV_DDRIO_COMP_1_STRUCT;

/* VSSHIORVREFCONTROLN0_1_FNV_DDRIO_COMP_1_REG supported on:                    */
/*      BWV (0x402b04f8)                                                        */
/* Register default value on BWV: 0x004D8238                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, only. Broadcast read not supported.
*/


#define VSSHIORVREFCONTROLN0_1_FNV_DDRIO_COMP_1_REG 0x1B1404F8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 vsshiorvrefctl : 24;

                            /* Bits[23:0], Access Type=RW, default=0x004D8238*/

                            /*
                               Channel 0 fubs : VssHi adjust setting. Channel1
                               fubs: DIMM VREF adjust settings.[br] [br] VssHi
                               Field Description: [br] [br] Field Bits
                               Description[br] ------- ---- -------------------
                               ------------------------------------------------
                               ------------------------------------------------
                               --------------------------------------------[br]
                               SelCode 23 Selects the code to output: {0: Code,
                               1: TCode}[br] GainBoost 22 Enable gain boost is
                               panic mode by updating code/tcode [br]
                               PanicVoltage 21:18 Unsigned integer controlling
                               the voltage error on VssHi that will trigger the
                               panic driver. Step size of VccDDQ/192 (0 to
                               117mV)[br] CloseLoop 17 Enables the VssHi close
                               loop tracking [br] PanicEn 16 Enables the VssHi
                               Panic Driver[br] BWError 15:14 Limits the loop
                               gain (ie: difference between code and tcode) to
                               +/- 2^(SlowBWError)[br] OpenLoop 13 Operates
                               VssHi in open loop mode with the target Vref
                               code directly driving the output DAC with no
                               feedback involved[br] SampleDivider 12:10
                               Controls the loop bandwidth by dividing down the
                               input clock: {0: Qclk, 1: Qclk/2, 2: Qclk/4, 3:
                               Qclk/8, 4: Qclk/16, 5: Qclk/32, 6: Qclk/64, 7:
                               Qclk/128}[br] LoBWDivider 9:8 For the slow
                               integrator, selects the net number of samples in
                               a given direction to trip the filter. {0: 4
                               samples, 1: 16 samples, 2: 32 samples, 3: 64
                               samples}[br] HiBWDivider 7:6 For the fast
                               integrator, selects the net number of samples in
                               a given direction to trip the filter. {0: 4
                               samples, 1: 16 samples, 2: 32 samples, 3: 64
                               samples}[br] Target 5:0 Unsigned integer
                               controlling the target VssHi voltage. Step size
                               of VccDDQ/192 and starting value of
                               VccDDQ*20/192
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} VSSHIORVREFCONTROLN0_1_FNV_DDRIO_COMP_1_STRUCT;


/* RXGROUP0N1RANK0_1_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0500)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank0. Broadcast read not supported.
*/


#define RXGROUP0N1RANK0_1_FNV_DDRIO_COMP_1_REG 0x1B140500

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* ReadX8ModeEn */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /* common DQS_P delay control, per nibble */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /* common DQS_N delay control, per nibble */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               Rx Equalization code: {4:3} controls the cap
                               tuning 0: (not used), 1: 200ff, 2: 400ff, 3:
                               600ff, [br] controls the resistor tuning (0: 3R,
                               1: 1R, 2: 1R, 3: R/3).
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N1RANK0_1_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N1RANK1_1_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0504)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank0. Broadcast read not supported.
*/


#define RXGROUP0N1RANK1_1_FNV_DDRIO_COMP_1_REG 0x1B140504

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* ReadX8ModeEn */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /* common DQS_P delay control, per nibble */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /* common DQS_N delay control, per nibble */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               Rx Equalization code: {4:3} controls the cap
                               tuning 0: (not used), 1: 200ff, 2: 400ff, 3:
                               600ff, [br] controls the resistor tuning (0: 3R,
                               1: 1R, 2: 1R, 3: R/3).
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N1RANK1_1_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N1RANK2_1_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0508)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank0.Broadcast read not supported.
*/


#define RXGROUP0N1RANK2_1_FNV_DDRIO_COMP_1_REG 0x1B140508

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* ReadX8ModeEn */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /* common DQS_P delay control, per nibble */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /* common DQS_N delay control, per nibble */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               Rx Equalization code: {4:3} controls the cap
                               tuning 0: (not used), 1: 200ff, 2: 400ff, 3:
                               600ff, [br] controls the resistor tuning (0: 3R,
                               1: 1R, 2: 1R, 3: R/3).
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N1RANK2_1_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N1RANK3_1_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b050c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank0. Broadcast read not supported.
*/


#define RXGROUP0N1RANK3_1_FNV_DDRIO_COMP_1_REG 0x1B14050C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* ReadX8ModeEn */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /* common DQS_P delay control, per nibble */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /* common DQS_N delay control, per nibble */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               Rx Equalization code: {4:3} controls the cap
                               tuning 0: (not used), 1: 200ff, 2: 400ff, 3:
                               600ff, [br] controls the resistor tuning (0: 3R,
                               1: 1R, 2: 1R, 3: R/3).
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N1RANK3_1_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N1RANK0_1_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0540)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N1RANK0_1_FNV_DDRIO_COMP_1_REG 0x1B140540

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* one of the four clocks */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N1RANK0_1_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N1RANK1_1_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0544)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N1RANK1_1_FNV_DDRIO_COMP_1_REG 0x1B140544

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* one of the four clocks */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N1RANK1_1_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N1RANK2_1_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0548)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N1RANK2_1_FNV_DDRIO_COMP_1_REG 0x1B140548

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* one of the 4 clocks */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N1RANK2_1_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N1RANK3_1_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b054c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N1RANK3_1_FNV_DDRIO_COMP_1_REG 0x1B14054C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from PiRef to PiN for bit 1 */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N1RANK3_1_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN1RANK0_1_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0580)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN1RANK0_1_FNV_DDRIO_COMP_1_REG 0x1B140580

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               x4/x8 DQS mux select[br] [0]=1 selects the raw
                               output from the nibble0 DQS amplifier in x8
                               mode; [br] [0]=0 select nibble1 amplifier output
                               in x4 mode; [br] [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN1RANK0_1_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN1RANK1_1_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0584)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN1RANK1_1_FNV_DDRIO_COMP_1_REG 0x1B140584

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               x4/x8 DQS mux select[br] [0]=1 selects the raw
                               output from the nibble0 DQS amplifier in x8
                               mode; [br] [0]=0 select nibble1 amplifier output
                               in x4 mode; [br] [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN1RANK1_1_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN1RANK2_1_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0588)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN1RANK2_1_FNV_DDRIO_COMP_1_REG 0x1B140588

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               x4/x8 DQS mux select[br] [0]=1 selects the raw
                               output from the nibble0 DQS amplifier in x8
                               mode; [br] [0]=0 select nibble1 amplifier output
                               in x4 mode; [br] [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN1RANK2_1_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN1RANK3_1_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b058c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN1RANK3_1_FNV_DDRIO_COMP_1_REG 0x1B14058C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               x4/x8 DQS mux select[br] [0]=1 selects the raw
                               output from the nibble0 DQS amplifier in x8
                               mode; [br] [0]=0 select nibble1 amplifier output
                               in x4 mode; [br] [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN1RANK3_1_FNV_DDRIO_COMP_1_STRUCT;

/* RXVREFCTRLN1_1_FNV_DDRIO_COMP_1_REG supported on:                            */
/*      BWV (0x402b05a4)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* RxVrefCtrl. Broadcast read not supported.
*/


#define RXVREFCTRLN1_1_FNV_DDRIO_COMP_1_REG 0x1B1405A4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 vrefperbit0 : 7;

                            /* Bits[6:0], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben0 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 vrefperbit1 : 7;

                            /* Bits[14:8], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben1 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 vrefperbit2 : 7;

                            /* Bits[22:16], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben2 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 vrefperbit3 : 7;

                            /* Bits[30:24], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben3 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* shift down the Vref voltage by ~0.5 stepsize */

  } Bits;
  UINT32 Data;

} RXVREFCTRLN1_1_FNV_DDRIO_COMP_1_STRUCT;

/* DATATRAINFEEDBACKN1_1_FNV_DDRIO_COMP_1_REG supported on:                     */
/*      BWV (0x402b05a8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Training Feedback Results. Broadcast read not supported.
*/


#define DATATRAINFEEDBACKN1_1_FNV_DDRIO_COMP_1_REG 0x1B1405A8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 datatrainfeedback : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Data Training Feedback Storage [br] Training
                               Step Bits Nibble Description[br] --------------
                               ---- ------- ---------------[br] Cross Over Cal
                               0 1 Tx Dqs Phase Detection[br] Cross Over Cal 1
                               1 Tx Dq Phase Detection[br] Cross Over Cal 2 1
                               Rec En Phase Detection[br] RcvEn 8:0 1 Byte
                               detection[br] Wr Leveling 8:0 1 Byte
                               detection[br] Senseamp offset 3:0 1 Dq Senseamp
                               offset Detection
                            */
    UINT32 rsvd_9 : 23;

                            /* Bits[31:9], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATATRAINFEEDBACKN1_1_FNV_DDRIO_COMP_1_STRUCT;

/* DDRCRFSMCALN1_1_FNV_DDRIO_COMP_1_REG supported on:                           */
/*      BWV (0x402b05c8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Fsm for  Voc and Xover caliberation, Voc caliberation is a procedure that cancel out intrinsic offset in analogue receivers and Xover training ,it aligns all the local dll to the global qclk
*/


#define DDRCRFSMCALN1_1_FNV_DDRIO_COMP_1_REG 0x1B1405C8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0fsm : 5;

                            /* Bits[4:0], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of first receiver is done(read only)
                            */
    UINT32 saoffset1fsm : 5;

                            /* Bits[9:5], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of second receiver is done(read only)
                            */
    UINT32 saoffset2fsm : 5;

                            /* Bits[14:10], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of third receiver is done(read only)
                            */
    UINT32 saoffset3fsm : 5;

                            /* Bits[19:15], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of fourth receiver is done(read only)
                            */
    UINT32 fsmcalcomplete : 1;

                            /* Bits[20:20], Access Type=ROV, default=0x00000000*/

                            /* when the caliberation is done */
    UINT32 refpiclkdelayfsm : 6;

                            /* Bits[26:21], Access Type=ROV, default=0x00000000*/

                            /*
                               Load FSM with a code at which , the transition
                               is detected.
                            */
    UINT32 fsmcaldone : 1;

                            /* Bits[27:27], Access Type=ROV, default=0x00000000*/

                            /* when the caliberation of voc or x-over is done */
    UINT32 fsmtimersel : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /* Timer is set for either 8 cycles or 16 cycles */
    UINT32 fsmpatternsel : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               It selects whther the pattern of three bit or
                               two bit is selected when the transition happen
                               from 1-->0 for pdout and receiver , to avoid
                               glitch
                            */
    UINT32 fsmvoccal : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               This bit tells , wether the xover or voc
                               caliberation will be done, if its zero x-over
                               caliberation is done and vice-versa
                            */
    UINT32 fsmcalen : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* FsmCalEn starts the voc-Xover Fsm */

  } Bits;
  UINT32 Data;

} DDRCRFSMCALN1_1_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL4N1_1_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b05cc)                                                        */
/* Register default value on BWV: 0x801F0000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* static configurations of tx and rx. Broadcast read not supported.
*/


#define DATACONTROL4N1_1_FNV_DDRIO_COMP_1_REG 0x1B1405CC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd_0 : 1;

                            /* Bits[0:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vsshiorvrefctl1 : 8;

                            /* Bits[8:1], Access Type=RW, default=0x00000000*/

                            /*
                               VssHi control bits[br] Field Description: [br]
                               [br] Field Bits Description[br] ------- ----
                               ---------------------------------[br]
                               disoverflow 24 Disable overflow logic from
                               BDW[br] fast panic enable 25 Bypass 2 flops in
                               panic path for faster panic response[br]
                               vsshivccd2by3cfgen 26 Forces the driver DAC to
                               get supply from 2/3 vccd[br] vsshivccd2by3cfg
                               27:29 Current trim setting for 2/3 vccd mode,
                               001 fast, 011 typical, 111 slow silicon [br]
                               ddrvssh2ndcompen 30 Enable second comparator
                               (ZBB mode)[br] comp high bwen 31 Improve
                               comparator performance to support low digital
                               voltage range
                            */
    UINT32 dqtxeqsel : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* DQ TxEq setting selection to achieve constant EQ */
    UINT32 rsvd_10 : 2;

                            /* Bits[11:10], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vrefpwrsave : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               If set to 0 (default), Vref generators selected
                               through RxVrefSel[3:0] are always on.[br] If set
                               to 1, Vref generators are switched off while in
                               Self Refresh.
                            */
    UINT32 vreftonblbus : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000008*/

                            /* Per-bit Enable connection to share Vref Bus */
    UINT32 rxvrefsel : 4;

                            /* Bits[20:17], Access Type=RW, default=0x0000000F*/

                            /* Per Bit Verf generator Enable */
    UINT32 refpiclkdelay : 6;

                            /* Bits[26:21], Access Type=RW, default=0x00000000*/

                            /* RefPiClkDelay */
    UINT32 fnvcrsdlbypassen : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /* FNV Slave Delay Line Bypass Enable */
    UINT32 fnvcrdllbypassen : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /* FNV DLL Bypass Enable */
    UINT32 fnvcrvisaen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               FNV Visa Fub Enable - data fub used for VISA if
                               asserted
                            */
    UINT32 writecrcenable : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /* Enable write crc mode */
    UINT32 rsvd_31 : 1;

                            /* Bits[31:31], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL4N1_1_FNV_DDRIO_COMP_1_STRUCT;

/* COMPDATA0N1_1_FNV_DDRIO_COMP_1_REG supported on:                             */
/*      BWV (0x402b05d4)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Comp Values. Broadcast read not supported.
*/


#define COMPDATA0N1_1_FNV_DDRIO_COMP_1_REG 0x1B1405D4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcompdrvup : 6;

                            /* Bits[5:0], Access Type=RWV, default=0x00000000*/

                            /*
                               Data Rcomp DrvUp Comp Value can be overriden via
                               message channel if periodical retrain is disable
                            */
    UINT32 spare0 : 3;

                            /* Bits[8:6], Access Type=RWV, default=0x00000000*/

                            /* Spare */
    UINT32 rcompdrvdown : 6;

                            /* Bits[14:9], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp DrvDown Comp Value */
    UINT32 vtcomp : 5;

                            /* Bits[19:15], Access Type=RWV, default=0x00000000*/

                            /* VT Comp Values */
    UINT32 tcocomp : 7;

                            /* Bits[26:20], Access Type=RWV, default=0x00000000*/

                            /* Data TCO Comp Value. */
    UINT32 slewratecomp : 5;

                            /* Bits[31:27], Access Type=RWV, default=0x00000000*/

                            /* Data Slew Rate Comp Value. */

  } Bits;
  UINT32 Data;

} COMPDATA0N1_1_FNV_DDRIO_COMP_1_STRUCT;

/* COMPDATA1N1_1_FNV_DDRIO_COMP_1_REG supported on:                             */
/*      BWV (0x402b05d8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Comp Values. Broadcast read not supported.
*/


#define COMPDATA1N1_1_FNV_DDRIO_COMP_1_REG 0x1B1405D8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcompodtup : 6;

                            /* Bits[5:0], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp OdtUp Comp Value */
    UINT32 rcompodtdown : 6;

                            /* Bits[11:6], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp Odt-Down Comp Value */
    UINT32 panicdrvdn : 10;

                            /* Bits[21:12], Access Type=RWV, default=0x00000000*/

                            /* Panic DrvDn RComp Value. */
    UINT32 panicdrvup : 10;

                            /* Bits[31:22], Access Type=RWV, default=0x00000000*/

                            /* Panic DrvUp RComp Comp Value. */

  } Bits;
  UINT32 Data;

} COMPDATA1N1_1_FNV_DDRIO_COMP_1_STRUCT;

/* DATAOFFSETTRAINN1_1_FNV_DDRIO_COMP_1_REG supported on:                       */
/*      BWV (0x402b05dc)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATAOFFSETTRAINN1_1_FNV_DDRIO_COMP_1_REG 0x1B1405DC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvenoffset : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained RxRcvEn Value. */
    UINT32 rxdqsoffset : 7;

                            /* Bits[12:6], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained Rx DQS Value. */
    UINT32 txdqoffset : 6;

                            /* Bits[18:13], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained Tx DQ Value. */
    UINT32 txdqsoffset : 6;

                            /* Bits[24:19], Access Type=RW, default=0x00000000*/

                            /* Ooffset added to Trained Tx DQS Value. */
    UINT32 vrefoffset : 7;

                            /* Bits[31:25], Access Type=RW, default=0x00000000*/

                            /*
                               2s Compliment offset added to Trained Vref
                               Value. Positive number increases Vref, and each
                               step is Vdd/384.
                            */

  } Bits;
  UINT32 Data;

} DATAOFFSETTRAINN1_1_FNV_DDRIO_COMP_1_STRUCT;


/* DATACONTROL0N1_1_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b05e8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL0N1_1_FNV_DDRIO_COMP_1_REG 0x1B1405E8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rxtrainingmode : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enables Read DqDqs Training Mode */
    UINT32 wltrainingmode : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /* Enables Write Leveling Training Mode */
    UINT32 rltrainingmode : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /* Enables Read Leveling Training Mode. */
    UINT32 senseamptrainingmode : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Enables SenseAmp offset cancellation training
                               mode.
                            */
    UINT32 txon : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               When set, forces DQ/DQS drive enable to active.
                               Used in power measurements and IO loopback mode
                            */
    UINT32 rfon : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down Disable: Forces register file read,
                               overriding the rank power down logic.
                            */
    UINT32 rxpion : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /* Power-down Disable: Forces RxDqs PI clocks on. */
    UINT32 txpion : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down Disable: Forces TxDq and TxDqs PI
                               clocks on.
                            */
    UINT32 internalclockson : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Forces on master DLL and all PI enables ON,
                               despite both channel in SelfRefresh, etc. low
                               power states.
                            */
    UINT32 saoffsettraintxon : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* SaOffsetTrainTxon */
    UINT32 txdisable : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down: All write commands are ignored for
                               this data-byte. Used in single-channel MCI mode.
                            */
    UINT32 rxdisable : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down: All read commands are ignored for
                               this data-byte. Used in single-channel MCI mode.
                            */
    UINT32 txlong : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Sets the duration of the first transmitted DQ
                               bit of the burst. 0=1UI, 1=2UI.
                            */
    UINT32 rsvd_13 : 5;

                            /* Bits[17:13], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 driversegmentenable : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Controls which segements of the driver are
                               enabled: {0: All, 1: Only ODT}.
                            */
    UINT32 rsvd_19 : 1;

                            /* Bits[19:19], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 readrfrd : 1;

                            /* Bits[20:20], Access Type=RWV, default=0x00000000*/

                            /*
                               Self clearing command bit. When set, it will
                               download the three 32 bit lines from the RegFile
                               associated with a read command to Rank =
                               ReadRFRank
                            */
    UINT32 readrfwr : 1;

                            /* Bits[21:21], Access Type=RWV, default=0x00000000*/

                            /*
                               Self clearing command bit. When set, it will
                               download the three 32 bit lines from the RegFile
                               associated with a write command to Rank =
                               ReadRFRank
                            */
    UINT32 readrfrank : 3;

                            /* Bits[24:22], Access Type=RWV, default=0x00000000*/

                            /*
                               Specifies the rank that ReadRFRd or ReadRFWr
                               will manually download the CR values from
                            */
    UINT32 forceodton : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /* ODT is forced-on. */
    UINT32 odtsampoff : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /* ODT and Senseamp are forced-off. */
    UINT32 disableodtstatic : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /* not used */
    UINT32 ddrcrforceodton : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               force ODT to the transmitter on, regardless of
                               state of DriveEnable
                            */
    UINT32 spare : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* spare */
    UINT32 xovercal : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /* Enables Xover Calibration Training Mode */
    UINT32 longpreambleenable : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* Enables long preamble for DDR4 devices */

  } Bits;
  UINT32 Data;

} DATACONTROL0N1_1_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL1N1_1_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b05ec)                                                        */
/* Register default value on BWV: 0x0000003C                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL1N1_1_FNV_DDRIO_COMP_1_REG 0x1B1405EC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd_0 : 10;

                            /* Bits[9:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rxbiasctl : 3;

                            /* Bits[12:10], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the Current and BW of the Receiver: {0:
                               0.34Idll, 1: 0.66Idll, 2: 0.88Idll, 3: Idll, 4:
                               1.33Idll, 5: 1.66Idll[br] , 6: 2.00Idll, 7:
                               2.33Idll}
                            */
    UINT32 odtdelay : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000000*/

                            /*
                               Controls ODT turn-on delay. To turn on N tQCK
                               before RcvEn, program to RcvEn[8:6] N + 4.
                            */
    UINT32 odtduration : 3;

                            /* Bits[19:17], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the ODT ON duration from (Code,
                               Duration) = (0x0, 11 tQCK) to (0x7, 18 tQCK)
                            */
    UINT32 senseampdelay : 4;

                            /* Bits[23:20], Access Type=RW, default=0x00000000*/

                            /*
                               Controls Senseamp turn-on delay. To turn on N
                               tQCK before RcvEn, program to RcvEn[8:6] N + 4.
                            */
    UINT32 senseampduration : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the SenseAmp ON duration from (Code,
                               Duration) = (0x0, 11 tQCK) to (0x7, 18 tQCK)
                            */
    UINT32 rsvd_27 : 5;

                            /* Bits[31:27], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL1N1_1_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL2N1_1_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b05f0)                                                        */
/* Register default value on BWV: 0x07800000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL2N1_1_FNV_DDRIO_COMP_1_REG 0x1B1405F0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rxvocselqnnnh : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Enables SenseAmp offset cancellation training
                               mode
                            */
    UINT32 forcebiason : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Force on the internal Vref and Rx bias circuit,
                               regardless of any other power downs
                            */
    UINT32 forcerxon : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Force on the RxAmp only (as opposed to
                               OdtSampOn, which turns on both ODT and the
                               amplifier).[br] Use for overclocking support
                               where we may not be able to hit the fast exit
                               latency
                            */
    UINT32 ddr4extend : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /* Enable finer vref resolution in ddr4 */
    UINT32 cttermination : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /* DDRCOMP_CR_DDRCRCOMPOVR CTTermination */
    UINT32 dfelben : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* Digital far end loopback enable */
    UINT32 dfelbtxdmuxsel : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /* Digital far end loopback TX FIFO data mux sel */
    UINT32 spare1 : 2;

                            /* Bits[12:11], Access Type=RW, default=0x00000000*/

                            /* Spare1 */
    UINT32 txddjcen : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000000*/

                            /* TxddjcEn */
    UINT32 dfeenable : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /* DfeEnable */
    UINT32 dfedlysel : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /* DfeDlySel */
    UINT32 dfecode : 4;

                            /* Bits[22:19], Access Type=RW, default=0x00000000*/

                            /*
                               DfeCode: binary code 0000 to 1000 for DFE
                               offset, mid-code code for zero offset is 0100
                            */
    UINT32 rxdqssaoffset : 5;

                            /* Bits[27:23], Access Type=RW, default=0x0000000F*/

                            /* strobe Rx Amp offset control */
    UINT32 rsvd_28 : 4;

                            /* Bits[31:28], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL2N1_1_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL3N1_1_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b05f4)                                                        */
/* Register default value on BWV: 0x00000FCF                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* static configurations of tx and rx. Broadcast read not supported.
*/


#define DATACONTROL3N1_1_FNV_DDRIO_COMP_1_REG 0x1B1405F4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 drvstaticlegcfg : 2;

                            /* Bits[1:0], Access Type=RW, default=0x00000003*/

                            /*
                               binary default setting for static legs in DRV
                               mode[br] 0 0 0 legs (EQ disabled)[br] 0 1 3 legs
                               (EQ max 3 legs)[br] 1 0 6 legs (EQ max 6
                               legs)[br] 1 1 12 legs (EQ max 12 legs)[br] In
                               most cases, we would set this to be 11, but for
                               some configurations that require a higher [br]
                               Ron value, we need to reduce the number of
                               static legs enabled so that fast corner can hit
                               [br] the higher Ron target value.
                            */
    UINT32 odtstaticlegcfg : 2;

                            /* Bits[3:2], Access Type=RW, default=0x00000003*/

                            /*
                               binary default setting for static legs in ODT
                               mode[br] 0 0 0 legs (EQ disabled)[br] 0 1 3 legs
                               (EQ max 3 legs)[br] 1 0 6 legs (EQ max 6
                               legs)[br] 1 1 12 legs (EQ max 12 legs)[br] In
                               most cases, we would set this to be 11, but for
                               some configurations that require a higher [br]
                               Ron value, we need to reduce the number of
                               static legs enabled so that fast corner can hit
                               [br] the higher Ron target value.
                            */
    UINT32 lvlshft_holden : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               level shift hold enable[br] Holds the HV control
                               values and power down mode the level
                               shifters.[br] Apply '1' after training. Slow
                               timing - not advised for fast enabling
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 odtsegmentenable : 3;

                            /* Bits[8:6], Access Type=RW, default=0x00000007*/

                            /*
                               This will tell which segments are enabled out of
                               reset. [br] After that, a shift register will
                               determine the enabled segments
                            */
    UINT32 datasegmentenable : 3;

                            /* Bits[11:9], Access Type=RW, default=0x00000007*/

                            /*
                               This will tell which segments are enabled out of
                               reset.
                            */
    UINT32 longodtr2w : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               When set, it will extends ODT by 1 qclk on read
                               to write turnarounds. hsd 230773
                            */
    UINT32 spare1 : 8;

                            /* Bits[20:13], Access Type=RW, default=0x00000000*/

                            /* Spare1 */
    UINT32 ddrcrctlecapen : 2;

                            /* Bits[22:21], Access Type=RW, default=0x00000000*/

                            /* ctle capacitor setting */
    UINT32 ddrcrctleresen : 2;

                            /* Bits[24:23], Access Type=RW, default=0x00000000*/

                            /* ctle resistor setting */
    UINT32 pcasbiasclosedloopen : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiassel : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiasfoldedlegtrim : 2;

                            /* Bits[28:27], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiasgcncomp : 2;

                            /* Bits[30:29], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 postambleenable : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* Spare */

  } Bits;
  UINT32 Data;

} DATACONTROL3N1_1_FNV_DDRIO_COMP_1_STRUCT;

/* VSSHIORVREFCONTROLN1_1_FNV_DDRIO_COMP_1_REG supported on:                    */
/*      BWV (0x402b05f8)                                                        */
/* Register default value on BWV: 0x004D8238                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, only. Broadcast read not supported.
*/


#define VSSHIORVREFCONTROLN1_1_FNV_DDRIO_COMP_1_REG 0x1B1405F8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 vsshiorvrefctl : 24;

                            /* Bits[23:0], Access Type=RW, default=0x004D8238*/

                            /*
                               Channel 0 fubs : VssHi adjust setting. Channel1
                               fubs: DIMM VREF adjust settings.[br] [br] VssHi
                               Field Description: [br] [br] Field Bits
                               Description[br] ------- ---- -------------------
                               ------------------------------------------------
                               ------------------------------------------------
                               --------------------------------------------[br]
                               SelCode 23 Selects the code to output: {0: Code,
                               1: TCode}[br] GainBoost 22 Enable gain boost is
                               panic mode by updating code/tcode [br]
                               PanicVoltage 21:18 Unsigned integer controlling
                               the voltage error on VssHi that will trigger the
                               panic driver. Step size of VccDDQ/192 (0 to
                               117mV)[br] CloseLoop 17 Enables the VssHi close
                               loop tracking [br] PanicEn 16 Enables the VssHi
                               Panic Driver[br] BWError 15:14 Limits the loop
                               gain (ie: difference between code and tcode) to
                               +/- 2^(SlowBWError)[br] OpenLoop 13 Operates
                               VssHi in open loop mode with the target Vref
                               code directly driving the output DAC with no
                               feedback involved[br] SampleDivider 12:10
                               Controls the loop bandwidth by dividing down the
                               input clock: {0: Qclk, 1: Qclk/2, 2: Qclk/4, 3:
                               Qclk/8, 4: Qclk/16, 5: Qclk/32, 6: Qclk/64, 7:
                               Qclk/128}[br] LoBWDivider 9:8 For the slow
                               integrator, selects the net number of samples in
                               a given direction to trip the filter. {0: 4
                               samples, 1: 16 samples, 2: 32 samples, 3: 64
                               samples}[br] HiBWDivider 7:6 For the fast
                               integrator, selects the net number of samples in
                               a given direction to trip the filter. {0: 4
                               samples, 1: 16 samples, 2: 32 samples, 3: 64
                               samples}[br] Target 5:0 Unsigned integer
                               controlling the target VssHi voltage. Step size
                               of VccDDQ/192 and starting value of
                               VccDDQ*20/192
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} VSSHIORVREFCONTROLN1_1_FNV_DDRIO_COMP_1_STRUCT;


/* RXGROUP0N0RANK0_2_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0600)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank0. Broadcast reads are not supported.
*/


#define RXGROUP0N0RANK0_2_FNV_DDRIO_COMP_1_REG 0x1B140600

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* readx4modeenb */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_P to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_N to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS (0: 1/16 UI offset, [br] 1:
                               3/16 UI Offset, 2: 5/16 UI Offsets, 3: 7/16 UI
                               Offsets, 4: 9/16 UI Offsets, 5,6,7: 11/16 UI
                               Offsets.)
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               CTLE current steering tuning (0=no eq, 7=max
                               eq). It is decoded to[br] CTLE resistor tuning:
                               00 - 3R (10.8Kohms), 01/10 - R (3.6Kohms), 11 -
                               R/3 (1.2Kohms)[br] CTLE capacitor tuning: 00 -
                               0C (not used), 01 - 1C (200ff), 10 - 2C (400ff),
                               11 - 3C (600ff)
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N0RANK0_2_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N0RANK1_2_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0604)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank1. Broadcast reads are not supported.
*/


#define RXGROUP0N0RANK1_2_FNV_DDRIO_COMP_1_REG 0x1B140604

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* readx4modeenb */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_P to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_N to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               CTLE current steering tuning (0=no eq, 7=max
                               eq). It is decoded to[br] CTLE resistor tuning:
                               00 - 3R (10.8Kohms), 01/10 - R (3.6Kohms), 11 -
                               R/3 (1.2Kohms)[br] CTLE capacitor tuning: 00 -
                               0C (not used), 01 - 1C (200ff), 10 - 2C (400ff),
                               11 - 3C (600ff)
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N0RANK1_2_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N0RANK2_2_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0608)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank2. Broadcast read not supported.
*/


#define RXGROUP0N0RANK2_2_FNV_DDRIO_COMP_1_REG 0x1B140608

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* readx4modeenb */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_P to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_P to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               CTLE current steering tuning (0=no eq, 7=max
                               eq). It is decoded to[br] CTLE resistor tuning:
                               00 - 3R (10.8Kohms), 01/10 - R (3.6Kohms), 11 -
                               R/3 (1.2Kohms)[br] CTLE capacitor tuning: 00 -
                               0C (not used), 01 - 1C (200ff), 10 - 2C (400ff),
                               11 - 3C (600ff)
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N0RANK2_2_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N0RANK3_2_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b060c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank3. Broadcast read not supported.
*/


#define RXGROUP0N0RANK3_2_FNV_DDRIO_COMP_1_REG 0x1B14060C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* readx4modeenb */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_P to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_N to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               CTLE current steering tuning (0=no eq, 7=max
                               eq). It is decoded to[br] CTLE resistor tuning:
                               00 - 3R (10.8Kohms), 01/10 - R (3.6Kohms), 11 -
                               R/3 (1.2Kohms)[br] CTLE capacitor tuning: 00 -
                               0C (not used), 01 - 1C (200ff), 10 - 2C (400ff),
                               11 - 3C (600ff)
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N0RANK3_2_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N0RANK0_2_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0640)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N0RANK0_2_FNV_DDRIO_COMP_1_REG 0x1B140640

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* select one of the four DQ Clk */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N0RANK0_2_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N0RANK1_2_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0644)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N0RANK1_2_FNV_DDRIO_COMP_1_REG 0x1B140644

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* Select one of the four DQ clks */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N0RANK1_2_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N0RANK2_2_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0648)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N0RANK2_2_FNV_DDRIO_COMP_1_REG 0x1B140648

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* Select one of the four DQ clks */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N0RANK2_2_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N0RANK3_2_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b064c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N0RANK3_2_FNV_DDRIO_COMP_1_REG 0x1B14064C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* Select one of the four DQ clk */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N0RANK3_2_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN0RANK0_2_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0680)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN0RANK0_2_FNV_DDRIO_COMP_1_REG 0x1B140680

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               selects which skewed DQSP (to sample even bits)
                               is used in the RX FIFO. For proper operation,
                               always pick latest DQSP
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               selects which skewed DQSN (to sample odd bits)
                               is used in the RX FIFO. For proper operation,
                               always pick latest DQSN
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN0RANK0_2_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN0RANK1_2_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0684)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN0RANK1_2_FNV_DDRIO_COMP_1_REG 0x1B140684

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               [0]=0 selects the raw output from the nibble DQS
                               amplifier; [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN0RANK1_2_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN0RANK2_2_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0688)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN0RANK2_2_FNV_DDRIO_COMP_1_REG 0x1B140688

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               [0]=0 selects the raw output from the nibble DQS
                               amplifier; [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN0RANK2_2_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN0RANK3_2_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b068c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN0RANK3_2_FNV_DDRIO_COMP_1_REG 0x1B14068C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               [0]=0 selects the raw output from the nibble DQS
                               amplifier; [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN0RANK3_2_FNV_DDRIO_COMP_1_STRUCT;

/* RXVREFCTRLN0_2_FNV_DDRIO_COMP_1_REG supported on:                            */
/*      BWV (0x402b06a4)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* RxVrefCtrl. Broadcast read not supported.
*/


#define RXVREFCTRLN0_2_FNV_DDRIO_COMP_1_REG 0x1B1406A4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 vrefperbit0 : 7;

                            /* Bits[6:0], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben0 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 vrefperbit1 : 7;

                            /* Bits[14:8], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben1 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /*
                               enables fine grain Vref control, shift down the
                               Vref voltage by ~0.5 stepsize
                            */
    UINT32 vrefperbit2 : 7;

                            /* Bits[22:16], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben2 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /*
                               enables fine grain Vref control, shift down the
                               Vref voltage by ~0.5 stepsize
                            */
    UINT32 vrefperbit3 : 7;

                            /* Bits[30:24], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben3 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* shift down the Vref voltage by ~0.5 stepsize */

  } Bits;
  UINT32 Data;

} RXVREFCTRLN0_2_FNV_DDRIO_COMP_1_STRUCT;

/* DATATRAINFEEDBACKN0_2_FNV_DDRIO_COMP_1_REG supported on:                     */
/*      BWV (0x402b06a8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Training Feedback Results. Broadcast read not supported.
*/


#define DATATRAINFEEDBACKN0_2_FNV_DDRIO_COMP_1_REG 0x1B1406A8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 datatrainfeedback : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Data Training Feedback Storage[br] [br]
                               DataTrainFeedback Description:[br] Training Step
                               Bits Nibble Description[br] -------------- ----
                               ------- --------------------------[br] Cross
                               Over Cal 0 0 Tx Dqs Phase Detection[br] Cross
                               Over Cal 1 0 Tx Dq Phase Detection[br] Cross
                               Over Cal 2 0 Rec En Phase Detection[br] RcvEn
                               8:0 0 Byte detection[br] [br] Wr Leveling 8:0 0
                               Byte detection[br] Senseamp offset 3:0 0 Dq
                               Senseamp offset Detection
                            */
    UINT32 rsvd_9 : 23;

                            /* Bits[31:9], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATATRAINFEEDBACKN0_2_FNV_DDRIO_COMP_1_STRUCT;

/* DDRCRFSMCALN0_2_FNV_DDRIO_COMP_1_REG supported on:                           */
/*      BWV (0x402b06c8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Fsm for  Voc and Xover caliberation, Voc caliberation is a procedure that cancel out intrinsic offset in analogue receivers and Xover training ,it aligns all the local dll to the global qclk
*/


#define DDRCRFSMCALN0_2_FNV_DDRIO_COMP_1_REG 0x1B1406C8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0fsm : 5;

                            /* Bits[4:0], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of first receiver is done(read only)
                            */
    UINT32 saoffset1fsm : 5;

                            /* Bits[9:5], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of second receiver is done(read only)
                            */
    UINT32 saoffset2fsm : 5;

                            /* Bits[14:10], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of third receiver is done(read only)
                            */
    UINT32 saoffset3fsm : 5;

                            /* Bits[19:15], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of fourth receiver is done(read only)
                            */
    UINT32 fsmcalcomplete : 1;

                            /* Bits[20:20], Access Type=ROV, default=0x00000000*/

                            /* when the caliberation is done */
    UINT32 refpiclkdelayfsm : 6;

                            /* Bits[26:21], Access Type=ROV, default=0x00000000*/

                            /*
                               Load FSM with a code at which , the transition
                               is detected.
                            */
    UINT32 fsmcaldone : 1;

                            /* Bits[27:27], Access Type=ROV, default=0x00000000*/

                            /* when the caliberation of voc or x-over is done */
    UINT32 fsmtimersel : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /* Timer is set for either 8 cycles or 16 cycles */
    UINT32 fsmpatternsel : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               It selects whther the pattern of three bit or
                               two bit is selected when the transition happen
                               from 1-->0 for pdout and receiver , to avoid
                               glitch
                            */
    UINT32 fsmvoccal : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               This bit tells , wether the xover or voc
                               caliberation will be done, if its zero x-over
                               caliberation is done and vice-versa
                            */
    UINT32 fsmcalen : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* FsmCalEn starts the voc-Xover Fsm */

  } Bits;
  UINT32 Data;

} DDRCRFSMCALN0_2_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL4N0_2_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b06cc)                                                        */
/* Register default value on BWV: 0x801F0000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* static configurations of tx and rx. Broadcast read not supported.
*/


#define DATACONTROL4N0_2_FNV_DDRIO_COMP_1_REG 0x1B1406CC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd_0 : 1;

                            /* Bits[0:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vsshiorvrefctl1 : 8;

                            /* Bits[8:1], Access Type=RW, default=0x00000000*/

                            /*
                               VssHi control bits[br] Field Description: [br]
                               [br] Field Bits Description[br] ------- ----
                               ---------------------------------[br]
                               disoverflow 24 Disable overflow logic from
                               BDW[br] fast panic enable 25 Bypass 2 flops in
                               panic path for faster panic response[br]
                               vsshivccd2by3cfgen 26 Forces the driver DAC to
                               get supply from 2/3 vccd[br] vsshivccd2by3cfg
                               27:29 Current trim setting for 2/3 vccd mode,
                               001 fast, 011 typical, 111 slow silicon [br]
                               ddrvssh2ndcompen 30 Enable second comparator
                               (ZBB mode)[br] comp high bwen 31 Improve
                               comparator performance to support low digital
                               voltage range
                            */
    UINT32 dqtxeqsel : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* DQ TxEq setting selection to achieve constant EQ */
    UINT32 rsvd_10 : 2;

                            /* Bits[11:10], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vrefpwrsave : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               If set to 0 (default), Vref generators selected
                               through RxVrefSel[3:0] are always on.[br] If set
                               to 1, Vref generators are switched off while in
                               Self Refresh.
                            */
    UINT32 vreftonblbus : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000008*/

                            /* Per-bit Enable connection to share Vref Bus */
    UINT32 rxvrefsel : 4;

                            /* Bits[20:17], Access Type=RW, default=0x0000000F*/

                            /* Per Bit Verf generator Enable */
    UINT32 refpiclkdelay : 6;

                            /* Bits[26:21], Access Type=RW, default=0x00000000*/

                            /* RefPiClkDelay */
    UINT32 fnvcrsdlbypassen : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /* FNV Slave Delay Line Bypass Enable */
    UINT32 fnvcrdllbypassen : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /* FNV DLL Bypass Enable */
    UINT32 fnvcrvisaen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               FNV Visa Fub Enable - data fub used for VISA if
                               asserted
                            */
    UINT32 writecrcenable : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /* Enable write crc mode */
    UINT32 rsvd_31 : 1;

                            /* Bits[31:31], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL4N0_2_FNV_DDRIO_COMP_1_STRUCT;

/* COMPDATA0N0_2_FNV_DDRIO_COMP_1_REG supported on:                             */
/*      BWV (0x402b06d4)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Comp Values. Broadcast read not supported.
*/


#define COMPDATA0N0_2_FNV_DDRIO_COMP_1_REG 0x1B1406D4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcompdrvup : 6;

                            /* Bits[5:0], Access Type=RWV, default=0x00000000*/

                            /*
                               Data Rcomp DrvUp Comp Value can be overriden via
                               message channel if periodical retrain is disable
                            */
    UINT32 spare0 : 3;

                            /* Bits[8:6], Access Type=RWV, default=0x00000000*/

                            /* Spare */
    UINT32 rcompdrvdown : 6;

                            /* Bits[14:9], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp DrvDown Comp Value */
    UINT32 vtcomp : 5;

                            /* Bits[19:15], Access Type=RWV, default=0x00000000*/

                            /* VT Comp Values */
    UINT32 tcocomp : 7;

                            /* Bits[26:20], Access Type=RWV, default=0x00000000*/

                            /* Data TCO Comp Value. */
    UINT32 slewratecomp : 5;

                            /* Bits[31:27], Access Type=RWV, default=0x00000000*/

                            /* Data Slew Rate Comp Value. */

  } Bits;
  UINT32 Data;

} COMPDATA0N0_2_FNV_DDRIO_COMP_1_STRUCT;

/* COMPDATA1N0_2_FNV_DDRIO_COMP_1_REG supported on:                             */
/*      BWV (0x402b06d8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Comp Values. Broadcast read not supported.
*/


#define COMPDATA1N0_2_FNV_DDRIO_COMP_1_REG 0x1B1406D8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcompodtup : 6;

                            /* Bits[5:0], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp OdtUp Comp Value */
    UINT32 rcompodtdown : 6;

                            /* Bits[11:6], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp Odt-Down Comp Value */
    UINT32 panicdrvdn : 10;

                            /* Bits[21:12], Access Type=RWV, default=0x00000000*/

                            /* Panic DrvDn RComp Value. */
    UINT32 panicdrvup : 10;

                            /* Bits[31:22], Access Type=RWV, default=0x00000000*/

                            /* Panic DrvUp RComp Comp Value. */

  } Bits;
  UINT32 Data;

} COMPDATA1N0_2_FNV_DDRIO_COMP_1_STRUCT;

/* DATAOFFSETTRAINN0_2_FNV_DDRIO_COMP_1_REG supported on:                       */
/*      BWV (0x402b06dc)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATAOFFSETTRAINN0_2_FNV_DDRIO_COMP_1_REG 0x1B1406DC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvenoffset : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained RxRcvEn Value. */
    UINT32 rxdqsoffset : 7;

                            /* Bits[12:6], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained Rx DQS Value. */
    UINT32 txdqoffset : 6;

                            /* Bits[18:13], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained Tx DQ Value. */
    UINT32 txdqsoffset : 6;

                            /* Bits[24:19], Access Type=RW, default=0x00000000*/

                            /* Ooffset added to Trained Tx DQS Value. */
    UINT32 vrefoffset : 7;

                            /* Bits[31:25], Access Type=RW, default=0x00000000*/

                            /*
                               2s Compliment offset added to Trained Vref
                               Value. Positive number increases Vref, and each
                               step is Vdd/384.
                            */

  } Bits;
  UINT32 Data;

} DATAOFFSETTRAINN0_2_FNV_DDRIO_COMP_1_STRUCT;


/* DATACONTROL0N0_2_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b06e8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL0N0_2_FNV_DDRIO_COMP_1_REG 0x1B1406E8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rxtrainingmode : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enables Read DqDqs Training Mode */
    UINT32 wltrainingmode : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /* Enables Write Leveling Training Mode */
    UINT32 rltrainingmode : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /* Enables Read Leveling Training Mode. */
    UINT32 senseamptrainingmode : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Enables SenseAmp offset cancellation training
                               mode.
                            */
    UINT32 txon : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               When set, forces DQ/DQS drive enable to active.
                               Used in power measurements and IO loopback mode
                            */
    UINT32 rfon : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down Disable: Forces register file read,
                               overriding the rank power down logic.
                            */
    UINT32 rxpion : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /* Power-down Disable: Forces RxDqs PI clocks on. */
    UINT32 txpion : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down Disable: Forces TxDq and TxDqs PI
                               clocks on.
                            */
    UINT32 internalclockson : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Forces on master DLL and all PI enables ON,
                               despite both channel in SelfRefresh, etc. low
                               power states.
                            */
    UINT32 saoffsettraintxon : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* SaOffsetTrainTxon */
    UINT32 txdisable : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down: All write commands are ignored for
                               this data-byte. Used in single-channel MCI mode.
                            */
    UINT32 rxdisable : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down: All read commands are ignored for
                               this data-byte. Used in single-channel MCI mode.
                            */
    UINT32 txlong : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Sets the duration of the first transmitted DQ
                               bit of the burst. 0=1UI, 1=2UI.
                            */
    UINT32 rsvd_13 : 5;

                            /* Bits[17:13], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 driversegmentenable : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Controls which segements of the driver are
                               enabled: {0: All, 1: Only ODT}.
                            */
    UINT32 rsvd_19 : 1;

                            /* Bits[19:19], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 readrfrd : 1;

                            /* Bits[20:20], Access Type=RWV, default=0x00000000*/

                            /*
                               Self clearing command bit. When set, it will
                               download the three 32 bit lines from the RegFile
                               associated with a read command to Rank =
                               ReadRFRank
                            */
    UINT32 readrfwr : 1;

                            /* Bits[21:21], Access Type=RWV, default=0x00000000*/

                            /*
                               Self clearing command bit. When set, it will
                               download the three 32 bit lines from the RegFile
                               associated with a write command to Rank =
                               ReadRFRank
                            */
    UINT32 readrfrank : 3;

                            /* Bits[24:22], Access Type=RWV, default=0x00000000*/

                            /*
                               Specifies the rank that ReadRFRd or ReadRFWr
                               will manually download the CR values from
                            */
    UINT32 forceodton : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /* ODT is forced-on. */
    UINT32 odtsampoff : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /* ODT and Senseamp are forced-off. */
    UINT32 disableodtstatic : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /* not used */
    UINT32 ddrcrforceodton : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               force ODT to the transmitter on, regardless of
                               state of DriveEnable
                            */
    UINT32 spare : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* spare */
    UINT32 xovercal : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /* Enables Xover Calibration Training Mode */
    UINT32 longpreambleenable : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* Enables long preamble for DDR4 devices */

  } Bits;
  UINT32 Data;

} DATACONTROL0N0_2_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL1N0_2_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b06ec)                                                        */
/* Register default value on BWV: 0x0000003C                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL1N0_2_FNV_DDRIO_COMP_1_REG 0x1B1406EC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd_0 : 10;

                            /* Bits[9:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rxbiasctl : 3;

                            /* Bits[12:10], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the Current and BW of the Receiver: {0:
                               0.34Idll, 1: 0.66Idll, 2: 0.88Idll, 3: Idll, 4:
                               1.33Idll, 5: 1.66Idll[br] , 6: 2.00Idll, 7:
                               2.33Idll}
                            */
    UINT32 odtdelay : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000000*/

                            /*
                               Controls ODT turn-on delay. To turn on N tQCK
                               before RcvEn, program to RcvEn[8:6] N + 4.
                            */
    UINT32 odtduration : 3;

                            /* Bits[19:17], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the ODT ON duration from (Code,
                               Duration) = (0x0, 11 tQCK) to (0x7, 18 tQCK)
                            */
    UINT32 senseampdelay : 4;

                            /* Bits[23:20], Access Type=RW, default=0x00000000*/

                            /*
                               Controls Senseamp turn-on delay. To turn on N
                               tQCK before RcvEn, program to RcvEn[8:6] N + 4.
                            */
    UINT32 senseampduration : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the SenseAmp ON duration from (Code,
                               Duration) = (0x0, 11 tQCK) to (0x7, 18 tQCK)
                            */
    UINT32 rsvd_27 : 5;

                            /* Bits[31:27], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL1N0_2_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL2N0_2_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b06f0)                                                        */
/* Register default value on BWV: 0x07800000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL2N0_2_FNV_DDRIO_COMP_1_REG 0x1B1406F0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rxvocselqnnnh : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Enables SenseAmp offset cancellation training
                               mode
                            */
    UINT32 forcebiason : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Force on the internal Vref and Rx bias circuit,
                               regardless of any other power downs
                            */
    UINT32 forcerxon : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Force on the RxAmp only (as opposed to
                               OdtSampOn, which turns on both ODT and the
                               amplifier).[br] Use for overclocking support
                               where we may not be able to hit the fast exit
                               latency
                            */
    UINT32 ddr4extend : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /* Enable finer vref resolution in ddr4 */
    UINT32 cttermination : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /* DDRCOMP_CR_DDRCRCOMPOVR CTTermination */
    UINT32 dfelben : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* Digital far end loopback enable */
    UINT32 dfelbtxdmuxsel : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /* Digital far end loopback TX FIFO data mux sel */
    UINT32 spare1 : 2;

                            /* Bits[12:11], Access Type=RW, default=0x00000000*/

                            /* Spare1 */
    UINT32 txddjcen : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000000*/

                            /* TxddjcEn */
    UINT32 dfeenable : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /* DfeEnable */
    UINT32 dfedlysel : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /* DfeDlySel */
    UINT32 dfecode : 4;

                            /* Bits[22:19], Access Type=RW, default=0x00000000*/

                            /*
                               DfeCode: binary code 0000 to 1000 for DFE
                               offset, mid-code code for zero offset is 0100
                            */
    UINT32 rxdqssaoffset : 5;

                            /* Bits[27:23], Access Type=RW, default=0x0000000F*/

                            /* strobe Rx Amp offset control */
    UINT32 rsvd_28 : 4;

                            /* Bits[31:28], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL2N0_2_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL3N0_2_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b06f4)                                                        */
/* Register default value on BWV: 0x00000FCF                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* static configurations of tx and rx. Broadcast read not supported.
*/


#define DATACONTROL3N0_2_FNV_DDRIO_COMP_1_REG 0x1B1406F4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 drvstaticlegcfg : 2;

                            /* Bits[1:0], Access Type=RW, default=0x00000003*/

                            /*
                               binary default setting for static legs in DRV
                               mode[br] 0 0 0 legs (EQ disabled)[br] 0 1 3 legs
                               (EQ max 3 legs)[br] 1 0 6 legs (EQ max 6
                               legs)[br] 1 1 12 legs (EQ max 12 legs)[br] In
                               most cases, we would set this to be 11, but for
                               some configurations that require a higher [br]
                               Ron value, we need to reduce the number of
                               static legs enabled so that fast corner can hit
                               [br] the higher Ron target value.
                            */
    UINT32 odtstaticlegcfg : 2;

                            /* Bits[3:2], Access Type=RW, default=0x00000003*/

                            /*
                               binary default setting for static legs in ODT
                               mode[br] 0 0 0 legs (EQ disabled)[br] 0 1 3 legs
                               (EQ max 3 legs)[br] 1 0 6 legs (EQ max 6
                               legs)[br] 1 1 12 legs (EQ max 12 legs)[br] In
                               most cases, we would set this to be 11, but for
                               some configurations that require a higher [br]
                               Ron value, we need to reduce the number of
                               static legs enabled so that fast corner can hit
                               [br] the higher Ron target value.
                            */
    UINT32 lvlshft_holden : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               level shift hold enable[br] Holds the HV control
                               values and power down mode the level
                               shifters.[br] Apply '1' after training. Slow
                               timing - not advised for fast enabling
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 odtsegmentenable : 3;

                            /* Bits[8:6], Access Type=RW, default=0x00000007*/

                            /*
                               This will tell which segments are enabled out of
                               reset. [br] After that, a shift register will
                               determine the enabled segments
                            */
    UINT32 datasegmentenable : 3;

                            /* Bits[11:9], Access Type=RW, default=0x00000007*/

                            /*
                               This will tell which segments are enabled out of
                               reset.
                            */
    UINT32 longodtr2w : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               When set, it will extends ODT by 1 qclk on read
                               to write turnarounds. hsd 230773
                            */
    UINT32 spare1 : 8;

                            /* Bits[20:13], Access Type=RW, default=0x00000000*/

                            /* Spare1 */
    UINT32 ddrcrctlecapen : 2;

                            /* Bits[22:21], Access Type=RW, default=0x00000000*/

                            /* ctle capacitor setting */
    UINT32 ddrcrctleresen : 2;

                            /* Bits[24:23], Access Type=RW, default=0x00000000*/

                            /* ctle resistor setting */
    UINT32 pcasbiasclosedloopen : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiassel : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiasfoldedlegtrim : 2;

                            /* Bits[28:27], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiasgcncomp : 2;

                            /* Bits[30:29], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 postambleenable : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* Spare */

  } Bits;
  UINT32 Data;

} DATACONTROL3N0_2_FNV_DDRIO_COMP_1_STRUCT;

/* VSSHIORVREFCONTROLN0_2_FNV_DDRIO_COMP_1_REG supported on:                    */
/*      BWV (0x402b06f8)                                                        */
/* Register default value on BWV: 0x004D8238                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, only. Broadcast read not supported.
*/


#define VSSHIORVREFCONTROLN0_2_FNV_DDRIO_COMP_1_REG 0x1B1406F8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 vsshiorvrefctl : 24;

                            /* Bits[23:0], Access Type=RW, default=0x004D8238*/

                            /*
                               Channel 0 fubs : VssHi adjust setting. Channel1
                               fubs: DIMM VREF adjust settings.[br] [br] VssHi
                               Field Description: [br] [br] Field Bits
                               Description[br] ------- ---- -------------------
                               ------------------------------------------------
                               ------------------------------------------------
                               --------------------------------------------[br]
                               SelCode 23 Selects the code to output: {0: Code,
                               1: TCode}[br] GainBoost 22 Enable gain boost is
                               panic mode by updating code/tcode [br]
                               PanicVoltage 21:18 Unsigned integer controlling
                               the voltage error on VssHi that will trigger the
                               panic driver. Step size of VccDDQ/192 (0 to
                               117mV)[br] CloseLoop 17 Enables the VssHi close
                               loop tracking [br] PanicEn 16 Enables the VssHi
                               Panic Driver[br] BWError 15:14 Limits the loop
                               gain (ie: difference between code and tcode) to
                               +/- 2^(SlowBWError)[br] OpenLoop 13 Operates
                               VssHi in open loop mode with the target Vref
                               code directly driving the output DAC with no
                               feedback involved[br] SampleDivider 12:10
                               Controls the loop bandwidth by dividing down the
                               input clock: {0: Qclk, 1: Qclk/2, 2: Qclk/4, 3:
                               Qclk/8, 4: Qclk/16, 5: Qclk/32, 6: Qclk/64, 7:
                               Qclk/128}[br] LoBWDivider 9:8 For the slow
                               integrator, selects the net number of samples in
                               a given direction to trip the filter. {0: 4
                               samples, 1: 16 samples, 2: 32 samples, 3: 64
                               samples}[br] HiBWDivider 7:6 For the fast
                               integrator, selects the net number of samples in
                               a given direction to trip the filter. {0: 4
                               samples, 1: 16 samples, 2: 32 samples, 3: 64
                               samples}[br] Target 5:0 Unsigned integer
                               controlling the target VssHi voltage. Step size
                               of VccDDQ/192 and starting value of
                               VccDDQ*20/192
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} VSSHIORVREFCONTROLN0_2_FNV_DDRIO_COMP_1_STRUCT;


/* RXGROUP0N1RANK0_2_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0700)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank0. Broadcast read not supported.
*/


#define RXGROUP0N1RANK0_2_FNV_DDRIO_COMP_1_REG 0x1B140700

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* ReadX8ModeEn */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /* common DQS_P delay control, per nibble */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /* common DQS_N delay control, per nibble */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               Rx Equalization code: {4:3} controls the cap
                               tuning 0: (not used), 1: 200ff, 2: 400ff, 3:
                               600ff, [br] controls the resistor tuning (0: 3R,
                               1: 1R, 2: 1R, 3: R/3).
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N1RANK0_2_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N1RANK1_2_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0704)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank0. Broadcast read not supported.
*/


#define RXGROUP0N1RANK1_2_FNV_DDRIO_COMP_1_REG 0x1B140704

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* ReadX8ModeEn */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /* common DQS_P delay control, per nibble */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /* common DQS_N delay control, per nibble */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               Rx Equalization code: {4:3} controls the cap
                               tuning 0: (not used), 1: 200ff, 2: 400ff, 3:
                               600ff, [br] controls the resistor tuning (0: 3R,
                               1: 1R, 2: 1R, 3: R/3).
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N1RANK1_2_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N1RANK2_2_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0708)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank0.Broadcast read not supported.
*/


#define RXGROUP0N1RANK2_2_FNV_DDRIO_COMP_1_REG 0x1B140708

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* ReadX8ModeEn */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /* common DQS_P delay control, per nibble */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /* common DQS_N delay control, per nibble */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               Rx Equalization code: {4:3} controls the cap
                               tuning 0: (not used), 1: 200ff, 2: 400ff, 3:
                               600ff, [br] controls the resistor tuning (0: 3R,
                               1: 1R, 2: 1R, 3: R/3).
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N1RANK2_2_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N1RANK3_2_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b070c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank0. Broadcast read not supported.
*/


#define RXGROUP0N1RANK3_2_FNV_DDRIO_COMP_1_REG 0x1B14070C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* ReadX8ModeEn */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /* common DQS_P delay control, per nibble */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /* common DQS_N delay control, per nibble */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               Rx Equalization code: {4:3} controls the cap
                               tuning 0: (not used), 1: 200ff, 2: 400ff, 3:
                               600ff, [br] controls the resistor tuning (0: 3R,
                               1: 1R, 2: 1R, 3: R/3).
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N1RANK3_2_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N1RANK0_2_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0740)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N1RANK0_2_FNV_DDRIO_COMP_1_REG 0x1B140740

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* one of the four clocks */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N1RANK0_2_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N1RANK1_2_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0744)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N1RANK1_2_FNV_DDRIO_COMP_1_REG 0x1B140744

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* one of the four clocks */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N1RANK1_2_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N1RANK2_2_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0748)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N1RANK2_2_FNV_DDRIO_COMP_1_REG 0x1B140748

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* one of the 4 clocks */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N1RANK2_2_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N1RANK3_2_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b074c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N1RANK3_2_FNV_DDRIO_COMP_1_REG 0x1B14074C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from PiRef to PiN for bit 1 */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N1RANK3_2_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN1RANK0_2_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0780)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN1RANK0_2_FNV_DDRIO_COMP_1_REG 0x1B140780

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               x4/x8 DQS mux select[br] [0]=1 selects the raw
                               output from the nibble0 DQS amplifier in x8
                               mode; [br] [0]=0 select nibble1 amplifier output
                               in x4 mode; [br] [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN1RANK0_2_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN1RANK1_2_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0784)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN1RANK1_2_FNV_DDRIO_COMP_1_REG 0x1B140784

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               x4/x8 DQS mux select[br] [0]=1 selects the raw
                               output from the nibble0 DQS amplifier in x8
                               mode; [br] [0]=0 select nibble1 amplifier output
                               in x4 mode; [br] [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN1RANK1_2_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN1RANK2_2_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0788)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN1RANK2_2_FNV_DDRIO_COMP_1_REG 0x1B140788

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               x4/x8 DQS mux select[br] [0]=1 selects the raw
                               output from the nibble0 DQS amplifier in x8
                               mode; [br] [0]=0 select nibble1 amplifier output
                               in x4 mode; [br] [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN1RANK2_2_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN1RANK3_2_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b078c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN1RANK3_2_FNV_DDRIO_COMP_1_REG 0x1B14078C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               x4/x8 DQS mux select[br] [0]=1 selects the raw
                               output from the nibble0 DQS amplifier in x8
                               mode; [br] [0]=0 select nibble1 amplifier output
                               in x4 mode; [br] [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN1RANK3_2_FNV_DDRIO_COMP_1_STRUCT;

/* RXVREFCTRLN1_2_FNV_DDRIO_COMP_1_REG supported on:                            */
/*      BWV (0x402b07a4)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* RxVrefCtrl. Broadcast read not supported.
*/


#define RXVREFCTRLN1_2_FNV_DDRIO_COMP_1_REG 0x1B1407A4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 vrefperbit0 : 7;

                            /* Bits[6:0], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben0 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 vrefperbit1 : 7;

                            /* Bits[14:8], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben1 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 vrefperbit2 : 7;

                            /* Bits[22:16], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben2 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 vrefperbit3 : 7;

                            /* Bits[30:24], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben3 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* shift down the Vref voltage by ~0.5 stepsize */

  } Bits;
  UINT32 Data;

} RXVREFCTRLN1_2_FNV_DDRIO_COMP_1_STRUCT;

/* DATATRAINFEEDBACKN1_2_FNV_DDRIO_COMP_1_REG supported on:                     */
/*      BWV (0x402b07a8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Training Feedback Results. Broadcast read not supported.
*/


#define DATATRAINFEEDBACKN1_2_FNV_DDRIO_COMP_1_REG 0x1B1407A8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 datatrainfeedback : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Data Training Feedback Storage [br] Training
                               Step Bits Nibble Description[br] --------------
                               ---- ------- ---------------[br] Cross Over Cal
                               0 1 Tx Dqs Phase Detection[br] Cross Over Cal 1
                               1 Tx Dq Phase Detection[br] Cross Over Cal 2 1
                               Rec En Phase Detection[br] RcvEn 8:0 1 Byte
                               detection[br] Wr Leveling 8:0 1 Byte
                               detection[br] Senseamp offset 3:0 1 Dq Senseamp
                               offset Detection
                            */
    UINT32 rsvd_9 : 23;

                            /* Bits[31:9], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATATRAINFEEDBACKN1_2_FNV_DDRIO_COMP_1_STRUCT;

/* DDRCRFSMCALN1_2_FNV_DDRIO_COMP_1_REG supported on:                           */
/*      BWV (0x402b07c8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Fsm for  Voc and Xover caliberation, Voc caliberation is a procedure that cancel out intrinsic offset in analogue receivers and Xover training ,it aligns all the local dll to the global qclk
*/


#define DDRCRFSMCALN1_2_FNV_DDRIO_COMP_1_REG 0x1B1407C8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0fsm : 5;

                            /* Bits[4:0], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of first receiver is done(read only)
                            */
    UINT32 saoffset1fsm : 5;

                            /* Bits[9:5], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of second receiver is done(read only)
                            */
    UINT32 saoffset2fsm : 5;

                            /* Bits[14:10], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of third receiver is done(read only)
                            */
    UINT32 saoffset3fsm : 5;

                            /* Bits[19:15], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of fourth receiver is done(read only)
                            */
    UINT32 fsmcalcomplete : 1;

                            /* Bits[20:20], Access Type=ROV, default=0x00000000*/

                            /* when the caliberation is done */
    UINT32 refpiclkdelayfsm : 6;

                            /* Bits[26:21], Access Type=ROV, default=0x00000000*/

                            /*
                               Load FSM with a code at which , the transition
                               is detected.
                            */
    UINT32 fsmcaldone : 1;

                            /* Bits[27:27], Access Type=ROV, default=0x00000000*/

                            /* when the caliberation of voc or x-over is done */
    UINT32 fsmtimersel : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /* Timer is set for either 8 cycles or 16 cycles */
    UINT32 fsmpatternsel : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               It selects whther the pattern of three bit or
                               two bit is selected when the transition happen
                               from 1-->0 for pdout and receiver , to avoid
                               glitch
                            */
    UINT32 fsmvoccal : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               This bit tells , wether the xover or voc
                               caliberation will be done, if its zero x-over
                               caliberation is done and vice-versa
                            */
    UINT32 fsmcalen : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* FsmCalEn starts the voc-Xover Fsm */

  } Bits;
  UINT32 Data;

} DDRCRFSMCALN1_2_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL4N1_2_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b07cc)                                                        */
/* Register default value on BWV: 0x801F0000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* static configurations of tx and rx. Broadcast read not supported.
*/


#define DATACONTROL4N1_2_FNV_DDRIO_COMP_1_REG 0x1B1407CC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd_0 : 1;

                            /* Bits[0:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vsshiorvrefctl1 : 8;

                            /* Bits[8:1], Access Type=RW, default=0x00000000*/

                            /*
                               VssHi control bits[br] Field Description: [br]
                               [br] Field Bits Description[br] ------- ----
                               ---------------------------------[br]
                               disoverflow 24 Disable overflow logic from
                               BDW[br] fast panic enable 25 Bypass 2 flops in
                               panic path for faster panic response[br]
                               vsshivccd2by3cfgen 26 Forces the driver DAC to
                               get supply from 2/3 vccd[br] vsshivccd2by3cfg
                               27:29 Current trim setting for 2/3 vccd mode,
                               001 fast, 011 typical, 111 slow silicon [br]
                               ddrvssh2ndcompen 30 Enable second comparator
                               (ZBB mode)[br] comp high bwen 31 Improve
                               comparator performance to support low digital
                               voltage range
                            */
    UINT32 dqtxeqsel : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* DQ TxEq setting selection to achieve constant EQ */
    UINT32 rsvd_10 : 2;

                            /* Bits[11:10], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vrefpwrsave : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               If set to 0 (default), Vref generators selected
                               through RxVrefSel[3:0] are always on.[br] If set
                               to 1, Vref generators are switched off while in
                               Self Refresh.
                            */
    UINT32 vreftonblbus : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000008*/

                            /* Per-bit Enable connection to share Vref Bus */
    UINT32 rxvrefsel : 4;

                            /* Bits[20:17], Access Type=RW, default=0x0000000F*/

                            /* Per Bit Verf generator Enable */
    UINT32 refpiclkdelay : 6;

                            /* Bits[26:21], Access Type=RW, default=0x00000000*/

                            /* RefPiClkDelay */
    UINT32 fnvcrsdlbypassen : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /* FNV Slave Delay Line Bypass Enable */
    UINT32 fnvcrdllbypassen : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /* FNV DLL Bypass Enable */
    UINT32 fnvcrvisaen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               FNV Visa Fub Enable - data fub used for VISA if
                               asserted
                            */
    UINT32 writecrcenable : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /* Enable write crc mode */
    UINT32 rsvd_31 : 1;

                            /* Bits[31:31], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL4N1_2_FNV_DDRIO_COMP_1_STRUCT;

/* COMPDATA0N1_2_FNV_DDRIO_COMP_1_REG supported on:                             */
/*      BWV (0x402b07d4)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Comp Values. Broadcast read not supported.
*/


#define COMPDATA0N1_2_FNV_DDRIO_COMP_1_REG 0x1B1407D4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcompdrvup : 6;

                            /* Bits[5:0], Access Type=RWV, default=0x00000000*/

                            /*
                               Data Rcomp DrvUp Comp Value can be overriden via
                               message channel if periodical retrain is disable
                            */
    UINT32 spare0 : 3;

                            /* Bits[8:6], Access Type=RWV, default=0x00000000*/

                            /* Spare */
    UINT32 rcompdrvdown : 6;

                            /* Bits[14:9], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp DrvDown Comp Value */
    UINT32 vtcomp : 5;

                            /* Bits[19:15], Access Type=RWV, default=0x00000000*/

                            /* VT Comp Values */
    UINT32 tcocomp : 7;

                            /* Bits[26:20], Access Type=RWV, default=0x00000000*/

                            /* Data TCO Comp Value. */
    UINT32 slewratecomp : 5;

                            /* Bits[31:27], Access Type=RWV, default=0x00000000*/

                            /* Data Slew Rate Comp Value. */

  } Bits;
  UINT32 Data;

} COMPDATA0N1_2_FNV_DDRIO_COMP_1_STRUCT;

/* COMPDATA1N1_2_FNV_DDRIO_COMP_1_REG supported on:                             */
/*      BWV (0x402b07d8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Comp Values. Broadcast read not supported.
*/


#define COMPDATA1N1_2_FNV_DDRIO_COMP_1_REG 0x1B1407D8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcompodtup : 6;

                            /* Bits[5:0], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp OdtUp Comp Value */
    UINT32 rcompodtdown : 6;

                            /* Bits[11:6], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp Odt-Down Comp Value */
    UINT32 panicdrvdn : 10;

                            /* Bits[21:12], Access Type=RWV, default=0x00000000*/

                            /* Panic DrvDn RComp Value. */
    UINT32 panicdrvup : 10;

                            /* Bits[31:22], Access Type=RWV, default=0x00000000*/

                            /* Panic DrvUp RComp Comp Value. */

  } Bits;
  UINT32 Data;

} COMPDATA1N1_2_FNV_DDRIO_COMP_1_STRUCT;

/* DATAOFFSETTRAINN1_2_FNV_DDRIO_COMP_1_REG supported on:                       */
/*      BWV (0x402b07dc)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATAOFFSETTRAINN1_2_FNV_DDRIO_COMP_1_REG 0x1B1407DC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvenoffset : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained RxRcvEn Value. */
    UINT32 rxdqsoffset : 7;

                            /* Bits[12:6], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained Rx DQS Value. */
    UINT32 txdqoffset : 6;

                            /* Bits[18:13], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained Tx DQ Value. */
    UINT32 txdqsoffset : 6;

                            /* Bits[24:19], Access Type=RW, default=0x00000000*/

                            /* Ooffset added to Trained Tx DQS Value. */
    UINT32 vrefoffset : 7;

                            /* Bits[31:25], Access Type=RW, default=0x00000000*/

                            /*
                               2s Compliment offset added to Trained Vref
                               Value. Positive number increases Vref, and each
                               step is Vdd/384.
                            */

  } Bits;
  UINT32 Data;

} DATAOFFSETTRAINN1_2_FNV_DDRIO_COMP_1_STRUCT;


/* DATACONTROL0N1_2_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b07e8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL0N1_2_FNV_DDRIO_COMP_1_REG 0x1B1407E8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rxtrainingmode : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enables Read DqDqs Training Mode */
    UINT32 wltrainingmode : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /* Enables Write Leveling Training Mode */
    UINT32 rltrainingmode : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /* Enables Read Leveling Training Mode. */
    UINT32 senseamptrainingmode : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Enables SenseAmp offset cancellation training
                               mode.
                            */
    UINT32 txon : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               When set, forces DQ/DQS drive enable to active.
                               Used in power measurements and IO loopback mode
                            */
    UINT32 rfon : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down Disable: Forces register file read,
                               overriding the rank power down logic.
                            */
    UINT32 rxpion : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /* Power-down Disable: Forces RxDqs PI clocks on. */
    UINT32 txpion : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down Disable: Forces TxDq and TxDqs PI
                               clocks on.
                            */
    UINT32 internalclockson : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Forces on master DLL and all PI enables ON,
                               despite both channel in SelfRefresh, etc. low
                               power states.
                            */
    UINT32 saoffsettraintxon : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* SaOffsetTrainTxon */
    UINT32 txdisable : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down: All write commands are ignored for
                               this data-byte. Used in single-channel MCI mode.
                            */
    UINT32 rxdisable : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down: All read commands are ignored for
                               this data-byte. Used in single-channel MCI mode.
                            */
    UINT32 txlong : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Sets the duration of the first transmitted DQ
                               bit of the burst. 0=1UI, 1=2UI.
                            */
    UINT32 rsvd_13 : 5;

                            /* Bits[17:13], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 driversegmentenable : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Controls which segements of the driver are
                               enabled: {0: All, 1: Only ODT}.
                            */
    UINT32 rsvd_19 : 1;

                            /* Bits[19:19], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 readrfrd : 1;

                            /* Bits[20:20], Access Type=RWV, default=0x00000000*/

                            /*
                               Self clearing command bit. When set, it will
                               download the three 32 bit lines from the RegFile
                               associated with a read command to Rank =
                               ReadRFRank
                            */
    UINT32 readrfwr : 1;

                            /* Bits[21:21], Access Type=RWV, default=0x00000000*/

                            /*
                               Self clearing command bit. When set, it will
                               download the three 32 bit lines from the RegFile
                               associated with a write command to Rank =
                               ReadRFRank
                            */
    UINT32 readrfrank : 3;

                            /* Bits[24:22], Access Type=RWV, default=0x00000000*/

                            /*
                               Specifies the rank that ReadRFRd or ReadRFWr
                               will manually download the CR values from
                            */
    UINT32 forceodton : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /* ODT is forced-on. */
    UINT32 odtsampoff : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /* ODT and Senseamp are forced-off. */
    UINT32 disableodtstatic : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /* not used */
    UINT32 ddrcrforceodton : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               force ODT to the transmitter on, regardless of
                               state of DriveEnable
                            */
    UINT32 spare : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* spare */
    UINT32 xovercal : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /* Enables Xover Calibration Training Mode */
    UINT32 longpreambleenable : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* Enables long preamble for DDR4 devices */

  } Bits;
  UINT32 Data;

} DATACONTROL0N1_2_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL1N1_2_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b07ec)                                                        */
/* Register default value on BWV: 0x0000003C                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL1N1_2_FNV_DDRIO_COMP_1_REG 0x1B1407EC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd_0 : 10;

                            /* Bits[9:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rxbiasctl : 3;

                            /* Bits[12:10], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the Current and BW of the Receiver: {0:
                               0.34Idll, 1: 0.66Idll, 2: 0.88Idll, 3: Idll, 4:
                               1.33Idll, 5: 1.66Idll[br] , 6: 2.00Idll, 7:
                               2.33Idll}
                            */
    UINT32 odtdelay : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000000*/

                            /*
                               Controls ODT turn-on delay. To turn on N tQCK
                               before RcvEn, program to RcvEn[8:6] N + 4.
                            */
    UINT32 odtduration : 3;

                            /* Bits[19:17], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the ODT ON duration from (Code,
                               Duration) = (0x0, 11 tQCK) to (0x7, 18 tQCK)
                            */
    UINT32 senseampdelay : 4;

                            /* Bits[23:20], Access Type=RW, default=0x00000000*/

                            /*
                               Controls Senseamp turn-on delay. To turn on N
                               tQCK before RcvEn, program to RcvEn[8:6] N + 4.
                            */
    UINT32 senseampduration : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the SenseAmp ON duration from (Code,
                               Duration) = (0x0, 11 tQCK) to (0x7, 18 tQCK)
                            */
    UINT32 rsvd_27 : 5;

                            /* Bits[31:27], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL1N1_2_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL2N1_2_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b07f0)                                                        */
/* Register default value on BWV: 0x07800000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL2N1_2_FNV_DDRIO_COMP_1_REG 0x1B1407F0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rxvocselqnnnh : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Enables SenseAmp offset cancellation training
                               mode
                            */
    UINT32 forcebiason : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Force on the internal Vref and Rx bias circuit,
                               regardless of any other power downs
                            */
    UINT32 forcerxon : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Force on the RxAmp only (as opposed to
                               OdtSampOn, which turns on both ODT and the
                               amplifier).[br] Use for overclocking support
                               where we may not be able to hit the fast exit
                               latency
                            */
    UINT32 ddr4extend : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /* Enable finer vref resolution in ddr4 */
    UINT32 cttermination : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /* DDRCOMP_CR_DDRCRCOMPOVR CTTermination */
    UINT32 dfelben : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* Digital far end loopback enable */
    UINT32 dfelbtxdmuxsel : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /* Digital far end loopback TX FIFO data mux sel */
    UINT32 spare1 : 2;

                            /* Bits[12:11], Access Type=RW, default=0x00000000*/

                            /* Spare1 */
    UINT32 txddjcen : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000000*/

                            /* TxddjcEn */
    UINT32 dfeenable : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /* DfeEnable */
    UINT32 dfedlysel : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /* DfeDlySel */
    UINT32 dfecode : 4;

                            /* Bits[22:19], Access Type=RW, default=0x00000000*/

                            /*
                               DfeCode: binary code 0000 to 1000 for DFE
                               offset, mid-code code for zero offset is 0100
                            */
    UINT32 rxdqssaoffset : 5;

                            /* Bits[27:23], Access Type=RW, default=0x0000000F*/

                            /* strobe Rx Amp offset control */
    UINT32 rsvd_28 : 4;

                            /* Bits[31:28], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL2N1_2_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL3N1_2_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b07f4)                                                        */
/* Register default value on BWV: 0x00000FCF                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* static configurations of tx and rx. Broadcast read not supported.
*/


#define DATACONTROL3N1_2_FNV_DDRIO_COMP_1_REG 0x1B1407F4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 drvstaticlegcfg : 2;

                            /* Bits[1:0], Access Type=RW, default=0x00000003*/

                            /*
                               binary default setting for static legs in DRV
                               mode[br] 0 0 0 legs (EQ disabled)[br] 0 1 3 legs
                               (EQ max 3 legs)[br] 1 0 6 legs (EQ max 6
                               legs)[br] 1 1 12 legs (EQ max 12 legs)[br] In
                               most cases, we would set this to be 11, but for
                               some configurations that require a higher [br]
                               Ron value, we need to reduce the number of
                               static legs enabled so that fast corner can hit
                               [br] the higher Ron target value.
                            */
    UINT32 odtstaticlegcfg : 2;

                            /* Bits[3:2], Access Type=RW, default=0x00000003*/

                            /*
                               binary default setting for static legs in ODT
                               mode[br] 0 0 0 legs (EQ disabled)[br] 0 1 3 legs
                               (EQ max 3 legs)[br] 1 0 6 legs (EQ max 6
                               legs)[br] 1 1 12 legs (EQ max 12 legs)[br] In
                               most cases, we would set this to be 11, but for
                               some configurations that require a higher [br]
                               Ron value, we need to reduce the number of
                               static legs enabled so that fast corner can hit
                               [br] the higher Ron target value.
                            */
    UINT32 lvlshft_holden : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               level shift hold enable[br] Holds the HV control
                               values and power down mode the level
                               shifters.[br] Apply '1' after training. Slow
                               timing - not advised for fast enabling
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 odtsegmentenable : 3;

                            /* Bits[8:6], Access Type=RW, default=0x00000007*/

                            /*
                               This will tell which segments are enabled out of
                               reset. [br] After that, a shift register will
                               determine the enabled segments
                            */
    UINT32 datasegmentenable : 3;

                            /* Bits[11:9], Access Type=RW, default=0x00000007*/

                            /*
                               This will tell which segments are enabled out of
                               reset.
                            */
    UINT32 longodtr2w : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               When set, it will extends ODT by 1 qclk on read
                               to write turnarounds. hsd 230773
                            */
    UINT32 spare1 : 8;

                            /* Bits[20:13], Access Type=RW, default=0x00000000*/

                            /* Spare1 */
    UINT32 ddrcrctlecapen : 2;

                            /* Bits[22:21], Access Type=RW, default=0x00000000*/

                            /* ctle capacitor setting */
    UINT32 ddrcrctleresen : 2;

                            /* Bits[24:23], Access Type=RW, default=0x00000000*/

                            /* ctle resistor setting */
    UINT32 pcasbiasclosedloopen : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiassel : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiasfoldedlegtrim : 2;

                            /* Bits[28:27], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiasgcncomp : 2;

                            /* Bits[30:29], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 postambleenable : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* Spare */

  } Bits;
  UINT32 Data;

} DATACONTROL3N1_2_FNV_DDRIO_COMP_1_STRUCT;

/* VSSHIORVREFCONTROLN1_2_FNV_DDRIO_COMP_1_REG supported on:                    */
/*      BWV (0x402b07f8)                                                        */
/* Register default value on BWV: 0x004D8238                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, only. Broadcast read not supported.
*/


#define VSSHIORVREFCONTROLN1_2_FNV_DDRIO_COMP_1_REG 0x1B1407F8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 vsshiorvrefctl : 24;

                            /* Bits[23:0], Access Type=RW, default=0x004D8238*/

                            /*
                               Channel 0 fubs : VssHi adjust setting. Channel1
                               fubs: DIMM VREF adjust settings.[br] [br] VssHi
                               Field Description: [br] [br] Field Bits
                               Description[br] ------- ---- -------------------
                               ------------------------------------------------
                               ------------------------------------------------
                               --------------------------------------------[br]
                               SelCode 23 Selects the code to output: {0: Code,
                               1: TCode}[br] GainBoost 22 Enable gain boost is
                               panic mode by updating code/tcode [br]
                               PanicVoltage 21:18 Unsigned integer controlling
                               the voltage error on VssHi that will trigger the
                               panic driver. Step size of VccDDQ/192 (0 to
                               117mV)[br] CloseLoop 17 Enables the VssHi close
                               loop tracking [br] PanicEn 16 Enables the VssHi
                               Panic Driver[br] BWError 15:14 Limits the loop
                               gain (ie: difference between code and tcode) to
                               +/- 2^(SlowBWError)[br] OpenLoop 13 Operates
                               VssHi in open loop mode with the target Vref
                               code directly driving the output DAC with no
                               feedback involved[br] SampleDivider 12:10
                               Controls the loop bandwidth by dividing down the
                               input clock: {0: Qclk, 1: Qclk/2, 2: Qclk/4, 3:
                               Qclk/8, 4: Qclk/16, 5: Qclk/32, 6: Qclk/64, 7:
                               Qclk/128}[br] LoBWDivider 9:8 For the slow
                               integrator, selects the net number of samples in
                               a given direction to trip the filter. {0: 4
                               samples, 1: 16 samples, 2: 32 samples, 3: 64
                               samples}[br] HiBWDivider 7:6 For the fast
                               integrator, selects the net number of samples in
                               a given direction to trip the filter. {0: 4
                               samples, 1: 16 samples, 2: 32 samples, 3: 64
                               samples}[br] Target 5:0 Unsigned integer
                               controlling the target VssHi voltage. Step size
                               of VccDDQ/192 and starting value of
                               VccDDQ*20/192
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} VSSHIORVREFCONTROLN1_2_FNV_DDRIO_COMP_1_STRUCT;


/* RXGROUP0N0RANK0_3_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0800)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank0. Broadcast reads are not supported.
*/


#define RXGROUP0N0RANK0_3_FNV_DDRIO_COMP_1_REG 0x1B140800

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* readx4modeenb */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_P to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_N to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS (0: 1/16 UI offset, [br] 1:
                               3/16 UI Offset, 2: 5/16 UI Offsets, 3: 7/16 UI
                               Offsets, 4: 9/16 UI Offsets, 5,6,7: 11/16 UI
                               Offsets.)
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               CTLE current steering tuning (0=no eq, 7=max
                               eq). It is decoded to[br] CTLE resistor tuning:
                               00 - 3R (10.8Kohms), 01/10 - R (3.6Kohms), 11 -
                               R/3 (1.2Kohms)[br] CTLE capacitor tuning: 00 -
                               0C (not used), 01 - 1C (200ff), 10 - 2C (400ff),
                               11 - 3C (600ff)
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N0RANK0_3_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N0RANK1_3_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0804)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank1. Broadcast reads are not supported.
*/


#define RXGROUP0N0RANK1_3_FNV_DDRIO_COMP_1_REG 0x1B140804

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* readx4modeenb */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_P to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_N to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               CTLE current steering tuning (0=no eq, 7=max
                               eq). It is decoded to[br] CTLE resistor tuning:
                               00 - 3R (10.8Kohms), 01/10 - R (3.6Kohms), 11 -
                               R/3 (1.2Kohms)[br] CTLE capacitor tuning: 00 -
                               0C (not used), 01 - 1C (200ff), 10 - 2C (400ff),
                               11 - 3C (600ff)
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N0RANK1_3_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N0RANK2_3_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0808)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank2. Broadcast read not supported.
*/


#define RXGROUP0N0RANK2_3_FNV_DDRIO_COMP_1_REG 0x1B140808

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* readx4modeenb */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_P to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_P to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               CTLE current steering tuning (0=no eq, 7=max
                               eq). It is decoded to[br] CTLE resistor tuning:
                               00 - 3R (10.8Kohms), 01/10 - R (3.6Kohms), 11 -
                               R/3 (1.2Kohms)[br] CTLE capacitor tuning: 00 -
                               0C (not used), 01 - 1C (200ff), 10 - 2C (400ff),
                               11 - 3C (600ff)
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N0RANK2_3_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N0RANK3_3_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b080c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank3. Broadcast read not supported.
*/


#define RXGROUP0N0RANK3_3_FNV_DDRIO_COMP_1_REG 0x1B14080C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* readx4modeenb */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_P to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_N to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               CTLE current steering tuning (0=no eq, 7=max
                               eq). It is decoded to[br] CTLE resistor tuning:
                               00 - 3R (10.8Kohms), 01/10 - R (3.6Kohms), 11 -
                               R/3 (1.2Kohms)[br] CTLE capacitor tuning: 00 -
                               0C (not used), 01 - 1C (200ff), 10 - 2C (400ff),
                               11 - 3C (600ff)
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N0RANK3_3_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N0RANK0_3_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0840)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N0RANK0_3_FNV_DDRIO_COMP_1_REG 0x1B140840

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* select one of the four DQ Clk */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N0RANK0_3_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N0RANK1_3_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0844)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N0RANK1_3_FNV_DDRIO_COMP_1_REG 0x1B140844

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* Select one of the four DQ clks */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N0RANK1_3_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N0RANK2_3_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0848)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N0RANK2_3_FNV_DDRIO_COMP_1_REG 0x1B140848

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* Select one of the four DQ clks */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N0RANK2_3_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N0RANK3_3_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b084c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N0RANK3_3_FNV_DDRIO_COMP_1_REG 0x1B14084C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* Select one of the four DQ clk */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N0RANK3_3_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN0RANK0_3_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0880)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN0RANK0_3_FNV_DDRIO_COMP_1_REG 0x1B140880

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               selects which skewed DQSP (to sample even bits)
                               is used in the RX FIFO. For proper operation,
                               always pick latest DQSP
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               selects which skewed DQSN (to sample odd bits)
                               is used in the RX FIFO. For proper operation,
                               always pick latest DQSN
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN0RANK0_3_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN0RANK1_3_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0884)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN0RANK1_3_FNV_DDRIO_COMP_1_REG 0x1B140884

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               [0]=0 selects the raw output from the nibble DQS
                               amplifier; [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN0RANK1_3_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN0RANK2_3_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0888)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN0RANK2_3_FNV_DDRIO_COMP_1_REG 0x1B140888

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               [0]=0 selects the raw output from the nibble DQS
                               amplifier; [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN0RANK2_3_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN0RANK3_3_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b088c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN0RANK3_3_FNV_DDRIO_COMP_1_REG 0x1B14088C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               [0]=0 selects the raw output from the nibble DQS
                               amplifier; [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN0RANK3_3_FNV_DDRIO_COMP_1_STRUCT;

/* RXVREFCTRLN0_3_FNV_DDRIO_COMP_1_REG supported on:                            */
/*      BWV (0x402b08a4)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* RxVrefCtrl. Broadcast read not supported.
*/


#define RXVREFCTRLN0_3_FNV_DDRIO_COMP_1_REG 0x1B1408A4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 vrefperbit0 : 7;

                            /* Bits[6:0], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben0 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 vrefperbit1 : 7;

                            /* Bits[14:8], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben1 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /*
                               enables fine grain Vref control, shift down the
                               Vref voltage by ~0.5 stepsize
                            */
    UINT32 vrefperbit2 : 7;

                            /* Bits[22:16], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben2 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /*
                               enables fine grain Vref control, shift down the
                               Vref voltage by ~0.5 stepsize
                            */
    UINT32 vrefperbit3 : 7;

                            /* Bits[30:24], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben3 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* shift down the Vref voltage by ~0.5 stepsize */

  } Bits;
  UINT32 Data;

} RXVREFCTRLN0_3_FNV_DDRIO_COMP_1_STRUCT;

/* DATATRAINFEEDBACKN0_3_FNV_DDRIO_COMP_1_REG supported on:                     */
/*      BWV (0x402b08a8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Training Feedback Results. Broadcast read not supported.
*/


#define DATATRAINFEEDBACKN0_3_FNV_DDRIO_COMP_1_REG 0x1B1408A8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 datatrainfeedback : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Data Training Feedback Storage[br] [br]
                               DataTrainFeedback Description:[br] Training Step
                               Bits Nibble Description[br] -------------- ----
                               ------- --------------------------[br] Cross
                               Over Cal 0 0 Tx Dqs Phase Detection[br] Cross
                               Over Cal 1 0 Tx Dq Phase Detection[br] Cross
                               Over Cal 2 0 Rec En Phase Detection[br] RcvEn
                               8:0 0 Byte detection[br] [br] Wr Leveling 8:0 0
                               Byte detection[br] Senseamp offset 3:0 0 Dq
                               Senseamp offset Detection
                            */
    UINT32 rsvd_9 : 23;

                            /* Bits[31:9], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATATRAINFEEDBACKN0_3_FNV_DDRIO_COMP_1_STRUCT;

/* DDRCRFSMCALN0_3_FNV_DDRIO_COMP_1_REG supported on:                           */
/*      BWV (0x402b08c8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Fsm for  Voc and Xover caliberation, Voc caliberation is a procedure that cancel out intrinsic offset in analogue receivers and Xover training ,it aligns all the local dll to the global qclk
*/


#define DDRCRFSMCALN0_3_FNV_DDRIO_COMP_1_REG 0x1B1408C8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0fsm : 5;

                            /* Bits[4:0], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of first receiver is done(read only)
                            */
    UINT32 saoffset1fsm : 5;

                            /* Bits[9:5], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of second receiver is done(read only)
                            */
    UINT32 saoffset2fsm : 5;

                            /* Bits[14:10], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of third receiver is done(read only)
                            */
    UINT32 saoffset3fsm : 5;

                            /* Bits[19:15], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of fourth receiver is done(read only)
                            */
    UINT32 fsmcalcomplete : 1;

                            /* Bits[20:20], Access Type=ROV, default=0x00000000*/

                            /* when the caliberation is done */
    UINT32 refpiclkdelayfsm : 6;

                            /* Bits[26:21], Access Type=ROV, default=0x00000000*/

                            /*
                               Load FSM with a code at which , the transition
                               is detected.
                            */
    UINT32 fsmcaldone : 1;

                            /* Bits[27:27], Access Type=ROV, default=0x00000000*/

                            /* when the caliberation of voc or x-over is done */
    UINT32 fsmtimersel : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /* Timer is set for either 8 cycles or 16 cycles */
    UINT32 fsmpatternsel : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               It selects whther the pattern of three bit or
                               two bit is selected when the transition happen
                               from 1-->0 for pdout and receiver , to avoid
                               glitch
                            */
    UINT32 fsmvoccal : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               This bit tells , wether the xover or voc
                               caliberation will be done, if its zero x-over
                               caliberation is done and vice-versa
                            */
    UINT32 fsmcalen : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* FsmCalEn starts the voc-Xover Fsm */

  } Bits;
  UINT32 Data;

} DDRCRFSMCALN0_3_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL4N0_3_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b08cc)                                                        */
/* Register default value on BWV: 0x801F0000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* static configurations of tx and rx. Broadcast read not supported.
*/


#define DATACONTROL4N0_3_FNV_DDRIO_COMP_1_REG 0x1B1408CC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd_0 : 1;

                            /* Bits[0:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vsshiorvrefctl1 : 8;

                            /* Bits[8:1], Access Type=RW, default=0x00000000*/

                            /*
                               VssHi control bits[br] Field Description: [br]
                               [br] Field Bits Description[br] ------- ----
                               ---------------------------------[br]
                               disoverflow 24 Disable overflow logic from
                               BDW[br] fast panic enable 25 Bypass 2 flops in
                               panic path for faster panic response[br]
                               vsshivccd2by3cfgen 26 Forces the driver DAC to
                               get supply from 2/3 vccd[br] vsshivccd2by3cfg
                               27:29 Current trim setting for 2/3 vccd mode,
                               001 fast, 011 typical, 111 slow silicon [br]
                               ddrvssh2ndcompen 30 Enable second comparator
                               (ZBB mode)[br] comp high bwen 31 Improve
                               comparator performance to support low digital
                               voltage range
                            */
    UINT32 dqtxeqsel : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* DQ TxEq setting selection to achieve constant EQ */
    UINT32 rsvd_10 : 2;

                            /* Bits[11:10], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vrefpwrsave : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               If set to 0 (default), Vref generators selected
                               through RxVrefSel[3:0] are always on.[br] If set
                               to 1, Vref generators are switched off while in
                               Self Refresh.
                            */
    UINT32 vreftonblbus : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000008*/

                            /* Per-bit Enable connection to share Vref Bus */
    UINT32 rxvrefsel : 4;

                            /* Bits[20:17], Access Type=RW, default=0x0000000F*/

                            /* Per Bit Verf generator Enable */
    UINT32 refpiclkdelay : 6;

                            /* Bits[26:21], Access Type=RW, default=0x00000000*/

                            /* RefPiClkDelay */
    UINT32 fnvcrsdlbypassen : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /* FNV Slave Delay Line Bypass Enable */
    UINT32 fnvcrdllbypassen : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /* FNV DLL Bypass Enable */
    UINT32 fnvcrvisaen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               FNV Visa Fub Enable - data fub used for VISA if
                               asserted
                            */
    UINT32 writecrcenable : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /* Enable write crc mode */
    UINT32 rsvd_31 : 1;

                            /* Bits[31:31], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL4N0_3_FNV_DDRIO_COMP_1_STRUCT;

/* COMPDATA0N0_3_FNV_DDRIO_COMP_1_REG supported on:                             */
/*      BWV (0x402b08d4)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Comp Values. Broadcast read not supported.
*/


#define COMPDATA0N0_3_FNV_DDRIO_COMP_1_REG 0x1B1408D4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcompdrvup : 6;

                            /* Bits[5:0], Access Type=RWV, default=0x00000000*/

                            /*
                               Data Rcomp DrvUp Comp Value can be overriden via
                               message channel if periodical retrain is disable
                            */
    UINT32 spare0 : 3;

                            /* Bits[8:6], Access Type=RWV, default=0x00000000*/

                            /* Spare */
    UINT32 rcompdrvdown : 6;

                            /* Bits[14:9], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp DrvDown Comp Value */
    UINT32 vtcomp : 5;

                            /* Bits[19:15], Access Type=RWV, default=0x00000000*/

                            /* VT Comp Values */
    UINT32 tcocomp : 7;

                            /* Bits[26:20], Access Type=RWV, default=0x00000000*/

                            /* Data TCO Comp Value. */
    UINT32 slewratecomp : 5;

                            /* Bits[31:27], Access Type=RWV, default=0x00000000*/

                            /* Data Slew Rate Comp Value. */

  } Bits;
  UINT32 Data;

} COMPDATA0N0_3_FNV_DDRIO_COMP_1_STRUCT;

/* COMPDATA1N0_3_FNV_DDRIO_COMP_1_REG supported on:                             */
/*      BWV (0x402b08d8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Comp Values. Broadcast read not supported.
*/


#define COMPDATA1N0_3_FNV_DDRIO_COMP_1_REG 0x1B1408D8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcompodtup : 6;

                            /* Bits[5:0], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp OdtUp Comp Value */
    UINT32 rcompodtdown : 6;

                            /* Bits[11:6], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp Odt-Down Comp Value */
    UINT32 panicdrvdn : 10;

                            /* Bits[21:12], Access Type=RWV, default=0x00000000*/

                            /* Panic DrvDn RComp Value. */
    UINT32 panicdrvup : 10;

                            /* Bits[31:22], Access Type=RWV, default=0x00000000*/

                            /* Panic DrvUp RComp Comp Value. */

  } Bits;
  UINT32 Data;

} COMPDATA1N0_3_FNV_DDRIO_COMP_1_STRUCT;

/* DATAOFFSETTRAINN0_3_FNV_DDRIO_COMP_1_REG supported on:                       */
/*      BWV (0x402b08dc)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATAOFFSETTRAINN0_3_FNV_DDRIO_COMP_1_REG 0x1B1408DC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvenoffset : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained RxRcvEn Value. */
    UINT32 rxdqsoffset : 7;

                            /* Bits[12:6], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained Rx DQS Value. */
    UINT32 txdqoffset : 6;

                            /* Bits[18:13], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained Tx DQ Value. */
    UINT32 txdqsoffset : 6;

                            /* Bits[24:19], Access Type=RW, default=0x00000000*/

                            /* Ooffset added to Trained Tx DQS Value. */
    UINT32 vrefoffset : 7;

                            /* Bits[31:25], Access Type=RW, default=0x00000000*/

                            /*
                               2s Compliment offset added to Trained Vref
                               Value. Positive number increases Vref, and each
                               step is Vdd/384.
                            */

  } Bits;
  UINT32 Data;

} DATAOFFSETTRAINN0_3_FNV_DDRIO_COMP_1_STRUCT;


/* DATACONTROL0N0_3_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b08e8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL0N0_3_FNV_DDRIO_COMP_1_REG 0x1B1408E8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rxtrainingmode : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enables Read DqDqs Training Mode */
    UINT32 wltrainingmode : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /* Enables Write Leveling Training Mode */
    UINT32 rltrainingmode : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /* Enables Read Leveling Training Mode. */
    UINT32 senseamptrainingmode : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Enables SenseAmp offset cancellation training
                               mode.
                            */
    UINT32 txon : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               When set, forces DQ/DQS drive enable to active.
                               Used in power measurements and IO loopback mode
                            */
    UINT32 rfon : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down Disable: Forces register file read,
                               overriding the rank power down logic.
                            */
    UINT32 rxpion : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /* Power-down Disable: Forces RxDqs PI clocks on. */
    UINT32 txpion : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down Disable: Forces TxDq and TxDqs PI
                               clocks on.
                            */
    UINT32 internalclockson : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Forces on master DLL and all PI enables ON,
                               despite both channel in SelfRefresh, etc. low
                               power states.
                            */
    UINT32 saoffsettraintxon : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* SaOffsetTrainTxon */
    UINT32 txdisable : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down: All write commands are ignored for
                               this data-byte. Used in single-channel MCI mode.
                            */
    UINT32 rxdisable : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down: All read commands are ignored for
                               this data-byte. Used in single-channel MCI mode.
                            */
    UINT32 txlong : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Sets the duration of the first transmitted DQ
                               bit of the burst. 0=1UI, 1=2UI.
                            */
    UINT32 rsvd_13 : 5;

                            /* Bits[17:13], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 driversegmentenable : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Controls which segements of the driver are
                               enabled: {0: All, 1: Only ODT}.
                            */
    UINT32 rsvd_19 : 1;

                            /* Bits[19:19], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 readrfrd : 1;

                            /* Bits[20:20], Access Type=RWV, default=0x00000000*/

                            /*
                               Self clearing command bit. When set, it will
                               download the three 32 bit lines from the RegFile
                               associated with a read command to Rank =
                               ReadRFRank
                            */
    UINT32 readrfwr : 1;

                            /* Bits[21:21], Access Type=RWV, default=0x00000000*/

                            /*
                               Self clearing command bit. When set, it will
                               download the three 32 bit lines from the RegFile
                               associated with a write command to Rank =
                               ReadRFRank
                            */
    UINT32 readrfrank : 3;

                            /* Bits[24:22], Access Type=RWV, default=0x00000000*/

                            /*
                               Specifies the rank that ReadRFRd or ReadRFWr
                               will manually download the CR values from
                            */
    UINT32 forceodton : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /* ODT is forced-on. */
    UINT32 odtsampoff : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /* ODT and Senseamp are forced-off. */
    UINT32 disableodtstatic : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /* not used */
    UINT32 ddrcrforceodton : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               force ODT to the transmitter on, regardless of
                               state of DriveEnable
                            */
    UINT32 spare : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* spare */
    UINT32 xovercal : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /* Enables Xover Calibration Training Mode */
    UINT32 longpreambleenable : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* Enables long preamble for DDR4 devices */

  } Bits;
  UINT32 Data;

} DATACONTROL0N0_3_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL1N0_3_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b08ec)                                                        */
/* Register default value on BWV: 0x0000003C                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL1N0_3_FNV_DDRIO_COMP_1_REG 0x1B1408EC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd_0 : 10;

                            /* Bits[9:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rxbiasctl : 3;

                            /* Bits[12:10], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the Current and BW of the Receiver: {0:
                               0.34Idll, 1: 0.66Idll, 2: 0.88Idll, 3: Idll, 4:
                               1.33Idll, 5: 1.66Idll[br] , 6: 2.00Idll, 7:
                               2.33Idll}
                            */
    UINT32 odtdelay : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000000*/

                            /*
                               Controls ODT turn-on delay. To turn on N tQCK
                               before RcvEn, program to RcvEn[8:6] N + 4.
                            */
    UINT32 odtduration : 3;

                            /* Bits[19:17], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the ODT ON duration from (Code,
                               Duration) = (0x0, 11 tQCK) to (0x7, 18 tQCK)
                            */
    UINT32 senseampdelay : 4;

                            /* Bits[23:20], Access Type=RW, default=0x00000000*/

                            /*
                               Controls Senseamp turn-on delay. To turn on N
                               tQCK before RcvEn, program to RcvEn[8:6] N + 4.
                            */
    UINT32 senseampduration : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the SenseAmp ON duration from (Code,
                               Duration) = (0x0, 11 tQCK) to (0x7, 18 tQCK)
                            */
    UINT32 rsvd_27 : 5;

                            /* Bits[31:27], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL1N0_3_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL2N0_3_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b08f0)                                                        */
/* Register default value on BWV: 0x07800000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL2N0_3_FNV_DDRIO_COMP_1_REG 0x1B1408F0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rxvocselqnnnh : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Enables SenseAmp offset cancellation training
                               mode
                            */
    UINT32 forcebiason : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Force on the internal Vref and Rx bias circuit,
                               regardless of any other power downs
                            */
    UINT32 forcerxon : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Force on the RxAmp only (as opposed to
                               OdtSampOn, which turns on both ODT and the
                               amplifier).[br] Use for overclocking support
                               where we may not be able to hit the fast exit
                               latency
                            */
    UINT32 ddr4extend : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /* Enable finer vref resolution in ddr4 */
    UINT32 cttermination : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /* DDRCOMP_CR_DDRCRCOMPOVR CTTermination */
    UINT32 dfelben : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* Digital far end loopback enable */
    UINT32 dfelbtxdmuxsel : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /* Digital far end loopback TX FIFO data mux sel */
    UINT32 spare1 : 2;

                            /* Bits[12:11], Access Type=RW, default=0x00000000*/

                            /* Spare1 */
    UINT32 txddjcen : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000000*/

                            /* TxddjcEn */
    UINT32 dfeenable : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /* DfeEnable */
    UINT32 dfedlysel : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /* DfeDlySel */
    UINT32 dfecode : 4;

                            /* Bits[22:19], Access Type=RW, default=0x00000000*/

                            /*
                               DfeCode: binary code 0000 to 1000 for DFE
                               offset, mid-code code for zero offset is 0100
                            */
    UINT32 rxdqssaoffset : 5;

                            /* Bits[27:23], Access Type=RW, default=0x0000000F*/

                            /* strobe Rx Amp offset control */
    UINT32 rsvd_28 : 4;

                            /* Bits[31:28], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL2N0_3_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL3N0_3_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b08f4)                                                        */
/* Register default value on BWV: 0x00000FCF                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* static configurations of tx and rx. Broadcast read not supported.
*/


#define DATACONTROL3N0_3_FNV_DDRIO_COMP_1_REG 0x1B1408F4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 drvstaticlegcfg : 2;

                            /* Bits[1:0], Access Type=RW, default=0x00000003*/

                            /*
                               binary default setting for static legs in DRV
                               mode[br] 0 0 0 legs (EQ disabled)[br] 0 1 3 legs
                               (EQ max 3 legs)[br] 1 0 6 legs (EQ max 6
                               legs)[br] 1 1 12 legs (EQ max 12 legs)[br] In
                               most cases, we would set this to be 11, but for
                               some configurations that require a higher [br]
                               Ron value, we need to reduce the number of
                               static legs enabled so that fast corner can hit
                               [br] the higher Ron target value.
                            */
    UINT32 odtstaticlegcfg : 2;

                            /* Bits[3:2], Access Type=RW, default=0x00000003*/

                            /*
                               binary default setting for static legs in ODT
                               mode[br] 0 0 0 legs (EQ disabled)[br] 0 1 3 legs
                               (EQ max 3 legs)[br] 1 0 6 legs (EQ max 6
                               legs)[br] 1 1 12 legs (EQ max 12 legs)[br] In
                               most cases, we would set this to be 11, but for
                               some configurations that require a higher [br]
                               Ron value, we need to reduce the number of
                               static legs enabled so that fast corner can hit
                               [br] the higher Ron target value.
                            */
    UINT32 lvlshft_holden : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               level shift hold enable[br] Holds the HV control
                               values and power down mode the level
                               shifters.[br] Apply '1' after training. Slow
                               timing - not advised for fast enabling
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 odtsegmentenable : 3;

                            /* Bits[8:6], Access Type=RW, default=0x00000007*/

                            /*
                               This will tell which segments are enabled out of
                               reset. [br] After that, a shift register will
                               determine the enabled segments
                            */
    UINT32 datasegmentenable : 3;

                            /* Bits[11:9], Access Type=RW, default=0x00000007*/

                            /*
                               This will tell which segments are enabled out of
                               reset.
                            */
    UINT32 longodtr2w : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               When set, it will extends ODT by 1 qclk on read
                               to write turnarounds. hsd 230773
                            */
    UINT32 spare1 : 8;

                            /* Bits[20:13], Access Type=RW, default=0x00000000*/

                            /* Spare1 */
    UINT32 ddrcrctlecapen : 2;

                            /* Bits[22:21], Access Type=RW, default=0x00000000*/

                            /* ctle capacitor setting */
    UINT32 ddrcrctleresen : 2;

                            /* Bits[24:23], Access Type=RW, default=0x00000000*/

                            /* ctle resistor setting */
    UINT32 pcasbiasclosedloopen : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiassel : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiasfoldedlegtrim : 2;

                            /* Bits[28:27], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiasgcncomp : 2;

                            /* Bits[30:29], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 postambleenable : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* Spare */

  } Bits;
  UINT32 Data;

} DATACONTROL3N0_3_FNV_DDRIO_COMP_1_STRUCT;

/* VSSHIORVREFCONTROLN0_3_FNV_DDRIO_COMP_1_REG supported on:                    */
/*      BWV (0x402b08f8)                                                        */
/* Register default value on BWV: 0x004D8238                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, only. Broadcast read not supported.
*/


#define VSSHIORVREFCONTROLN0_3_FNV_DDRIO_COMP_1_REG 0x1B1408F8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 vsshiorvrefctl : 24;

                            /* Bits[23:0], Access Type=RW, default=0x004D8238*/

                            /*
                               Channel 0 fubs : VssHi adjust setting. Channel1
                               fubs: DIMM VREF adjust settings.[br] [br] VssHi
                               Field Description: [br] [br] Field Bits
                               Description[br] ------- ---- -------------------
                               ------------------------------------------------
                               ------------------------------------------------
                               --------------------------------------------[br]
                               SelCode 23 Selects the code to output: {0: Code,
                               1: TCode}[br] GainBoost 22 Enable gain boost is
                               panic mode by updating code/tcode [br]
                               PanicVoltage 21:18 Unsigned integer controlling
                               the voltage error on VssHi that will trigger the
                               panic driver. Step size of VccDDQ/192 (0 to
                               117mV)[br] CloseLoop 17 Enables the VssHi close
                               loop tracking [br] PanicEn 16 Enables the VssHi
                               Panic Driver[br] BWError 15:14 Limits the loop
                               gain (ie: difference between code and tcode) to
                               +/- 2^(SlowBWError)[br] OpenLoop 13 Operates
                               VssHi in open loop mode with the target Vref
                               code directly driving the output DAC with no
                               feedback involved[br] SampleDivider 12:10
                               Controls the loop bandwidth by dividing down the
                               input clock: {0: Qclk, 1: Qclk/2, 2: Qclk/4, 3:
                               Qclk/8, 4: Qclk/16, 5: Qclk/32, 6: Qclk/64, 7:
                               Qclk/128}[br] LoBWDivider 9:8 For the slow
                               integrator, selects the net number of samples in
                               a given direction to trip the filter. {0: 4
                               samples, 1: 16 samples, 2: 32 samples, 3: 64
                               samples}[br] HiBWDivider 7:6 For the fast
                               integrator, selects the net number of samples in
                               a given direction to trip the filter. {0: 4
                               samples, 1: 16 samples, 2: 32 samples, 3: 64
                               samples}[br] Target 5:0 Unsigned integer
                               controlling the target VssHi voltage. Step size
                               of VccDDQ/192 and starting value of
                               VccDDQ*20/192
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} VSSHIORVREFCONTROLN0_3_FNV_DDRIO_COMP_1_STRUCT;


/* RXGROUP0N1RANK0_3_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0900)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank0. Broadcast read not supported.
*/


#define RXGROUP0N1RANK0_3_FNV_DDRIO_COMP_1_REG 0x1B140900

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* ReadX8ModeEn */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /* common DQS_P delay control, per nibble */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /* common DQS_N delay control, per nibble */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               Rx Equalization code: {4:3} controls the cap
                               tuning 0: (not used), 1: 200ff, 2: 400ff, 3:
                               600ff, [br] controls the resistor tuning (0: 3R,
                               1: 1R, 2: 1R, 3: R/3).
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N1RANK0_3_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N1RANK1_3_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0904)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank0. Broadcast read not supported.
*/


#define RXGROUP0N1RANK1_3_FNV_DDRIO_COMP_1_REG 0x1B140904

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* ReadX8ModeEn */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /* common DQS_P delay control, per nibble */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /* common DQS_N delay control, per nibble */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               Rx Equalization code: {4:3} controls the cap
                               tuning 0: (not used), 1: 200ff, 2: 400ff, 3:
                               600ff, [br] controls the resistor tuning (0: 3R,
                               1: 1R, 2: 1R, 3: R/3).
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N1RANK1_3_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N1RANK2_3_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0908)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank0.Broadcast read not supported.
*/


#define RXGROUP0N1RANK2_3_FNV_DDRIO_COMP_1_REG 0x1B140908

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* ReadX8ModeEn */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /* common DQS_P delay control, per nibble */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /* common DQS_N delay control, per nibble */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               Rx Equalization code: {4:3} controls the cap
                               tuning 0: (not used), 1: 200ff, 2: 400ff, 3:
                               600ff, [br] controls the resistor tuning (0: 3R,
                               1: 1R, 2: 1R, 3: R/3).
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N1RANK2_3_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N1RANK3_3_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b090c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank0. Broadcast read not supported.
*/


#define RXGROUP0N1RANK3_3_FNV_DDRIO_COMP_1_REG 0x1B14090C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* ReadX8ModeEn */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /* common DQS_P delay control, per nibble */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /* common DQS_N delay control, per nibble */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               Rx Equalization code: {4:3} controls the cap
                               tuning 0: (not used), 1: 200ff, 2: 400ff, 3:
                               600ff, [br] controls the resistor tuning (0: 3R,
                               1: 1R, 2: 1R, 3: R/3).
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N1RANK3_3_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N1RANK0_3_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0940)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N1RANK0_3_FNV_DDRIO_COMP_1_REG 0x1B140940

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* one of the four clocks */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N1RANK0_3_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N1RANK1_3_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0944)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N1RANK1_3_FNV_DDRIO_COMP_1_REG 0x1B140944

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* one of the four clocks */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N1RANK1_3_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N1RANK2_3_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0948)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N1RANK2_3_FNV_DDRIO_COMP_1_REG 0x1B140948

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* one of the 4 clocks */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N1RANK2_3_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N1RANK3_3_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b094c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N1RANK3_3_FNV_DDRIO_COMP_1_REG 0x1B14094C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from PiRef to PiN for bit 1 */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N1RANK3_3_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN1RANK0_3_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0980)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN1RANK0_3_FNV_DDRIO_COMP_1_REG 0x1B140980

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               x4/x8 DQS mux select[br] [0]=1 selects the raw
                               output from the nibble0 DQS amplifier in x8
                               mode; [br] [0]=0 select nibble1 amplifier output
                               in x4 mode; [br] [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN1RANK0_3_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN1RANK1_3_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0984)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN1RANK1_3_FNV_DDRIO_COMP_1_REG 0x1B140984

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               x4/x8 DQS mux select[br] [0]=1 selects the raw
                               output from the nibble0 DQS amplifier in x8
                               mode; [br] [0]=0 select nibble1 amplifier output
                               in x4 mode; [br] [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN1RANK1_3_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN1RANK2_3_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0988)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN1RANK2_3_FNV_DDRIO_COMP_1_REG 0x1B140988

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               x4/x8 DQS mux select[br] [0]=1 selects the raw
                               output from the nibble0 DQS amplifier in x8
                               mode; [br] [0]=0 select nibble1 amplifier output
                               in x4 mode; [br] [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN1RANK2_3_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN1RANK3_3_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b098c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN1RANK3_3_FNV_DDRIO_COMP_1_REG 0x1B14098C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               x4/x8 DQS mux select[br] [0]=1 selects the raw
                               output from the nibble0 DQS amplifier in x8
                               mode; [br] [0]=0 select nibble1 amplifier output
                               in x4 mode; [br] [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN1RANK3_3_FNV_DDRIO_COMP_1_STRUCT;

/* RXVREFCTRLN1_3_FNV_DDRIO_COMP_1_REG supported on:                            */
/*      BWV (0x402b09a4)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* RxVrefCtrl. Broadcast read not supported.
*/


#define RXVREFCTRLN1_3_FNV_DDRIO_COMP_1_REG 0x1B1409A4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 vrefperbit0 : 7;

                            /* Bits[6:0], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben0 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 vrefperbit1 : 7;

                            /* Bits[14:8], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben1 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 vrefperbit2 : 7;

                            /* Bits[22:16], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben2 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 vrefperbit3 : 7;

                            /* Bits[30:24], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben3 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* shift down the Vref voltage by ~0.5 stepsize */

  } Bits;
  UINT32 Data;

} RXVREFCTRLN1_3_FNV_DDRIO_COMP_1_STRUCT;

/* DATATRAINFEEDBACKN1_3_FNV_DDRIO_COMP_1_REG supported on:                     */
/*      BWV (0x402b09a8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Training Feedback Results. Broadcast read not supported.
*/


#define DATATRAINFEEDBACKN1_3_FNV_DDRIO_COMP_1_REG 0x1B1409A8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 datatrainfeedback : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Data Training Feedback Storage [br] Training
                               Step Bits Nibble Description[br] --------------
                               ---- ------- ---------------[br] Cross Over Cal
                               0 1 Tx Dqs Phase Detection[br] Cross Over Cal 1
                               1 Tx Dq Phase Detection[br] Cross Over Cal 2 1
                               Rec En Phase Detection[br] RcvEn 8:0 1 Byte
                               detection[br] Wr Leveling 8:0 1 Byte
                               detection[br] Senseamp offset 3:0 1 Dq Senseamp
                               offset Detection
                            */
    UINT32 rsvd_9 : 23;

                            /* Bits[31:9], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATATRAINFEEDBACKN1_3_FNV_DDRIO_COMP_1_STRUCT;

/* DDRCRFSMCALN1_3_FNV_DDRIO_COMP_1_REG supported on:                           */
/*      BWV (0x402b09c8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Fsm for  Voc and Xover caliberation, Voc caliberation is a procedure that cancel out intrinsic offset in analogue receivers and Xover training ,it aligns all the local dll to the global qclk
*/


#define DDRCRFSMCALN1_3_FNV_DDRIO_COMP_1_REG 0x1B1409C8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0fsm : 5;

                            /* Bits[4:0], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of first receiver is done(read only)
                            */
    UINT32 saoffset1fsm : 5;

                            /* Bits[9:5], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of second receiver is done(read only)
                            */
    UINT32 saoffset2fsm : 5;

                            /* Bits[14:10], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of third receiver is done(read only)
                            */
    UINT32 saoffset3fsm : 5;

                            /* Bits[19:15], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of fourth receiver is done(read only)
                            */
    UINT32 fsmcalcomplete : 1;

                            /* Bits[20:20], Access Type=ROV, default=0x00000000*/

                            /* when the caliberation is done */
    UINT32 refpiclkdelayfsm : 6;

                            /* Bits[26:21], Access Type=ROV, default=0x00000000*/

                            /*
                               Load FSM with a code at which , the transition
                               is detected.
                            */
    UINT32 fsmcaldone : 1;

                            /* Bits[27:27], Access Type=ROV, default=0x00000000*/

                            /* when the caliberation of voc or x-over is done */
    UINT32 fsmtimersel : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /* Timer is set for either 8 cycles or 16 cycles */
    UINT32 fsmpatternsel : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               It selects whther the pattern of three bit or
                               two bit is selected when the transition happen
                               from 1-->0 for pdout and receiver , to avoid
                               glitch
                            */
    UINT32 fsmvoccal : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               This bit tells , wether the xover or voc
                               caliberation will be done, if its zero x-over
                               caliberation is done and vice-versa
                            */
    UINT32 fsmcalen : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* FsmCalEn starts the voc-Xover Fsm */

  } Bits;
  UINT32 Data;

} DDRCRFSMCALN1_3_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL4N1_3_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b09cc)                                                        */
/* Register default value on BWV: 0x801F0000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* static configurations of tx and rx. Broadcast read not supported.
*/


#define DATACONTROL4N1_3_FNV_DDRIO_COMP_1_REG 0x1B1409CC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd_0 : 1;

                            /* Bits[0:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vsshiorvrefctl1 : 8;

                            /* Bits[8:1], Access Type=RW, default=0x00000000*/

                            /*
                               VssHi control bits[br] Field Description: [br]
                               [br] Field Bits Description[br] ------- ----
                               ---------------------------------[br]
                               disoverflow 24 Disable overflow logic from
                               BDW[br] fast panic enable 25 Bypass 2 flops in
                               panic path for faster panic response[br]
                               vsshivccd2by3cfgen 26 Forces the driver DAC to
                               get supply from 2/3 vccd[br] vsshivccd2by3cfg
                               27:29 Current trim setting for 2/3 vccd mode,
                               001 fast, 011 typical, 111 slow silicon [br]
                               ddrvssh2ndcompen 30 Enable second comparator
                               (ZBB mode)[br] comp high bwen 31 Improve
                               comparator performance to support low digital
                               voltage range
                            */
    UINT32 dqtxeqsel : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* DQ TxEq setting selection to achieve constant EQ */
    UINT32 rsvd_10 : 2;

                            /* Bits[11:10], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vrefpwrsave : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               If set to 0 (default), Vref generators selected
                               through RxVrefSel[3:0] are always on.[br] If set
                               to 1, Vref generators are switched off while in
                               Self Refresh.
                            */
    UINT32 vreftonblbus : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000008*/

                            /* Per-bit Enable connection to share Vref Bus */
    UINT32 rxvrefsel : 4;

                            /* Bits[20:17], Access Type=RW, default=0x0000000F*/

                            /* Per Bit Verf generator Enable */
    UINT32 refpiclkdelay : 6;

                            /* Bits[26:21], Access Type=RW, default=0x00000000*/

                            /* RefPiClkDelay */
    UINT32 fnvcrsdlbypassen : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /* FNV Slave Delay Line Bypass Enable */
    UINT32 fnvcrdllbypassen : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /* FNV DLL Bypass Enable */
    UINT32 fnvcrvisaen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               FNV Visa Fub Enable - data fub used for VISA if
                               asserted
                            */
    UINT32 writecrcenable : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /* Enable write crc mode */
    UINT32 rsvd_31 : 1;

                            /* Bits[31:31], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL4N1_3_FNV_DDRIO_COMP_1_STRUCT;

/* COMPDATA0N1_3_FNV_DDRIO_COMP_1_REG supported on:                             */
/*      BWV (0x402b09d4)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Comp Values. Broadcast read not supported.
*/


#define COMPDATA0N1_3_FNV_DDRIO_COMP_1_REG 0x1B1409D4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcompdrvup : 6;

                            /* Bits[5:0], Access Type=RWV, default=0x00000000*/

                            /*
                               Data Rcomp DrvUp Comp Value can be overriden via
                               message channel if periodical retrain is disable
                            */
    UINT32 spare0 : 3;

                            /* Bits[8:6], Access Type=RWV, default=0x00000000*/

                            /* Spare */
    UINT32 rcompdrvdown : 6;

                            /* Bits[14:9], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp DrvDown Comp Value */
    UINT32 vtcomp : 5;

                            /* Bits[19:15], Access Type=RWV, default=0x00000000*/

                            /* VT Comp Values */
    UINT32 tcocomp : 7;

                            /* Bits[26:20], Access Type=RWV, default=0x00000000*/

                            /* Data TCO Comp Value. */
    UINT32 slewratecomp : 5;

                            /* Bits[31:27], Access Type=RWV, default=0x00000000*/

                            /* Data Slew Rate Comp Value. */

  } Bits;
  UINT32 Data;

} COMPDATA0N1_3_FNV_DDRIO_COMP_1_STRUCT;

/* COMPDATA1N1_3_FNV_DDRIO_COMP_1_REG supported on:                             */
/*      BWV (0x402b09d8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Comp Values. Broadcast read not supported.
*/


#define COMPDATA1N1_3_FNV_DDRIO_COMP_1_REG 0x1B1409D8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcompodtup : 6;

                            /* Bits[5:0], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp OdtUp Comp Value */
    UINT32 rcompodtdown : 6;

                            /* Bits[11:6], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp Odt-Down Comp Value */
    UINT32 panicdrvdn : 10;

                            /* Bits[21:12], Access Type=RWV, default=0x00000000*/

                            /* Panic DrvDn RComp Value. */
    UINT32 panicdrvup : 10;

                            /* Bits[31:22], Access Type=RWV, default=0x00000000*/

                            /* Panic DrvUp RComp Comp Value. */

  } Bits;
  UINT32 Data;

} COMPDATA1N1_3_FNV_DDRIO_COMP_1_STRUCT;

/* DATAOFFSETTRAINN1_3_FNV_DDRIO_COMP_1_REG supported on:                       */
/*      BWV (0x402b09dc)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATAOFFSETTRAINN1_3_FNV_DDRIO_COMP_1_REG 0x1B1409DC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvenoffset : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained RxRcvEn Value. */
    UINT32 rxdqsoffset : 7;

                            /* Bits[12:6], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained Rx DQS Value. */
    UINT32 txdqoffset : 6;

                            /* Bits[18:13], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained Tx DQ Value. */
    UINT32 txdqsoffset : 6;

                            /* Bits[24:19], Access Type=RW, default=0x00000000*/

                            /* Ooffset added to Trained Tx DQS Value. */
    UINT32 vrefoffset : 7;

                            /* Bits[31:25], Access Type=RW, default=0x00000000*/

                            /*
                               2s Compliment offset added to Trained Vref
                               Value. Positive number increases Vref, and each
                               step is Vdd/384.
                            */

  } Bits;
  UINT32 Data;

} DATAOFFSETTRAINN1_3_FNV_DDRIO_COMP_1_STRUCT;


/* DATACONTROL0N1_3_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b09e8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL0N1_3_FNV_DDRIO_COMP_1_REG 0x1B1409E8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rxtrainingmode : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enables Read DqDqs Training Mode */
    UINT32 wltrainingmode : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /* Enables Write Leveling Training Mode */
    UINT32 rltrainingmode : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /* Enables Read Leveling Training Mode. */
    UINT32 senseamptrainingmode : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Enables SenseAmp offset cancellation training
                               mode.
                            */
    UINT32 txon : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               When set, forces DQ/DQS drive enable to active.
                               Used in power measurements and IO loopback mode
                            */
    UINT32 rfon : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down Disable: Forces register file read,
                               overriding the rank power down logic.
                            */
    UINT32 rxpion : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /* Power-down Disable: Forces RxDqs PI clocks on. */
    UINT32 txpion : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down Disable: Forces TxDq and TxDqs PI
                               clocks on.
                            */
    UINT32 internalclockson : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Forces on master DLL and all PI enables ON,
                               despite both channel in SelfRefresh, etc. low
                               power states.
                            */
    UINT32 saoffsettraintxon : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* SaOffsetTrainTxon */
    UINT32 txdisable : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down: All write commands are ignored for
                               this data-byte. Used in single-channel MCI mode.
                            */
    UINT32 rxdisable : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down: All read commands are ignored for
                               this data-byte. Used in single-channel MCI mode.
                            */
    UINT32 txlong : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Sets the duration of the first transmitted DQ
                               bit of the burst. 0=1UI, 1=2UI.
                            */
    UINT32 rsvd_13 : 5;

                            /* Bits[17:13], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 driversegmentenable : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Controls which segements of the driver are
                               enabled: {0: All, 1: Only ODT}.
                            */
    UINT32 rsvd_19 : 1;

                            /* Bits[19:19], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 readrfrd : 1;

                            /* Bits[20:20], Access Type=RWV, default=0x00000000*/

                            /*
                               Self clearing command bit. When set, it will
                               download the three 32 bit lines from the RegFile
                               associated with a read command to Rank =
                               ReadRFRank
                            */
    UINT32 readrfwr : 1;

                            /* Bits[21:21], Access Type=RWV, default=0x00000000*/

                            /*
                               Self clearing command bit. When set, it will
                               download the three 32 bit lines from the RegFile
                               associated with a write command to Rank =
                               ReadRFRank
                            */
    UINT32 readrfrank : 3;

                            /* Bits[24:22], Access Type=RWV, default=0x00000000*/

                            /*
                               Specifies the rank that ReadRFRd or ReadRFWr
                               will manually download the CR values from
                            */
    UINT32 forceodton : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /* ODT is forced-on. */
    UINT32 odtsampoff : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /* ODT and Senseamp are forced-off. */
    UINT32 disableodtstatic : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /* not used */
    UINT32 ddrcrforceodton : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               force ODT to the transmitter on, regardless of
                               state of DriveEnable
                            */
    UINT32 spare : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* spare */
    UINT32 xovercal : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /* Enables Xover Calibration Training Mode */
    UINT32 longpreambleenable : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* Enables long preamble for DDR4 devices */

  } Bits;
  UINT32 Data;

} DATACONTROL0N1_3_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL1N1_3_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b09ec)                                                        */
/* Register default value on BWV: 0x0000003C                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL1N1_3_FNV_DDRIO_COMP_1_REG 0x1B1409EC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd_0 : 10;

                            /* Bits[9:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rxbiasctl : 3;

                            /* Bits[12:10], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the Current and BW of the Receiver: {0:
                               0.34Idll, 1: 0.66Idll, 2: 0.88Idll, 3: Idll, 4:
                               1.33Idll, 5: 1.66Idll[br] , 6: 2.00Idll, 7:
                               2.33Idll}
                            */
    UINT32 odtdelay : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000000*/

                            /*
                               Controls ODT turn-on delay. To turn on N tQCK
                               before RcvEn, program to RcvEn[8:6] N + 4.
                            */
    UINT32 odtduration : 3;

                            /* Bits[19:17], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the ODT ON duration from (Code,
                               Duration) = (0x0, 11 tQCK) to (0x7, 18 tQCK)
                            */
    UINT32 senseampdelay : 4;

                            /* Bits[23:20], Access Type=RW, default=0x00000000*/

                            /*
                               Controls Senseamp turn-on delay. To turn on N
                               tQCK before RcvEn, program to RcvEn[8:6] N + 4.
                            */
    UINT32 senseampduration : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the SenseAmp ON duration from (Code,
                               Duration) = (0x0, 11 tQCK) to (0x7, 18 tQCK)
                            */
    UINT32 rsvd_27 : 5;

                            /* Bits[31:27], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL1N1_3_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL2N1_3_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b09f0)                                                        */
/* Register default value on BWV: 0x07800000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL2N1_3_FNV_DDRIO_COMP_1_REG 0x1B1409F0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rxvocselqnnnh : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Enables SenseAmp offset cancellation training
                               mode
                            */
    UINT32 forcebiason : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Force on the internal Vref and Rx bias circuit,
                               regardless of any other power downs
                            */
    UINT32 forcerxon : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Force on the RxAmp only (as opposed to
                               OdtSampOn, which turns on both ODT and the
                               amplifier).[br] Use for overclocking support
                               where we may not be able to hit the fast exit
                               latency
                            */
    UINT32 ddr4extend : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /* Enable finer vref resolution in ddr4 */
    UINT32 cttermination : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /* DDRCOMP_CR_DDRCRCOMPOVR CTTermination */
    UINT32 dfelben : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* Digital far end loopback enable */
    UINT32 dfelbtxdmuxsel : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /* Digital far end loopback TX FIFO data mux sel */
    UINT32 spare1 : 2;

                            /* Bits[12:11], Access Type=RW, default=0x00000000*/

                            /* Spare1 */
    UINT32 txddjcen : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000000*/

                            /* TxddjcEn */
    UINT32 dfeenable : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /* DfeEnable */
    UINT32 dfedlysel : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /* DfeDlySel */
    UINT32 dfecode : 4;

                            /* Bits[22:19], Access Type=RW, default=0x00000000*/

                            /*
                               DfeCode: binary code 0000 to 1000 for DFE
                               offset, mid-code code for zero offset is 0100
                            */
    UINT32 rxdqssaoffset : 5;

                            /* Bits[27:23], Access Type=RW, default=0x0000000F*/

                            /* strobe Rx Amp offset control */
    UINT32 rsvd_28 : 4;

                            /* Bits[31:28], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL2N1_3_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL3N1_3_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b09f4)                                                        */
/* Register default value on BWV: 0x00000FCF                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* static configurations of tx and rx. Broadcast read not supported.
*/


#define DATACONTROL3N1_3_FNV_DDRIO_COMP_1_REG 0x1B1409F4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 drvstaticlegcfg : 2;

                            /* Bits[1:0], Access Type=RW, default=0x00000003*/

                            /*
                               binary default setting for static legs in DRV
                               mode[br] 0 0 0 legs (EQ disabled)[br] 0 1 3 legs
                               (EQ max 3 legs)[br] 1 0 6 legs (EQ max 6
                               legs)[br] 1 1 12 legs (EQ max 12 legs)[br] In
                               most cases, we would set this to be 11, but for
                               some configurations that require a higher [br]
                               Ron value, we need to reduce the number of
                               static legs enabled so that fast corner can hit
                               [br] the higher Ron target value.
                            */
    UINT32 odtstaticlegcfg : 2;

                            /* Bits[3:2], Access Type=RW, default=0x00000003*/

                            /*
                               binary default setting for static legs in ODT
                               mode[br] 0 0 0 legs (EQ disabled)[br] 0 1 3 legs
                               (EQ max 3 legs)[br] 1 0 6 legs (EQ max 6
                               legs)[br] 1 1 12 legs (EQ max 12 legs)[br] In
                               most cases, we would set this to be 11, but for
                               some configurations that require a higher [br]
                               Ron value, we need to reduce the number of
                               static legs enabled so that fast corner can hit
                               [br] the higher Ron target value.
                            */
    UINT32 lvlshft_holden : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               level shift hold enable[br] Holds the HV control
                               values and power down mode the level
                               shifters.[br] Apply '1' after training. Slow
                               timing - not advised for fast enabling
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 odtsegmentenable : 3;

                            /* Bits[8:6], Access Type=RW, default=0x00000007*/

                            /*
                               This will tell which segments are enabled out of
                               reset. [br] After that, a shift register will
                               determine the enabled segments
                            */
    UINT32 datasegmentenable : 3;

                            /* Bits[11:9], Access Type=RW, default=0x00000007*/

                            /*
                               This will tell which segments are enabled out of
                               reset.
                            */
    UINT32 longodtr2w : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               When set, it will extends ODT by 1 qclk on read
                               to write turnarounds. hsd 230773
                            */
    UINT32 spare1 : 8;

                            /* Bits[20:13], Access Type=RW, default=0x00000000*/

                            /* Spare1 */
    UINT32 ddrcrctlecapen : 2;

                            /* Bits[22:21], Access Type=RW, default=0x00000000*/

                            /* ctle capacitor setting */
    UINT32 ddrcrctleresen : 2;

                            /* Bits[24:23], Access Type=RW, default=0x00000000*/

                            /* ctle resistor setting */
    UINT32 pcasbiasclosedloopen : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiassel : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiasfoldedlegtrim : 2;

                            /* Bits[28:27], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiasgcncomp : 2;

                            /* Bits[30:29], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 postambleenable : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* Spare */

  } Bits;
  UINT32 Data;

} DATACONTROL3N1_3_FNV_DDRIO_COMP_1_STRUCT;

/* VSSHIORVREFCONTROLN1_3_FNV_DDRIO_COMP_1_REG supported on:                    */
/*      BWV (0x402b09f8)                                                        */
/* Register default value on BWV: 0x004D8238                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, only. Broadcast read not supported.
*/


#define VSSHIORVREFCONTROLN1_3_FNV_DDRIO_COMP_1_REG 0x1B1409F8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 vsshiorvrefctl : 24;

                            /* Bits[23:0], Access Type=RW, default=0x004D8238*/

                            /*
                               Channel 0 fubs : VssHi adjust setting. Channel1
                               fubs: DIMM VREF adjust settings.[br] [br] VssHi
                               Field Description: [br] [br] Field Bits
                               Description[br] ------- ---- -------------------
                               ------------------------------------------------
                               ------------------------------------------------
                               --------------------------------------------[br]
                               SelCode 23 Selects the code to output: {0: Code,
                               1: TCode}[br] GainBoost 22 Enable gain boost is
                               panic mode by updating code/tcode [br]
                               PanicVoltage 21:18 Unsigned integer controlling
                               the voltage error on VssHi that will trigger the
                               panic driver. Step size of VccDDQ/192 (0 to
                               117mV)[br] CloseLoop 17 Enables the VssHi close
                               loop tracking [br] PanicEn 16 Enables the VssHi
                               Panic Driver[br] BWError 15:14 Limits the loop
                               gain (ie: difference between code and tcode) to
                               +/- 2^(SlowBWError)[br] OpenLoop 13 Operates
                               VssHi in open loop mode with the target Vref
                               code directly driving the output DAC with no
                               feedback involved[br] SampleDivider 12:10
                               Controls the loop bandwidth by dividing down the
                               input clock: {0: Qclk, 1: Qclk/2, 2: Qclk/4, 3:
                               Qclk/8, 4: Qclk/16, 5: Qclk/32, 6: Qclk/64, 7:
                               Qclk/128}[br] LoBWDivider 9:8 For the slow
                               integrator, selects the net number of samples in
                               a given direction to trip the filter. {0: 4
                               samples, 1: 16 samples, 2: 32 samples, 3: 64
                               samples}[br] HiBWDivider 7:6 For the fast
                               integrator, selects the net number of samples in
                               a given direction to trip the filter. {0: 4
                               samples, 1: 16 samples, 2: 32 samples, 3: 64
                               samples}[br] Target 5:0 Unsigned integer
                               controlling the target VssHi voltage. Step size
                               of VccDDQ/192 and starting value of
                               VccDDQ*20/192
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} VSSHIORVREFCONTROLN1_3_FNV_DDRIO_COMP_1_STRUCT;


/* RXGROUP0N0RANK0_4_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0a00)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank0. Broadcast reads are not supported.
*/


#define RXGROUP0N0RANK0_4_FNV_DDRIO_COMP_1_REG 0x1B140A00

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* readx4modeenb */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_P to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_N to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS (0: 1/16 UI offset, [br] 1:
                               3/16 UI Offset, 2: 5/16 UI Offsets, 3: 7/16 UI
                               Offsets, 4: 9/16 UI Offsets, 5,6,7: 11/16 UI
                               Offsets.)
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               CTLE current steering tuning (0=no eq, 7=max
                               eq). It is decoded to[br] CTLE resistor tuning:
                               00 - 3R (10.8Kohms), 01/10 - R (3.6Kohms), 11 -
                               R/3 (1.2Kohms)[br] CTLE capacitor tuning: 00 -
                               0C (not used), 01 - 1C (200ff), 10 - 2C (400ff),
                               11 - 3C (600ff)
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N0RANK0_4_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N0RANK1_4_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0a04)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank1. Broadcast reads are not supported.
*/


#define RXGROUP0N0RANK1_4_FNV_DDRIO_COMP_1_REG 0x1B140A04

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* readx4modeenb */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_P to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_N to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               CTLE current steering tuning (0=no eq, 7=max
                               eq). It is decoded to[br] CTLE resistor tuning:
                               00 - 3R (10.8Kohms), 01/10 - R (3.6Kohms), 11 -
                               R/3 (1.2Kohms)[br] CTLE capacitor tuning: 00 -
                               0C (not used), 01 - 1C (200ff), 10 - 2C (400ff),
                               11 - 3C (600ff)
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N0RANK1_4_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N0RANK2_4_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0a08)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank2. Broadcast read not supported.
*/


#define RXGROUP0N0RANK2_4_FNV_DDRIO_COMP_1_REG 0x1B140A08

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* readx4modeenb */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_P to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_P to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               CTLE current steering tuning (0=no eq, 7=max
                               eq). It is decoded to[br] CTLE resistor tuning:
                               00 - 3R (10.8Kohms), 01/10 - R (3.6Kohms), 11 -
                               R/3 (1.2Kohms)[br] CTLE capacitor tuning: 00 -
                               0C (not used), 01 - 1C (200ff), 10 - 2C (400ff),
                               11 - 3C (600ff)
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N0RANK2_4_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N0RANK3_4_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0a0c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank3. Broadcast read not supported.
*/


#define RXGROUP0N0RANK3_4_FNV_DDRIO_COMP_1_REG 0x1B140A0C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* readx4modeenb */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_P to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_N to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               CTLE current steering tuning (0=no eq, 7=max
                               eq). It is decoded to[br] CTLE resistor tuning:
                               00 - 3R (10.8Kohms), 01/10 - R (3.6Kohms), 11 -
                               R/3 (1.2Kohms)[br] CTLE capacitor tuning: 00 -
                               0C (not used), 01 - 1C (200ff), 10 - 2C (400ff),
                               11 - 3C (600ff)
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N0RANK3_4_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N0RANK0_4_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0a40)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N0RANK0_4_FNV_DDRIO_COMP_1_REG 0x1B140A40

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* select one of the four DQ Clk */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N0RANK0_4_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N0RANK1_4_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0a44)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N0RANK1_4_FNV_DDRIO_COMP_1_REG 0x1B140A44

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* Select one of the four DQ clks */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N0RANK1_4_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N0RANK2_4_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0a48)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N0RANK2_4_FNV_DDRIO_COMP_1_REG 0x1B140A48

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* Select one of the four DQ clks */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N0RANK2_4_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N0RANK3_4_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0a4c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N0RANK3_4_FNV_DDRIO_COMP_1_REG 0x1B140A4C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* Select one of the four DQ clk */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N0RANK3_4_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN0RANK0_4_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0a80)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN0RANK0_4_FNV_DDRIO_COMP_1_REG 0x1B140A80

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               selects which skewed DQSP (to sample even bits)
                               is used in the RX FIFO. For proper operation,
                               always pick latest DQSP
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               selects which skewed DQSN (to sample odd bits)
                               is used in the RX FIFO. For proper operation,
                               always pick latest DQSN
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN0RANK0_4_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN0RANK1_4_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0a84)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN0RANK1_4_FNV_DDRIO_COMP_1_REG 0x1B140A84

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               [0]=0 selects the raw output from the nibble DQS
                               amplifier; [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN0RANK1_4_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN0RANK2_4_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0a88)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN0RANK2_4_FNV_DDRIO_COMP_1_REG 0x1B140A88

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               [0]=0 selects the raw output from the nibble DQS
                               amplifier; [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN0RANK2_4_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN0RANK3_4_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0a8c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN0RANK3_4_FNV_DDRIO_COMP_1_REG 0x1B140A8C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               [0]=0 selects the raw output from the nibble DQS
                               amplifier; [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN0RANK3_4_FNV_DDRIO_COMP_1_STRUCT;

/* RXVREFCTRLN0_4_FNV_DDRIO_COMP_1_REG supported on:                            */
/*      BWV (0x402b0aa4)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* RxVrefCtrl. Broadcast read not supported.
*/


#define RXVREFCTRLN0_4_FNV_DDRIO_COMP_1_REG 0x1B140AA4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 vrefperbit0 : 7;

                            /* Bits[6:0], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben0 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 vrefperbit1 : 7;

                            /* Bits[14:8], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben1 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /*
                               enables fine grain Vref control, shift down the
                               Vref voltage by ~0.5 stepsize
                            */
    UINT32 vrefperbit2 : 7;

                            /* Bits[22:16], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben2 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /*
                               enables fine grain Vref control, shift down the
                               Vref voltage by ~0.5 stepsize
                            */
    UINT32 vrefperbit3 : 7;

                            /* Bits[30:24], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben3 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* shift down the Vref voltage by ~0.5 stepsize */

  } Bits;
  UINT32 Data;

} RXVREFCTRLN0_4_FNV_DDRIO_COMP_1_STRUCT;

/* DATATRAINFEEDBACKN0_4_FNV_DDRIO_COMP_1_REG supported on:                     */
/*      BWV (0x402b0aa8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Training Feedback Results. Broadcast read not supported.
*/


#define DATATRAINFEEDBACKN0_4_FNV_DDRIO_COMP_1_REG 0x1B140AA8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 datatrainfeedback : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Data Training Feedback Storage[br] [br]
                               DataTrainFeedback Description:[br] Training Step
                               Bits Nibble Description[br] -------------- ----
                               ------- --------------------------[br] Cross
                               Over Cal 0 0 Tx Dqs Phase Detection[br] Cross
                               Over Cal 1 0 Tx Dq Phase Detection[br] Cross
                               Over Cal 2 0 Rec En Phase Detection[br] RcvEn
                               8:0 0 Byte detection[br] [br] Wr Leveling 8:0 0
                               Byte detection[br] Senseamp offset 3:0 0 Dq
                               Senseamp offset Detection
                            */
    UINT32 rsvd_9 : 23;

                            /* Bits[31:9], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATATRAINFEEDBACKN0_4_FNV_DDRIO_COMP_1_STRUCT;

/* DDRCRFSMCALN0_4_FNV_DDRIO_COMP_1_REG supported on:                           */
/*      BWV (0x402b0ac8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Fsm for  Voc and Xover caliberation, Voc caliberation is a procedure that cancel out intrinsic offset in analogue receivers and Xover training ,it aligns all the local dll to the global qclk
*/


#define DDRCRFSMCALN0_4_FNV_DDRIO_COMP_1_REG 0x1B140AC8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0fsm : 5;

                            /* Bits[4:0], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of first receiver is done(read only)
                            */
    UINT32 saoffset1fsm : 5;

                            /* Bits[9:5], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of second receiver is done(read only)
                            */
    UINT32 saoffset2fsm : 5;

                            /* Bits[14:10], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of third receiver is done(read only)
                            */
    UINT32 saoffset3fsm : 5;

                            /* Bits[19:15], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of fourth receiver is done(read only)
                            */
    UINT32 fsmcalcomplete : 1;

                            /* Bits[20:20], Access Type=ROV, default=0x00000000*/

                            /* when the caliberation is done */
    UINT32 refpiclkdelayfsm : 6;

                            /* Bits[26:21], Access Type=ROV, default=0x00000000*/

                            /*
                               Load FSM with a code at which , the transition
                               is detected.
                            */
    UINT32 fsmcaldone : 1;

                            /* Bits[27:27], Access Type=ROV, default=0x00000000*/

                            /* when the caliberation of voc or x-over is done */
    UINT32 fsmtimersel : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /* Timer is set for either 8 cycles or 16 cycles */
    UINT32 fsmpatternsel : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               It selects whther the pattern of three bit or
                               two bit is selected when the transition happen
                               from 1-->0 for pdout and receiver , to avoid
                               glitch
                            */
    UINT32 fsmvoccal : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               This bit tells , wether the xover or voc
                               caliberation will be done, if its zero x-over
                               caliberation is done and vice-versa
                            */
    UINT32 fsmcalen : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* FsmCalEn starts the voc-Xover Fsm */

  } Bits;
  UINT32 Data;

} DDRCRFSMCALN0_4_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL4N0_4_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b0acc)                                                        */
/* Register default value on BWV: 0x801F0000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* static configurations of tx and rx. Broadcast read not supported.
*/


#define DATACONTROL4N0_4_FNV_DDRIO_COMP_1_REG 0x1B140ACC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd_0 : 1;

                            /* Bits[0:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vsshiorvrefctl1 : 8;

                            /* Bits[8:1], Access Type=RW, default=0x00000000*/

                            /*
                               VssHi control bits[br] Field Description: [br]
                               [br] Field Bits Description[br] ------- ----
                               ---------------------------------[br]
                               disoverflow 24 Disable overflow logic from
                               BDW[br] fast panic enable 25 Bypass 2 flops in
                               panic path for faster panic response[br]
                               vsshivccd2by3cfgen 26 Forces the driver DAC to
                               get supply from 2/3 vccd[br] vsshivccd2by3cfg
                               27:29 Current trim setting for 2/3 vccd mode,
                               001 fast, 011 typical, 111 slow silicon [br]
                               ddrvssh2ndcompen 30 Enable second comparator
                               (ZBB mode)[br] comp high bwen 31 Improve
                               comparator performance to support low digital
                               voltage range
                            */
    UINT32 dqtxeqsel : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* DQ TxEq setting selection to achieve constant EQ */
    UINT32 rsvd_10 : 2;

                            /* Bits[11:10], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vrefpwrsave : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               If set to 0 (default), Vref generators selected
                               through RxVrefSel[3:0] are always on.[br] If set
                               to 1, Vref generators are switched off while in
                               Self Refresh.
                            */
    UINT32 vreftonblbus : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000008*/

                            /* Per-bit Enable connection to share Vref Bus */
    UINT32 rxvrefsel : 4;

                            /* Bits[20:17], Access Type=RW, default=0x0000000F*/

                            /* Per Bit Verf generator Enable */
    UINT32 refpiclkdelay : 6;

                            /* Bits[26:21], Access Type=RW, default=0x00000000*/

                            /* RefPiClkDelay */
    UINT32 fnvcrsdlbypassen : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /* FNV Slave Delay Line Bypass Enable */
    UINT32 fnvcrdllbypassen : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /* FNV DLL Bypass Enable */
    UINT32 fnvcrvisaen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               FNV Visa Fub Enable - data fub used for VISA if
                               asserted
                            */
    UINT32 writecrcenable : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /* Enable write crc mode */
    UINT32 rsvd_31 : 1;

                            /* Bits[31:31], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL4N0_4_FNV_DDRIO_COMP_1_STRUCT;

/* COMPDATA0N0_4_FNV_DDRIO_COMP_1_REG supported on:                             */
/*      BWV (0x402b0ad4)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Comp Values. Broadcast read not supported.
*/


#define COMPDATA0N0_4_FNV_DDRIO_COMP_1_REG 0x1B140AD4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcompdrvup : 6;

                            /* Bits[5:0], Access Type=RWV, default=0x00000000*/

                            /*
                               Data Rcomp DrvUp Comp Value can be overriden via
                               message channel if periodical retrain is disable
                            */
    UINT32 spare0 : 3;

                            /* Bits[8:6], Access Type=RWV, default=0x00000000*/

                            /* Spare */
    UINT32 rcompdrvdown : 6;

                            /* Bits[14:9], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp DrvDown Comp Value */
    UINT32 vtcomp : 5;

                            /* Bits[19:15], Access Type=RWV, default=0x00000000*/

                            /* VT Comp Values */
    UINT32 tcocomp : 7;

                            /* Bits[26:20], Access Type=RWV, default=0x00000000*/

                            /* Data TCO Comp Value. */
    UINT32 slewratecomp : 5;

                            /* Bits[31:27], Access Type=RWV, default=0x00000000*/

                            /* Data Slew Rate Comp Value. */

  } Bits;
  UINT32 Data;

} COMPDATA0N0_4_FNV_DDRIO_COMP_1_STRUCT;

/* COMPDATA1N0_4_FNV_DDRIO_COMP_1_REG supported on:                             */
/*      BWV (0x402b0ad8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Comp Values. Broadcast read not supported.
*/


#define COMPDATA1N0_4_FNV_DDRIO_COMP_1_REG 0x1B140AD8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcompodtup : 6;

                            /* Bits[5:0], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp OdtUp Comp Value */
    UINT32 rcompodtdown : 6;

                            /* Bits[11:6], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp Odt-Down Comp Value */
    UINT32 panicdrvdn : 10;

                            /* Bits[21:12], Access Type=RWV, default=0x00000000*/

                            /* Panic DrvDn RComp Value. */
    UINT32 panicdrvup : 10;

                            /* Bits[31:22], Access Type=RWV, default=0x00000000*/

                            /* Panic DrvUp RComp Comp Value. */

  } Bits;
  UINT32 Data;

} COMPDATA1N0_4_FNV_DDRIO_COMP_1_STRUCT;

/* DATAOFFSETTRAINN0_4_FNV_DDRIO_COMP_1_REG supported on:                       */
/*      BWV (0x402b0adc)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATAOFFSETTRAINN0_4_FNV_DDRIO_COMP_1_REG 0x1B140ADC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvenoffset : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained RxRcvEn Value. */
    UINT32 rxdqsoffset : 7;

                            /* Bits[12:6], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained Rx DQS Value. */
    UINT32 txdqoffset : 6;

                            /* Bits[18:13], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained Tx DQ Value. */
    UINT32 txdqsoffset : 6;

                            /* Bits[24:19], Access Type=RW, default=0x00000000*/

                            /* Ooffset added to Trained Tx DQS Value. */
    UINT32 vrefoffset : 7;

                            /* Bits[31:25], Access Type=RW, default=0x00000000*/

                            /*
                               2s Compliment offset added to Trained Vref
                               Value. Positive number increases Vref, and each
                               step is Vdd/384.
                            */

  } Bits;
  UINT32 Data;

} DATAOFFSETTRAINN0_4_FNV_DDRIO_COMP_1_STRUCT;


/* DATACONTROL0N0_4_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b0ae8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL0N0_4_FNV_DDRIO_COMP_1_REG 0x1B140AE8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rxtrainingmode : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enables Read DqDqs Training Mode */
    UINT32 wltrainingmode : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /* Enables Write Leveling Training Mode */
    UINT32 rltrainingmode : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /* Enables Read Leveling Training Mode. */
    UINT32 senseamptrainingmode : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Enables SenseAmp offset cancellation training
                               mode.
                            */
    UINT32 txon : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               When set, forces DQ/DQS drive enable to active.
                               Used in power measurements and IO loopback mode
                            */
    UINT32 rfon : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down Disable: Forces register file read,
                               overriding the rank power down logic.
                            */
    UINT32 rxpion : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /* Power-down Disable: Forces RxDqs PI clocks on. */
    UINT32 txpion : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down Disable: Forces TxDq and TxDqs PI
                               clocks on.
                            */
    UINT32 internalclockson : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Forces on master DLL and all PI enables ON,
                               despite both channel in SelfRefresh, etc. low
                               power states.
                            */
    UINT32 saoffsettraintxon : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* SaOffsetTrainTxon */
    UINT32 txdisable : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down: All write commands are ignored for
                               this data-byte. Used in single-channel MCI mode.
                            */
    UINT32 rxdisable : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down: All read commands are ignored for
                               this data-byte. Used in single-channel MCI mode.
                            */
    UINT32 txlong : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Sets the duration of the first transmitted DQ
                               bit of the burst. 0=1UI, 1=2UI.
                            */
    UINT32 rsvd_13 : 5;

                            /* Bits[17:13], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 driversegmentenable : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Controls which segements of the driver are
                               enabled: {0: All, 1: Only ODT}.
                            */
    UINT32 rsvd_19 : 1;

                            /* Bits[19:19], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 readrfrd : 1;

                            /* Bits[20:20], Access Type=RWV, default=0x00000000*/

                            /*
                               Self clearing command bit. When set, it will
                               download the three 32 bit lines from the RegFile
                               associated with a read command to Rank =
                               ReadRFRank
                            */
    UINT32 readrfwr : 1;

                            /* Bits[21:21], Access Type=RWV, default=0x00000000*/

                            /*
                               Self clearing command bit. When set, it will
                               download the three 32 bit lines from the RegFile
                               associated with a write command to Rank =
                               ReadRFRank
                            */
    UINT32 readrfrank : 3;

                            /* Bits[24:22], Access Type=RWV, default=0x00000000*/

                            /*
                               Specifies the rank that ReadRFRd or ReadRFWr
                               will manually download the CR values from
                            */
    UINT32 forceodton : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /* ODT is forced-on. */
    UINT32 odtsampoff : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /* ODT and Senseamp are forced-off. */
    UINT32 disableodtstatic : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /* not used */
    UINT32 ddrcrforceodton : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               force ODT to the transmitter on, regardless of
                               state of DriveEnable
                            */
    UINT32 spare : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* spare */
    UINT32 xovercal : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /* Enables Xover Calibration Training Mode */
    UINT32 longpreambleenable : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* Enables long preamble for DDR4 devices */

  } Bits;
  UINT32 Data;

} DATACONTROL0N0_4_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL1N0_4_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b0aec)                                                        */
/* Register default value on BWV: 0x0000003C                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL1N0_4_FNV_DDRIO_COMP_1_REG 0x1B140AEC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd_0 : 10;

                            /* Bits[9:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rxbiasctl : 3;

                            /* Bits[12:10], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the Current and BW of the Receiver: {0:
                               0.34Idll, 1: 0.66Idll, 2: 0.88Idll, 3: Idll, 4:
                               1.33Idll, 5: 1.66Idll[br] , 6: 2.00Idll, 7:
                               2.33Idll}
                            */
    UINT32 odtdelay : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000000*/

                            /*
                               Controls ODT turn-on delay. To turn on N tQCK
                               before RcvEn, program to RcvEn[8:6] N + 4.
                            */
    UINT32 odtduration : 3;

                            /* Bits[19:17], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the ODT ON duration from (Code,
                               Duration) = (0x0, 11 tQCK) to (0x7, 18 tQCK)
                            */
    UINT32 senseampdelay : 4;

                            /* Bits[23:20], Access Type=RW, default=0x00000000*/

                            /*
                               Controls Senseamp turn-on delay. To turn on N
                               tQCK before RcvEn, program to RcvEn[8:6] N + 4.
                            */
    UINT32 senseampduration : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the SenseAmp ON duration from (Code,
                               Duration) = (0x0, 11 tQCK) to (0x7, 18 tQCK)
                            */
    UINT32 rsvd_27 : 5;

                            /* Bits[31:27], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL1N0_4_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL2N0_4_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b0af0)                                                        */
/* Register default value on BWV: 0x07800000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL2N0_4_FNV_DDRIO_COMP_1_REG 0x1B140AF0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rxvocselqnnnh : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Enables SenseAmp offset cancellation training
                               mode
                            */
    UINT32 forcebiason : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Force on the internal Vref and Rx bias circuit,
                               regardless of any other power downs
                            */
    UINT32 forcerxon : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Force on the RxAmp only (as opposed to
                               OdtSampOn, which turns on both ODT and the
                               amplifier).[br] Use for overclocking support
                               where we may not be able to hit the fast exit
                               latency
                            */
    UINT32 ddr4extend : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /* Enable finer vref resolution in ddr4 */
    UINT32 cttermination : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /* DDRCOMP_CR_DDRCRCOMPOVR CTTermination */
    UINT32 dfelben : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* Digital far end loopback enable */
    UINT32 dfelbtxdmuxsel : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /* Digital far end loopback TX FIFO data mux sel */
    UINT32 spare1 : 2;

                            /* Bits[12:11], Access Type=RW, default=0x00000000*/

                            /* Spare1 */
    UINT32 txddjcen : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000000*/

                            /* TxddjcEn */
    UINT32 dfeenable : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /* DfeEnable */
    UINT32 dfedlysel : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /* DfeDlySel */
    UINT32 dfecode : 4;

                            /* Bits[22:19], Access Type=RW, default=0x00000000*/

                            /*
                               DfeCode: binary code 0000 to 1000 for DFE
                               offset, mid-code code for zero offset is 0100
                            */
    UINT32 rxdqssaoffset : 5;

                            /* Bits[27:23], Access Type=RW, default=0x0000000F*/

                            /* strobe Rx Amp offset control */
    UINT32 rsvd_28 : 4;

                            /* Bits[31:28], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL2N0_4_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL3N0_4_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b0af4)                                                        */
/* Register default value on BWV: 0x00000FCF                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* static configurations of tx and rx. Broadcast read not supported.
*/


#define DATACONTROL3N0_4_FNV_DDRIO_COMP_1_REG 0x1B140AF4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 drvstaticlegcfg : 2;

                            /* Bits[1:0], Access Type=RW, default=0x00000003*/

                            /*
                               binary default setting for static legs in DRV
                               mode[br] 0 0 0 legs (EQ disabled)[br] 0 1 3 legs
                               (EQ max 3 legs)[br] 1 0 6 legs (EQ max 6
                               legs)[br] 1 1 12 legs (EQ max 12 legs)[br] In
                               most cases, we would set this to be 11, but for
                               some configurations that require a higher [br]
                               Ron value, we need to reduce the number of
                               static legs enabled so that fast corner can hit
                               [br] the higher Ron target value.
                            */
    UINT32 odtstaticlegcfg : 2;

                            /* Bits[3:2], Access Type=RW, default=0x00000003*/

                            /*
                               binary default setting for static legs in ODT
                               mode[br] 0 0 0 legs (EQ disabled)[br] 0 1 3 legs
                               (EQ max 3 legs)[br] 1 0 6 legs (EQ max 6
                               legs)[br] 1 1 12 legs (EQ max 12 legs)[br] In
                               most cases, we would set this to be 11, but for
                               some configurations that require a higher [br]
                               Ron value, we need to reduce the number of
                               static legs enabled so that fast corner can hit
                               [br] the higher Ron target value.
                            */
    UINT32 lvlshft_holden : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               level shift hold enable[br] Holds the HV control
                               values and power down mode the level
                               shifters.[br] Apply '1' after training. Slow
                               timing - not advised for fast enabling
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 odtsegmentenable : 3;

                            /* Bits[8:6], Access Type=RW, default=0x00000007*/

                            /*
                               This will tell which segments are enabled out of
                               reset. [br] After that, a shift register will
                               determine the enabled segments
                            */
    UINT32 datasegmentenable : 3;

                            /* Bits[11:9], Access Type=RW, default=0x00000007*/

                            /*
                               This will tell which segments are enabled out of
                               reset.
                            */
    UINT32 longodtr2w : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               When set, it will extends ODT by 1 qclk on read
                               to write turnarounds. hsd 230773
                            */
    UINT32 spare1 : 8;

                            /* Bits[20:13], Access Type=RW, default=0x00000000*/

                            /* Spare1 */
    UINT32 ddrcrctlecapen : 2;

                            /* Bits[22:21], Access Type=RW, default=0x00000000*/

                            /* ctle capacitor setting */
    UINT32 ddrcrctleresen : 2;

                            /* Bits[24:23], Access Type=RW, default=0x00000000*/

                            /* ctle resistor setting */
    UINT32 pcasbiasclosedloopen : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiassel : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiasfoldedlegtrim : 2;

                            /* Bits[28:27], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiasgcncomp : 2;

                            /* Bits[30:29], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 postambleenable : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* Spare */

  } Bits;
  UINT32 Data;

} DATACONTROL3N0_4_FNV_DDRIO_COMP_1_STRUCT;

/* VSSHIORVREFCONTROLN0_4_FNV_DDRIO_COMP_1_REG supported on:                    */
/*      BWV (0x402b0af8)                                                        */
/* Register default value on BWV: 0x004D8238                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, only. Broadcast read not supported.
*/


#define VSSHIORVREFCONTROLN0_4_FNV_DDRIO_COMP_1_REG 0x1B140AF8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 vsshiorvrefctl : 24;

                            /* Bits[23:0], Access Type=RW, default=0x004D8238*/

                            /*
                               Channel 0 fubs : VssHi adjust setting. Channel1
                               fubs: DIMM VREF adjust settings.[br] [br] VssHi
                               Field Description: [br] [br] Field Bits
                               Description[br] ------- ---- -------------------
                               ------------------------------------------------
                               ------------------------------------------------
                               --------------------------------------------[br]
                               SelCode 23 Selects the code to output: {0: Code,
                               1: TCode}[br] GainBoost 22 Enable gain boost is
                               panic mode by updating code/tcode [br]
                               PanicVoltage 21:18 Unsigned integer controlling
                               the voltage error on VssHi that will trigger the
                               panic driver. Step size of VccDDQ/192 (0 to
                               117mV)[br] CloseLoop 17 Enables the VssHi close
                               loop tracking [br] PanicEn 16 Enables the VssHi
                               Panic Driver[br] BWError 15:14 Limits the loop
                               gain (ie: difference between code and tcode) to
                               +/- 2^(SlowBWError)[br] OpenLoop 13 Operates
                               VssHi in open loop mode with the target Vref
                               code directly driving the output DAC with no
                               feedback involved[br] SampleDivider 12:10
                               Controls the loop bandwidth by dividing down the
                               input clock: {0: Qclk, 1: Qclk/2, 2: Qclk/4, 3:
                               Qclk/8, 4: Qclk/16, 5: Qclk/32, 6: Qclk/64, 7:
                               Qclk/128}[br] LoBWDivider 9:8 For the slow
                               integrator, selects the net number of samples in
                               a given direction to trip the filter. {0: 4
                               samples, 1: 16 samples, 2: 32 samples, 3: 64
                               samples}[br] HiBWDivider 7:6 For the fast
                               integrator, selects the net number of samples in
                               a given direction to trip the filter. {0: 4
                               samples, 1: 16 samples, 2: 32 samples, 3: 64
                               samples}[br] Target 5:0 Unsigned integer
                               controlling the target VssHi voltage. Step size
                               of VccDDQ/192 and starting value of
                               VccDDQ*20/192
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} VSSHIORVREFCONTROLN0_4_FNV_DDRIO_COMP_1_STRUCT;


/* RXGROUP0N1RANK0_4_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0b00)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank0. Broadcast read not supported.
*/


#define RXGROUP0N1RANK0_4_FNV_DDRIO_COMP_1_REG 0x1B140B00

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* ReadX8ModeEn */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /* common DQS_P delay control, per nibble */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /* common DQS_N delay control, per nibble */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               Rx Equalization code: {4:3} controls the cap
                               tuning 0: (not used), 1: 200ff, 2: 400ff, 3:
                               600ff, [br] controls the resistor tuning (0: 3R,
                               1: 1R, 2: 1R, 3: R/3).
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N1RANK0_4_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N1RANK1_4_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0b04)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank0. Broadcast read not supported.
*/


#define RXGROUP0N1RANK1_4_FNV_DDRIO_COMP_1_REG 0x1B140B04

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* ReadX8ModeEn */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /* common DQS_P delay control, per nibble */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /* common DQS_N delay control, per nibble */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               Rx Equalization code: {4:3} controls the cap
                               tuning 0: (not used), 1: 200ff, 2: 400ff, 3:
                               600ff, [br] controls the resistor tuning (0: 3R,
                               1: 1R, 2: 1R, 3: R/3).
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N1RANK1_4_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N1RANK2_4_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0b08)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank0.Broadcast read not supported.
*/


#define RXGROUP0N1RANK2_4_FNV_DDRIO_COMP_1_REG 0x1B140B08

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* ReadX8ModeEn */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /* common DQS_P delay control, per nibble */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /* common DQS_N delay control, per nibble */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               Rx Equalization code: {4:3} controls the cap
                               tuning 0: (not used), 1: 200ff, 2: 400ff, 3:
                               600ff, [br] controls the resistor tuning (0: 3R,
                               1: 1R, 2: 1R, 3: R/3).
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N1RANK2_4_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N1RANK3_4_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0b0c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank0. Broadcast read not supported.
*/


#define RXGROUP0N1RANK3_4_FNV_DDRIO_COMP_1_REG 0x1B140B0C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* ReadX8ModeEn */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /* common DQS_P delay control, per nibble */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /* common DQS_N delay control, per nibble */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               Rx Equalization code: {4:3} controls the cap
                               tuning 0: (not used), 1: 200ff, 2: 400ff, 3:
                               600ff, [br] controls the resistor tuning (0: 3R,
                               1: 1R, 2: 1R, 3: R/3).
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N1RANK3_4_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N1RANK0_4_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0b40)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N1RANK0_4_FNV_DDRIO_COMP_1_REG 0x1B140B40

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* one of the four clocks */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N1RANK0_4_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N1RANK1_4_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0b44)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N1RANK1_4_FNV_DDRIO_COMP_1_REG 0x1B140B44

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* one of the four clocks */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N1RANK1_4_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N1RANK2_4_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0b48)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N1RANK2_4_FNV_DDRIO_COMP_1_REG 0x1B140B48

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* one of the 4 clocks */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N1RANK2_4_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N1RANK3_4_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0b4c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N1RANK3_4_FNV_DDRIO_COMP_1_REG 0x1B140B4C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from PiRef to PiN for bit 1 */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N1RANK3_4_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN1RANK0_4_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0b80)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN1RANK0_4_FNV_DDRIO_COMP_1_REG 0x1B140B80

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               x4/x8 DQS mux select[br] [0]=1 selects the raw
                               output from the nibble0 DQS amplifier in x8
                               mode; [br] [0]=0 select nibble1 amplifier output
                               in x4 mode; [br] [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN1RANK0_4_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN1RANK1_4_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0b84)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN1RANK1_4_FNV_DDRIO_COMP_1_REG 0x1B140B84

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               x4/x8 DQS mux select[br] [0]=1 selects the raw
                               output from the nibble0 DQS amplifier in x8
                               mode; [br] [0]=0 select nibble1 amplifier output
                               in x4 mode; [br] [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN1RANK1_4_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN1RANK2_4_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0b88)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN1RANK2_4_FNV_DDRIO_COMP_1_REG 0x1B140B88

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               x4/x8 DQS mux select[br] [0]=1 selects the raw
                               output from the nibble0 DQS amplifier in x8
                               mode; [br] [0]=0 select nibble1 amplifier output
                               in x4 mode; [br] [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN1RANK2_4_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN1RANK3_4_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0b8c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN1RANK3_4_FNV_DDRIO_COMP_1_REG 0x1B140B8C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               x4/x8 DQS mux select[br] [0]=1 selects the raw
                               output from the nibble0 DQS amplifier in x8
                               mode; [br] [0]=0 select nibble1 amplifier output
                               in x4 mode; [br] [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN1RANK3_4_FNV_DDRIO_COMP_1_STRUCT;

/* RXVREFCTRLN1_4_FNV_DDRIO_COMP_1_REG supported on:                            */
/*      BWV (0x402b0ba4)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* RxVrefCtrl. Broadcast read not supported.
*/


#define RXVREFCTRLN1_4_FNV_DDRIO_COMP_1_REG 0x1B140BA4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 vrefperbit0 : 7;

                            /* Bits[6:0], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben0 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 vrefperbit1 : 7;

                            /* Bits[14:8], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben1 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 vrefperbit2 : 7;

                            /* Bits[22:16], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben2 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 vrefperbit3 : 7;

                            /* Bits[30:24], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben3 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* shift down the Vref voltage by ~0.5 stepsize */

  } Bits;
  UINT32 Data;

} RXVREFCTRLN1_4_FNV_DDRIO_COMP_1_STRUCT;

/* DATATRAINFEEDBACKN1_4_FNV_DDRIO_COMP_1_REG supported on:                     */
/*      BWV (0x402b0ba8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Training Feedback Results. Broadcast read not supported.
*/


#define DATATRAINFEEDBACKN1_4_FNV_DDRIO_COMP_1_REG 0x1B140BA8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 datatrainfeedback : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Data Training Feedback Storage [br] Training
                               Step Bits Nibble Description[br] --------------
                               ---- ------- ---------------[br] Cross Over Cal
                               0 1 Tx Dqs Phase Detection[br] Cross Over Cal 1
                               1 Tx Dq Phase Detection[br] Cross Over Cal 2 1
                               Rec En Phase Detection[br] RcvEn 8:0 1 Byte
                               detection[br] Wr Leveling 8:0 1 Byte
                               detection[br] Senseamp offset 3:0 1 Dq Senseamp
                               offset Detection
                            */
    UINT32 rsvd_9 : 23;

                            /* Bits[31:9], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATATRAINFEEDBACKN1_4_FNV_DDRIO_COMP_1_STRUCT;

/* DDRCRFSMCALN1_4_FNV_DDRIO_COMP_1_REG supported on:                           */
/*      BWV (0x402b0bc8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Fsm for  Voc and Xover caliberation, Voc caliberation is a procedure that cancel out intrinsic offset in analogue receivers and Xover training ,it aligns all the local dll to the global qclk
*/


#define DDRCRFSMCALN1_4_FNV_DDRIO_COMP_1_REG 0x1B140BC8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0fsm : 5;

                            /* Bits[4:0], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of first receiver is done(read only)
                            */
    UINT32 saoffset1fsm : 5;

                            /* Bits[9:5], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of second receiver is done(read only)
                            */
    UINT32 saoffset2fsm : 5;

                            /* Bits[14:10], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of third receiver is done(read only)
                            */
    UINT32 saoffset3fsm : 5;

                            /* Bits[19:15], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of fourth receiver is done(read only)
                            */
    UINT32 fsmcalcomplete : 1;

                            /* Bits[20:20], Access Type=ROV, default=0x00000000*/

                            /* when the caliberation is done */
    UINT32 refpiclkdelayfsm : 6;

                            /* Bits[26:21], Access Type=ROV, default=0x00000000*/

                            /*
                               Load FSM with a code at which , the transition
                               is detected.
                            */
    UINT32 fsmcaldone : 1;

                            /* Bits[27:27], Access Type=ROV, default=0x00000000*/

                            /* when the caliberation of voc or x-over is done */
    UINT32 fsmtimersel : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /* Timer is set for either 8 cycles or 16 cycles */
    UINT32 fsmpatternsel : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               It selects whther the pattern of three bit or
                               two bit is selected when the transition happen
                               from 1-->0 for pdout and receiver , to avoid
                               glitch
                            */
    UINT32 fsmvoccal : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               This bit tells , wether the xover or voc
                               caliberation will be done, if its zero x-over
                               caliberation is done and vice-versa
                            */
    UINT32 fsmcalen : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* FsmCalEn starts the voc-Xover Fsm */

  } Bits;
  UINT32 Data;

} DDRCRFSMCALN1_4_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL4N1_4_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b0bcc)                                                        */
/* Register default value on BWV: 0x801F0000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* static configurations of tx and rx. Broadcast read not supported.
*/


#define DATACONTROL4N1_4_FNV_DDRIO_COMP_1_REG 0x1B140BCC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd_0 : 1;

                            /* Bits[0:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vsshiorvrefctl1 : 8;

                            /* Bits[8:1], Access Type=RW, default=0x00000000*/

                            /*
                               VssHi control bits[br] Field Description: [br]
                               [br] Field Bits Description[br] ------- ----
                               ---------------------------------[br]
                               disoverflow 24 Disable overflow logic from
                               BDW[br] fast panic enable 25 Bypass 2 flops in
                               panic path for faster panic response[br]
                               vsshivccd2by3cfgen 26 Forces the driver DAC to
                               get supply from 2/3 vccd[br] vsshivccd2by3cfg
                               27:29 Current trim setting for 2/3 vccd mode,
                               001 fast, 011 typical, 111 slow silicon [br]
                               ddrvssh2ndcompen 30 Enable second comparator
                               (ZBB mode)[br] comp high bwen 31 Improve
                               comparator performance to support low digital
                               voltage range
                            */
    UINT32 dqtxeqsel : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* DQ TxEq setting selection to achieve constant EQ */
    UINT32 rsvd_10 : 2;

                            /* Bits[11:10], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vrefpwrsave : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               If set to 0 (default), Vref generators selected
                               through RxVrefSel[3:0] are always on.[br] If set
                               to 1, Vref generators are switched off while in
                               Self Refresh.
                            */
    UINT32 vreftonblbus : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000008*/

                            /* Per-bit Enable connection to share Vref Bus */
    UINT32 rxvrefsel : 4;

                            /* Bits[20:17], Access Type=RW, default=0x0000000F*/

                            /* Per Bit Verf generator Enable */
    UINT32 refpiclkdelay : 6;

                            /* Bits[26:21], Access Type=RW, default=0x00000000*/

                            /* RefPiClkDelay */
    UINT32 fnvcrsdlbypassen : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /* FNV Slave Delay Line Bypass Enable */
    UINT32 fnvcrdllbypassen : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /* FNV DLL Bypass Enable */
    UINT32 fnvcrvisaen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               FNV Visa Fub Enable - data fub used for VISA if
                               asserted
                            */
    UINT32 writecrcenable : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /* Enable write crc mode */
    UINT32 rsvd_31 : 1;

                            /* Bits[31:31], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL4N1_4_FNV_DDRIO_COMP_1_STRUCT;

/* COMPDATA0N1_4_FNV_DDRIO_COMP_1_REG supported on:                             */
/*      BWV (0x402b0bd4)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Comp Values. Broadcast read not supported.
*/


#define COMPDATA0N1_4_FNV_DDRIO_COMP_1_REG 0x1B140BD4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcompdrvup : 6;

                            /* Bits[5:0], Access Type=RWV, default=0x00000000*/

                            /*
                               Data Rcomp DrvUp Comp Value can be overriden via
                               message channel if periodical retrain is disable
                            */
    UINT32 spare0 : 3;

                            /* Bits[8:6], Access Type=RWV, default=0x00000000*/

                            /* Spare */
    UINT32 rcompdrvdown : 6;

                            /* Bits[14:9], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp DrvDown Comp Value */
    UINT32 vtcomp : 5;

                            /* Bits[19:15], Access Type=RWV, default=0x00000000*/

                            /* VT Comp Values */
    UINT32 tcocomp : 7;

                            /* Bits[26:20], Access Type=RWV, default=0x00000000*/

                            /* Data TCO Comp Value. */
    UINT32 slewratecomp : 5;

                            /* Bits[31:27], Access Type=RWV, default=0x00000000*/

                            /* Data Slew Rate Comp Value. */

  } Bits;
  UINT32 Data;

} COMPDATA0N1_4_FNV_DDRIO_COMP_1_STRUCT;

/* COMPDATA1N1_4_FNV_DDRIO_COMP_1_REG supported on:                             */
/*      BWV (0x402b0bd8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Comp Values. Broadcast read not supported.
*/


#define COMPDATA1N1_4_FNV_DDRIO_COMP_1_REG 0x1B140BD8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcompodtup : 6;

                            /* Bits[5:0], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp OdtUp Comp Value */
    UINT32 rcompodtdown : 6;

                            /* Bits[11:6], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp Odt-Down Comp Value */
    UINT32 panicdrvdn : 10;

                            /* Bits[21:12], Access Type=RWV, default=0x00000000*/

                            /* Panic DrvDn RComp Value. */
    UINT32 panicdrvup : 10;

                            /* Bits[31:22], Access Type=RWV, default=0x00000000*/

                            /* Panic DrvUp RComp Comp Value. */

  } Bits;
  UINT32 Data;

} COMPDATA1N1_4_FNV_DDRIO_COMP_1_STRUCT;

/* DATAOFFSETTRAINN1_4_FNV_DDRIO_COMP_1_REG supported on:                       */
/*      BWV (0x402b0bdc)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATAOFFSETTRAINN1_4_FNV_DDRIO_COMP_1_REG 0x1B140BDC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvenoffset : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained RxRcvEn Value. */
    UINT32 rxdqsoffset : 7;

                            /* Bits[12:6], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained Rx DQS Value. */
    UINT32 txdqoffset : 6;

                            /* Bits[18:13], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained Tx DQ Value. */
    UINT32 txdqsoffset : 6;

                            /* Bits[24:19], Access Type=RW, default=0x00000000*/

                            /* Ooffset added to Trained Tx DQS Value. */
    UINT32 vrefoffset : 7;

                            /* Bits[31:25], Access Type=RW, default=0x00000000*/

                            /*
                               2s Compliment offset added to Trained Vref
                               Value. Positive number increases Vref, and each
                               step is Vdd/384.
                            */

  } Bits;
  UINT32 Data;

} DATAOFFSETTRAINN1_4_FNV_DDRIO_COMP_1_STRUCT;


/* DATACONTROL0N1_4_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b0be8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL0N1_4_FNV_DDRIO_COMP_1_REG 0x1B140BE8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rxtrainingmode : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enables Read DqDqs Training Mode */
    UINT32 wltrainingmode : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /* Enables Write Leveling Training Mode */
    UINT32 rltrainingmode : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /* Enables Read Leveling Training Mode. */
    UINT32 senseamptrainingmode : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Enables SenseAmp offset cancellation training
                               mode.
                            */
    UINT32 txon : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               When set, forces DQ/DQS drive enable to active.
                               Used in power measurements and IO loopback mode
                            */
    UINT32 rfon : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down Disable: Forces register file read,
                               overriding the rank power down logic.
                            */
    UINT32 rxpion : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /* Power-down Disable: Forces RxDqs PI clocks on. */
    UINT32 txpion : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down Disable: Forces TxDq and TxDqs PI
                               clocks on.
                            */
    UINT32 internalclockson : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Forces on master DLL and all PI enables ON,
                               despite both channel in SelfRefresh, etc. low
                               power states.
                            */
    UINT32 saoffsettraintxon : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* SaOffsetTrainTxon */
    UINT32 txdisable : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down: All write commands are ignored for
                               this data-byte. Used in single-channel MCI mode.
                            */
    UINT32 rxdisable : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down: All read commands are ignored for
                               this data-byte. Used in single-channel MCI mode.
                            */
    UINT32 txlong : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Sets the duration of the first transmitted DQ
                               bit of the burst. 0=1UI, 1=2UI.
                            */
    UINT32 rsvd_13 : 5;

                            /* Bits[17:13], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 driversegmentenable : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Controls which segements of the driver are
                               enabled: {0: All, 1: Only ODT}.
                            */
    UINT32 rsvd_19 : 1;

                            /* Bits[19:19], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 readrfrd : 1;

                            /* Bits[20:20], Access Type=RWV, default=0x00000000*/

                            /*
                               Self clearing command bit. When set, it will
                               download the three 32 bit lines from the RegFile
                               associated with a read command to Rank =
                               ReadRFRank
                            */
    UINT32 readrfwr : 1;

                            /* Bits[21:21], Access Type=RWV, default=0x00000000*/

                            /*
                               Self clearing command bit. When set, it will
                               download the three 32 bit lines from the RegFile
                               associated with a write command to Rank =
                               ReadRFRank
                            */
    UINT32 readrfrank : 3;

                            /* Bits[24:22], Access Type=RWV, default=0x00000000*/

                            /*
                               Specifies the rank that ReadRFRd or ReadRFWr
                               will manually download the CR values from
                            */
    UINT32 forceodton : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /* ODT is forced-on. */
    UINT32 odtsampoff : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /* ODT and Senseamp are forced-off. */
    UINT32 disableodtstatic : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /* not used */
    UINT32 ddrcrforceodton : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               force ODT to the transmitter on, regardless of
                               state of DriveEnable
                            */
    UINT32 spare : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* spare */
    UINT32 xovercal : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /* Enables Xover Calibration Training Mode */
    UINT32 longpreambleenable : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* Enables long preamble for DDR4 devices */

  } Bits;
  UINT32 Data;

} DATACONTROL0N1_4_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL1N1_4_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b0bec)                                                        */
/* Register default value on BWV: 0x0000003C                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL1N1_4_FNV_DDRIO_COMP_1_REG 0x1B140BEC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd_0 : 10;

                            /* Bits[9:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rxbiasctl : 3;

                            /* Bits[12:10], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the Current and BW of the Receiver: {0:
                               0.34Idll, 1: 0.66Idll, 2: 0.88Idll, 3: Idll, 4:
                               1.33Idll, 5: 1.66Idll[br] , 6: 2.00Idll, 7:
                               2.33Idll}
                            */
    UINT32 odtdelay : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000000*/

                            /*
                               Controls ODT turn-on delay. To turn on N tQCK
                               before RcvEn, program to RcvEn[8:6] N + 4.
                            */
    UINT32 odtduration : 3;

                            /* Bits[19:17], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the ODT ON duration from (Code,
                               Duration) = (0x0, 11 tQCK) to (0x7, 18 tQCK)
                            */
    UINT32 senseampdelay : 4;

                            /* Bits[23:20], Access Type=RW, default=0x00000000*/

                            /*
                               Controls Senseamp turn-on delay. To turn on N
                               tQCK before RcvEn, program to RcvEn[8:6] N + 4.
                            */
    UINT32 senseampduration : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the SenseAmp ON duration from (Code,
                               Duration) = (0x0, 11 tQCK) to (0x7, 18 tQCK)
                            */
    UINT32 rsvd_27 : 5;

                            /* Bits[31:27], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL1N1_4_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL2N1_4_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b0bf0)                                                        */
/* Register default value on BWV: 0x07800000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL2N1_4_FNV_DDRIO_COMP_1_REG 0x1B140BF0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rxvocselqnnnh : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Enables SenseAmp offset cancellation training
                               mode
                            */
    UINT32 forcebiason : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Force on the internal Vref and Rx bias circuit,
                               regardless of any other power downs
                            */
    UINT32 forcerxon : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Force on the RxAmp only (as opposed to
                               OdtSampOn, which turns on both ODT and the
                               amplifier).[br] Use for overclocking support
                               where we may not be able to hit the fast exit
                               latency
                            */
    UINT32 ddr4extend : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /* Enable finer vref resolution in ddr4 */
    UINT32 cttermination : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /* DDRCOMP_CR_DDRCRCOMPOVR CTTermination */
    UINT32 dfelben : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* Digital far end loopback enable */
    UINT32 dfelbtxdmuxsel : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /* Digital far end loopback TX FIFO data mux sel */
    UINT32 spare1 : 2;

                            /* Bits[12:11], Access Type=RW, default=0x00000000*/

                            /* Spare1 */
    UINT32 txddjcen : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000000*/

                            /* TxddjcEn */
    UINT32 dfeenable : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /* DfeEnable */
    UINT32 dfedlysel : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /* DfeDlySel */
    UINT32 dfecode : 4;

                            /* Bits[22:19], Access Type=RW, default=0x00000000*/

                            /*
                               DfeCode: binary code 0000 to 1000 for DFE
                               offset, mid-code code for zero offset is 0100
                            */
    UINT32 rxdqssaoffset : 5;

                            /* Bits[27:23], Access Type=RW, default=0x0000000F*/

                            /* strobe Rx Amp offset control */
    UINT32 rsvd_28 : 4;

                            /* Bits[31:28], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL2N1_4_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL3N1_4_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b0bf4)                                                        */
/* Register default value on BWV: 0x00000FCF                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* static configurations of tx and rx. Broadcast read not supported.
*/


#define DATACONTROL3N1_4_FNV_DDRIO_COMP_1_REG 0x1B140BF4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 drvstaticlegcfg : 2;

                            /* Bits[1:0], Access Type=RW, default=0x00000003*/

                            /*
                               binary default setting for static legs in DRV
                               mode[br] 0 0 0 legs (EQ disabled)[br] 0 1 3 legs
                               (EQ max 3 legs)[br] 1 0 6 legs (EQ max 6
                               legs)[br] 1 1 12 legs (EQ max 12 legs)[br] In
                               most cases, we would set this to be 11, but for
                               some configurations that require a higher [br]
                               Ron value, we need to reduce the number of
                               static legs enabled so that fast corner can hit
                               [br] the higher Ron target value.
                            */
    UINT32 odtstaticlegcfg : 2;

                            /* Bits[3:2], Access Type=RW, default=0x00000003*/

                            /*
                               binary default setting for static legs in ODT
                               mode[br] 0 0 0 legs (EQ disabled)[br] 0 1 3 legs
                               (EQ max 3 legs)[br] 1 0 6 legs (EQ max 6
                               legs)[br] 1 1 12 legs (EQ max 12 legs)[br] In
                               most cases, we would set this to be 11, but for
                               some configurations that require a higher [br]
                               Ron value, we need to reduce the number of
                               static legs enabled so that fast corner can hit
                               [br] the higher Ron target value.
                            */
    UINT32 lvlshft_holden : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               level shift hold enable[br] Holds the HV control
                               values and power down mode the level
                               shifters.[br] Apply '1' after training. Slow
                               timing - not advised for fast enabling
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 odtsegmentenable : 3;

                            /* Bits[8:6], Access Type=RW, default=0x00000007*/

                            /*
                               This will tell which segments are enabled out of
                               reset. [br] After that, a shift register will
                               determine the enabled segments
                            */
    UINT32 datasegmentenable : 3;

                            /* Bits[11:9], Access Type=RW, default=0x00000007*/

                            /*
                               This will tell which segments are enabled out of
                               reset.
                            */
    UINT32 longodtr2w : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               When set, it will extends ODT by 1 qclk on read
                               to write turnarounds. hsd 230773
                            */
    UINT32 spare1 : 8;

                            /* Bits[20:13], Access Type=RW, default=0x00000000*/

                            /* Spare1 */
    UINT32 ddrcrctlecapen : 2;

                            /* Bits[22:21], Access Type=RW, default=0x00000000*/

                            /* ctle capacitor setting */
    UINT32 ddrcrctleresen : 2;

                            /* Bits[24:23], Access Type=RW, default=0x00000000*/

                            /* ctle resistor setting */
    UINT32 pcasbiasclosedloopen : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiassel : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiasfoldedlegtrim : 2;

                            /* Bits[28:27], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiasgcncomp : 2;

                            /* Bits[30:29], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 postambleenable : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* Spare */

  } Bits;
  UINT32 Data;

} DATACONTROL3N1_4_FNV_DDRIO_COMP_1_STRUCT;

/* VSSHIORVREFCONTROLN1_4_FNV_DDRIO_COMP_1_REG supported on:                    */
/*      BWV (0x402b0bf8)                                                        */
/* Register default value on BWV: 0x004D8238                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, only. Broadcast read not supported.
*/


#define VSSHIORVREFCONTROLN1_4_FNV_DDRIO_COMP_1_REG 0x1B140BF8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 vsshiorvrefctl : 24;

                            /* Bits[23:0], Access Type=RW, default=0x004D8238*/

                            /*
                               Channel 0 fubs : VssHi adjust setting. Channel1
                               fubs: DIMM VREF adjust settings.[br] [br] VssHi
                               Field Description: [br] [br] Field Bits
                               Description[br] ------- ---- -------------------
                               ------------------------------------------------
                               ------------------------------------------------
                               --------------------------------------------[br]
                               SelCode 23 Selects the code to output: {0: Code,
                               1: TCode}[br] GainBoost 22 Enable gain boost is
                               panic mode by updating code/tcode [br]
                               PanicVoltage 21:18 Unsigned integer controlling
                               the voltage error on VssHi that will trigger the
                               panic driver. Step size of VccDDQ/192 (0 to
                               117mV)[br] CloseLoop 17 Enables the VssHi close
                               loop tracking [br] PanicEn 16 Enables the VssHi
                               Panic Driver[br] BWError 15:14 Limits the loop
                               gain (ie: difference between code and tcode) to
                               +/- 2^(SlowBWError)[br] OpenLoop 13 Operates
                               VssHi in open loop mode with the target Vref
                               code directly driving the output DAC with no
                               feedback involved[br] SampleDivider 12:10
                               Controls the loop bandwidth by dividing down the
                               input clock: {0: Qclk, 1: Qclk/2, 2: Qclk/4, 3:
                               Qclk/8, 4: Qclk/16, 5: Qclk/32, 6: Qclk/64, 7:
                               Qclk/128}[br] LoBWDivider 9:8 For the slow
                               integrator, selects the net number of samples in
                               a given direction to trip the filter. {0: 4
                               samples, 1: 16 samples, 2: 32 samples, 3: 64
                               samples}[br] HiBWDivider 7:6 For the fast
                               integrator, selects the net number of samples in
                               a given direction to trip the filter. {0: 4
                               samples, 1: 16 samples, 2: 32 samples, 3: 64
                               samples}[br] Target 5:0 Unsigned integer
                               controlling the target VssHi voltage. Step size
                               of VccDDQ/192 and starting value of
                               VccDDQ*20/192
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} VSSHIORVREFCONTROLN1_4_FNV_DDRIO_COMP_1_STRUCT;


/* RXGROUP0N0RANK0_5_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0c00)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank0. Broadcast reads are not supported.
*/


#define RXGROUP0N0RANK0_5_FNV_DDRIO_COMP_1_REG 0x1B140C00

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* readx4modeenb */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_P to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_N to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS (0: 1/16 UI offset, [br] 1:
                               3/16 UI Offset, 2: 5/16 UI Offsets, 3: 7/16 UI
                               Offsets, 4: 9/16 UI Offsets, 5,6,7: 11/16 UI
                               Offsets.)
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               CTLE current steering tuning (0=no eq, 7=max
                               eq). It is decoded to[br] CTLE resistor tuning:
                               00 - 3R (10.8Kohms), 01/10 - R (3.6Kohms), 11 -
                               R/3 (1.2Kohms)[br] CTLE capacitor tuning: 00 -
                               0C (not used), 01 - 1C (200ff), 10 - 2C (400ff),
                               11 - 3C (600ff)
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N0RANK0_5_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N0RANK1_5_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0c04)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank1. Broadcast reads are not supported.
*/


#define RXGROUP0N0RANK1_5_FNV_DDRIO_COMP_1_REG 0x1B140C04

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* readx4modeenb */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_P to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_N to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               CTLE current steering tuning (0=no eq, 7=max
                               eq). It is decoded to[br] CTLE resistor tuning:
                               00 - 3R (10.8Kohms), 01/10 - R (3.6Kohms), 11 -
                               R/3 (1.2Kohms)[br] CTLE capacitor tuning: 00 -
                               0C (not used), 01 - 1C (200ff), 10 - 2C (400ff),
                               11 - 3C (600ff)
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N0RANK1_5_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N0RANK2_5_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0c08)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank2. Broadcast read not supported.
*/


#define RXGROUP0N0RANK2_5_FNV_DDRIO_COMP_1_REG 0x1B140C08

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* readx4modeenb */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_P to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_P to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               CTLE current steering tuning (0=no eq, 7=max
                               eq). It is decoded to[br] CTLE resistor tuning:
                               00 - 3R (10.8Kohms), 01/10 - R (3.6Kohms), 11 -
                               R/3 (1.2Kohms)[br] CTLE capacitor tuning: 00 -
                               0C (not used), 01 - 1C (200ff), 10 - 2C (400ff),
                               11 - 3C (600ff)
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N0RANK2_5_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N0RANK3_5_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0c0c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank3. Broadcast read not supported.
*/


#define RXGROUP0N0RANK3_5_FNV_DDRIO_COMP_1_REG 0x1B140C0C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* readx4modeenb */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_P to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_N to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               CTLE current steering tuning (0=no eq, 7=max
                               eq). It is decoded to[br] CTLE resistor tuning:
                               00 - 3R (10.8Kohms), 01/10 - R (3.6Kohms), 11 -
                               R/3 (1.2Kohms)[br] CTLE capacitor tuning: 00 -
                               0C (not used), 01 - 1C (200ff), 10 - 2C (400ff),
                               11 - 3C (600ff)
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N0RANK3_5_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N0RANK0_5_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0c40)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N0RANK0_5_FNV_DDRIO_COMP_1_REG 0x1B140C40

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* select one of the four DQ Clk */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N0RANK0_5_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N0RANK1_5_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0c44)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N0RANK1_5_FNV_DDRIO_COMP_1_REG 0x1B140C44

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* Select one of the four DQ clks */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N0RANK1_5_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N0RANK2_5_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0c48)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N0RANK2_5_FNV_DDRIO_COMP_1_REG 0x1B140C48

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* Select one of the four DQ clks */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N0RANK2_5_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N0RANK3_5_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0c4c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N0RANK3_5_FNV_DDRIO_COMP_1_REG 0x1B140C4C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* Select one of the four DQ clk */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N0RANK3_5_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN0RANK0_5_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0c80)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN0RANK0_5_FNV_DDRIO_COMP_1_REG 0x1B140C80

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               selects which skewed DQSP (to sample even bits)
                               is used in the RX FIFO. For proper operation,
                               always pick latest DQSP
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               selects which skewed DQSN (to sample odd bits)
                               is used in the RX FIFO. For proper operation,
                               always pick latest DQSN
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN0RANK0_5_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN0RANK1_5_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0c84)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN0RANK1_5_FNV_DDRIO_COMP_1_REG 0x1B140C84

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               [0]=0 selects the raw output from the nibble DQS
                               amplifier; [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN0RANK1_5_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN0RANK2_5_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0c88)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN0RANK2_5_FNV_DDRIO_COMP_1_REG 0x1B140C88

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               [0]=0 selects the raw output from the nibble DQS
                               amplifier; [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN0RANK2_5_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN0RANK3_5_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0c8c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN0RANK3_5_FNV_DDRIO_COMP_1_REG 0x1B140C8C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               [0]=0 selects the raw output from the nibble DQS
                               amplifier; [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN0RANK3_5_FNV_DDRIO_COMP_1_STRUCT;

/* RXVREFCTRLN0_5_FNV_DDRIO_COMP_1_REG supported on:                            */
/*      BWV (0x402b0ca4)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* RxVrefCtrl. Broadcast read not supported.
*/


#define RXVREFCTRLN0_5_FNV_DDRIO_COMP_1_REG 0x1B140CA4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 vrefperbit0 : 7;

                            /* Bits[6:0], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben0 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 vrefperbit1 : 7;

                            /* Bits[14:8], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben1 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /*
                               enables fine grain Vref control, shift down the
                               Vref voltage by ~0.5 stepsize
                            */
    UINT32 vrefperbit2 : 7;

                            /* Bits[22:16], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben2 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /*
                               enables fine grain Vref control, shift down the
                               Vref voltage by ~0.5 stepsize
                            */
    UINT32 vrefperbit3 : 7;

                            /* Bits[30:24], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben3 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* shift down the Vref voltage by ~0.5 stepsize */

  } Bits;
  UINT32 Data;

} RXVREFCTRLN0_5_FNV_DDRIO_COMP_1_STRUCT;

/* DATATRAINFEEDBACKN0_5_FNV_DDRIO_COMP_1_REG supported on:                     */
/*      BWV (0x402b0ca8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Training Feedback Results. Broadcast read not supported.
*/


#define DATATRAINFEEDBACKN0_5_FNV_DDRIO_COMP_1_REG 0x1B140CA8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 datatrainfeedback : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Data Training Feedback Storage[br] [br]
                               DataTrainFeedback Description:[br] Training Step
                               Bits Nibble Description[br] -------------- ----
                               ------- --------------------------[br] Cross
                               Over Cal 0 0 Tx Dqs Phase Detection[br] Cross
                               Over Cal 1 0 Tx Dq Phase Detection[br] Cross
                               Over Cal 2 0 Rec En Phase Detection[br] RcvEn
                               8:0 0 Byte detection[br] [br] Wr Leveling 8:0 0
                               Byte detection[br] Senseamp offset 3:0 0 Dq
                               Senseamp offset Detection
                            */
    UINT32 rsvd_9 : 23;

                            /* Bits[31:9], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATATRAINFEEDBACKN0_5_FNV_DDRIO_COMP_1_STRUCT;

/* DDRCRFSMCALN0_5_FNV_DDRIO_COMP_1_REG supported on:                           */
/*      BWV (0x402b0cc8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Fsm for  Voc and Xover caliberation, Voc caliberation is a procedure that cancel out intrinsic offset in analogue receivers and Xover training ,it aligns all the local dll to the global qclk
*/


#define DDRCRFSMCALN0_5_FNV_DDRIO_COMP_1_REG 0x1B140CC8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0fsm : 5;

                            /* Bits[4:0], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of first receiver is done(read only)
                            */
    UINT32 saoffset1fsm : 5;

                            /* Bits[9:5], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of second receiver is done(read only)
                            */
    UINT32 saoffset2fsm : 5;

                            /* Bits[14:10], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of third receiver is done(read only)
                            */
    UINT32 saoffset3fsm : 5;

                            /* Bits[19:15], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of fourth receiver is done(read only)
                            */
    UINT32 fsmcalcomplete : 1;

                            /* Bits[20:20], Access Type=ROV, default=0x00000000*/

                            /* when the caliberation is done */
    UINT32 refpiclkdelayfsm : 6;

                            /* Bits[26:21], Access Type=ROV, default=0x00000000*/

                            /*
                               Load FSM with a code at which , the transition
                               is detected.
                            */
    UINT32 fsmcaldone : 1;

                            /* Bits[27:27], Access Type=ROV, default=0x00000000*/

                            /* when the caliberation of voc or x-over is done */
    UINT32 fsmtimersel : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /* Timer is set for either 8 cycles or 16 cycles */
    UINT32 fsmpatternsel : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               It selects whther the pattern of three bit or
                               two bit is selected when the transition happen
                               from 1-->0 for pdout and receiver , to avoid
                               glitch
                            */
    UINT32 fsmvoccal : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               This bit tells , wether the xover or voc
                               caliberation will be done, if its zero x-over
                               caliberation is done and vice-versa
                            */
    UINT32 fsmcalen : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* FsmCalEn starts the voc-Xover Fsm */

  } Bits;
  UINT32 Data;

} DDRCRFSMCALN0_5_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL4N0_5_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b0ccc)                                                        */
/* Register default value on BWV: 0x801F0000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* static configurations of tx and rx. Broadcast read not supported.
*/


#define DATACONTROL4N0_5_FNV_DDRIO_COMP_1_REG 0x1B140CCC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd_0 : 1;

                            /* Bits[0:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vsshiorvrefctl1 : 8;

                            /* Bits[8:1], Access Type=RW, default=0x00000000*/

                            /*
                               VssHi control bits[br] Field Description: [br]
                               [br] Field Bits Description[br] ------- ----
                               ---------------------------------[br]
                               disoverflow 24 Disable overflow logic from
                               BDW[br] fast panic enable 25 Bypass 2 flops in
                               panic path for faster panic response[br]
                               vsshivccd2by3cfgen 26 Forces the driver DAC to
                               get supply from 2/3 vccd[br] vsshivccd2by3cfg
                               27:29 Current trim setting for 2/3 vccd mode,
                               001 fast, 011 typical, 111 slow silicon [br]
                               ddrvssh2ndcompen 30 Enable second comparator
                               (ZBB mode)[br] comp high bwen 31 Improve
                               comparator performance to support low digital
                               voltage range
                            */
    UINT32 dqtxeqsel : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* DQ TxEq setting selection to achieve constant EQ */
    UINT32 rsvd_10 : 2;

                            /* Bits[11:10], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vrefpwrsave : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               If set to 0 (default), Vref generators selected
                               through RxVrefSel[3:0] are always on.[br] If set
                               to 1, Vref generators are switched off while in
                               Self Refresh.
                            */
    UINT32 vreftonblbus : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000008*/

                            /* Per-bit Enable connection to share Vref Bus */
    UINT32 rxvrefsel : 4;

                            /* Bits[20:17], Access Type=RW, default=0x0000000F*/

                            /* Per Bit Verf generator Enable */
    UINT32 refpiclkdelay : 6;

                            /* Bits[26:21], Access Type=RW, default=0x00000000*/

                            /* RefPiClkDelay */
    UINT32 fnvcrsdlbypassen : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /* FNV Slave Delay Line Bypass Enable */
    UINT32 fnvcrdllbypassen : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /* FNV DLL Bypass Enable */
    UINT32 fnvcrvisaen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               FNV Visa Fub Enable - data fub used for VISA if
                               asserted
                            */
    UINT32 writecrcenable : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /* Enable write crc mode */
    UINT32 rsvd_31 : 1;

                            /* Bits[31:31], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL4N0_5_FNV_DDRIO_COMP_1_STRUCT;

/* COMPDATA0N0_5_FNV_DDRIO_COMP_1_REG supported on:                             */
/*      BWV (0x402b0cd4)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Comp Values. Broadcast read not supported.
*/


#define COMPDATA0N0_5_FNV_DDRIO_COMP_1_REG 0x1B140CD4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcompdrvup : 6;

                            /* Bits[5:0], Access Type=RWV, default=0x00000000*/

                            /*
                               Data Rcomp DrvUp Comp Value can be overriden via
                               message channel if periodical retrain is disable
                            */
    UINT32 spare0 : 3;

                            /* Bits[8:6], Access Type=RWV, default=0x00000000*/

                            /* Spare */
    UINT32 rcompdrvdown : 6;

                            /* Bits[14:9], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp DrvDown Comp Value */
    UINT32 vtcomp : 5;

                            /* Bits[19:15], Access Type=RWV, default=0x00000000*/

                            /* VT Comp Values */
    UINT32 tcocomp : 7;

                            /* Bits[26:20], Access Type=RWV, default=0x00000000*/

                            /* Data TCO Comp Value. */
    UINT32 slewratecomp : 5;

                            /* Bits[31:27], Access Type=RWV, default=0x00000000*/

                            /* Data Slew Rate Comp Value. */

  } Bits;
  UINT32 Data;

} COMPDATA0N0_5_FNV_DDRIO_COMP_1_STRUCT;

/* COMPDATA1N0_5_FNV_DDRIO_COMP_1_REG supported on:                             */
/*      BWV (0x402b0cd8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Comp Values. Broadcast read not supported.
*/


#define COMPDATA1N0_5_FNV_DDRIO_COMP_1_REG 0x1B140CD8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcompodtup : 6;

                            /* Bits[5:0], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp OdtUp Comp Value */
    UINT32 rcompodtdown : 6;

                            /* Bits[11:6], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp Odt-Down Comp Value */
    UINT32 panicdrvdn : 10;

                            /* Bits[21:12], Access Type=RWV, default=0x00000000*/

                            /* Panic DrvDn RComp Value. */
    UINT32 panicdrvup : 10;

                            /* Bits[31:22], Access Type=RWV, default=0x00000000*/

                            /* Panic DrvUp RComp Comp Value. */

  } Bits;
  UINT32 Data;

} COMPDATA1N0_5_FNV_DDRIO_COMP_1_STRUCT;

/* DATAOFFSETTRAINN0_5_FNV_DDRIO_COMP_1_REG supported on:                       */
/*      BWV (0x402b0cdc)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATAOFFSETTRAINN0_5_FNV_DDRIO_COMP_1_REG 0x1B140CDC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvenoffset : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained RxRcvEn Value. */
    UINT32 rxdqsoffset : 7;

                            /* Bits[12:6], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained Rx DQS Value. */
    UINT32 txdqoffset : 6;

                            /* Bits[18:13], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained Tx DQ Value. */
    UINT32 txdqsoffset : 6;

                            /* Bits[24:19], Access Type=RW, default=0x00000000*/

                            /* Ooffset added to Trained Tx DQS Value. */
    UINT32 vrefoffset : 7;

                            /* Bits[31:25], Access Type=RW, default=0x00000000*/

                            /*
                               2s Compliment offset added to Trained Vref
                               Value. Positive number increases Vref, and each
                               step is Vdd/384.
                            */

  } Bits;
  UINT32 Data;

} DATAOFFSETTRAINN0_5_FNV_DDRIO_COMP_1_STRUCT;


/* DATACONTROL0N0_5_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b0ce8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL0N0_5_FNV_DDRIO_COMP_1_REG 0x1B140CE8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rxtrainingmode : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enables Read DqDqs Training Mode */
    UINT32 wltrainingmode : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /* Enables Write Leveling Training Mode */
    UINT32 rltrainingmode : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /* Enables Read Leveling Training Mode. */
    UINT32 senseamptrainingmode : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Enables SenseAmp offset cancellation training
                               mode.
                            */
    UINT32 txon : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               When set, forces DQ/DQS drive enable to active.
                               Used in power measurements and IO loopback mode
                            */
    UINT32 rfon : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down Disable: Forces register file read,
                               overriding the rank power down logic.
                            */
    UINT32 rxpion : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /* Power-down Disable: Forces RxDqs PI clocks on. */
    UINT32 txpion : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down Disable: Forces TxDq and TxDqs PI
                               clocks on.
                            */
    UINT32 internalclockson : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Forces on master DLL and all PI enables ON,
                               despite both channel in SelfRefresh, etc. low
                               power states.
                            */
    UINT32 saoffsettraintxon : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* SaOffsetTrainTxon */
    UINT32 txdisable : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down: All write commands are ignored for
                               this data-byte. Used in single-channel MCI mode.
                            */
    UINT32 rxdisable : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down: All read commands are ignored for
                               this data-byte. Used in single-channel MCI mode.
                            */
    UINT32 txlong : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Sets the duration of the first transmitted DQ
                               bit of the burst. 0=1UI, 1=2UI.
                            */
    UINT32 rsvd_13 : 5;

                            /* Bits[17:13], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 driversegmentenable : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Controls which segements of the driver are
                               enabled: {0: All, 1: Only ODT}.
                            */
    UINT32 rsvd_19 : 1;

                            /* Bits[19:19], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 readrfrd : 1;

                            /* Bits[20:20], Access Type=RWV, default=0x00000000*/

                            /*
                               Self clearing command bit. When set, it will
                               download the three 32 bit lines from the RegFile
                               associated with a read command to Rank =
                               ReadRFRank
                            */
    UINT32 readrfwr : 1;

                            /* Bits[21:21], Access Type=RWV, default=0x00000000*/

                            /*
                               Self clearing command bit. When set, it will
                               download the three 32 bit lines from the RegFile
                               associated with a write command to Rank =
                               ReadRFRank
                            */
    UINT32 readrfrank : 3;

                            /* Bits[24:22], Access Type=RWV, default=0x00000000*/

                            /*
                               Specifies the rank that ReadRFRd or ReadRFWr
                               will manually download the CR values from
                            */
    UINT32 forceodton : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /* ODT is forced-on. */
    UINT32 odtsampoff : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /* ODT and Senseamp are forced-off. */
    UINT32 disableodtstatic : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /* not used */
    UINT32 ddrcrforceodton : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               force ODT to the transmitter on, regardless of
                               state of DriveEnable
                            */
    UINT32 spare : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* spare */
    UINT32 xovercal : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /* Enables Xover Calibration Training Mode */
    UINT32 longpreambleenable : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* Enables long preamble for DDR4 devices */

  } Bits;
  UINT32 Data;

} DATACONTROL0N0_5_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL1N0_5_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b0cec)                                                        */
/* Register default value on BWV: 0x0000003C                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL1N0_5_FNV_DDRIO_COMP_1_REG 0x1B140CEC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd_0 : 10;

                            /* Bits[9:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rxbiasctl : 3;

                            /* Bits[12:10], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the Current and BW of the Receiver: {0:
                               0.34Idll, 1: 0.66Idll, 2: 0.88Idll, 3: Idll, 4:
                               1.33Idll, 5: 1.66Idll[br] , 6: 2.00Idll, 7:
                               2.33Idll}
                            */
    UINT32 odtdelay : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000000*/

                            /*
                               Controls ODT turn-on delay. To turn on N tQCK
                               before RcvEn, program to RcvEn[8:6] N + 4.
                            */
    UINT32 odtduration : 3;

                            /* Bits[19:17], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the ODT ON duration from (Code,
                               Duration) = (0x0, 11 tQCK) to (0x7, 18 tQCK)
                            */
    UINT32 senseampdelay : 4;

                            /* Bits[23:20], Access Type=RW, default=0x00000000*/

                            /*
                               Controls Senseamp turn-on delay. To turn on N
                               tQCK before RcvEn, program to RcvEn[8:6] N + 4.
                            */
    UINT32 senseampduration : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the SenseAmp ON duration from (Code,
                               Duration) = (0x0, 11 tQCK) to (0x7, 18 tQCK)
                            */
    UINT32 rsvd_27 : 5;

                            /* Bits[31:27], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL1N0_5_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL2N0_5_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b0cf0)                                                        */
/* Register default value on BWV: 0x07800000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL2N0_5_FNV_DDRIO_COMP_1_REG 0x1B140CF0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rxvocselqnnnh : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Enables SenseAmp offset cancellation training
                               mode
                            */
    UINT32 forcebiason : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Force on the internal Vref and Rx bias circuit,
                               regardless of any other power downs
                            */
    UINT32 forcerxon : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Force on the RxAmp only (as opposed to
                               OdtSampOn, which turns on both ODT and the
                               amplifier).[br] Use for overclocking support
                               where we may not be able to hit the fast exit
                               latency
                            */
    UINT32 ddr4extend : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /* Enable finer vref resolution in ddr4 */
    UINT32 cttermination : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /* DDRCOMP_CR_DDRCRCOMPOVR CTTermination */
    UINT32 dfelben : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* Digital far end loopback enable */
    UINT32 dfelbtxdmuxsel : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /* Digital far end loopback TX FIFO data mux sel */
    UINT32 spare1 : 2;

                            /* Bits[12:11], Access Type=RW, default=0x00000000*/

                            /* Spare1 */
    UINT32 txddjcen : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000000*/

                            /* TxddjcEn */
    UINT32 dfeenable : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /* DfeEnable */
    UINT32 dfedlysel : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /* DfeDlySel */
    UINT32 dfecode : 4;

                            /* Bits[22:19], Access Type=RW, default=0x00000000*/

                            /*
                               DfeCode: binary code 0000 to 1000 for DFE
                               offset, mid-code code for zero offset is 0100
                            */
    UINT32 rxdqssaoffset : 5;

                            /* Bits[27:23], Access Type=RW, default=0x0000000F*/

                            /* strobe Rx Amp offset control */
    UINT32 rsvd_28 : 4;

                            /* Bits[31:28], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL2N0_5_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL3N0_5_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b0cf4)                                                        */
/* Register default value on BWV: 0x00000FCF                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* static configurations of tx and rx. Broadcast read not supported.
*/


#define DATACONTROL3N0_5_FNV_DDRIO_COMP_1_REG 0x1B140CF4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 drvstaticlegcfg : 2;

                            /* Bits[1:0], Access Type=RW, default=0x00000003*/

                            /*
                               binary default setting for static legs in DRV
                               mode[br] 0 0 0 legs (EQ disabled)[br] 0 1 3 legs
                               (EQ max 3 legs)[br] 1 0 6 legs (EQ max 6
                               legs)[br] 1 1 12 legs (EQ max 12 legs)[br] In
                               most cases, we would set this to be 11, but for
                               some configurations that require a higher [br]
                               Ron value, we need to reduce the number of
                               static legs enabled so that fast corner can hit
                               [br] the higher Ron target value.
                            */
    UINT32 odtstaticlegcfg : 2;

                            /* Bits[3:2], Access Type=RW, default=0x00000003*/

                            /*
                               binary default setting for static legs in ODT
                               mode[br] 0 0 0 legs (EQ disabled)[br] 0 1 3 legs
                               (EQ max 3 legs)[br] 1 0 6 legs (EQ max 6
                               legs)[br] 1 1 12 legs (EQ max 12 legs)[br] In
                               most cases, we would set this to be 11, but for
                               some configurations that require a higher [br]
                               Ron value, we need to reduce the number of
                               static legs enabled so that fast corner can hit
                               [br] the higher Ron target value.
                            */
    UINT32 lvlshft_holden : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               level shift hold enable[br] Holds the HV control
                               values and power down mode the level
                               shifters.[br] Apply '1' after training. Slow
                               timing - not advised for fast enabling
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 odtsegmentenable : 3;

                            /* Bits[8:6], Access Type=RW, default=0x00000007*/

                            /*
                               This will tell which segments are enabled out of
                               reset. [br] After that, a shift register will
                               determine the enabled segments
                            */
    UINT32 datasegmentenable : 3;

                            /* Bits[11:9], Access Type=RW, default=0x00000007*/

                            /*
                               This will tell which segments are enabled out of
                               reset.
                            */
    UINT32 longodtr2w : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               When set, it will extends ODT by 1 qclk on read
                               to write turnarounds. hsd 230773
                            */
    UINT32 spare1 : 8;

                            /* Bits[20:13], Access Type=RW, default=0x00000000*/

                            /* Spare1 */
    UINT32 ddrcrctlecapen : 2;

                            /* Bits[22:21], Access Type=RW, default=0x00000000*/

                            /* ctle capacitor setting */
    UINT32 ddrcrctleresen : 2;

                            /* Bits[24:23], Access Type=RW, default=0x00000000*/

                            /* ctle resistor setting */
    UINT32 pcasbiasclosedloopen : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiassel : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiasfoldedlegtrim : 2;

                            /* Bits[28:27], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiasgcncomp : 2;

                            /* Bits[30:29], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 postambleenable : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* Spare */

  } Bits;
  UINT32 Data;

} DATACONTROL3N0_5_FNV_DDRIO_COMP_1_STRUCT;

/* VSSHIORVREFCONTROLN0_5_FNV_DDRIO_COMP_1_REG supported on:                    */
/*      BWV (0x402b0cf8)                                                        */
/* Register default value on BWV: 0x004D8238                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, only. Broadcast read not supported.
*/


#define VSSHIORVREFCONTROLN0_5_FNV_DDRIO_COMP_1_REG 0x1B140CF8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 vsshiorvrefctl : 24;

                            /* Bits[23:0], Access Type=RW, default=0x004D8238*/

                            /*
                               Channel 0 fubs : VssHi adjust setting. Channel1
                               fubs: DIMM VREF adjust settings.[br] [br] VssHi
                               Field Description: [br] [br] Field Bits
                               Description[br] ------- ---- -------------------
                               ------------------------------------------------
                               ------------------------------------------------
                               --------------------------------------------[br]
                               SelCode 23 Selects the code to output: {0: Code,
                               1: TCode}[br] GainBoost 22 Enable gain boost is
                               panic mode by updating code/tcode [br]
                               PanicVoltage 21:18 Unsigned integer controlling
                               the voltage error on VssHi that will trigger the
                               panic driver. Step size of VccDDQ/192 (0 to
                               117mV)[br] CloseLoop 17 Enables the VssHi close
                               loop tracking [br] PanicEn 16 Enables the VssHi
                               Panic Driver[br] BWError 15:14 Limits the loop
                               gain (ie: difference between code and tcode) to
                               +/- 2^(SlowBWError)[br] OpenLoop 13 Operates
                               VssHi in open loop mode with the target Vref
                               code directly driving the output DAC with no
                               feedback involved[br] SampleDivider 12:10
                               Controls the loop bandwidth by dividing down the
                               input clock: {0: Qclk, 1: Qclk/2, 2: Qclk/4, 3:
                               Qclk/8, 4: Qclk/16, 5: Qclk/32, 6: Qclk/64, 7:
                               Qclk/128}[br] LoBWDivider 9:8 For the slow
                               integrator, selects the net number of samples in
                               a given direction to trip the filter. {0: 4
                               samples, 1: 16 samples, 2: 32 samples, 3: 64
                               samples}[br] HiBWDivider 7:6 For the fast
                               integrator, selects the net number of samples in
                               a given direction to trip the filter. {0: 4
                               samples, 1: 16 samples, 2: 32 samples, 3: 64
                               samples}[br] Target 5:0 Unsigned integer
                               controlling the target VssHi voltage. Step size
                               of VccDDQ/192 and starting value of
                               VccDDQ*20/192
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} VSSHIORVREFCONTROLN0_5_FNV_DDRIO_COMP_1_STRUCT;


/* RXGROUP0N1RANK0_5_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0d00)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank0. Broadcast read not supported.
*/


#define RXGROUP0N1RANK0_5_FNV_DDRIO_COMP_1_REG 0x1B140D00

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* ReadX8ModeEn */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /* common DQS_P delay control, per nibble */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /* common DQS_N delay control, per nibble */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               Rx Equalization code: {4:3} controls the cap
                               tuning 0: (not used), 1: 200ff, 2: 400ff, 3:
                               600ff, [br] controls the resistor tuning (0: 3R,
                               1: 1R, 2: 1R, 3: R/3).
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N1RANK0_5_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N1RANK1_5_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0d04)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank0. Broadcast read not supported.
*/


#define RXGROUP0N1RANK1_5_FNV_DDRIO_COMP_1_REG 0x1B140D04

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* ReadX8ModeEn */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /* common DQS_P delay control, per nibble */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /* common DQS_N delay control, per nibble */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               Rx Equalization code: {4:3} controls the cap
                               tuning 0: (not used), 1: 200ff, 2: 400ff, 3:
                               600ff, [br] controls the resistor tuning (0: 3R,
                               1: 1R, 2: 1R, 3: R/3).
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N1RANK1_5_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N1RANK2_5_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0d08)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank0.Broadcast read not supported.
*/


#define RXGROUP0N1RANK2_5_FNV_DDRIO_COMP_1_REG 0x1B140D08

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* ReadX8ModeEn */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /* common DQS_P delay control, per nibble */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /* common DQS_N delay control, per nibble */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               Rx Equalization code: {4:3} controls the cap
                               tuning 0: (not used), 1: 200ff, 2: 400ff, 3:
                               600ff, [br] controls the resistor tuning (0: 3R,
                               1: 1R, 2: 1R, 3: R/3).
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N1RANK2_5_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N1RANK3_5_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0d0c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank0. Broadcast read not supported.
*/


#define RXGROUP0N1RANK3_5_FNV_DDRIO_COMP_1_REG 0x1B140D0C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* ReadX8ModeEn */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /* common DQS_P delay control, per nibble */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /* common DQS_N delay control, per nibble */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               Rx Equalization code: {4:3} controls the cap
                               tuning 0: (not used), 1: 200ff, 2: 400ff, 3:
                               600ff, [br] controls the resistor tuning (0: 3R,
                               1: 1R, 2: 1R, 3: R/3).
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N1RANK3_5_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N1RANK0_5_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0d40)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N1RANK0_5_FNV_DDRIO_COMP_1_REG 0x1B140D40

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* one of the four clocks */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N1RANK0_5_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N1RANK1_5_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0d44)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N1RANK1_5_FNV_DDRIO_COMP_1_REG 0x1B140D44

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* one of the four clocks */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N1RANK1_5_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N1RANK2_5_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0d48)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N1RANK2_5_FNV_DDRIO_COMP_1_REG 0x1B140D48

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* one of the 4 clocks */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N1RANK2_5_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N1RANK3_5_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0d4c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N1RANK3_5_FNV_DDRIO_COMP_1_REG 0x1B140D4C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from PiRef to PiN for bit 1 */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N1RANK3_5_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN1RANK0_5_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0d80)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN1RANK0_5_FNV_DDRIO_COMP_1_REG 0x1B140D80

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               x4/x8 DQS mux select[br] [0]=1 selects the raw
                               output from the nibble0 DQS amplifier in x8
                               mode; [br] [0]=0 select nibble1 amplifier output
                               in x4 mode; [br] [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN1RANK0_5_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN1RANK1_5_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0d84)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN1RANK1_5_FNV_DDRIO_COMP_1_REG 0x1B140D84

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               x4/x8 DQS mux select[br] [0]=1 selects the raw
                               output from the nibble0 DQS amplifier in x8
                               mode; [br] [0]=0 select nibble1 amplifier output
                               in x4 mode; [br] [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN1RANK1_5_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN1RANK2_5_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0d88)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN1RANK2_5_FNV_DDRIO_COMP_1_REG 0x1B140D88

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               x4/x8 DQS mux select[br] [0]=1 selects the raw
                               output from the nibble0 DQS amplifier in x8
                               mode; [br] [0]=0 select nibble1 amplifier output
                               in x4 mode; [br] [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN1RANK2_5_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN1RANK3_5_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0d8c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN1RANK3_5_FNV_DDRIO_COMP_1_REG 0x1B140D8C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               x4/x8 DQS mux select[br] [0]=1 selects the raw
                               output from the nibble0 DQS amplifier in x8
                               mode; [br] [0]=0 select nibble1 amplifier output
                               in x4 mode; [br] [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN1RANK3_5_FNV_DDRIO_COMP_1_STRUCT;

/* RXVREFCTRLN1_5_FNV_DDRIO_COMP_1_REG supported on:                            */
/*      BWV (0x402b0da4)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* RxVrefCtrl. Broadcast read not supported.
*/


#define RXVREFCTRLN1_5_FNV_DDRIO_COMP_1_REG 0x1B140DA4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 vrefperbit0 : 7;

                            /* Bits[6:0], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben0 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 vrefperbit1 : 7;

                            /* Bits[14:8], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben1 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 vrefperbit2 : 7;

                            /* Bits[22:16], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben2 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 vrefperbit3 : 7;

                            /* Bits[30:24], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben3 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* shift down the Vref voltage by ~0.5 stepsize */

  } Bits;
  UINT32 Data;

} RXVREFCTRLN1_5_FNV_DDRIO_COMP_1_STRUCT;

/* DATATRAINFEEDBACKN1_5_FNV_DDRIO_COMP_1_REG supported on:                     */
/*      BWV (0x402b0da8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Training Feedback Results. Broadcast read not supported.
*/


#define DATATRAINFEEDBACKN1_5_FNV_DDRIO_COMP_1_REG 0x1B140DA8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 datatrainfeedback : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Data Training Feedback Storage [br] Training
                               Step Bits Nibble Description[br] --------------
                               ---- ------- ---------------[br] Cross Over Cal
                               0 1 Tx Dqs Phase Detection[br] Cross Over Cal 1
                               1 Tx Dq Phase Detection[br] Cross Over Cal 2 1
                               Rec En Phase Detection[br] RcvEn 8:0 1 Byte
                               detection[br] Wr Leveling 8:0 1 Byte
                               detection[br] Senseamp offset 3:0 1 Dq Senseamp
                               offset Detection
                            */
    UINT32 rsvd_9 : 23;

                            /* Bits[31:9], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATATRAINFEEDBACKN1_5_FNV_DDRIO_COMP_1_STRUCT;

/* DDRCRFSMCALN1_5_FNV_DDRIO_COMP_1_REG supported on:                           */
/*      BWV (0x402b0dc8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Fsm for  Voc and Xover caliberation, Voc caliberation is a procedure that cancel out intrinsic offset in analogue receivers and Xover training ,it aligns all the local dll to the global qclk
*/


#define DDRCRFSMCALN1_5_FNV_DDRIO_COMP_1_REG 0x1B140DC8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0fsm : 5;

                            /* Bits[4:0], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of first receiver is done(read only)
                            */
    UINT32 saoffset1fsm : 5;

                            /* Bits[9:5], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of second receiver is done(read only)
                            */
    UINT32 saoffset2fsm : 5;

                            /* Bits[14:10], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of third receiver is done(read only)
                            */
    UINT32 saoffset3fsm : 5;

                            /* Bits[19:15], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of fourth receiver is done(read only)
                            */
    UINT32 fsmcalcomplete : 1;

                            /* Bits[20:20], Access Type=ROV, default=0x00000000*/

                            /* when the caliberation is done */
    UINT32 refpiclkdelayfsm : 6;

                            /* Bits[26:21], Access Type=ROV, default=0x00000000*/

                            /*
                               Load FSM with a code at which , the transition
                               is detected.
                            */
    UINT32 fsmcaldone : 1;

                            /* Bits[27:27], Access Type=ROV, default=0x00000000*/

                            /* when the caliberation of voc or x-over is done */
    UINT32 fsmtimersel : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /* Timer is set for either 8 cycles or 16 cycles */
    UINT32 fsmpatternsel : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               It selects whther the pattern of three bit or
                               two bit is selected when the transition happen
                               from 1-->0 for pdout and receiver , to avoid
                               glitch
                            */
    UINT32 fsmvoccal : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               This bit tells , wether the xover or voc
                               caliberation will be done, if its zero x-over
                               caliberation is done and vice-versa
                            */
    UINT32 fsmcalen : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* FsmCalEn starts the voc-Xover Fsm */

  } Bits;
  UINT32 Data;

} DDRCRFSMCALN1_5_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL4N1_5_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b0dcc)                                                        */
/* Register default value on BWV: 0x801F0000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* static configurations of tx and rx. Broadcast read not supported.
*/


#define DATACONTROL4N1_5_FNV_DDRIO_COMP_1_REG 0x1B140DCC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd_0 : 1;

                            /* Bits[0:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vsshiorvrefctl1 : 8;

                            /* Bits[8:1], Access Type=RW, default=0x00000000*/

                            /*
                               VssHi control bits[br] Field Description: [br]
                               [br] Field Bits Description[br] ------- ----
                               ---------------------------------[br]
                               disoverflow 24 Disable overflow logic from
                               BDW[br] fast panic enable 25 Bypass 2 flops in
                               panic path for faster panic response[br]
                               vsshivccd2by3cfgen 26 Forces the driver DAC to
                               get supply from 2/3 vccd[br] vsshivccd2by3cfg
                               27:29 Current trim setting for 2/3 vccd mode,
                               001 fast, 011 typical, 111 slow silicon [br]
                               ddrvssh2ndcompen 30 Enable second comparator
                               (ZBB mode)[br] comp high bwen 31 Improve
                               comparator performance to support low digital
                               voltage range
                            */
    UINT32 dqtxeqsel : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* DQ TxEq setting selection to achieve constant EQ */
    UINT32 rsvd_10 : 2;

                            /* Bits[11:10], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vrefpwrsave : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               If set to 0 (default), Vref generators selected
                               through RxVrefSel[3:0] are always on.[br] If set
                               to 1, Vref generators are switched off while in
                               Self Refresh.
                            */
    UINT32 vreftonblbus : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000008*/

                            /* Per-bit Enable connection to share Vref Bus */
    UINT32 rxvrefsel : 4;

                            /* Bits[20:17], Access Type=RW, default=0x0000000F*/

                            /* Per Bit Verf generator Enable */
    UINT32 refpiclkdelay : 6;

                            /* Bits[26:21], Access Type=RW, default=0x00000000*/

                            /* RefPiClkDelay */
    UINT32 fnvcrsdlbypassen : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /* FNV Slave Delay Line Bypass Enable */
    UINT32 fnvcrdllbypassen : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /* FNV DLL Bypass Enable */
    UINT32 fnvcrvisaen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               FNV Visa Fub Enable - data fub used for VISA if
                               asserted
                            */
    UINT32 writecrcenable : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /* Enable write crc mode */
    UINT32 rsvd_31 : 1;

                            /* Bits[31:31], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL4N1_5_FNV_DDRIO_COMP_1_STRUCT;

/* COMPDATA0N1_5_FNV_DDRIO_COMP_1_REG supported on:                             */
/*      BWV (0x402b0dd4)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Comp Values. Broadcast read not supported.
*/


#define COMPDATA0N1_5_FNV_DDRIO_COMP_1_REG 0x1B140DD4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcompdrvup : 6;

                            /* Bits[5:0], Access Type=RWV, default=0x00000000*/

                            /*
                               Data Rcomp DrvUp Comp Value can be overriden via
                               message channel if periodical retrain is disable
                            */
    UINT32 spare0 : 3;

                            /* Bits[8:6], Access Type=RWV, default=0x00000000*/

                            /* Spare */
    UINT32 rcompdrvdown : 6;

                            /* Bits[14:9], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp DrvDown Comp Value */
    UINT32 vtcomp : 5;

                            /* Bits[19:15], Access Type=RWV, default=0x00000000*/

                            /* VT Comp Values */
    UINT32 tcocomp : 7;

                            /* Bits[26:20], Access Type=RWV, default=0x00000000*/

                            /* Data TCO Comp Value. */
    UINT32 slewratecomp : 5;

                            /* Bits[31:27], Access Type=RWV, default=0x00000000*/

                            /* Data Slew Rate Comp Value. */

  } Bits;
  UINT32 Data;

} COMPDATA0N1_5_FNV_DDRIO_COMP_1_STRUCT;

/* COMPDATA1N1_5_FNV_DDRIO_COMP_1_REG supported on:                             */
/*      BWV (0x402b0dd8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Comp Values. Broadcast read not supported.
*/


#define COMPDATA1N1_5_FNV_DDRIO_COMP_1_REG 0x1B140DD8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcompodtup : 6;

                            /* Bits[5:0], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp OdtUp Comp Value */
    UINT32 rcompodtdown : 6;

                            /* Bits[11:6], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp Odt-Down Comp Value */
    UINT32 panicdrvdn : 10;

                            /* Bits[21:12], Access Type=RWV, default=0x00000000*/

                            /* Panic DrvDn RComp Value. */
    UINT32 panicdrvup : 10;

                            /* Bits[31:22], Access Type=RWV, default=0x00000000*/

                            /* Panic DrvUp RComp Comp Value. */

  } Bits;
  UINT32 Data;

} COMPDATA1N1_5_FNV_DDRIO_COMP_1_STRUCT;

/* DATAOFFSETTRAINN1_5_FNV_DDRIO_COMP_1_REG supported on:                       */
/*      BWV (0x402b0ddc)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATAOFFSETTRAINN1_5_FNV_DDRIO_COMP_1_REG 0x1B140DDC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvenoffset : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained RxRcvEn Value. */
    UINT32 rxdqsoffset : 7;

                            /* Bits[12:6], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained Rx DQS Value. */
    UINT32 txdqoffset : 6;

                            /* Bits[18:13], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained Tx DQ Value. */
    UINT32 txdqsoffset : 6;

                            /* Bits[24:19], Access Type=RW, default=0x00000000*/

                            /* Ooffset added to Trained Tx DQS Value. */
    UINT32 vrefoffset : 7;

                            /* Bits[31:25], Access Type=RW, default=0x00000000*/

                            /*
                               2s Compliment offset added to Trained Vref
                               Value. Positive number increases Vref, and each
                               step is Vdd/384.
                            */

  } Bits;
  UINT32 Data;

} DATAOFFSETTRAINN1_5_FNV_DDRIO_COMP_1_STRUCT;


/* DATACONTROL0N1_5_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b0de8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL0N1_5_FNV_DDRIO_COMP_1_REG 0x1B140DE8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rxtrainingmode : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enables Read DqDqs Training Mode */
    UINT32 wltrainingmode : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /* Enables Write Leveling Training Mode */
    UINT32 rltrainingmode : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /* Enables Read Leveling Training Mode. */
    UINT32 senseamptrainingmode : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Enables SenseAmp offset cancellation training
                               mode.
                            */
    UINT32 txon : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               When set, forces DQ/DQS drive enable to active.
                               Used in power measurements and IO loopback mode
                            */
    UINT32 rfon : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down Disable: Forces register file read,
                               overriding the rank power down logic.
                            */
    UINT32 rxpion : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /* Power-down Disable: Forces RxDqs PI clocks on. */
    UINT32 txpion : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down Disable: Forces TxDq and TxDqs PI
                               clocks on.
                            */
    UINT32 internalclockson : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Forces on master DLL and all PI enables ON,
                               despite both channel in SelfRefresh, etc. low
                               power states.
                            */
    UINT32 saoffsettraintxon : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* SaOffsetTrainTxon */
    UINT32 txdisable : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down: All write commands are ignored for
                               this data-byte. Used in single-channel MCI mode.
                            */
    UINT32 rxdisable : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down: All read commands are ignored for
                               this data-byte. Used in single-channel MCI mode.
                            */
    UINT32 txlong : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Sets the duration of the first transmitted DQ
                               bit of the burst. 0=1UI, 1=2UI.
                            */
    UINT32 rsvd_13 : 5;

                            /* Bits[17:13], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 driversegmentenable : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Controls which segements of the driver are
                               enabled: {0: All, 1: Only ODT}.
                            */
    UINT32 rsvd_19 : 1;

                            /* Bits[19:19], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 readrfrd : 1;

                            /* Bits[20:20], Access Type=RWV, default=0x00000000*/

                            /*
                               Self clearing command bit. When set, it will
                               download the three 32 bit lines from the RegFile
                               associated with a read command to Rank =
                               ReadRFRank
                            */
    UINT32 readrfwr : 1;

                            /* Bits[21:21], Access Type=RWV, default=0x00000000*/

                            /*
                               Self clearing command bit. When set, it will
                               download the three 32 bit lines from the RegFile
                               associated with a write command to Rank =
                               ReadRFRank
                            */
    UINT32 readrfrank : 3;

                            /* Bits[24:22], Access Type=RWV, default=0x00000000*/

                            /*
                               Specifies the rank that ReadRFRd or ReadRFWr
                               will manually download the CR values from
                            */
    UINT32 forceodton : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /* ODT is forced-on. */
    UINT32 odtsampoff : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /* ODT and Senseamp are forced-off. */
    UINT32 disableodtstatic : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /* not used */
    UINT32 ddrcrforceodton : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               force ODT to the transmitter on, regardless of
                               state of DriveEnable
                            */
    UINT32 spare : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* spare */
    UINT32 xovercal : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /* Enables Xover Calibration Training Mode */
    UINT32 longpreambleenable : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* Enables long preamble for DDR4 devices */

  } Bits;
  UINT32 Data;

} DATACONTROL0N1_5_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL1N1_5_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b0dec)                                                        */
/* Register default value on BWV: 0x0000003C                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL1N1_5_FNV_DDRIO_COMP_1_REG 0x1B140DEC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd_0 : 10;

                            /* Bits[9:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rxbiasctl : 3;

                            /* Bits[12:10], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the Current and BW of the Receiver: {0:
                               0.34Idll, 1: 0.66Idll, 2: 0.88Idll, 3: Idll, 4:
                               1.33Idll, 5: 1.66Idll[br] , 6: 2.00Idll, 7:
                               2.33Idll}
                            */
    UINT32 odtdelay : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000000*/

                            /*
                               Controls ODT turn-on delay. To turn on N tQCK
                               before RcvEn, program to RcvEn[8:6] N + 4.
                            */
    UINT32 odtduration : 3;

                            /* Bits[19:17], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the ODT ON duration from (Code,
                               Duration) = (0x0, 11 tQCK) to (0x7, 18 tQCK)
                            */
    UINT32 senseampdelay : 4;

                            /* Bits[23:20], Access Type=RW, default=0x00000000*/

                            /*
                               Controls Senseamp turn-on delay. To turn on N
                               tQCK before RcvEn, program to RcvEn[8:6] N + 4.
                            */
    UINT32 senseampduration : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the SenseAmp ON duration from (Code,
                               Duration) = (0x0, 11 tQCK) to (0x7, 18 tQCK)
                            */
    UINT32 rsvd_27 : 5;

                            /* Bits[31:27], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL1N1_5_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL2N1_5_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b0df0)                                                        */
/* Register default value on BWV: 0x07800000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL2N1_5_FNV_DDRIO_COMP_1_REG 0x1B140DF0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rxvocselqnnnh : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Enables SenseAmp offset cancellation training
                               mode
                            */
    UINT32 forcebiason : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Force on the internal Vref and Rx bias circuit,
                               regardless of any other power downs
                            */
    UINT32 forcerxon : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Force on the RxAmp only (as opposed to
                               OdtSampOn, which turns on both ODT and the
                               amplifier).[br] Use for overclocking support
                               where we may not be able to hit the fast exit
                               latency
                            */
    UINT32 ddr4extend : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /* Enable finer vref resolution in ddr4 */
    UINT32 cttermination : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /* DDRCOMP_CR_DDRCRCOMPOVR CTTermination */
    UINT32 dfelben : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* Digital far end loopback enable */
    UINT32 dfelbtxdmuxsel : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /* Digital far end loopback TX FIFO data mux sel */
    UINT32 spare1 : 2;

                            /* Bits[12:11], Access Type=RW, default=0x00000000*/

                            /* Spare1 */
    UINT32 txddjcen : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000000*/

                            /* TxddjcEn */
    UINT32 dfeenable : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /* DfeEnable */
    UINT32 dfedlysel : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /* DfeDlySel */
    UINT32 dfecode : 4;

                            /* Bits[22:19], Access Type=RW, default=0x00000000*/

                            /*
                               DfeCode: binary code 0000 to 1000 for DFE
                               offset, mid-code code for zero offset is 0100
                            */
    UINT32 rxdqssaoffset : 5;

                            /* Bits[27:23], Access Type=RW, default=0x0000000F*/

                            /* strobe Rx Amp offset control */
    UINT32 rsvd_28 : 4;

                            /* Bits[31:28], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL2N1_5_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL3N1_5_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b0df4)                                                        */
/* Register default value on BWV: 0x00000FCF                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* static configurations of tx and rx. Broadcast read not supported.
*/


#define DATACONTROL3N1_5_FNV_DDRIO_COMP_1_REG 0x1B140DF4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 drvstaticlegcfg : 2;

                            /* Bits[1:0], Access Type=RW, default=0x00000003*/

                            /*
                               binary default setting for static legs in DRV
                               mode[br] 0 0 0 legs (EQ disabled)[br] 0 1 3 legs
                               (EQ max 3 legs)[br] 1 0 6 legs (EQ max 6
                               legs)[br] 1 1 12 legs (EQ max 12 legs)[br] In
                               most cases, we would set this to be 11, but for
                               some configurations that require a higher [br]
                               Ron value, we need to reduce the number of
                               static legs enabled so that fast corner can hit
                               [br] the higher Ron target value.
                            */
    UINT32 odtstaticlegcfg : 2;

                            /* Bits[3:2], Access Type=RW, default=0x00000003*/

                            /*
                               binary default setting for static legs in ODT
                               mode[br] 0 0 0 legs (EQ disabled)[br] 0 1 3 legs
                               (EQ max 3 legs)[br] 1 0 6 legs (EQ max 6
                               legs)[br] 1 1 12 legs (EQ max 12 legs)[br] In
                               most cases, we would set this to be 11, but for
                               some configurations that require a higher [br]
                               Ron value, we need to reduce the number of
                               static legs enabled so that fast corner can hit
                               [br] the higher Ron target value.
                            */
    UINT32 lvlshft_holden : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               level shift hold enable[br] Holds the HV control
                               values and power down mode the level
                               shifters.[br] Apply '1' after training. Slow
                               timing - not advised for fast enabling
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 odtsegmentenable : 3;

                            /* Bits[8:6], Access Type=RW, default=0x00000007*/

                            /*
                               This will tell which segments are enabled out of
                               reset. [br] After that, a shift register will
                               determine the enabled segments
                            */
    UINT32 datasegmentenable : 3;

                            /* Bits[11:9], Access Type=RW, default=0x00000007*/

                            /*
                               This will tell which segments are enabled out of
                               reset.
                            */
    UINT32 longodtr2w : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               When set, it will extends ODT by 1 qclk on read
                               to write turnarounds. hsd 230773
                            */
    UINT32 spare1 : 8;

                            /* Bits[20:13], Access Type=RW, default=0x00000000*/

                            /* Spare1 */
    UINT32 ddrcrctlecapen : 2;

                            /* Bits[22:21], Access Type=RW, default=0x00000000*/

                            /* ctle capacitor setting */
    UINT32 ddrcrctleresen : 2;

                            /* Bits[24:23], Access Type=RW, default=0x00000000*/

                            /* ctle resistor setting */
    UINT32 pcasbiasclosedloopen : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiassel : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiasfoldedlegtrim : 2;

                            /* Bits[28:27], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiasgcncomp : 2;

                            /* Bits[30:29], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 postambleenable : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* Spare */

  } Bits;
  UINT32 Data;

} DATACONTROL3N1_5_FNV_DDRIO_COMP_1_STRUCT;

/* VSSHIORVREFCONTROLN1_5_FNV_DDRIO_COMP_1_REG supported on:                    */
/*      BWV (0x402b0df8)                                                        */
/* Register default value on BWV: 0x004D8238                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, only. Broadcast read not supported.
*/


#define VSSHIORVREFCONTROLN1_5_FNV_DDRIO_COMP_1_REG 0x1B140DF8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 vsshiorvrefctl : 24;

                            /* Bits[23:0], Access Type=RW, default=0x004D8238*/

                            /*
                               Channel 0 fubs : VssHi adjust setting. Channel1
                               fubs: DIMM VREF adjust settings.[br] [br] VssHi
                               Field Description: [br] [br] Field Bits
                               Description[br] ------- ---- -------------------
                               ------------------------------------------------
                               ------------------------------------------------
                               --------------------------------------------[br]
                               SelCode 23 Selects the code to output: {0: Code,
                               1: TCode}[br] GainBoost 22 Enable gain boost is
                               panic mode by updating code/tcode [br]
                               PanicVoltage 21:18 Unsigned integer controlling
                               the voltage error on VssHi that will trigger the
                               panic driver. Step size of VccDDQ/192 (0 to
                               117mV)[br] CloseLoop 17 Enables the VssHi close
                               loop tracking [br] PanicEn 16 Enables the VssHi
                               Panic Driver[br] BWError 15:14 Limits the loop
                               gain (ie: difference between code and tcode) to
                               +/- 2^(SlowBWError)[br] OpenLoop 13 Operates
                               VssHi in open loop mode with the target Vref
                               code directly driving the output DAC with no
                               feedback involved[br] SampleDivider 12:10
                               Controls the loop bandwidth by dividing down the
                               input clock: {0: Qclk, 1: Qclk/2, 2: Qclk/4, 3:
                               Qclk/8, 4: Qclk/16, 5: Qclk/32, 6: Qclk/64, 7:
                               Qclk/128}[br] LoBWDivider 9:8 For the slow
                               integrator, selects the net number of samples in
                               a given direction to trip the filter. {0: 4
                               samples, 1: 16 samples, 2: 32 samples, 3: 64
                               samples}[br] HiBWDivider 7:6 For the fast
                               integrator, selects the net number of samples in
                               a given direction to trip the filter. {0: 4
                               samples, 1: 16 samples, 2: 32 samples, 3: 64
                               samples}[br] Target 5:0 Unsigned integer
                               controlling the target VssHi voltage. Step size
                               of VccDDQ/192 and starting value of
                               VccDDQ*20/192
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} VSSHIORVREFCONTROLN1_5_FNV_DDRIO_COMP_1_STRUCT;


/* RXGROUP0N0RANK0_6_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0e00)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank0. Broadcast reads are not supported.
*/


#define RXGROUP0N0RANK0_6_FNV_DDRIO_COMP_1_REG 0x1B140E00

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* readx4modeenb */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_P to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_N to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS (0: 1/16 UI offset, [br] 1:
                               3/16 UI Offset, 2: 5/16 UI Offsets, 3: 7/16 UI
                               Offsets, 4: 9/16 UI Offsets, 5,6,7: 11/16 UI
                               Offsets.)
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               CTLE current steering tuning (0=no eq, 7=max
                               eq). It is decoded to[br] CTLE resistor tuning:
                               00 - 3R (10.8Kohms), 01/10 - R (3.6Kohms), 11 -
                               R/3 (1.2Kohms)[br] CTLE capacitor tuning: 00 -
                               0C (not used), 01 - 1C (200ff), 10 - 2C (400ff),
                               11 - 3C (600ff)
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N0RANK0_6_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N0RANK1_6_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0e04)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank1. Broadcast reads are not supported.
*/


#define RXGROUP0N0RANK1_6_FNV_DDRIO_COMP_1_REG 0x1B140E04

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* readx4modeenb */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_P to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_N to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               CTLE current steering tuning (0=no eq, 7=max
                               eq). It is decoded to[br] CTLE resistor tuning:
                               00 - 3R (10.8Kohms), 01/10 - R (3.6Kohms), 11 -
                               R/3 (1.2Kohms)[br] CTLE capacitor tuning: 00 -
                               0C (not used), 01 - 1C (200ff), 10 - 2C (400ff),
                               11 - 3C (600ff)
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N0RANK1_6_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N0RANK2_6_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0e08)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank2. Broadcast read not supported.
*/


#define RXGROUP0N0RANK2_6_FNV_DDRIO_COMP_1_REG 0x1B140E08

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* readx4modeenb */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_P to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_P to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               CTLE current steering tuning (0=no eq, 7=max
                               eq). It is decoded to[br] CTLE resistor tuning:
                               00 - 3R (10.8Kohms), 01/10 - R (3.6Kohms), 11 -
                               R/3 (1.2Kohms)[br] CTLE capacitor tuning: 00 -
                               0C (not used), 01 - 1C (200ff), 10 - 2C (400ff),
                               11 - 3C (600ff)
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N0RANK2_6_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N0RANK3_6_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0e0c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank3. Broadcast read not supported.
*/


#define RXGROUP0N0RANK3_6_FNV_DDRIO_COMP_1_REG 0x1B140E0C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* readx4modeenb */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_P to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /*
                               per nibble READ timing control, delay DQS_N to
                               match the earlest arrival DQ, 0~1.5UI with step
                               size ClkPi/64
                            */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               CTLE current steering tuning (0=no eq, 7=max
                               eq). It is decoded to[br] CTLE resistor tuning:
                               00 - 3R (10.8Kohms), 01/10 - R (3.6Kohms), 11 -
                               R/3 (1.2Kohms)[br] CTLE capacitor tuning: 00 -
                               0C (not used), 01 - 1C (200ff), 10 - 2C (400ff),
                               11 - 3C (600ff)
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N0RANK3_6_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N0RANK0_6_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0e40)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N0RANK0_6_FNV_DDRIO_COMP_1_REG 0x1B140E40

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* select one of the four DQ Clk */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N0RANK0_6_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N0RANK1_6_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0e44)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N0RANK1_6_FNV_DDRIO_COMP_1_REG 0x1B140E44

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* Select one of the four DQ clks */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N0RANK1_6_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N0RANK2_6_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0e48)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N0RANK2_6_FNV_DDRIO_COMP_1_REG 0x1B140E48

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* Select one of the four DQ clks */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N0RANK2_6_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N0RANK3_6_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0e4c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N0RANK3_6_FNV_DDRIO_COMP_1_REG 0x1B140E4C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* Select one of the four DQ clk */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N0RANK3_6_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN0RANK0_6_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0e80)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN0RANK0_6_FNV_DDRIO_COMP_1_REG 0x1B140E80

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               selects which skewed DQSP (to sample even bits)
                               is used in the RX FIFO. For proper operation,
                               always pick latest DQSP
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               selects which skewed DQSN (to sample odd bits)
                               is used in the RX FIFO. For proper operation,
                               always pick latest DQSN
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN0RANK0_6_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN0RANK1_6_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0e84)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN0RANK1_6_FNV_DDRIO_COMP_1_REG 0x1B140E84

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               [0]=0 selects the raw output from the nibble DQS
                               amplifier; [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN0RANK1_6_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN0RANK2_6_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0e88)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN0RANK2_6_FNV_DDRIO_COMP_1_REG 0x1B140E88

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               [0]=0 selects the raw output from the nibble DQS
                               amplifier; [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN0RANK2_6_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN0RANK3_6_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0e8c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN0RANK3_6_FNV_DDRIO_COMP_1_REG 0x1B140E8C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               [0]=0 selects the raw output from the nibble DQS
                               amplifier; [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN0RANK3_6_FNV_DDRIO_COMP_1_STRUCT;

/* RXVREFCTRLN0_6_FNV_DDRIO_COMP_1_REG supported on:                            */
/*      BWV (0x402b0ea4)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* RxVrefCtrl. Broadcast read not supported.
*/


#define RXVREFCTRLN0_6_FNV_DDRIO_COMP_1_REG 0x1B140EA4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 vrefperbit0 : 7;

                            /* Bits[6:0], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben0 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 vrefperbit1 : 7;

                            /* Bits[14:8], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben1 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /*
                               enables fine grain Vref control, shift down the
                               Vref voltage by ~0.5 stepsize
                            */
    UINT32 vrefperbit2 : 7;

                            /* Bits[22:16], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben2 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /*
                               enables fine grain Vref control, shift down the
                               Vref voltage by ~0.5 stepsize
                            */
    UINT32 vrefperbit3 : 7;

                            /* Bits[30:24], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben3 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* shift down the Vref voltage by ~0.5 stepsize */

  } Bits;
  UINT32 Data;

} RXVREFCTRLN0_6_FNV_DDRIO_COMP_1_STRUCT;

/* DATATRAINFEEDBACKN0_6_FNV_DDRIO_COMP_1_REG supported on:                     */
/*      BWV (0x402b0ea8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Training Feedback Results. Broadcast read not supported.
*/


#define DATATRAINFEEDBACKN0_6_FNV_DDRIO_COMP_1_REG 0x1B140EA8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 datatrainfeedback : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Data Training Feedback Storage[br] [br]
                               DataTrainFeedback Description:[br] Training Step
                               Bits Nibble Description[br] -------------- ----
                               ------- --------------------------[br] Cross
                               Over Cal 0 0 Tx Dqs Phase Detection[br] Cross
                               Over Cal 1 0 Tx Dq Phase Detection[br] Cross
                               Over Cal 2 0 Rec En Phase Detection[br] RcvEn
                               8:0 0 Byte detection[br] [br] Wr Leveling 8:0 0
                               Byte detection[br] Senseamp offset 3:0 0 Dq
                               Senseamp offset Detection
                            */
    UINT32 rsvd_9 : 23;

                            /* Bits[31:9], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATATRAINFEEDBACKN0_6_FNV_DDRIO_COMP_1_STRUCT;

/* DDRCRFSMCALN0_6_FNV_DDRIO_COMP_1_REG supported on:                           */
/*      BWV (0x402b0ec8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Fsm for  Voc and Xover caliberation, Voc caliberation is a procedure that cancel out intrinsic offset in analogue receivers and Xover training ,it aligns all the local dll to the global qclk
*/


#define DDRCRFSMCALN0_6_FNV_DDRIO_COMP_1_REG 0x1B140EC8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0fsm : 5;

                            /* Bits[4:0], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of first receiver is done(read only)
                            */
    UINT32 saoffset1fsm : 5;

                            /* Bits[9:5], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of second receiver is done(read only)
                            */
    UINT32 saoffset2fsm : 5;

                            /* Bits[14:10], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of third receiver is done(read only)
                            */
    UINT32 saoffset3fsm : 5;

                            /* Bits[19:15], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of fourth receiver is done(read only)
                            */
    UINT32 fsmcalcomplete : 1;

                            /* Bits[20:20], Access Type=ROV, default=0x00000000*/

                            /* when the caliberation is done */
    UINT32 refpiclkdelayfsm : 6;

                            /* Bits[26:21], Access Type=ROV, default=0x00000000*/

                            /*
                               Load FSM with a code at which , the transition
                               is detected.
                            */
    UINT32 fsmcaldone : 1;

                            /* Bits[27:27], Access Type=ROV, default=0x00000000*/

                            /* when the caliberation of voc or x-over is done */
    UINT32 fsmtimersel : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /* Timer is set for either 8 cycles or 16 cycles */
    UINT32 fsmpatternsel : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               It selects whther the pattern of three bit or
                               two bit is selected when the transition happen
                               from 1-->0 for pdout and receiver , to avoid
                               glitch
                            */
    UINT32 fsmvoccal : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               This bit tells , wether the xover or voc
                               caliberation will be done, if its zero x-over
                               caliberation is done and vice-versa
                            */
    UINT32 fsmcalen : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* FsmCalEn starts the voc-Xover Fsm */

  } Bits;
  UINT32 Data;

} DDRCRFSMCALN0_6_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL4N0_6_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b0ecc)                                                        */
/* Register default value on BWV: 0x801F0000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* static configurations of tx and rx. Broadcast read not supported.
*/


#define DATACONTROL4N0_6_FNV_DDRIO_COMP_1_REG 0x1B140ECC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd_0 : 1;

                            /* Bits[0:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vsshiorvrefctl1 : 8;

                            /* Bits[8:1], Access Type=RW, default=0x00000000*/

                            /*
                               VssHi control bits[br] Field Description: [br]
                               [br] Field Bits Description[br] ------- ----
                               ---------------------------------[br]
                               disoverflow 24 Disable overflow logic from
                               BDW[br] fast panic enable 25 Bypass 2 flops in
                               panic path for faster panic response[br]
                               vsshivccd2by3cfgen 26 Forces the driver DAC to
                               get supply from 2/3 vccd[br] vsshivccd2by3cfg
                               27:29 Current trim setting for 2/3 vccd mode,
                               001 fast, 011 typical, 111 slow silicon [br]
                               ddrvssh2ndcompen 30 Enable second comparator
                               (ZBB mode)[br] comp high bwen 31 Improve
                               comparator performance to support low digital
                               voltage range
                            */
    UINT32 dqtxeqsel : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* DQ TxEq setting selection to achieve constant EQ */
    UINT32 rsvd_10 : 2;

                            /* Bits[11:10], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vrefpwrsave : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               If set to 0 (default), Vref generators selected
                               through RxVrefSel[3:0] are always on.[br] If set
                               to 1, Vref generators are switched off while in
                               Self Refresh.
                            */
    UINT32 vreftonblbus : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000008*/

                            /* Per-bit Enable connection to share Vref Bus */
    UINT32 rxvrefsel : 4;

                            /* Bits[20:17], Access Type=RW, default=0x0000000F*/

                            /* Per Bit Verf generator Enable */
    UINT32 refpiclkdelay : 6;

                            /* Bits[26:21], Access Type=RW, default=0x00000000*/

                            /* RefPiClkDelay */
    UINT32 fnvcrsdlbypassen : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /* FNV Slave Delay Line Bypass Enable */
    UINT32 fnvcrdllbypassen : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /* FNV DLL Bypass Enable */
    UINT32 fnvcrvisaen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               FNV Visa Fub Enable - data fub used for VISA if
                               asserted
                            */
    UINT32 writecrcenable : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /* Enable write crc mode */
    UINT32 rsvd_31 : 1;

                            /* Bits[31:31], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL4N0_6_FNV_DDRIO_COMP_1_STRUCT;

/* COMPDATA0N0_6_FNV_DDRIO_COMP_1_REG supported on:                             */
/*      BWV (0x402b0ed4)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Comp Values. Broadcast read not supported.
*/


#define COMPDATA0N0_6_FNV_DDRIO_COMP_1_REG 0x1B140ED4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcompdrvup : 6;

                            /* Bits[5:0], Access Type=RWV, default=0x00000000*/

                            /*
                               Data Rcomp DrvUp Comp Value can be overriden via
                               message channel if periodical retrain is disable
                            */
    UINT32 spare0 : 3;

                            /* Bits[8:6], Access Type=RWV, default=0x00000000*/

                            /* Spare */
    UINT32 rcompdrvdown : 6;

                            /* Bits[14:9], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp DrvDown Comp Value */
    UINT32 vtcomp : 5;

                            /* Bits[19:15], Access Type=RWV, default=0x00000000*/

                            /* VT Comp Values */
    UINT32 tcocomp : 7;

                            /* Bits[26:20], Access Type=RWV, default=0x00000000*/

                            /* Data TCO Comp Value. */
    UINT32 slewratecomp : 5;

                            /* Bits[31:27], Access Type=RWV, default=0x00000000*/

                            /* Data Slew Rate Comp Value. */

  } Bits;
  UINT32 Data;

} COMPDATA0N0_6_FNV_DDRIO_COMP_1_STRUCT;

/* COMPDATA1N0_6_FNV_DDRIO_COMP_1_REG supported on:                             */
/*      BWV (0x402b0ed8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Comp Values. Broadcast read not supported.
*/


#define COMPDATA1N0_6_FNV_DDRIO_COMP_1_REG 0x1B140ED8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcompodtup : 6;

                            /* Bits[5:0], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp OdtUp Comp Value */
    UINT32 rcompodtdown : 6;

                            /* Bits[11:6], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp Odt-Down Comp Value */
    UINT32 panicdrvdn : 10;

                            /* Bits[21:12], Access Type=RWV, default=0x00000000*/

                            /* Panic DrvDn RComp Value. */
    UINT32 panicdrvup : 10;

                            /* Bits[31:22], Access Type=RWV, default=0x00000000*/

                            /* Panic DrvUp RComp Comp Value. */

  } Bits;
  UINT32 Data;

} COMPDATA1N0_6_FNV_DDRIO_COMP_1_STRUCT;

/* DATAOFFSETTRAINN0_6_FNV_DDRIO_COMP_1_REG supported on:                       */
/*      BWV (0x402b0edc)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATAOFFSETTRAINN0_6_FNV_DDRIO_COMP_1_REG 0x1B140EDC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvenoffset : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained RxRcvEn Value. */
    UINT32 rxdqsoffset : 7;

                            /* Bits[12:6], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained Rx DQS Value. */
    UINT32 txdqoffset : 6;

                            /* Bits[18:13], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained Tx DQ Value. */
    UINT32 txdqsoffset : 6;

                            /* Bits[24:19], Access Type=RW, default=0x00000000*/

                            /* Ooffset added to Trained Tx DQS Value. */
    UINT32 vrefoffset : 7;

                            /* Bits[31:25], Access Type=RW, default=0x00000000*/

                            /*
                               2s Compliment offset added to Trained Vref
                               Value. Positive number increases Vref, and each
                               step is Vdd/384.
                            */

  } Bits;
  UINT32 Data;

} DATAOFFSETTRAINN0_6_FNV_DDRIO_COMP_1_STRUCT;


/* DATACONTROL0N0_6_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b0ee8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL0N0_6_FNV_DDRIO_COMP_1_REG 0x1B140EE8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rxtrainingmode : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enables Read DqDqs Training Mode */
    UINT32 wltrainingmode : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /* Enables Write Leveling Training Mode */
    UINT32 rltrainingmode : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /* Enables Read Leveling Training Mode. */
    UINT32 senseamptrainingmode : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Enables SenseAmp offset cancellation training
                               mode.
                            */
    UINT32 txon : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               When set, forces DQ/DQS drive enable to active.
                               Used in power measurements and IO loopback mode
                            */
    UINT32 rfon : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down Disable: Forces register file read,
                               overriding the rank power down logic.
                            */
    UINT32 rxpion : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /* Power-down Disable: Forces RxDqs PI clocks on. */
    UINT32 txpion : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down Disable: Forces TxDq and TxDqs PI
                               clocks on.
                            */
    UINT32 internalclockson : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Forces on master DLL and all PI enables ON,
                               despite both channel in SelfRefresh, etc. low
                               power states.
                            */
    UINT32 saoffsettraintxon : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* SaOffsetTrainTxon */
    UINT32 txdisable : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down: All write commands are ignored for
                               this data-byte. Used in single-channel MCI mode.
                            */
    UINT32 rxdisable : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down: All read commands are ignored for
                               this data-byte. Used in single-channel MCI mode.
                            */
    UINT32 txlong : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Sets the duration of the first transmitted DQ
                               bit of the burst. 0=1UI, 1=2UI.
                            */
    UINT32 rsvd_13 : 5;

                            /* Bits[17:13], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 driversegmentenable : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Controls which segements of the driver are
                               enabled: {0: All, 1: Only ODT}.
                            */
    UINT32 rsvd_19 : 1;

                            /* Bits[19:19], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 readrfrd : 1;

                            /* Bits[20:20], Access Type=RWV, default=0x00000000*/

                            /*
                               Self clearing command bit. When set, it will
                               download the three 32 bit lines from the RegFile
                               associated with a read command to Rank =
                               ReadRFRank
                            */
    UINT32 readrfwr : 1;

                            /* Bits[21:21], Access Type=RWV, default=0x00000000*/

                            /*
                               Self clearing command bit. When set, it will
                               download the three 32 bit lines from the RegFile
                               associated with a write command to Rank =
                               ReadRFRank
                            */
    UINT32 readrfrank : 3;

                            /* Bits[24:22], Access Type=RWV, default=0x00000000*/

                            /*
                               Specifies the rank that ReadRFRd or ReadRFWr
                               will manually download the CR values from
                            */
    UINT32 forceodton : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /* ODT is forced-on. */
    UINT32 odtsampoff : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /* ODT and Senseamp are forced-off. */
    UINT32 disableodtstatic : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /* not used */
    UINT32 ddrcrforceodton : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               force ODT to the transmitter on, regardless of
                               state of DriveEnable
                            */
    UINT32 spare : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* spare */
    UINT32 xovercal : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /* Enables Xover Calibration Training Mode */
    UINT32 longpreambleenable : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* Enables long preamble for DDR4 devices */

  } Bits;
  UINT32 Data;

} DATACONTROL0N0_6_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL1N0_6_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b0eec)                                                        */
/* Register default value on BWV: 0x0000003C                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL1N0_6_FNV_DDRIO_COMP_1_REG 0x1B140EEC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd_0 : 10;

                            /* Bits[9:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rxbiasctl : 3;

                            /* Bits[12:10], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the Current and BW of the Receiver: {0:
                               0.34Idll, 1: 0.66Idll, 2: 0.88Idll, 3: Idll, 4:
                               1.33Idll, 5: 1.66Idll[br] , 6: 2.00Idll, 7:
                               2.33Idll}
                            */
    UINT32 odtdelay : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000000*/

                            /*
                               Controls ODT turn-on delay. To turn on N tQCK
                               before RcvEn, program to RcvEn[8:6] N + 4.
                            */
    UINT32 odtduration : 3;

                            /* Bits[19:17], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the ODT ON duration from (Code,
                               Duration) = (0x0, 11 tQCK) to (0x7, 18 tQCK)
                            */
    UINT32 senseampdelay : 4;

                            /* Bits[23:20], Access Type=RW, default=0x00000000*/

                            /*
                               Controls Senseamp turn-on delay. To turn on N
                               tQCK before RcvEn, program to RcvEn[8:6] N + 4.
                            */
    UINT32 senseampduration : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the SenseAmp ON duration from (Code,
                               Duration) = (0x0, 11 tQCK) to (0x7, 18 tQCK)
                            */
    UINT32 rsvd_27 : 5;

                            /* Bits[31:27], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL1N0_6_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL2N0_6_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b0ef0)                                                        */
/* Register default value on BWV: 0x07800000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL2N0_6_FNV_DDRIO_COMP_1_REG 0x1B140EF0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rxvocselqnnnh : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Enables SenseAmp offset cancellation training
                               mode
                            */
    UINT32 forcebiason : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Force on the internal Vref and Rx bias circuit,
                               regardless of any other power downs
                            */
    UINT32 forcerxon : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Force on the RxAmp only (as opposed to
                               OdtSampOn, which turns on both ODT and the
                               amplifier).[br] Use for overclocking support
                               where we may not be able to hit the fast exit
                               latency
                            */
    UINT32 ddr4extend : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /* Enable finer vref resolution in ddr4 */
    UINT32 cttermination : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /* DDRCOMP_CR_DDRCRCOMPOVR CTTermination */
    UINT32 dfelben : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* Digital far end loopback enable */
    UINT32 dfelbtxdmuxsel : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /* Digital far end loopback TX FIFO data mux sel */
    UINT32 spare1 : 2;

                            /* Bits[12:11], Access Type=RW, default=0x00000000*/

                            /* Spare1 */
    UINT32 txddjcen : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000000*/

                            /* TxddjcEn */
    UINT32 dfeenable : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /* DfeEnable */
    UINT32 dfedlysel : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /* DfeDlySel */
    UINT32 dfecode : 4;

                            /* Bits[22:19], Access Type=RW, default=0x00000000*/

                            /*
                               DfeCode: binary code 0000 to 1000 for DFE
                               offset, mid-code code for zero offset is 0100
                            */
    UINT32 rxdqssaoffset : 5;

                            /* Bits[27:23], Access Type=RW, default=0x0000000F*/

                            /* strobe Rx Amp offset control */
    UINT32 rsvd_28 : 4;

                            /* Bits[31:28], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL2N0_6_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL3N0_6_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b0ef4)                                                        */
/* Register default value on BWV: 0x00000FCF                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* static configurations of tx and rx. Broadcast read not supported.
*/


#define DATACONTROL3N0_6_FNV_DDRIO_COMP_1_REG 0x1B140EF4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 drvstaticlegcfg : 2;

                            /* Bits[1:0], Access Type=RW, default=0x00000003*/

                            /*
                               binary default setting for static legs in DRV
                               mode[br] 0 0 0 legs (EQ disabled)[br] 0 1 3 legs
                               (EQ max 3 legs)[br] 1 0 6 legs (EQ max 6
                               legs)[br] 1 1 12 legs (EQ max 12 legs)[br] In
                               most cases, we would set this to be 11, but for
                               some configurations that require a higher [br]
                               Ron value, we need to reduce the number of
                               static legs enabled so that fast corner can hit
                               [br] the higher Ron target value.
                            */
    UINT32 odtstaticlegcfg : 2;

                            /* Bits[3:2], Access Type=RW, default=0x00000003*/

                            /*
                               binary default setting for static legs in ODT
                               mode[br] 0 0 0 legs (EQ disabled)[br] 0 1 3 legs
                               (EQ max 3 legs)[br] 1 0 6 legs (EQ max 6
                               legs)[br] 1 1 12 legs (EQ max 12 legs)[br] In
                               most cases, we would set this to be 11, but for
                               some configurations that require a higher [br]
                               Ron value, we need to reduce the number of
                               static legs enabled so that fast corner can hit
                               [br] the higher Ron target value.
                            */
    UINT32 lvlshft_holden : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               level shift hold enable[br] Holds the HV control
                               values and power down mode the level
                               shifters.[br] Apply '1' after training. Slow
                               timing - not advised for fast enabling
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 odtsegmentenable : 3;

                            /* Bits[8:6], Access Type=RW, default=0x00000007*/

                            /*
                               This will tell which segments are enabled out of
                               reset. [br] After that, a shift register will
                               determine the enabled segments
                            */
    UINT32 datasegmentenable : 3;

                            /* Bits[11:9], Access Type=RW, default=0x00000007*/

                            /*
                               This will tell which segments are enabled out of
                               reset.
                            */
    UINT32 longodtr2w : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               When set, it will extends ODT by 1 qclk on read
                               to write turnarounds. hsd 230773
                            */
    UINT32 spare1 : 8;

                            /* Bits[20:13], Access Type=RW, default=0x00000000*/

                            /* Spare1 */
    UINT32 ddrcrctlecapen : 2;

                            /* Bits[22:21], Access Type=RW, default=0x00000000*/

                            /* ctle capacitor setting */
    UINT32 ddrcrctleresen : 2;

                            /* Bits[24:23], Access Type=RW, default=0x00000000*/

                            /* ctle resistor setting */
    UINT32 pcasbiasclosedloopen : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiassel : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiasfoldedlegtrim : 2;

                            /* Bits[28:27], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiasgcncomp : 2;

                            /* Bits[30:29], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 postambleenable : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* Spare */

  } Bits;
  UINT32 Data;

} DATACONTROL3N0_6_FNV_DDRIO_COMP_1_STRUCT;

/* VSSHIORVREFCONTROLN0_6_FNV_DDRIO_COMP_1_REG supported on:                    */
/*      BWV (0x402b0ef8)                                                        */
/* Register default value on BWV: 0x004D8238                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, only. Broadcast read not supported.
*/


#define VSSHIORVREFCONTROLN0_6_FNV_DDRIO_COMP_1_REG 0x1B140EF8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 vsshiorvrefctl : 24;

                            /* Bits[23:0], Access Type=RW, default=0x004D8238*/

                            /*
                               Channel 0 fubs : VssHi adjust setting. Channel1
                               fubs: DIMM VREF adjust settings.[br] [br] VssHi
                               Field Description: [br] [br] Field Bits
                               Description[br] ------- ---- -------------------
                               ------------------------------------------------
                               ------------------------------------------------
                               --------------------------------------------[br]
                               SelCode 23 Selects the code to output: {0: Code,
                               1: TCode}[br] GainBoost 22 Enable gain boost is
                               panic mode by updating code/tcode [br]
                               PanicVoltage 21:18 Unsigned integer controlling
                               the voltage error on VssHi that will trigger the
                               panic driver. Step size of VccDDQ/192 (0 to
                               117mV)[br] CloseLoop 17 Enables the VssHi close
                               loop tracking [br] PanicEn 16 Enables the VssHi
                               Panic Driver[br] BWError 15:14 Limits the loop
                               gain (ie: difference between code and tcode) to
                               +/- 2^(SlowBWError)[br] OpenLoop 13 Operates
                               VssHi in open loop mode with the target Vref
                               code directly driving the output DAC with no
                               feedback involved[br] SampleDivider 12:10
                               Controls the loop bandwidth by dividing down the
                               input clock: {0: Qclk, 1: Qclk/2, 2: Qclk/4, 3:
                               Qclk/8, 4: Qclk/16, 5: Qclk/32, 6: Qclk/64, 7:
                               Qclk/128}[br] LoBWDivider 9:8 For the slow
                               integrator, selects the net number of samples in
                               a given direction to trip the filter. {0: 4
                               samples, 1: 16 samples, 2: 32 samples, 3: 64
                               samples}[br] HiBWDivider 7:6 For the fast
                               integrator, selects the net number of samples in
                               a given direction to trip the filter. {0: 4
                               samples, 1: 16 samples, 2: 32 samples, 3: 64
                               samples}[br] Target 5:0 Unsigned integer
                               controlling the target VssHi voltage. Step size
                               of VccDDQ/192 and starting value of
                               VccDDQ*20/192
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} VSSHIORVREFCONTROLN0_6_FNV_DDRIO_COMP_1_STRUCT;


/* RXGROUP0N1RANK0_6_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0f00)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank0. Broadcast read not supported.
*/


#define RXGROUP0N1RANK0_6_FNV_DDRIO_COMP_1_REG 0x1B140F00

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* ReadX8ModeEn */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /* common DQS_P delay control, per nibble */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /* common DQS_N delay control, per nibble */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               Rx Equalization code: {4:3} controls the cap
                               tuning 0: (not used), 1: 200ff, 2: 400ff, 3:
                               600ff, [br] controls the resistor tuning (0: 3R,
                               1: 1R, 2: 1R, 3: R/3).
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N1RANK0_6_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N1RANK1_6_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0f04)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank0. Broadcast read not supported.
*/


#define RXGROUP0N1RANK1_6_FNV_DDRIO_COMP_1_REG 0x1B140F04

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* ReadX8ModeEn */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /* common DQS_P delay control, per nibble */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /* common DQS_N delay control, per nibble */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               Rx Equalization code: {4:3} controls the cap
                               tuning 0: (not used), 1: 200ff, 2: 400ff, 3:
                               600ff, [br] controls the resistor tuning (0: 3R,
                               1: 1R, 2: 1R, 3: R/3).
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N1RANK1_6_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N1RANK2_6_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0f08)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank0.Broadcast read not supported.
*/


#define RXGROUP0N1RANK2_6_FNV_DDRIO_COMP_1_REG 0x1B140F08

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* ReadX8ModeEn */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /* common DQS_P delay control, per nibble */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /* common DQS_N delay control, per nibble */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               Rx Equalization code: {4:3} controls the cap
                               tuning 0: (not used), 1: 200ff, 2: 400ff, 3:
                               600ff, [br] controls the resistor tuning (0: 3R,
                               1: 1R, 2: 1R, 3: R/3).
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N1RANK2_6_FNV_DDRIO_COMP_1_STRUCT;

/* RXGROUP0N1RANK3_6_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0f0c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data RX training values for Rank0. Broadcast read not supported.
*/


#define RXGROUP0N1RANK3_6_FNV_DDRIO_COMP_1_REG 0x1B140F0C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvendelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               RcvEn timing control. Unsigned number from 0 to
                               8 tQCK with step size of tQCK/64
                            */
    UINT32 readx8modeen : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* ReadX8ModeEn */
    UINT32 rxdqspdelay : 7;

                            /* Bits[16:10], Access Type=RW, default=0x00000000*/

                            /* common DQS_P delay control, per nibble */
    UINT32 rxdqsndelay : 7;

                            /* Bits[23:17], Access Type=RW, default=0x00000000*/

                            /* common DQS_N delay control, per nibble */
    UINT32 rxdqdelay : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Rx DQ delay, per nibble, used in case if DQ is
                               too early than DQS
                            */
    UINT32 rxeq : 3;

                            /* Bits[29:27], Access Type=RW, default=0x00000000*/

                            /*
                               Rx Equalization code: {4:3} controls the cap
                               tuning 0: (not used), 1: 200ff, 2: 400ff, 3:
                               600ff, [br] controls the resistor tuning (0: 3R,
                               1: 1R, 2: 1R, 3: R/3).
                            */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXGROUP0N1RANK3_6_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N1RANK0_6_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0f40)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N1RANK0_6_FNV_DDRIO_COMP_1_REG 0x1B140F40

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* one of the four clocks */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N1RANK0_6_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N1RANK1_6_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0f44)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N1RANK1_6_FNV_DDRIO_COMP_1_REG 0x1B140F44

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* one of the four clocks */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N1RANK1_6_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N1RANK2_6_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0f48)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N1RANK2_6_FNV_DDRIO_COMP_1_REG 0x1B140F48

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* one of the 4 clocks */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N1RANK2_6_FNV_DDRIO_COMP_1_STRUCT;

/* TXGROUP0N1RANK3_6_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0f4c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Timing and Voltage control for writing one data byte on Rank. Broadcast read not supported.
*/


#define TXGROUP0N1RANK3_6_FNV_DDRIO_COMP_1_REG 0x1B140F4C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 txdqdelay : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQ timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqsdelay : 9;

                            /* Bits[17:9], Access Type=RW, default=0x00000000*/

                            /*
                               Write DQS timing control. Unsigned number from 0
                               to 8 tQCK with step size of tQCK/64
                            */
    UINT32 txdqpiclksel : 2;

                            /* Bits[19:18], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from PiRef to PiN for bit 1 */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 txdqsxsel : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /* xelect for crossover from Qclk to CkPi4Dqs */
    UINT32 txeq : 6;

                            /* Bits[28:23], Access Type=RW, default=0x00000000*/

                            /*
                               Write Equalization codes. 5 bit control, but
                               only 24 of them are meaningful.[br] The decoding
                               is 1-1 matched, means 0 is 0 legs enabled for
                               deemphasized, 1 is 1 leg enabled[br] for
                               deemphasized, and so on.[br] BDX-change.
                               Increased the width by 1bit for TXEQ tracking
                            */
    UINT32 x8writeen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TXGROUP0N1RANK3_6_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN1RANK0_6_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0f80)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN1RANK0_6_FNV_DDRIO_COMP_1_REG 0x1B140F80

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               x4/x8 DQS mux select[br] [0]=1 selects the raw
                               output from the nibble0 DQS amplifier in x8
                               mode; [br] [0]=0 select nibble1 amplifier output
                               in x4 mode; [br] [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN1RANK0_6_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN1RANK1_6_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0f84)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN1RANK1_6_FNV_DDRIO_COMP_1_REG 0x1B140F84

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               x4/x8 DQS mux select[br] [0]=1 selects the raw
                               output from the nibble0 DQS amplifier in x8
                               mode; [br] [0]=0 select nibble1 amplifier output
                               in x4 mode; [br] [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN1RANK1_6_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN1RANK2_6_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0f88)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN1RANK2_6_FNV_DDRIO_COMP_1_REG 0x1B140F88

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               x4/x8 DQS mux select[br] [0]=1 selects the raw
                               output from the nibble0 DQS amplifier in x8
                               mode; [br] [0]=0 select nibble1 amplifier output
                               in x4 mode; [br] [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN1RANK2_6_FNV_DDRIO_COMP_1_STRUCT;

/* RXOFFSETN1RANK3_6_FNV_DDRIO_COMP_1_REG supported on:                         */
/*      BWV (0x402b0f8c)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Read Per Lane Amplifier Voltage Offset. Broadcast read not supported.
*/


#define RXOFFSETN1RANK3_6_FNV_DDRIO_COMP_1_REG 0x1B140F8C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[0] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset1 : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[1] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset2 : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[2] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 saoffset3 : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /*
                               Amplifier voltage offset for bit[3] of the DQ
                               byte. {0: Most negative offset,... 8: 0 offset,
                               ... 63: Most postive offset}
                            */
    UINT32 rxdqspsel : 2;

                            /* Bits[21:20], Access Type=RW, default=0x00000000*/

                            /*
                               x4/x8 DQS mux select[br] [0]=1 selects the raw
                               output from the nibble0 DQS amplifier in x8
                               mode; [br] [0]=0 select nibble1 amplifier output
                               in x4 mode; [br] [1] is not used.
                            */
    UINT32 rxdqsnsel : 2;

                            /* Bits[23:22], Access Type=RW, default=0x00000000*/

                            /*
                               select the phase2 dqs clock skewed with max
                               delay to drive rxFIFO write
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} RXOFFSETN1RANK3_6_FNV_DDRIO_COMP_1_STRUCT;

/* RXVREFCTRLN1_6_FNV_DDRIO_COMP_1_REG supported on:                            */
/*      BWV (0x402b0fa4)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* RxVrefCtrl. Broadcast read not supported.
*/


#define RXVREFCTRLN1_6_FNV_DDRIO_COMP_1_REG 0x1B140FA4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 vrefperbit0 : 7;

                            /* Bits[6:0], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben0 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 vrefperbit1 : 7;

                            /* Bits[14:8], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben1 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 vrefperbit2 : 7;

                            /* Bits[22:16], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben2 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /* Rsvd */
    UINT32 vrefperbit3 : 7;

                            /* Bits[30:24], Access Type=RW, default=0x00000000*/

                            /* Per bit Rx Vref Control */
    UINT32 halflsben3 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* shift down the Vref voltage by ~0.5 stepsize */

  } Bits;
  UINT32 Data;

} RXVREFCTRLN1_6_FNV_DDRIO_COMP_1_STRUCT;

/* DATATRAINFEEDBACKN1_6_FNV_DDRIO_COMP_1_REG supported on:                     */
/*      BWV (0x402b0fa8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Training Feedback Results. Broadcast read not supported.
*/


#define DATATRAINFEEDBACKN1_6_FNV_DDRIO_COMP_1_REG 0x1B140FA8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 datatrainfeedback : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Data Training Feedback Storage [br] Training
                               Step Bits Nibble Description[br] --------------
                               ---- ------- ---------------[br] Cross Over Cal
                               0 1 Tx Dqs Phase Detection[br] Cross Over Cal 1
                               1 Tx Dq Phase Detection[br] Cross Over Cal 2 1
                               Rec En Phase Detection[br] RcvEn 8:0 1 Byte
                               detection[br] Wr Leveling 8:0 1 Byte
                               detection[br] Senseamp offset 3:0 1 Dq Senseamp
                               offset Detection
                            */
    UINT32 rsvd_9 : 23;

                            /* Bits[31:9], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATATRAINFEEDBACKN1_6_FNV_DDRIO_COMP_1_STRUCT;

/* DDRCRFSMCALN1_6_FNV_DDRIO_COMP_1_REG supported on:                           */
/*      BWV (0x402b0fc8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Fsm for  Voc and Xover caliberation, Voc caliberation is a procedure that cancel out intrinsic offset in analogue receivers and Xover training ,it aligns all the local dll to the global qclk
*/


#define DDRCRFSMCALN1_6_FNV_DDRIO_COMP_1_REG 0x1B140FC8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 saoffset0fsm : 5;

                            /* Bits[4:0], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of first receiver is done(read only)
                            */
    UINT32 saoffset1fsm : 5;

                            /* Bits[9:5], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of second receiver is done(read only)
                            */
    UINT32 saoffset2fsm : 5;

                            /* Bits[14:10], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of third receiver is done(read only)
                            */
    UINT32 saoffset3fsm : 5;

                            /* Bits[19:15], Access Type=ROV, default=0x00000000*/

                            /*
                               Loads the value from fsm to Cr when caliberation
                               of fourth receiver is done(read only)
                            */
    UINT32 fsmcalcomplete : 1;

                            /* Bits[20:20], Access Type=ROV, default=0x00000000*/

                            /* when the caliberation is done */
    UINT32 refpiclkdelayfsm : 6;

                            /* Bits[26:21], Access Type=ROV, default=0x00000000*/

                            /*
                               Load FSM with a code at which , the transition
                               is detected.
                            */
    UINT32 fsmcaldone : 1;

                            /* Bits[27:27], Access Type=ROV, default=0x00000000*/

                            /* when the caliberation of voc or x-over is done */
    UINT32 fsmtimersel : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /* Timer is set for either 8 cycles or 16 cycles */
    UINT32 fsmpatternsel : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               It selects whther the pattern of three bit or
                               two bit is selected when the transition happen
                               from 1-->0 for pdout and receiver , to avoid
                               glitch
                            */
    UINT32 fsmvoccal : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               This bit tells , wether the xover or voc
                               caliberation will be done, if its zero x-over
                               caliberation is done and vice-versa
                            */
    UINT32 fsmcalen : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* FsmCalEn starts the voc-Xover Fsm */

  } Bits;
  UINT32 Data;

} DDRCRFSMCALN1_6_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL4N1_6_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b0fcc)                                                        */
/* Register default value on BWV: 0x801F0000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* static configurations of tx and rx. Broadcast read not supported.
*/


#define DATACONTROL4N1_6_FNV_DDRIO_COMP_1_REG 0x1B140FCC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd_0 : 1;

                            /* Bits[0:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vsshiorvrefctl1 : 8;

                            /* Bits[8:1], Access Type=RW, default=0x00000000*/

                            /*
                               VssHi control bits[br] Field Description: [br]
                               [br] Field Bits Description[br] ------- ----
                               ---------------------------------[br]
                               disoverflow 24 Disable overflow logic from
                               BDW[br] fast panic enable 25 Bypass 2 flops in
                               panic path for faster panic response[br]
                               vsshivccd2by3cfgen 26 Forces the driver DAC to
                               get supply from 2/3 vccd[br] vsshivccd2by3cfg
                               27:29 Current trim setting for 2/3 vccd mode,
                               001 fast, 011 typical, 111 slow silicon [br]
                               ddrvssh2ndcompen 30 Enable second comparator
                               (ZBB mode)[br] comp high bwen 31 Improve
                               comparator performance to support low digital
                               voltage range
                            */
    UINT32 dqtxeqsel : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* DQ TxEq setting selection to achieve constant EQ */
    UINT32 rsvd_10 : 2;

                            /* Bits[11:10], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vrefpwrsave : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               If set to 0 (default), Vref generators selected
                               through RxVrefSel[3:0] are always on.[br] If set
                               to 1, Vref generators are switched off while in
                               Self Refresh.
                            */
    UINT32 vreftonblbus : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000008*/

                            /* Per-bit Enable connection to share Vref Bus */
    UINT32 rxvrefsel : 4;

                            /* Bits[20:17], Access Type=RW, default=0x0000000F*/

                            /* Per Bit Verf generator Enable */
    UINT32 refpiclkdelay : 6;

                            /* Bits[26:21], Access Type=RW, default=0x00000000*/

                            /* RefPiClkDelay */
    UINT32 fnvcrsdlbypassen : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /* FNV Slave Delay Line Bypass Enable */
    UINT32 fnvcrdllbypassen : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /* FNV DLL Bypass Enable */
    UINT32 fnvcrvisaen : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               FNV Visa Fub Enable - data fub used for VISA if
                               asserted
                            */
    UINT32 writecrcenable : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /* Enable write crc mode */
    UINT32 rsvd_31 : 1;

                            /* Bits[31:31], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL4N1_6_FNV_DDRIO_COMP_1_STRUCT;

/* COMPDATA0N1_6_FNV_DDRIO_COMP_1_REG supported on:                             */
/*      BWV (0x402b0fd4)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Comp Values. Broadcast read not supported.
*/


#define COMPDATA0N1_6_FNV_DDRIO_COMP_1_REG 0x1B140FD4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcompdrvup : 6;

                            /* Bits[5:0], Access Type=RWV, default=0x00000000*/

                            /*
                               Data Rcomp DrvUp Comp Value can be overriden via
                               message channel if periodical retrain is disable
                            */
    UINT32 spare0 : 3;

                            /* Bits[8:6], Access Type=RWV, default=0x00000000*/

                            /* Spare */
    UINT32 rcompdrvdown : 6;

                            /* Bits[14:9], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp DrvDown Comp Value */
    UINT32 vtcomp : 5;

                            /* Bits[19:15], Access Type=RWV, default=0x00000000*/

                            /* VT Comp Values */
    UINT32 tcocomp : 7;

                            /* Bits[26:20], Access Type=RWV, default=0x00000000*/

                            /* Data TCO Comp Value. */
    UINT32 slewratecomp : 5;

                            /* Bits[31:27], Access Type=RWV, default=0x00000000*/

                            /* Data Slew Rate Comp Value. */

  } Bits;
  UINT32 Data;

} COMPDATA0N1_6_FNV_DDRIO_COMP_1_STRUCT;

/* COMPDATA1N1_6_FNV_DDRIO_COMP_1_REG supported on:                             */
/*      BWV (0x402b0fd8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data Comp Values. Broadcast read not supported.
*/


#define COMPDATA1N1_6_FNV_DDRIO_COMP_1_REG 0x1B140FD8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcompodtup : 6;

                            /* Bits[5:0], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp OdtUp Comp Value */
    UINT32 rcompodtdown : 6;

                            /* Bits[11:6], Access Type=RWV, default=0x00000000*/

                            /* Data Rcomp Odt-Down Comp Value */
    UINT32 panicdrvdn : 10;

                            /* Bits[21:12], Access Type=RWV, default=0x00000000*/

                            /* Panic DrvDn RComp Value. */
    UINT32 panicdrvup : 10;

                            /* Bits[31:22], Access Type=RWV, default=0x00000000*/

                            /* Panic DrvUp RComp Comp Value. */

  } Bits;
  UINT32 Data;

} COMPDATA1N1_6_FNV_DDRIO_COMP_1_STRUCT;

/* DATAOFFSETTRAINN1_6_FNV_DDRIO_COMP_1_REG supported on:                       */
/*      BWV (0x402b0fdc)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATAOFFSETTRAINN1_6_FNV_DDRIO_COMP_1_REG 0x1B140FDC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rcvenoffset : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained RxRcvEn Value. */
    UINT32 rxdqsoffset : 7;

                            /* Bits[12:6], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained Rx DQS Value. */
    UINT32 txdqoffset : 6;

                            /* Bits[18:13], Access Type=RW, default=0x00000000*/

                            /* Offset added to Trained Tx DQ Value. */
    UINT32 txdqsoffset : 6;

                            /* Bits[24:19], Access Type=RW, default=0x00000000*/

                            /* Ooffset added to Trained Tx DQS Value. */
    UINT32 vrefoffset : 7;

                            /* Bits[31:25], Access Type=RW, default=0x00000000*/

                            /*
                               2s Compliment offset added to Trained Vref
                               Value. Positive number increases Vref, and each
                               step is Vdd/384.
                            */

  } Bits;
  UINT32 Data;

} DATAOFFSETTRAINN1_6_FNV_DDRIO_COMP_1_STRUCT;


/* DATACONTROL0N1_6_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b0fe8)                                                        */
/* Register default value on BWV: 0x00000000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL0N1_6_FNV_DDRIO_COMP_1_REG 0x1B140FE8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rxtrainingmode : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enables Read DqDqs Training Mode */
    UINT32 wltrainingmode : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /* Enables Write Leveling Training Mode */
    UINT32 rltrainingmode : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /* Enables Read Leveling Training Mode. */
    UINT32 senseamptrainingmode : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Enables SenseAmp offset cancellation training
                               mode.
                            */
    UINT32 txon : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               When set, forces DQ/DQS drive enable to active.
                               Used in power measurements and IO loopback mode
                            */
    UINT32 rfon : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down Disable: Forces register file read,
                               overriding the rank power down logic.
                            */
    UINT32 rxpion : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /* Power-down Disable: Forces RxDqs PI clocks on. */
    UINT32 txpion : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down Disable: Forces TxDq and TxDqs PI
                               clocks on.
                            */
    UINT32 internalclockson : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Forces on master DLL and all PI enables ON,
                               despite both channel in SelfRefresh, etc. low
                               power states.
                            */
    UINT32 saoffsettraintxon : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* SaOffsetTrainTxon */
    UINT32 txdisable : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down: All write commands are ignored for
                               this data-byte. Used in single-channel MCI mode.
                            */
    UINT32 rxdisable : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Power-down: All read commands are ignored for
                               this data-byte. Used in single-channel MCI mode.
                            */
    UINT32 txlong : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Sets the duration of the first transmitted DQ
                               bit of the burst. 0=1UI, 1=2UI.
                            */
    UINT32 rsvd_13 : 5;

                            /* Bits[17:13], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 driversegmentenable : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Controls which segements of the driver are
                               enabled: {0: All, 1: Only ODT}.
                            */
    UINT32 rsvd_19 : 1;

                            /* Bits[19:19], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 readrfrd : 1;

                            /* Bits[20:20], Access Type=RWV, default=0x00000000*/

                            /*
                               Self clearing command bit. When set, it will
                               download the three 32 bit lines from the RegFile
                               associated with a read command to Rank =
                               ReadRFRank
                            */
    UINT32 readrfwr : 1;

                            /* Bits[21:21], Access Type=RWV, default=0x00000000*/

                            /*
                               Self clearing command bit. When set, it will
                               download the three 32 bit lines from the RegFile
                               associated with a write command to Rank =
                               ReadRFRank
                            */
    UINT32 readrfrank : 3;

                            /* Bits[24:22], Access Type=RWV, default=0x00000000*/

                            /*
                               Specifies the rank that ReadRFRd or ReadRFWr
                               will manually download the CR values from
                            */
    UINT32 forceodton : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /* ODT is forced-on. */
    UINT32 odtsampoff : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /* ODT and Senseamp are forced-off. */
    UINT32 disableodtstatic : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /* not used */
    UINT32 ddrcrforceodton : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               force ODT to the transmitter on, regardless of
                               state of DriveEnable
                            */
    UINT32 spare : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /* spare */
    UINT32 xovercal : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /* Enables Xover Calibration Training Mode */
    UINT32 longpreambleenable : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* Enables long preamble for DDR4 devices */

  } Bits;
  UINT32 Data;

} DATACONTROL0N1_6_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL1N1_6_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b0fec)                                                        */
/* Register default value on BWV: 0x0000003C                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL1N1_6_FNV_DDRIO_COMP_1_REG 0x1B140FEC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd_0 : 10;

                            /* Bits[9:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rxbiasctl : 3;

                            /* Bits[12:10], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the Current and BW of the Receiver: {0:
                               0.34Idll, 1: 0.66Idll, 2: 0.88Idll, 3: Idll, 4:
                               1.33Idll, 5: 1.66Idll[br] , 6: 2.00Idll, 7:
                               2.33Idll}
                            */
    UINT32 odtdelay : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000000*/

                            /*
                               Controls ODT turn-on delay. To turn on N tQCK
                               before RcvEn, program to RcvEn[8:6] N + 4.
                            */
    UINT32 odtduration : 3;

                            /* Bits[19:17], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the ODT ON duration from (Code,
                               Duration) = (0x0, 11 tQCK) to (0x7, 18 tQCK)
                            */
    UINT32 senseampdelay : 4;

                            /* Bits[23:20], Access Type=RW, default=0x00000000*/

                            /*
                               Controls Senseamp turn-on delay. To turn on N
                               tQCK before RcvEn, program to RcvEn[8:6] N + 4.
                            */
    UINT32 senseampduration : 3;

                            /* Bits[26:24], Access Type=RW, default=0x00000000*/

                            /*
                               Controls the SenseAmp ON duration from (Code,
                               Duration) = (0x0, 11 tQCK) to (0x7, 18 tQCK)
                            */
    UINT32 rsvd_27 : 5;

                            /* Bits[31:27], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL1N1_6_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL2N1_6_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b0ff0)                                                        */
/* Register default value on BWV: 0x07800000                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* Data offsets to training values. Broadcast read not supported.
*/


#define DATACONTROL2N1_6_FNV_DDRIO_COMP_1_REG 0x1B140FF0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rxvocselqnnnh : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               Enables SenseAmp offset cancellation training
                               mode
                            */
    UINT32 forcebiason : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Force on the internal Vref and Rx bias circuit,
                               regardless of any other power downs
                            */
    UINT32 forcerxon : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Force on the RxAmp only (as opposed to
                               OdtSampOn, which turns on both ODT and the
                               amplifier).[br] Use for overclocking support
                               where we may not be able to hit the fast exit
                               latency
                            */
    UINT32 ddr4extend : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /* Enable finer vref resolution in ddr4 */
    UINT32 cttermination : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /* DDRCOMP_CR_DDRCRCOMPOVR CTTermination */
    UINT32 dfelben : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* Digital far end loopback enable */
    UINT32 dfelbtxdmuxsel : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /* Digital far end loopback TX FIFO data mux sel */
    UINT32 spare1 : 2;

                            /* Bits[12:11], Access Type=RW, default=0x00000000*/

                            /* Spare1 */
    UINT32 txddjcen : 4;

                            /* Bits[16:13], Access Type=RW, default=0x00000000*/

                            /* TxddjcEn */
    UINT32 dfeenable : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /* DfeEnable */
    UINT32 dfedlysel : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /* DfeDlySel */
    UINT32 dfecode : 4;

                            /* Bits[22:19], Access Type=RW, default=0x00000000*/

                            /*
                               DfeCode: binary code 0000 to 1000 for DFE
                               offset, mid-code code for zero offset is 0100
                            */
    UINT32 rxdqssaoffset : 5;

                            /* Bits[27:23], Access Type=RW, default=0x0000000F*/

                            /* strobe Rx Amp offset control */
    UINT32 rsvd_28 : 4;

                            /* Bits[31:28], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} DATACONTROL2N1_6_FNV_DDRIO_COMP_1_STRUCT;

/* DATACONTROL3N1_6_FNV_DDRIO_COMP_1_REG supported on:                          */
/*      BWV (0x402b0ff4)                                                        */
/* Register default value on BWV: 0x00000FCF                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* static configurations of tx and rx. Broadcast read not supported.
*/


#define DATACONTROL3N1_6_FNV_DDRIO_COMP_1_REG 0x1B140FF4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 drvstaticlegcfg : 2;

                            /* Bits[1:0], Access Type=RW, default=0x00000003*/

                            /*
                               binary default setting for static legs in DRV
                               mode[br] 0 0 0 legs (EQ disabled)[br] 0 1 3 legs
                               (EQ max 3 legs)[br] 1 0 6 legs (EQ max 6
                               legs)[br] 1 1 12 legs (EQ max 12 legs)[br] In
                               most cases, we would set this to be 11, but for
                               some configurations that require a higher [br]
                               Ron value, we need to reduce the number of
                               static legs enabled so that fast corner can hit
                               [br] the higher Ron target value.
                            */
    UINT32 odtstaticlegcfg : 2;

                            /* Bits[3:2], Access Type=RW, default=0x00000003*/

                            /*
                               binary default setting for static legs in ODT
                               mode[br] 0 0 0 legs (EQ disabled)[br] 0 1 3 legs
                               (EQ max 3 legs)[br] 1 0 6 legs (EQ max 6
                               legs)[br] 1 1 12 legs (EQ max 12 legs)[br] In
                               most cases, we would set this to be 11, but for
                               some configurations that require a higher [br]
                               Ron value, we need to reduce the number of
                               static legs enabled so that fast corner can hit
                               [br] the higher Ron target value.
                            */
    UINT32 lvlshft_holden : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               level shift hold enable[br] Holds the HV control
                               values and power down mode the level
                               shifters.[br] Apply '1' after training. Slow
                               timing - not advised for fast enabling
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 odtsegmentenable : 3;

                            /* Bits[8:6], Access Type=RW, default=0x00000007*/

                            /*
                               This will tell which segments are enabled out of
                               reset. [br] After that, a shift register will
                               determine the enabled segments
                            */
    UINT32 datasegmentenable : 3;

                            /* Bits[11:9], Access Type=RW, default=0x00000007*/

                            /*
                               This will tell which segments are enabled out of
                               reset.
                            */
    UINT32 longodtr2w : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               When set, it will extends ODT by 1 qclk on read
                               to write turnarounds. hsd 230773
                            */
    UINT32 spare1 : 8;

                            /* Bits[20:13], Access Type=RW, default=0x00000000*/

                            /* Spare1 */
    UINT32 ddrcrctlecapen : 2;

                            /* Bits[22:21], Access Type=RW, default=0x00000000*/

                            /* ctle capacitor setting */
    UINT32 ddrcrctleresen : 2;

                            /* Bits[24:23], Access Type=RW, default=0x00000000*/

                            /* ctle resistor setting */
    UINT32 pcasbiasclosedloopen : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiassel : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiasfoldedlegtrim : 2;

                            /* Bits[28:27], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 rxbiasgcncomp : 2;

                            /* Bits[30:29], Access Type=RW, default=0x00000000*/

                            /* RxBias CR */
    UINT32 postambleenable : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* Spare */

  } Bits;
  UINT32 Data;

} DATACONTROL3N1_6_FNV_DDRIO_COMP_1_STRUCT;

/* VSSHIORVREFCONTROLN1_6_FNV_DDRIO_COMP_1_REG supported on:                    */
/*      BWV (0x402b0ff8)                                                        */
/* Register default value on BWV: 0x004D8238                                    */
/* BWV Register File:    2_22_0_BWV                                             */
/* Struct generated from BWV BDF: 2_22_0                                        */
/* BWV Security PolicyGroup:                                                    */
/* VssHi Controls on Channel 0 only. DIMM Vref Controls on  Channel1, databyte 7, only. Broadcast read not supported.
*/


#define VSSHIORVREFCONTROLN1_6_FNV_DDRIO_COMP_1_REG 0x1B140FF8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 vsshiorvrefctl : 24;

                            /* Bits[23:0], Access Type=RW, default=0x004D8238*/

                            /*
                               Channel 0 fubs : VssHi adjust setting. Channel1
                               fubs: DIMM VREF adjust settings.[br] [br] VssHi
                               Field Description: [br] [br] Field Bits
                               Description[br] ------- ---- -------------------
                               ------------------------------------------------
                               ------------------------------------------------
                               --------------------------------------------[br]
                               SelCode 23 Selects the code to output: {0: Code,
                               1: TCode}[br] GainBoost 22 Enable gain boost is
                               panic mode by updating code/tcode [br]
                               PanicVoltage 21:18 Unsigned integer controlling
                               the voltage error on VssHi that will trigger the
                               panic driver. Step size of VccDDQ/192 (0 to
                               117mV)[br] CloseLoop 17 Enables the VssHi close
                               loop tracking [br] PanicEn 16 Enables the VssHi
                               Panic Driver[br] BWError 15:14 Limits the loop
                               gain (ie: difference between code and tcode) to
                               +/- 2^(SlowBWError)[br] OpenLoop 13 Operates
                               VssHi in open loop mode with the target Vref
                               code directly driving the output DAC with no
                               feedback involved[br] SampleDivider 12:10
                               Controls the loop bandwidth by dividing down the
                               input clock: {0: Qclk, 1: Qclk/2, 2: Qclk/4, 3:
                               Qclk/8, 4: Qclk/16, 5: Qclk/32, 6: Qclk/64, 7:
                               Qclk/128}[br] LoBWDivider 9:8 For the slow
                               integrator, selects the net number of samples in
                               a given direction to trip the filter. {0: 4
                               samples, 1: 16 samples, 2: 32 samples, 3: 64
                               samples}[br] HiBWDivider 7:6 For the fast
                               integrator, selects the net number of samples in
                               a given direction to trip the filter. {0: 4
                               samples, 1: 16 samples, 2: 32 samples, 3: 64
                               samples}[br] Target 5:0 Unsigned integer
                               controlling the target VssHi voltage. Step size
                               of VccDDQ/192 and starting value of
                               VccDDQ*20/192
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} VSSHIORVREFCONTROLN1_6_FNV_DDRIO_COMP_1_STRUCT;

#endif /* _FNV_DDRIO_COMP_1_h */
