/** @file
  This file contains the  HWP SSDT Table ASL code.

  @copyright
  INTEL CONFIDENTIAL
  Copyright 2012 - 2019 Intel Corporation. <BR>

  The source code contained or described herein and all documents related to the
  source code ("Material") are owned by Intel Corporation or its suppliers or
  licensors. Title to the Material remains with Intel Corporation or its suppliers
  and licensors. The Material may contain trade secrets and proprietary    and
  confidential information of Intel Corporation and its suppliers and licensors,
  and is protected by worldwide copyright and trade secret laws and treaty
  provisions. No part of the Material may be used, copied, reproduced, modified,
  published, uploaded, posted, transmitted, distributed, or disclosed in any way
  without Intel's prior express written permission.

  No license under any patent, copyright, trade secret or other intellectual
  property right is granted to or conferred upon you by disclosure or delivery
  of the Materials, either expressly, by implication, inducement, estoppel or
  otherwise. Any license under such intellectual property rights must be
  express and approved by Intel in writing.

  Unless otherwise agreed by Intel in writing, you may not remove or alter
  this notice or any other notice embedded in Materials by Intel or
  Intel's suppliers or licensors in any way.
**/

  External (HWEN, FieldUnitObj) //HWPM

// _CPC (Continuous Performance Control)
//  _CPC is a per-processor ACPI object that declares an interface for OSPM to 
//  transition the processor into a performance state based on a continuous range 
//  of allowable values.  Each CPPC register is described in a Generic Register
//  Descriptor format and maps to an unique PCC shared memory location.

//  For a complete description of _CPC object, refer to ACPI 5.1
//  specification, section 8.4.5.1.
// Arguments: (0)
//  None
// Return Value:
//  A Package of elements in the following format
//
//  Package
//  {
//    NumEntries,                                             // Integer
//    Revision,                                               // Integer
//    HighestPerformance,                                     // Integer or Buffer (Resource Descriptor)
//    NominalPerformance,                                     // Integer or Buffer (Resource Descriptor)
//    LowestNonlinearPerformance,                             // Integer or Buffer (Resource Descriptor)
//    LowestPerformance,                                      // Integer or Buffer (Resource Descriptor)
//    GuaranteedPerformanceRegister,                          // Buffer (Resource Descriptor)
//    DesiredPerformanceRegister,                             // Buffer (Resource Descriptor)
//    MinimumPerformanceRegister,                             // Buffer (Resource Descriptor)
//    MaximumPerformanceRegister,                             // Buffer (Resource Descriptor)
//    PerformanceReductionToleranceRegister,                  // Buffer (Resource Descriptor)
//    TimeWindowRegister,                                     // Buffer (Resource Descriptor)
//    CounterWraparoundTime,                                  // Integer or Buffer (Resource Descriptor)
//    ReferencePerformanceCounterRegister,                    // Buffer (Resource Descriptor)
//    DeliveredPerformanceCounterRegister,                    // Buffer (Resource Descriptor)
//    PerformanceLimitedRegister,                             // Buffer (Resource Descriptor)
//    CPPCEnableRegister                                      // Buffer (Resource Descriptor)
//    AutonomousSelectionEnable,                              // Integer or Buffer (Resource Descriptor)
//    AutonomousActivityWindowRegister,                       // Buffer (Resource Descriptor)
//    EnergyPerformancePreferenceRegister,                    // Buffer (Resource Descriptor)
//    ReferencePerformance,                                   // Integer or Buffer (Resource Descriptor)
//    LowestFrequency,                                        // Integer or Buffer (Resource Descriptor)
//    NominalFrequency                                        // Integer or Buffer (Resource Descriptor)
//  }
Name(CPCP, Package()
{
  //
  // Describe processor capabilities
  //
  23,                                                         // Number of entries
  3,                                                          // Revision
  ResourceTemplate() {Register(FFixedHW, 8, 0,  0x771, 4)},   // HighestPerformance 
  ResourceTemplate() {Register(FFixedHW, 8, 8,  0x0CE, 4)},   // NominalPerformance 
  ResourceTemplate() {Register(FFixedHW, 8, 16, 0x771, 4)},   // LowestNonlinearPerformance 
  ResourceTemplate() {Register(FFixedHW, 8, 24, 0x771, 4)},   // LowestPerformance 
  ResourceTemplate() {Register(FFixedHW, 8, 8,  0x771, 4)},   // GuaranteedPerformanceRegister 
  ResourceTemplate() {Register(FFixedHW, 8, 16, 0x774, 4)},   // DesiredPerformanceRegister 
  ResourceTemplate() {Register(FFixedHW, 8, 0,  0x774, 4)},   // MinimumPerformanceRegister 
  ResourceTemplate() {Register(FFixedHW, 8, 8,  0x774, 4)},   // MaximumPerformanceRegister 
  ResourceTemplate() {Register(SystemMemory, 0, 0, 0, 0)},    // PerformanceReductionToleranceRegister 
  ResourceTemplate() {Register(SystemMemory, 0, 0, 0, 0)},    // TimeWindowRegister 
  ResourceTemplate() {Register(SystemMemory, 0, 0, 0, 0)},    // CounterWraparoundTime 
  ResourceTemplate() {Register(FFixedHW, 64, 0, 0xE7, 4)},    // ReferencePerformanceCounterRegister 
  ResourceTemplate() {Register(FFixedHW, 64, 0, 0xE8, 4)},    // DeliveredPerformanceCounterRegister 
  ResourceTemplate() {Register(FFixedHW, 1, 2, 0x777, 4)},    // PerformanceLimitedRegister 
  ResourceTemplate() {Register(FFixedHW, 1, 0, 0x770, 4)},    // CPPCEnableRegister 
  1,                                                          // AutonomousSelectionEnable 
  ResourceTemplate() {Register(FFixedHW, 10, 32, 0x774, 4)},  // AutonomousActivityWindowRegister 
  ResourceTemplate() {Register(FFixedHW, 8, 24, 0x774, 4)},   // EnergyPerformancePreferenceRegister 
  ResourceTemplate() {Register(SystemMemory, 0, 0, 0, 0)},    // ReferencePerformance
  ResourceTemplate() {Register(SystemMemory, 0, 0, 0, 0)},    // LowestFrequency
  ResourceTemplate() {Register(SystemMemory, 0, 0, 0, 0)}     // NominalFrequency
})

Name (ZCPC, Package() {     // CPC package entries for HWPM interface when disabled in BIOS setup
  3,//length of the package excluding this entry length
  1,
  ResourceTemplate(){Register(SystemMemory, 0, 0, 0, 0)}
})

Method(_CPC,0)
{
  If(LOr(LEqual(HWEN,1), LEqual(HWEN,3))) //enabled in setup CPC-Native
  {
    Return(CPCP)  // Return native CPCP table
  }
  Return(ZCPC)
}

