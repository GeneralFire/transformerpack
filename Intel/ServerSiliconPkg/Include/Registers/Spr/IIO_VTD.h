
/** @file
  IIO_VTD.h

  @copyright
  INTEL CONFIDENTIAL
  Copyright 2007 - 2020 Intel Corporation. <BR>
  
  The source code contained or described herein and all documents related to the
  source code ("Material") are owned by Intel Corporation or its suppliers or
  licensors. Title to the Material remains with Intel Corporation or its suppliers
  and licensors. The Material may contain trade secrets and proprietary    and
  confidential information of Intel Corporation and its suppliers and licensors,
  and is protected by worldwide copyright and trade secret laws and treaty
  provisions. No part of the Material may be used, copied, reproduced, modified,
  published, uploaded, posted, transmitted, distributed, or disclosed in any way
  without Intel's prior express written permission.
  
  No license under any patent, copyright, trade secret or other intellectual
  property right is granted to or conferred upon you by disclosure or delivery
  of the Materials, either expressly, by implication, inducement, estoppel or
  otherwise. Any license under such intellectual property rights must be
  express and approved by Intel in writing.
  
  Unless otherwise agreed by Intel in writing, you may not remove or alter
  this notice or any other notice embedded in Materials by Intel or
  Intel's suppliers or licensors in any way.
  
  This file contains Silicon register definitions.
  
  This is a generated file; please do not modify it directly.
  
**/

/* The following security policy groups are used by registers in this file:     */

/* SPRA0 Security Policy Groups:                                                */
/* BIOS_W                                                                       */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | HOSTIA_BOOT_SAI  */
/*    | OOB_MSM_SAI                                                             */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* DFX                                                                          */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IMR0                                                                         */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IMR1                                                                         */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IMR2                                                                         */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IMR3                                                                         */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IMR4                                                                         */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IMRGLOBAL_BM                                                                 */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IOMMU_BYPASS                                                                 */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* LB_MCHECK_W                                                                  */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | HOSTIA_BOOT_SAI  */
/*    | HOSTIA_SMM_SAI | OOB_MSM_SAI                                            */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* LB_W                                                                         */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | HOSTIA_BOOT_SAI  */
/*    | HOSTIA_SMM_SAI | OOB_MSM_SAI                                            */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* OS_W                                                                         */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | PM_PCS_SAI |                       */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI |                  */
/*    DFX_UNTRUSTED_SAI | OOB_MSM_SAI | DFX_THIRDPARTY_SAI                      */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* P_U_CODE                                                                     */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | UNCORE_PMA_SAI | */
/*    OOB_MSM_SAI                                                               */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI                    */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* TSEG                                                                         */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */

/* SPRB0 Security Policy Groups:                                                */
/* BIOS_W                                                                       */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | HOSTIA_BOOT_SAI  */
/*    | OOB_MSM_SAI                                                             */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* DFX                                                                          */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IMR0                                                                         */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IMR1                                                                         */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IMR2                                                                         */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IMR3                                                                         */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IMR4                                                                         */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IMRGLOBAL_BM                                                                 */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IOMMU_BYPASS                                                                 */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* LB_MCHECK_W                                                                  */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | HOSTIA_BOOT_SAI  */
/*    | HOSTIA_SMM_SAI | OOB_MSM_SAI                                            */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* LB_W                                                                         */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | HOSTIA_BOOT_SAI  */
/*    | HOSTIA_SMM_SAI | OOB_MSM_SAI                                            */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* OS_W                                                                         */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | PM_PCS_SAI |                       */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI |                  */
/*    DFX_UNTRUSTED_SAI | OOB_MSM_SAI | DFX_THIRDPARTY_SAI                      */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* P_U_CODE                                                                     */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | UNCORE_PMA_SAI | */
/*    OOB_MSM_SAI                                                               */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI                    */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* TSEG                                                                         */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */

/* SPRHBM Security Policy Groups:                                               */
/* BIOS_W                                                                       */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | HOSTIA_BOOT_SAI  */
/*    | OOB_MSM_SAI                                                             */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* DFX                                                                          */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IMR0                                                                         */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IMR1                                                                         */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IMR2                                                                         */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IMR3                                                                         */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IMR4                                                                         */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IMRGLOBAL_BM                                                                 */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IOMMU_BYPASS                                                                 */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* LB_MCHECK_W                                                                  */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | HOSTIA_BOOT_SAI  */
/*    | HOSTIA_SMM_SAI | OOB_MSM_SAI                                            */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* LB_W                                                                         */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | HOSTIA_BOOT_SAI  */
/*    | HOSTIA_SMM_SAI | OOB_MSM_SAI                                            */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* OS_W                                                                         */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | PM_PCS_SAI |                       */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI |                  */
/*    DFX_UNTRUSTED_SAI | OOB_MSM_SAI | DFX_THIRDPARTY_SAI                      */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* P_U_CODE                                                                     */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | UNCORE_PMA_SAI | */
/*    OOB_MSM_SAI                                                               */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI                    */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* TSEG                                                                         */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */

/* SPRC0 Security Policy Groups:                                                */
/* BIOS_W                                                                       */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | HOSTIA_BOOT_SAI  */
/*    | OOB_MSM_SAI                                                             */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* DFX                                                                          */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IMR0                                                                         */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IMR1                                                                         */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IMR2                                                                         */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IMR3                                                                         */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IMR4                                                                         */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IMRGLOBAL_BM                                                                 */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IOMMU_BYPASS                                                                 */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* LB_MCHECK_W                                                                  */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | HOSTIA_BOOT_SAI  */
/*    | HOSTIA_SMM_SAI | OOB_MSM_SAI                                            */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* LB_W                                                                         */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | HOSTIA_BOOT_SAI  */
/*    | HOSTIA_SMM_SAI | OOB_MSM_SAI                                            */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* OS_W                                                                         */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | PM_PCS_SAI |                       */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI |                  */
/*    DFX_UNTRUSTED_SAI | OOB_MSM_SAI | DFX_THIRDPARTY_SAI                      */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* P_U_CODE                                                                     */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | UNCORE_PMA_SAI | */
/*    OOB_MSM_SAI                                                               */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI                    */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* TSEG                                                                         */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */

/* SPRMCC Security Policy Groups:                                               */
/* BIOS_W                                                                       */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | HOSTIA_BOOT_SAI  */
/*    | OOB_MSM_SAI                                                             */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* DFX                                                                          */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IMR0                                                                         */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IMR1                                                                         */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IMR2                                                                         */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IMR3                                                                         */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IMR4                                                                         */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IMRGLOBAL_BM                                                                 */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IOMMU_BYPASS                                                                 */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* LB_MCHECK_W                                                                  */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | HOSTIA_BOOT_SAI  */
/*    | HOSTIA_SMM_SAI | OOB_MSM_SAI                                            */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* LB_W                                                                         */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | HOSTIA_BOOT_SAI  */
/*    | HOSTIA_SMM_SAI | OOB_MSM_SAI                                            */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* OS_W                                                                         */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | PM_PCS_SAI |                       */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI |                  */
/*    DFX_UNTRUSTED_SAI | OOB_MSM_SAI | DFX_THIRDPARTY_SAI                      */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* P_U_CODE                                                                     */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | UNCORE_PMA_SAI | */
/*    OOB_MSM_SAI                                                               */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI                    */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* TSEG                                                                         */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */

/* SPRUCC Security Policy Groups:                                               */
/* BIOS_W                                                                       */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | HOSTIA_BOOT_SAI  */
/*    | OOB_MSM_SAI                                                             */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* DFX                                                                          */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IMR0                                                                         */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IMR1                                                                         */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IMR2                                                                         */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IMR3                                                                         */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IMR4                                                                         */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IMRGLOBAL_BM                                                                 */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* IOMMU_BYPASS                                                                 */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* LB_MCHECK_W                                                                  */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | HOSTIA_BOOT_SAI  */
/*    | HOSTIA_SMM_SAI | OOB_MSM_SAI                                            */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* LB_W                                                                         */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | HOSTIA_BOOT_SAI  */
/*    | HOSTIA_SMM_SAI | OOB_MSM_SAI                                            */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* OS_W                                                                         */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | PM_PCS_SAI |                       */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI |                  */
/*    DFX_UNTRUSTED_SAI | OOB_MSM_SAI | DFX_THIRDPARTY_SAI                      */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* P_U_CODE                                                                     */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | UNCORE_PMA_SAI | */
/*    OOB_MSM_SAI                                                               */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI                    */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* TSEG                                                                         */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */


#ifndef _IIO_VTD_h
#define _IIO_VTD_h
#include <Base.h>

/* VID_IIO_VTD_REG supported on:                                                */
/*      SPRA0 (0x10800000)                                                      */
/*      SPRB0 (0x10800000)                                                      */
/*      SPRHBM (0x10800000)                                                     */
/*      SPRC0 (0x10800000)                                                      */
/*      SPRMCC (0x10800000)                                                     */
/*      SPRUCC (0x10800000)                                                     */
/* Register default value on SPRA0: 0x00008086                                  */
/* Register default value on SPRB0: 0x00008086                                  */
/* Register default value on SPRHBM: 0x00008086                                 */
/* Register default value on SPRC0: 0x00008086                                  */
/* Register default value on SPRMCC: 0x00008086                                 */
/* Register default value on SPRUCC: 0x00008086                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Vendor ID
*/


#define VID_IIO_VTD_REG 0x11010000

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 vendor_identification_number : 16;

                            /* Bits[15:0], Access Type=RO, default=0x00008086*/

                            /* The value is assigned by PCI-SIG to Intel. */

  } Bits;
  UINT16 Data;

} VID_IIO_VTD_STRUCT;

/* DID_IIO_VTD_REG supported on:                                                */
/*      SPRA0 (0x10800002)                                                      */
/*      SPRB0 (0x10800002)                                                      */
/*      SPRHBM (0x10800002)                                                     */
/*      SPRC0 (0x10800002)                                                      */
/*      SPRMCC (0x10800002)                                                     */
/*      SPRUCC (0x10800002)                                                     */
/* Register default value on SPRA0: 0x000009A2                                  */
/* Register default value on SPRB0: 0x000009A2                                  */
/* Register default value on SPRHBM: 0x000009A2                                 */
/* Register default value on SPRC0: 0x000009A2                                  */
/* Register default value on SPRMCC: 0x000009A2                                 */
/* Register default value on SPRUCC: 0x000009A2                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Device ID
*/


#define DID_IIO_VTD_REG 0x11010002

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 device_identification_number : 16;

                            /* Bits[15:0], Access Type=RO, default=0x000009A2*/

                            /*
                               The DID value for MMAP/VTd function for the
                               MS2IOSF
                            */

  } Bits;
  UINT16 Data;

} DID_IIO_VTD_STRUCT;

/* PCICMD_IIO_VTD_REG supported on:                                             */
/*      SPRA0 (0x10800004)                                                      */
/*      SPRB0 (0x10800004)                                                      */
/*      SPRHBM (0x10800004)                                                     */
/*      SPRC0 (0x10800004)                                                      */
/*      SPRMCC (0x10800004)                                                     */
/*      SPRUCC (0x10800004)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* PCI Command
*/


#define PCICMD_IIO_VTD_REG 0x11010004

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 iose : 1;

                            /* Bits[0:0], Access Type=RO, default=0x00000000*/

                            /*
                               Hardwired to 0 since these devices don't decode
                               any IO BARs
                            */
    UINT16 mse : 1;

                            /* Bits[1:1], Access Type=RO, default=0x00000000*/

                            /*
                               Hardwired to 0 since these devices don't decode
                               any memory BARs
                            */
    UINT16 bme : 1;

                            /* Bits[2:2], Access Type=RO, default=0x00000000*/

                            /*
                               Hardwired to 0 since these devices don't
                               generate any transactions
                            */
    UINT16 sce : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000000*/

                            /*
                               Not applicable to internal devices. Hardwired to
                               0.
                            */
    UINT16 mwie : 1;

                            /* Bits[4:4], Access Type=RO, default=0x00000000*/

                            /*
                               Not applicable to internal devices. Hardwired to
                               0.
                            */
    UINT16 vga_palette_snoop_enable : 1;

                            /* Bits[5:5], Access Type=RO, default=0x00000000*/

                            /*
                               Not applicable to internal devices. Hardwired to
                               0.
                            */
    UINT16 perre : 1;

                            /* Bits[6:6], Access Type=RO, default=0x00000000*/

                            /*
                               This bit has no impact on error reporting from
                               these devices
                            */
    UINT16 idsel_stepping_wait_cycle_control : 1;

                            /* Bits[7:7], Access Type=RO, default=0x00000000*/

                            /*
                               Not applicable to internal devices. Hardwired to
                               0.
                            */
    UINT16 serre : 1;

                            /* Bits[8:8], Access Type=RO, default=0x00000000*/

                            /*
                               This bit has no impact on error reporting from
                               these devices
                            */
    UINT16 fast_back_to_back_enable : 1;

                            /* Bits[9:9], Access Type=RO, default=0x00000000*/

                            /*
                               Not applicable to PCI Express and is hardwired
                               to 0
                            */
    UINT16 interrupt_disable : 1;

                            /* Bits[10:10], Access Type=RO, default=0x00000000*/

                            /* N/A for these devices */
    UINT16 rsvd : 5;

                            /* Bits[15:11], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT16 Data;

} PCICMD_IIO_VTD_STRUCT;

/* PCISTS_IIO_VTD_REG supported on:                                             */
/*      SPRA0 (0x10800006)                                                      */
/*      SPRB0 (0x10800006)                                                      */
/*      SPRHBM (0x10800006)                                                     */
/*      SPRC0 (0x10800006)                                                      */
/*      SPRMCC (0x10800006)                                                     */
/*      SPRUCC (0x10800006)                                                     */
/* Register default value on SPRA0: 0x00000010                                  */
/* Register default value on SPRB0: 0x00000010                                  */
/* Register default value on SPRHBM: 0x00000010                                 */
/* Register default value on SPRC0: 0x00000010                                  */
/* Register default value on SPRMCC: 0x00000010                                 */
/* Register default value on SPRUCC: 0x00000010                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* PCI Status
*/


#define PCISTS_IIO_VTD_REG 0x11010006

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 rsvd : 3;

                            /* Bits[2:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 intx_status : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000000*/

                            /* Hardwired to 0 */
    UINT16 capabilities_list : 1;

                            /* Bits[4:4], Access Type=RO, default=0x00000001*/

                            /*
                               This bit indicates the presence of a
                               capabilities list structure
                            */
    UINT16 pci66mhz_capable : 1;

                            /* Bits[5:5], Access Type=RO, default=0x00000000*/

                            /* Not applicable to PCI Express. Hardwired to 0. */
    UINT16 rsvd_6 : 1;

                            /* Bits[6:6], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 fast_back_to_back : 1;

                            /* Bits[7:7], Access Type=RO, default=0x00000000*/

                            /* Not applicable to PCI Express. Hardwired to 0. */
    UINT16 mdpe : 1;

                            /* Bits[8:8], Access Type=RO, default=0x00000000*/

                            /* Hardwired to 0 */
    UINT16 devsel_timing : 2;

                            /* Bits[10:9], Access Type=RO, default=0x00000000*/

                            /* Not applicable to PCI Express. Hardwired to 0. */
    UINT16 sta : 1;

                            /* Bits[11:11], Access Type=RO, default=0x00000000*/

                            /* Hardwired to 0 */
    UINT16 rta : 1;

                            /* Bits[12:12], Access Type=RO, default=0x00000000*/

                            /* Hardwired to 0 */
    UINT16 rma : 1;

                            /* Bits[13:13], Access Type=RO, default=0x00000000*/

                            /* Hardwired to 0 */
    UINT16 sse : 1;

                            /* Bits[14:14], Access Type=RO, default=0x00000000*/

                            /* Hardwired to 0 */
    UINT16 dpe : 1;

                            /* Bits[15:15], Access Type=RO, default=0x00000000*/

                            /* Hardwired to 0 */

  } Bits;
  UINT16 Data;

} PCISTS_IIO_VTD_STRUCT;

/* RID_CCR_IIO_VTD_REG supported on:                                            */
/*      SPRA0 (0x20800008)                                                      */
/*      SPRB0 (0x20800008)                                                      */
/*      SPRHBM (0x20800008)                                                     */
/*      SPRC0 (0x20800008)                                                      */
/*      SPRMCC (0x20800008)                                                     */
/*      SPRUCC (0x20800008)                                                     */
/* Register default value on SPRA0: 0x08800000                                  */
/* Register default value on SPRB0: 0x08800000                                  */
/* Register default value on SPRHBM: 0x08800000                                 */
/* Register default value on SPRC0: 0x08800000                                  */
/* Register default value on SPRMCC: 0x08800000                                 */
/* Register default value on SPRUCC: 0x08800000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Revision ID and Class Code Register
*/


#define RID_CCR_IIO_VTD_REG 0x11020008

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 revision_id : 8;

                            /* Bits[7:0], Access Type=RO/V, default=0x00000000*/

                            /*
                               Reflects the MS2IOSF Revision ID after reset.
                               MS2IOSF loads this value from a fuse.
                            */
    UINT32 interface : 8;

                            /* Bits[15:8], Access Type=RO, default=0x00000000*/

                            /*
                               Register Level Programming Interface. Set to 0
                               for all non-APIC devices.
                            */
    UINT32 sub_class : 8;

                            /* Bits[23:16], Access Type=RO, default=0x00000080*/

                            /* Set to 80h for Generic Device */
    UINT32 base_class : 8;

                            /* Bits[31:24], Access Type=RO, default=0x00000008*/

                            /* Set to 08h for Generic Device */

  } Bits;
  UINT32 Data;

} RID_CCR_IIO_VTD_STRUCT;

/* CLSR_IIO_VTD_REG supported on:                                               */
/*      SPRA0 (0x80000c)                                                        */
/*      SPRB0 (0x80000c)                                                        */
/*      SPRHBM (0x80000c)                                                       */
/*      SPRC0 (0x80000c)                                                        */
/*      SPRMCC (0x80000c)                                                       */
/*      SPRUCC (0x80000c)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Cacheline Size Register
*/


#define CLSR_IIO_VTD_REG 0x1100000C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 cacheline_size : 8;

                            /* Bits[7:0], Access Type=RW, default=0x00000000*/

                            /*
                               This register is set as RW for compatibility
                               reasons only. Cacheline size is 64B.
                            */

  } Bits;
  UINT8 Data;

} CLSR_IIO_VTD_STRUCT;

/* HDR_IIO_VTD_REG supported on:                                                */
/*      SPRA0 (0x80000e)                                                        */
/*      SPRB0 (0x80000e)                                                        */
/*      SPRHBM (0x80000e)                                                       */
/*      SPRC0 (0x80000e)                                                        */
/*      SPRMCC (0x80000e)                                                       */
/*      SPRUCC (0x80000e)                                                       */
/* Register default value on SPRA0: 0x00000080                                  */
/* Register default value on SPRB0: 0x00000080                                  */
/* Register default value on SPRHBM: 0x00000080                                 */
/* Register default value on SPRC0: 0x00000080                                  */
/* Register default value on SPRMCC: 0x00000080                                 */
/* Register default value on SPRUCC: 0x00000080                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Header Type
*/


#define HDR_IIO_VTD_REG 0x1100000E

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 configuration_layout : 7;

                            /* Bits[6:0], Access Type=RO, default=0x00000000*/

                            /*
                               This field identifies the format of the
                               configuration header layout. It is Type 0 for
                               all these devices. The default is 00h,
                               indicating a 'endpoint device'.
                            */
    UINT8 multi_function_device : 1;

                            /* Bits[7:7], Access Type=RO, default=0x00000001*/

                            /*
                               Set to 1b to indicate functions 1-7 may exist
                               for the device
                            */

  } Bits;
  UINT8 Data;

} HDR_IIO_VTD_STRUCT;

/* SVID_IIO_VTD_REG supported on:                                               */
/*      SPRA0 (0x1080002c)                                                      */
/*      SPRB0 (0x1080002c)                                                      */
/*      SPRHBM (0x1080002c)                                                     */
/*      SPRC0 (0x1080002c)                                                      */
/*      SPRMCC (0x1080002c)                                                     */
/*      SPRUCC (0x1080002c)                                                     */
/* Register default value on SPRA0: 0x00008086                                  */
/* Register default value on SPRB0: 0x00008086                                  */
/* Register default value on SPRHBM: 0x00008086                                 */
/* Register default value on SPRC0: 0x00008086                                  */
/* Register default value on SPRMCC: 0x00008086                                 */
/* Register default value on SPRUCC: 0x00008086                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: BIOS_W                                           */
/* SPRB0 Security PolicyGroup: BIOS_W                                           */
/* SPRHBM Security PolicyGroup: BIOS_W                                          */
/* SPRC0 Security PolicyGroup: BIOS_W                                           */
/* SPRMCC Security PolicyGroup: BIOS_W                                          */
/* SPRUCC Security PolicyGroup: BIOS_W                                          */
/* Subsystem Vendor ID
*/


#define SVID_IIO_VTD_REG 0x1101002C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 subsystem_vendor_id : 16;

                            /* Bits[15:0], Access Type=RW, default=0x00008086*/

                            /*
                               The default value specifies Intel but can be set
                               to any value once after reset.
                            */

  } Bits;
  UINT16 Data;

} SVID_IIO_VTD_STRUCT;

/* SID_IIO_VTD_REG supported on:                                                */
/*      SPRA0 (0x1080002e)                                                      */
/*      SPRB0 (0x1080002e)                                                      */
/*      SPRHBM (0x1080002e)                                                     */
/*      SPRC0 (0x1080002e)                                                      */
/*      SPRMCC (0x1080002e)                                                     */
/*      SPRUCC (0x1080002e)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: BIOS_W                                           */
/* SPRB0 Security PolicyGroup: BIOS_W                                           */
/* SPRHBM Security PolicyGroup: BIOS_W                                          */
/* SPRC0 Security PolicyGroup: BIOS_W                                           */
/* SPRMCC Security PolicyGroup: BIOS_W                                          */
/* SPRUCC Security PolicyGroup: BIOS_W                                          */
/* Subsystem ID
*/


#define SID_IIO_VTD_REG 0x1101002E

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 subsystem_id : 16;

                            /* Bits[15:0], Access Type=RW, default=0x00000000*/

                            /*
                               The default value specifies Intel but can be set
                               to any value once after reset.
                            */

  } Bits;
  UINT16 Data;

} SID_IIO_VTD_STRUCT;

/* CAPPTR_IIO_VTD_REG supported on:                                             */
/*      SPRA0 (0x800034)                                                        */
/*      SPRB0 (0x800034)                                                        */
/*      SPRHBM (0x800034)                                                       */
/*      SPRC0 (0x800034)                                                        */
/*      SPRMCC (0x800034)                                                       */
/*      SPRUCC (0x800034)                                                       */
/* Register default value on SPRA0: 0x00000040                                  */
/* Register default value on SPRB0: 0x00000040                                  */
/* Register default value on SPRHBM: 0x00000040                                 */
/* Register default value on SPRC0: 0x00000040                                  */
/* Register default value on SPRMCC: 0x00000040                                 */
/* Register default value on SPRUCC: 0x00000040                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Capability Pointer
*/


#define CAPPTR_IIO_VTD_REG 0x11000034

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 capability_pointer : 8;

                            /* Bits[7:0], Access Type=RO, default=0x00000040*/

                            /*
                               Points to the first capability structure for the
                               device which is the PCIe capability (for devices
                               that support 4KB extended configuration
                               space).[br] A value of zero indicates there are
                               no capability structures (and no extended
                               configuration space).
                            */

  } Bits;
  UINT8 Data;

} CAPPTR_IIO_VTD_STRUCT;

/* INTL_IIO_VTD_REG supported on:                                               */
/*      SPRA0 (0x80003c)                                                        */
/*      SPRB0 (0x80003c)                                                        */
/*      SPRHBM (0x80003c)                                                       */
/*      SPRC0 (0x80003c)                                                        */
/*      SPRMCC (0x80003c)                                                       */
/*      SPRUCC (0x80003c)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Interrupt Line Register
*/


#define INTL_IIO_VTD_REG 0x1100003C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 interrupt_line : 8;

                            /* Bits[7:0], Access Type=RO, default=0x00000000*/

                            /* N/A for these devices */

  } Bits;
  UINT8 Data;

} INTL_IIO_VTD_STRUCT;

/* INTPIN_IIO_VTD_REG supported on:                                             */
/*      SPRA0 (0x80003d)                                                        */
/*      SPRB0 (0x80003d)                                                        */
/*      SPRHBM (0x80003d)                                                       */
/*      SPRC0 (0x80003d)                                                        */
/*      SPRMCC (0x80003d)                                                       */
/*      SPRUCC (0x80003d)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Interrupt Pin Register
*/


#define INTPIN_IIO_VTD_REG 0x1100003D

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 intp : 8;

                            /* Bits[7:0], Access Type=RO, default=0x00000000*/

                            /*
                               N/A since these devices do not generate any
                               interrupt on their own
                            */

  } Bits;
  UINT8 Data;

} INTPIN_IIO_VTD_STRUCT;

/* PXPCAPID_IIO_VTD_REG supported on:                                           */
/*      SPRA0 (0x800040)                                                        */
/*      SPRB0 (0x800040)                                                        */
/*      SPRHBM (0x800040)                                                       */
/*      SPRC0 (0x800040)                                                        */
/*      SPRMCC (0x800040)                                                       */
/*      SPRUCC (0x800040)                                                       */
/* Register default value on SPRA0: 0x00000010                                  */
/* Register default value on SPRB0: 0x00000010                                  */
/* Register default value on SPRHBM: 0x00000010                                 */
/* Register default value on SPRC0: 0x00000010                                  */
/* Register default value on SPRMCC: 0x00000010                                 */
/* Register default value on SPRUCC: 0x00000010                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* PCI Express Capability ID
*/


#define PXPCAPID_IIO_VTD_REG 0x11000040

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 capability_id : 8;

                            /* Bits[7:0], Access Type=RO, default=0x00000010*/

                            /*
                               Identifies the PCI Express capability assigned
                               by PCI-SIG.
                            */

  } Bits;
  UINT8 Data;

} PXPCAPID_IIO_VTD_STRUCT;

/* PXPNXTPTR_IIO_VTD_REG supported on:                                          */
/*      SPRA0 (0x800041)                                                        */
/*      SPRB0 (0x800041)                                                        */
/*      SPRHBM (0x800041)                                                       */
/*      SPRC0 (0x800041)                                                        */
/*      SPRMCC (0x800041)                                                       */
/*      SPRUCC (0x800041)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* PCI Express Capability Next Pointer
*/


#define PXPNXTPTR_IIO_VTD_REG 0x11000041

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 next_ptr : 8;

                            /* Bits[7:0], Access Type=RO, default=0x00000000*/

                            /*
                               Pointer to the next capability. A value of zero
                               indicates this is the last capability.
                            */

  } Bits;
  UINT8 Data;

} PXPNXTPTR_IIO_VTD_STRUCT;

/* PXPCAP_IIO_VTD_REG supported on:                                             */
/*      SPRA0 (0x10800042)                                                      */
/*      SPRB0 (0x10800042)                                                      */
/*      SPRHBM (0x10800042)                                                     */
/*      SPRC0 (0x10800042)                                                      */
/*      SPRMCC (0x10800042)                                                     */
/*      SPRUCC (0x10800042)                                                     */
/* Register default value on SPRA0: 0x00000092                                  */
/* Register default value on SPRB0: 0x00000092                                  */
/* Register default value on SPRHBM: 0x00000092                                 */
/* Register default value on SPRC0: 0x00000092                                  */
/* Register default value on SPRMCC: 0x00000092                                 */
/* Register default value on SPRUCC: 0x00000092                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* PCI Express Capability
*/


#define PXPCAP_IIO_VTD_REG 0x11010042

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 capability_version : 4;

                            /* Bits[3:0], Access Type=RO, default=0x00000002*/

                            /*
                               PCI Express Capability is Compliant with Version
                               2.0 of the PCI Express Spec.
                            */
    UINT16 device_port_type : 4;

                            /* Bits[7:4], Access Type=RO, default=0x00000009*/

                            /* Device type is Root Complex Integrated Endpoint */
    UINT16 slot_implemented : 1;

                            /* Bits[8:8], Access Type=RO, default=0x00000000*/

                            /* N/A for integrated endpoints */
    UINT16 interrupt_message_number : 5;

                            /* Bits[13:9], Access Type=RO, default=0x00000000*/

                            /* N/A for this device */
    UINT16 rsvd : 2;

                            /* Bits[15:14], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT16 Data;

} PXPCAP_IIO_VTD_STRUCT;

/* FNHIDE_IIO_VTD_REG supported on:                                             */
/*      SPRA0 (0x80007c)                                                        */
/*      SPRB0 (0x80007c)                                                        */
/*      SPRHBM (0x80007c)                                                       */
/*      SPRC0 (0x80007c)                                                        */
/*      SPRMCC (0x80007c)                                                       */
/*      SPRUCC (0x80007c)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* These bits are used to hide the corresponding MS2IOSF functions from all configuration accesses, regardless of the source of the request. The OOB-MSM unit adds this register to the black-list to prevent PECI access to this register.
*/


#define FNHIDE_IIO_VTD_REG 0x1100007C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 function0_hide : 1;

                            /* Bits[0:0], Access Type=RO, default=0x00000000*/

                            /* It is not possible to hide function 0 */
    UINT8 function1_hide : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               If set, hides function 1 of Device 0 on this
                               Root Bus. Hides the M2PCIe function.
                            */
    UINT8 function2_hide : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               If set, hides function 2 of Device 0 on this
                               Root Bus. Hides the RAS Function.
                            */
    UINT8 function3_hide : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               If set, hides function 3 of Device 0 on this
                               Root Bus. Hides the DFx Function.
                            */
    UINT8 function4_hide : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               If set, hides function 4 of Device 0 on this
                               Root Bus. Hides the Satellite IEH Function
                            */
    UINT8 function5_hide : 1;

                            /* Bits[5:5], Access Type=RW/V, default=0x00000000*/

                            /*
                               If set, hides function 5 of Device 0 on this
                               Root Bus. Hides the Volume Management Device
                               Function.
                            */
    UINT8 function6_hide : 1;

                            /* Bits[6:6], Access Type=RO, default=0x00000000*/

                            /* It is not possible to hide function 6 */
    UINT8 function7_hide : 1;

                            /* Bits[7:7], Access Type=RO, default=0x00000000*/

                            /* It is not possible to hide function 7 */

  } Bits;
  UINT8 Data;

} FNHIDE_IIO_VTD_STRUCT;

/* MMCFG_BASE_N0_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x20800090)                                                      */
/*      SPRB0 (0x20800090)                                                      */
/*      SPRHBM (0x20800090)                                                     */
/*      SPRC0 (0x20800090)                                                      */
/*      SPRMCC (0x20800090)                                                     */
/*      SPRUCC (0x20800090)                                                     */
/* Register default value on SPRA0: 0xFC000000                                  */
/* Register default value on SPRB0: 0xFC000000                                  */
/* Register default value on SPRHBM: 0xFC000000                                 */
/* Register default value on SPRC0: 0xFC000000                                  */
/* Register default value on SPRMCC: 0xFC000000                                 */
/* Register default value on SPRUCC: 0xFC000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* MMCFG Address Base
*/


#define MMCFG_BASE_N0_IIO_VTD_REG 0x11020090

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 26;

                            /* Bits[25:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 mmcfg_base_addr : 6;

                            /* Bits[31:26], Access Type=RW, default=0x0000003F*/

                            /*
                               Indicates the base address which is aligned to a
                               64MB boundary.
                            */

  } Bits;
  UINT32 Data;

} MMCFG_BASE_N0_IIO_VTD_STRUCT;

/* MMCFG_BASE_N1_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x20800094)                                                      */
/*      SPRB0 (0x20800094)                                                      */
/*      SPRHBM (0x20800094)                                                     */
/*      SPRC0 (0x20800094)                                                      */
/*      SPRMCC (0x20800094)                                                     */
/*      SPRUCC (0x20800094)                                                     */
/* Register default value on SPRA0: 0x000FFFFF                                  */
/* Register default value on SPRB0: 0x000FFFFF                                  */
/* Register default value on SPRHBM: 0x000FFFFF                                 */
/* Register default value on SPRC0: 0x000FFFFF                                  */
/* Register default value on SPRMCC: 0x000FFFFF                                 */
/* Register default value on SPRUCC: 0x000FFFFF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* MMCFG Address Base
*/


#define MMCFG_BASE_N1_IIO_VTD_REG 0x11020094

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mmcfg_base_addr : 20;

                            /* Bits[19:0], Access Type=RW, default=0x000FFFFF*/

                            /*
                               Indicates the base address which is aligned to a
                               64MB boundary.
                            */
    UINT32 rsvd : 12;

                            /* Bits[31:20], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MMCFG_BASE_N1_IIO_VTD_STRUCT;

/* MMCFG_LIMIT_N0_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x20800098)                                                      */
/*      SPRB0 (0x20800098)                                                      */
/*      SPRHBM (0x20800098)                                                     */
/*      SPRC0 (0x20800098)                                                      */
/*      SPRMCC (0x20800098)                                                     */
/*      SPRUCC (0x20800098)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* MMCFG Address Limit
*/


#define MMCFG_LIMIT_N0_IIO_VTD_REG 0x11020098

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 26;

                            /* Bits[25:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 mmcfg_limit_addr : 6;

                            /* Bits[31:26], Access Type=RW, default=0x00000000*/

                            /*
                               Indicates the limit address, which is aligned to
                               a 64MB boundary. MS2IOSF aborts inbound requests
                               to the MMCFG region. Setting the MMCFG.BASE
                               greater than MMCFG.LIMIT disables this region.
                            */

  } Bits;
  UINT32 Data;

} MMCFG_LIMIT_N0_IIO_VTD_STRUCT;

/* MMCFG_LIMIT_N1_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x2080009c)                                                      */
/*      SPRB0 (0x2080009c)                                                      */
/*      SPRHBM (0x2080009c)                                                     */
/*      SPRC0 (0x2080009c)                                                      */
/*      SPRMCC (0x2080009c)                                                     */
/*      SPRUCC (0x2080009c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* MMCFG Address Limit
*/


#define MMCFG_LIMIT_N1_IIO_VTD_REG 0x1102009C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mmcfg_limit_addr : 20;

                            /* Bits[19:0], Access Type=RW, default=0x00000000*/

                            /*
                               Indicates the limit address, which is aligned to
                               a 64MB boundary. MS2IOSF aborts inbound requests
                               to the MMCFG region. Setting the MMCFG.BASE
                               greater than MMCFG.LIMIT disables this region.
                            */
    UINT32 rsvd : 12;

                            /* Bits[31:20], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MMCFG_LIMIT_N1_IIO_VTD_STRUCT;

/* TSEG_N0_IIO_VTD_REG supported on:                                            */
/*      SPRA0 (0x208000a8)                                                      */
/*      SPRB0 (0x208000a8)                                                      */
/*      SPRHBM (0x208000a8)                                                     */
/*      SPRC0 (0x208000a8)                                                      */
/*      SPRMCC (0x208000a8)                                                     */
/*      SPRUCC (0x208000a8)                                                     */
/* Register default value on SPRA0: 0xFE000000                                  */
/* Register default value on SPRB0: 0xFE000000                                  */
/* Register default value on SPRHBM: 0xFE000000                                 */
/* Register default value on SPRC0: 0xFE000000                                  */
/* Register default value on SPRMCC: 0xFE000000                                 */
/* Register default value on SPRUCC: 0xFE000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* MS2IOSF aborts inbound access to the TSEG region, in other words, any access that falls within TSEG.BASE[31:20] <= Addr[31:20] <= TSEG.LIMIT[31:20]. Note that MS2IOSF ignores address bits 19:0. The result is that BASE[19:0] is effectively 00000h and LIMIT is effectively FFFFFh. Setting base greater than limit disables this region. Note that setting BASE[31:20] = LIMIT[31:0] opens a 1MB window due to address bits [19:0] being ignored.
*/


#define TSEG_N0_IIO_VTD_REG 0x110200A8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 20;

                            /* Bits[19:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 base : 12;

                            /* Bits[31:20], Access Type=RW, default=0x00000FE0*/

                            /*
                               Indicates the TSEG base address, which is
                               aligned to a 1MB boundary
                            */

  } Bits;
  UINT32 Data;

} TSEG_N0_IIO_VTD_STRUCT;

/* TSEG_N1_IIO_VTD_REG supported on:                                            */
/*      SPRA0 (0x208000ac)                                                      */
/*      SPRB0 (0x208000ac)                                                      */
/*      SPRHBM (0x208000ac)                                                     */
/*      SPRC0 (0x208000ac)                                                      */
/*      SPRMCC (0x208000ac)                                                     */
/*      SPRUCC (0x208000ac)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* MS2IOSF aborts inbound access to the TSEG region, in other words, any access that falls within TSEG.BASE[31:20] <= Addr[31:20] <= TSEG.LIMIT[31:20]. Note that MS2IOSF ignores address bits 19:0. The result is that BASE[19:0] is effectively 00000h and LIMIT is effectively FFFFFh. Setting base greater than limit disables this region. Note that setting BASE[31:20] = LIMIT[31:0] opens a 1MB window due to address bits [19:0] being ignored.
*/


#define TSEG_N1_IIO_VTD_REG 0x110200AC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 20;

                            /* Bits[19:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 limit : 12;

                            /* Bits[31:20], Access Type=RW, default=0x00000000*/

                            /*
                               Indicates the TSEG limit address, which is
                               aligned to a 1MB boundary
                            */

  } Bits;
  UINT32 Data;

} TSEG_N1_IIO_VTD_STRUCT;

/* TOCM_IIO_VTD_REG supported on:                                               */
/*      SPRA0 (0x8000c0)                                                        */
/*      SPRB0 (0x8000c0)                                                        */
/*      SPRHBM (0x8000c0)                                                       */
/*      SPRC0 (0x8000c0)                                                        */
/*      SPRMCC (0x8000c0)                                                       */
/*      SPRUCC (0x8000c0)                                                       */
/* Register default value on SPRA0: 0x00000071                                  */
/* Register default value on SPRB0: 0x00000071                                  */
/* Register default value on SPRHBM: 0x00000071                                 */
/* Register default value on SPRC0: 0x00000071                                  */
/* Register default value on SPRMCC: 0x00000071                                 */
/* Register default value on SPRUCC: 0x00000071                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: BIOS_W                                           */
/* SPRB0 Security PolicyGroup: BIOS_W                                           */
/* SPRHBM Security PolicyGroup: BIOS_W                                          */
/* SPRC0 Security PolicyGroup: BIOS_W                                           */
/* SPRMCC Security PolicyGroup: BIOS_W                                          */
/* SPRUCC Security PolicyGroup: BIOS_W                                          */
/* Top of Core Physical Addressable Memory
*/


#define TOCM_IIO_VTD_REG 0x110000C0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 tocmvalid : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000001*/

                            /*
                               Enables the TOCM field. If this bit is clear,
                               MS2IOSF is in 52-bit addressing mode.
                            */
    UINT8 rsvd : 2;

                            /* Bits[2:1], Access Type=RO, default=None*/

                            /* Reserved */
    UINT8 tocm : 5;

                            /* Bits[7:3], Access Type=RW, default=0x0000000E*/

                            /*
                               Indicates the top of Core physical
                               addressability limit.[br] 00101: 2^37[br] 00110:
                               2^38[br] ...[br] 01110: 2^46[br] 01111: 2^47[br]
                               10000: 2^48[br] 10001: 2^49[br] 10010: 2^50[br]
                               10011: 2^51[br] 10100: 2^52[br] Others:
                               Reserved[br] MS2IOSF uses this to abort all
                               inbound transactions that cross this limit.
                            */

  } Bits;
  UINT8 Data;

} TOCM_IIO_VTD_STRUCT;

/* TOHM_N0_IIO_VTD_REG supported on:                                            */
/*      SPRA0 (0x208000c8)                                                      */
/*      SPRB0 (0x208000c8)                                                      */
/*      SPRHBM (0x208000c8)                                                     */
/*      SPRC0 (0x208000c8)                                                      */
/*      SPRMCC (0x208000c8)                                                     */
/*      SPRUCC (0x208000c8)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* Indicates the limit of a 64MB-aligned region that decodes >4GB addresses towards system memory. A 64-bit transaction that satisfies '4G <= A[63:26] <= TOHM[63:26]' is a transaction towards system memory. [br]
BIOS programs this register once at boot time and does not change it after that, including during quiesce flows. Secure Enclaves requires this register to be locked from all accesses for MCHECK, including BIOS.
*/


#define TOHM_N0_IIO_VTD_REG 0x110200C8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 26;

                            /* Bits[25:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 addr : 6;

                            /* Bits[31:26], Access Type=RW, default=0x00000000*/

                            /*
                               Indicates the limit of a 64MB-aligned region
                               that decodes >4GB addresses towards system
                               memory
                            */

  } Bits;
  UINT32 Data;

} TOHM_N0_IIO_VTD_STRUCT;

/* TOHM_N1_IIO_VTD_REG supported on:                                            */
/*      SPRA0 (0x208000cc)                                                      */
/*      SPRB0 (0x208000cc)                                                      */
/*      SPRHBM (0x208000cc)                                                     */
/*      SPRC0 (0x208000cc)                                                      */
/*      SPRMCC (0x208000cc)                                                     */
/*      SPRUCC (0x208000cc)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* Indicates the limit of a 64MB-aligned region that decodes >4GB addresses towards system memory. A 64-bit transaction that satisfies '4G <= A[63:26] <= TOHM[63:26]' is a transaction towards system memory. [br]
BIOS programs this register once at boot time and does not change it after that, including during quiesce flows. Secure Enclaves requires this register to be locked from all accesses for MCHECK, including BIOS.
*/


#define TOHM_N1_IIO_VTD_REG 0x110200CC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 addr : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               Indicates the limit of a 64MB-aligned region
                               that decodes >4GB addresses towards system
                               memory
                            */

  } Bits;
  UINT32 Data;

} TOHM_N1_IIO_VTD_STRUCT;

/* TOLM_IIO_VTD_REG supported on:                                               */
/*      SPRA0 (0x208000d0)                                                      */
/*      SPRB0 (0x208000d0)                                                      */
/*      SPRHBM (0x208000d0)                                                     */
/*      SPRC0 (0x208000d0)                                                      */
/*      SPRMCC (0x208000d0)                                                     */
/*      SPRUCC (0x208000d0)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* Indicates the top of low memory, an aligned 64MB granular region. Any 32-bit transaction that satisfies '0 <= Address[31:26] <= TOLM[31:26]' is a transaction towards main memory. Secure Enclaves requires this register to be locked from all accesses for MCHECK, including BIOS.
*/


#define TOLM_IIO_VTD_REG 0x110200D0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 26;

                            /* Bits[25:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 addr : 6;

                            /* Bits[31:26], Access Type=RW, default=0x00000000*/

                            /*
                               Indicates the top of low memory, a 64MB-aligned
                               region
                            */

  } Bits;
  UINT32 Data;

} TOLM_IIO_VTD_STRUCT;

/* TOMMIOL_IIO_VTD_REG supported on:                                            */
/*      SPRA0 (0x208000d8)                                                      */
/*      SPRB0 (0x208000d8)                                                      */
/*      SPRHBM (0x208000d8)                                                     */
/*      SPRC0 (0x208000d8)                                                      */
/*      SPRMCC (0x208000d8)                                                     */
/*      SPRUCC (0x208000d8)                                                     */
/* Register default value on SPRA0: 0xFBF00000                                  */
/* Register default value on SPRB0: 0xFBF00000                                  */
/* Register default value on SPRHBM: 0xFBF00000                                 */
/* Register default value on SPRC0: 0xFBF00000                                  */
/* Register default value on SPRMCC: 0xFBF00000                                 */
/* Register default value on SPRUCC: 0xFBF00000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Designates the top of the MMIO portion in low memory (32-bit space or <4GB).
*/


#define TOMMIOL_IIO_VTD_REG 0x110200D8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 20;

                            /* Bits[19:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 tommiol : 12;

                            /* Bits[31:20], Access Type=RW, default=0x00000FBF*/

                            /*
                               This field is used to abort inbound
                               MRd/MWr/atomic accesses starting above this
                               address and ending at 0xffff_ffff,[br] exclusive
                               of the interrupt hole (0xfeex_xxxx). Bits 19:0
                               are zero and not writable, and are treated as 1s
                               (like TOLM and TOHM).[br] Set this to 0xfff to
                               disable TOMMIOL.
                            */

  } Bits;
  UINT32 Data;

} TOMMIOL_IIO_VTD_STRUCT;

/* NCMEM_BASE_N0_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x208000e0)                                                      */
/*      SPRB0 (0x208000e0)                                                      */
/*      SPRHBM (0x208000e0)                                                     */
/*      SPRC0 (0x208000e0)                                                      */
/*      SPRMCC (0x208000e0)                                                     */
/*      SPRUCC (0x208000e0)                                                     */
/* Register default value on SPRA0: 0xFC000000                                  */
/* Register default value on SPRB0: 0xFC000000                                  */
/* Register default value on SPRHBM: 0xFC000000                                 */
/* Register default value on SPRC0: 0xFC000000                                  */
/* Register default value on SPRMCC: 0xFC000000                                 */
/* Register default value on SPRUCC: 0xFC000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Describes the base address of a 64MB-aligned memory region on UPI that is non-coherent. If bits [63:26] of an inbound address satisfy 'NcMem.Base[63:26] <= A[63:26] <= NcMem.Limit[63:26]' then MS2IOSF considers the request as targeting the non-coherent UPI memory region. This means that MS2IOSF cannot ever use 'allocating' write commands for accesses to this region, meaning all writes utilize CLFlush. Note: The NCMEM range does not have to fall within memory space, although mesh behavior for P2P access does not change if the range hits NCMEM. [br]
BIOS programs this register once at boot time and does not change it after that, including during quiesce flows.
*/


#define NCMEM_BASE_N0_IIO_VTD_REG 0x110200E0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 26;

                            /* Bits[25:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 addr : 6;

                            /* Bits[31:26], Access Type=RW, default=0x0000003F*/

                            /*
                               Defines the base address of a 64MB-aligned
                               memory region on UPI that is non-coherent.
                            */

  } Bits;
  UINT32 Data;

} NCMEM_BASE_N0_IIO_VTD_STRUCT;

/* NCMEM_BASE_N1_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x208000e4)                                                      */
/*      SPRB0 (0x208000e4)                                                      */
/*      SPRHBM (0x208000e4)                                                     */
/*      SPRC0 (0x208000e4)                                                      */
/*      SPRMCC (0x208000e4)                                                     */
/*      SPRUCC (0x208000e4)                                                     */
/* Register default value on SPRA0: 0xFFFFFFFF                                  */
/* Register default value on SPRB0: 0xFFFFFFFF                                  */
/* Register default value on SPRHBM: 0xFFFFFFFF                                 */
/* Register default value on SPRC0: 0xFFFFFFFF                                  */
/* Register default value on SPRMCC: 0xFFFFFFFF                                 */
/* Register default value on SPRUCC: 0xFFFFFFFF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Describes the base address of a 64MB-aligned memory region on UPI that is non-coherent. If bits [63:26] of an inbound address satisfy 'NcMem.Base[63:26] <= A[63:26] <= NcMem.Limit[63:26]' then MS2IOSF considers the request as targeting the non-coherent UPI memory region. This means that MS2IOSF cannot ever use 'allocating' write commands for accesses to this region, meaning all writes utilize CLFlush. Note: The NCMEM range does not have to fall within memory space, although mesh behavior for P2P access does not change if the range hits NCMEM. [br]
BIOS programs this register once at boot time and does not change it after that, including during quiesce flows.
*/


#define NCMEM_BASE_N1_IIO_VTD_REG 0x110200E4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 addr : 32;

                            /* Bits[31:0], Access Type=RW, default=0xFFFFFFFF*/

                            /*
                               Defines the base address of a 64MB-aligned
                               memory region on UPI that is non-coherent.
                            */

  } Bits;
  UINT32 Data;

} NCMEM_BASE_N1_IIO_VTD_STRUCT;

/* NCMEM_LIMIT_N0_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x208000e8)                                                      */
/*      SPRB0 (0x208000e8)                                                      */
/*      SPRHBM (0x208000e8)                                                     */
/*      SPRC0 (0x208000e8)                                                      */
/*      SPRMCC (0x208000e8)                                                     */
/*      SPRUCC (0x208000e8)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Describes the limit address of a 64MB-aligned memory region on UPI that is non-coherent. If bits [63:26] of an inbound address satisfy 'NcMem.Base[63:26] <= A[63:26] <= NcMem.Limit[63:26]' then MS2IOSF considers the request as targeting the non-coherent UPI memory region. This means that MS2IOSF cannot ever use 'allocating' write commands for accesses to this region, meaning all writes utilize CLFlush. Note: The NCMEM range does not have to fall within memory space, although mesh behavior for P2P access does not change if the range hits NCMEM. 
*/


#define NCMEM_LIMIT_N0_IIO_VTD_REG 0x110200E8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 26;

                            /* Bits[25:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 addr : 6;

                            /* Bits[31:26], Access Type=RW, default=0x00000000*/

                            /*
                               Defines the limit address of a 64MB-aligned
                               memory region on UPI that is non-coherent.
                            */

  } Bits;
  UINT32 Data;

} NCMEM_LIMIT_N0_IIO_VTD_STRUCT;

/* NCMEM_LIMIT_N1_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x208000ec)                                                      */
/*      SPRB0 (0x208000ec)                                                      */
/*      SPRHBM (0x208000ec)                                                     */
/*      SPRC0 (0x208000ec)                                                      */
/*      SPRMCC (0x208000ec)                                                     */
/*      SPRUCC (0x208000ec)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Describes the limit address of a 64MB-aligned memory region on UPI that is non-coherent. If bits [63:26] of an inbound address satisfy 'NcMem.Base[63:26] <= A[63:26] <= NcMem.Limit[63:26]' then MS2IOSF considers the request as targeting the non-coherent UPI memory region. This means that MS2IOSF cannot ever use 'allocating' write commands for accesses to this region, meaning all writes utilize CLFlush. Note: The NCMEM range does not have to fall within memory space, although mesh behavior for P2P access does not change if the range hits NCMEM. 
*/


#define NCMEM_LIMIT_N1_IIO_VTD_REG 0x110200EC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 addr : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               Defines the limit address of a 64MB-aligned
                               memory region on UPI that is non-coherent.
                            */

  } Bits;
  UINT32 Data;

} NCMEM_LIMIT_N1_IIO_VTD_STRUCT;

/* PXPEXTCAP_IIO_VTD_REG supported on:                                          */
/*      SPRA0 (0x20800100)                                                      */
/*      SPRB0 (0x20800100)                                                      */
/*      SPRHBM (0x20800100)                                                     */
/*      SPRC0 (0x20800100)                                                      */
/*      SPRMCC (0x20800100)                                                     */
/*      SPRUCC (0x20800100)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This field implements the Extended Capability Header required by section 7.9.1 in the PCIe 3.0 spec.
*/


#define PXPEXTCAP_IIO_VTD_REG 0x11020100

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 extended_capability_id : 16;

                            /* Bits[15:0], Access Type=RO, default=0x00000000*/

                            /*
                               Set to zero to indicate that there is no
                               capability at this location.
                            */
    UINT32 capability_version : 4;

                            /* Bits[19:16], Access Type=RO, default=0x00000000*/

                            /*
                               Set to zero to indicate that there is no
                               capability at this location.
                            */
    UINT32 next_capability_offset : 12;

                            /* Bits[31:20], Access Type=RO, default=0x00000000*/

                            /*
                               Pointer to the next capability in extended
                               configuration space. Set to zero to indicate
                               that there are no more capability structures.
                            */

  } Bits;
  UINT32 Data;

} PXPEXTCAP_IIO_VTD_STRUCT;

/* ROOTBUS_IIO_VTD_REG supported on:                                            */
/*      SPRA0 (0x20800108)                                                      */
/*      SPRB0 (0x20800108)                                                      */
/*      SPRHBM (0x20800108)                                                     */
/*      SPRC0 (0x20800108)                                                      */
/*      SPRMCC (0x20800108)                                                     */
/*      SPRUCC (0x20800108)                                                     */
/* Register default value on SPRA0: 0x00FE0000                                  */
/* Register default value on SPRB0: 0x00FE0000                                  */
/* Register default value on SPRHBM: 0x00FE0000                                 */
/* Register default value on SPRC0: 0x00FE0000                                  */
/* Register default value on SPRMCC: 0x00FE0000                                 */
/* Register default value on SPRUCC: 0x00FE0000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* MS2IOSF Root Bus Numbers
*/


#define ROOTBUS_IIO_VTD_REG 0x11020108

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rootbuss : 8;

                            /* Bits[7:0], Access Type=RW, default=0x00000000*/

                            /*
                               The root bus number assigned to this MS2IOSF
                               instance. MS2IOSF uses this bus number in the
                               decode logic for route-by-ID requests. MS2IOSF
                               integrated devices exist on this root bus. This
                               value must be unique for every MS2IOSF instance
                               in the segment. BIOS programs this value.
                            */
    UINT32 rsvd : 7;

                            /* Bits[14:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rootbuss_valid : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /*
                               This bit enables a way for BIOS to program the
                               bus number of this MS2IOSF at boot time.[br] If
                               set, indicates that the RootBusS value in this
                               register is valid. If clear, this MS2IOSF does
                               not look at the bus number value in
                               configuration requests targeting it (instead
                               claiming configuration requests based only on
                               the device/function value in the request).[br]
                               BIOS must program this register first for all
                               MS2IOSF instances and set this bit.
                            */
    UINT32 rootbusc : 8;

                            /* Bits[23:16], Access Type=RW, default=0x000000FE*/

                            /*
                               Once programmed, MS2IOSF assumes ownership of
                               RootBusC and RootBusC+1. Hence, a value for
                               RootBusC = 0xff is illegal since it will cause a
                               rollover for RootBusC+1.[br] For all downstream
                               requests that MS2IOSF forwards to IOSF,
                               including local/remote and confined P2P, MS2IOSF
                               uses these bus numbers into the requester ID
                               field of the IOSF TLP. These values are the same
                               for all MS2IOSF stacks in a system (all
                               sockets).[br] RootBusC is used for MMIO Reads
                               and P2P requests; RootBusC+1 is used for IO
                               Read, IO Write, CFG Read & CFG Write.
                            */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ROOTBUS_IIO_VTD_STRUCT;

/* MCTP_BRIDGE_ID_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x20800110)                                                      */
/*      SPRB0 (0x20800110)                                                      */
/*      SPRHBM (0x20800110)                                                     */
/*      SPRC0 (0x20800110)                                                      */
/*      SPRMCC (0x20800110)                                                     */
/*      SPRUCC (0x20800110)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Requester ID for MCTP bridge within the socket.
This will likely be the requesterID assigned to the local socket OOBMSM
*/


#define MCTP_BRIDGE_ID_IIO_VTD_REG 0x11020110

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mctp_bridge_id : 16;

                            /* Bits[15:0], Access Type=RW, default=0x00000000*/

                            /*
                               Requester ID for MCTP bridge within the socket.
                               This will likely be the requesterID assigned to
                               the local socket OOBMSM
                            */
    UINT32 rsvd : 16;

                            /* Bits[31:16], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MCTP_BRIDGE_ID_IIO_VTD_STRUCT;

/* CIPCTRL_IIO_VTD_REG supported on:                                            */
/*      SPRA0 (0x20800140)                                                      */
/*      SPRB0 (0x20800140)                                                      */
/*      SPRHBM (0x20800140)                                                     */
/*      SPRC0 (0x20800140)                                                      */
/*      SPRMCC (0x20800140)                                                     */
/*      SPRUCC (0x20800140)                                                     */
/* Register default value on SPRA0: 0x0E800080                                  */
/* Register default value on SPRB0: 0x0E800080                                  */
/* Register default value on SPRHBM: 0x0E800080                                 */
/* Register default value on SPRC0: 0x0E800080                                  */
/* Register default value on SPRMCC: 0x0E800080                                 */
/* Register default value on SPRUCC: 0x0E800080                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: BIOS_W                                           */
/* SPRB0 Security PolicyGroup: BIOS_W                                           */
/* SPRHBM Security PolicyGroup: BIOS_W                                          */
/* SPRC0 Security PolicyGroup: BIOS_W                                           */
/* SPRMCC Security PolicyGroup: BIOS_W                                          */
/* SPRUCC Security PolicyGroup: BIOS_W                                          */
/* Coherent Interface Protocol Control
*/


#define CIPCTRL_IIO_VTD_REG 0x11020140

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 diswrcomb : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               Disable write combining[br] Causes all writes to
                               send a WB request as soon as M-state is
                               acquired.[br] 0: Enable B2B Write Combining for
                               writes from same port[br] 1: Disable B2B Write
                               Combining for writes from same port[br] Setting
                               diswrcomb==1 and rd_merge_enable==0 disables all
                               entry to entry transfers in IRP (causing a CHA
                               request for every IOSF request).
                            */
    UINT32 wbq_threshold_for_merge : 8;

                            /* Bits[8:1], Access Type=RW, default=0x00000040*/

                            /*
                               Allow write combining if number of free entries
                               in the WBQ is greater than this threshold.
                            */
    UINT32 wbq_threshold_for_sdr : 8;

                            /* Bits[16:9], Access Type=RW, default=0x00000000*/

                            /*
                               Allow SDR to pop if number of free entries in
                               the WBQ is greater than this threshold.
                            */
    UINT32 always_push : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /*
                               Always use WbPush instead of WbMtoI.[br] When
                               set to 1, causes all writes to use the WbPush
                               opcode regardless of GO-E/M indication from CHA,
                               causing the line to be pushed to the home socket
                               LLC.[br] This mode is only expected to be used
                               when IODC is disabled. With IODC enabled,
                               Hybrid_Push is expected to be the default mode
                               of operation.[br] This setting is not per
                               channel but per MS2IOSF.
                            */
    UINT32 tph_en : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               BIOS sets this bit to enable TPH (Transaction
                               Processing Hints). If enabled, MS2IOSF
                               interprets the TPH information in the inbound
                               IOSF request, affecting the way it forwards the
                               request onto the coherent fabric. For details,
                               refer to the MS2IOSF HAS.
                            */
    UINT32 rsvd : 4;

                            /* Bits[22:19], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 enable_bl_parity_err_checking : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000001*/

                            /*
                               Enables Parity Error Checking in the IRP on the
                               data received from the BL Ring
                            */
    UINT32 rsvd_24 : 1;

                            /* Bits[24:24], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 enable_bl_cqid_err_checking : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000001*/

                            /*
                               Enables parity error checking on the cqid of the
                               bl packet.
                            */
    UINT32 enable_ak0_cqid_err_checking : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000001*/

                            /*
                               Enables parity error checking on the cqid of the
                               ak0 packet.
                            */
    UINT32 enable_ak1_cqid_err_checking : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000001*/

                            /*
                               Enables parity error checking on the cqid of the
                               ak1 packet.
                            */
    UINT32 rsvd_28 : 3;

                            /* Bits[30:28], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 flushpendwr : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /*
                               Flush currently pending writes to DRAM from the
                               Write Cache[br] When SW writes a 1 to this bit
                               (regardless what the current value of this bit
                               is), IRP clears bit 0 in CIPSTS register and
                               takes a snapshot of the currently pending write
                               transactions in the Cache Tracker, waits for
                               them to complete fully (i.e. deallocate the
                               corresponding Write Cache/RRB entry) and then
                               sets bit 0 in CIPSTS register.[br] Note: IRP
                               does not force transactions out, but rather
                               waits for the transactions that have been tagged
                               when this bit is first set to drain naturally.
                            */

  } Bits;
  UINT32 Data;

} CIPCTRL_IIO_VTD_STRUCT;

/* CIPSTS_IIO_VTD_REG supported on:                                             */
/*      SPRA0 (0x20800148)                                                      */
/*      SPRB0 (0x20800148)                                                      */
/*      SPRHBM (0x20800148)                                                     */
/*      SPRC0 (0x20800148)                                                      */
/*      SPRMCC (0x20800148)                                                     */
/*      SPRUCC (0x20800148)                                                     */
/* Register default value on SPRA0: 0x00000006                                  */
/* Register default value on SPRB0: 0x00000006                                  */
/* Register default value on SPRHBM: 0x00000006                                 */
/* Register default value on SPRC0: 0x00000006                                  */
/* Register default value on SPRMCC: 0x00000006                                 */
/* Register default value on SPRUCC: 0x00000006                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Coherent Interface Protocol Status
*/


#define CIPSTS_IIO_VTD_REG 0x11020148

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 flush_pending_writes : 1;

                            /* Bits[0:0], Access Type=RO/V, default=0x00000000*/

                            /*
                               MS2IOSF clears this bit whenever SW writes
                               CIPPCTRL.flushpendwr. MS2IOSF sets this bit when
                               the pending writes in the Write Cache (at the
                               time SW wrote CIPCTRL.flushpendwr) complete, in
                               other words, once the Write Cache/RRB entry is
                               deallocated for all of those writes.
                            */
    UINT32 rrb_empty : 1;

                            /* Bits[1:1], Access Type=RO/V, default=0x00000001*/

                            /*
                               This indicates that there are no pending
                               requests in the RRB. This is provided mostly as
                               a debug visibility feature.[br] 0: Pending RRB
                               requests[br] 1: RRB Empty This is a live bit and
                               hence can toggle clock by clock
                            */
    UINT32 rrb_non_phold_arb_empty : 1;

                            /* Bits[2:2], Access Type=RO/V, default=0x00000001*/

                            /*
                               This indicates that there are no pending
                               requests in the RRB with the exception of
                               ProcLock/Unlock* messages to the lock arbiter.
                               This is a live bit and hence can toggle clock by
                               clock. This is provided mostly as a debug
                               visibility feature.[br] 0: Pending RRB
                               requests[br] 1: RRB Empty except for any pending
                               Proclock*\/Unlock
                            */
    UINT32 rsvd : 29;

                            /* Bits[31:3], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} CIPSTS_IIO_VTD_STRUCT;

/* HBBAR_N0_IIO_VTD_REG supported on:                                           */
/*      SPRA0 (0x20800170)                                                      */
/*      SPRB0 (0x20800170)                                                      */
/*      SPRHBM (0x20800170)                                                     */
/*      SPRC0 (0x20800170)                                                      */
/*      SPRMCC (0x20800170)                                                     */
/*      SPRUCC (0x20800170)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: BIOS_W                                           */
/* SPRB0 Security PolicyGroup: BIOS_W                                           */
/* SPRHBM Security PolicyGroup: BIOS_W                                          */
/* SPRC0 Security PolicyGroup: BIOS_W                                           */
/* SPRMCC Security PolicyGroup: BIOS_W                                          */
/* SPRUCC Security PolicyGroup: BIOS_W                                          */
/* Base Address Register for HB Registers
Low-BW QoS Enforcement

*/


#define HBBAR_N0_IIO_VTD_REG 0x11020170

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 hb_base_address_enable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* HB base Address Enable */
    UINT32 rsvd : 11;

                            /* Bits[11:1], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 hb_base_address : 20;

                            /* Bits[31:12], Access Type=RW, default=0x00000000*/

                            /*
                               Provides a 4KB-aligned base address for
                               registers relating to Low-BW QoS Enforcement
                               (DDRT). MS2IOSF aborts all inbound accesses to
                               this region.
                            */

  } Bits;
  UINT32 Data;

} HBBAR_N0_IIO_VTD_STRUCT;

/* HBBAR_N1_IIO_VTD_REG supported on:                                           */
/*      SPRA0 (0x20800174)                                                      */
/*      SPRB0 (0x20800174)                                                      */
/*      SPRHBM (0x20800174)                                                     */
/*      SPRC0 (0x20800174)                                                      */
/*      SPRMCC (0x20800174)                                                     */
/*      SPRUCC (0x20800174)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: BIOS_W                                           */
/* SPRB0 Security PolicyGroup: BIOS_W                                           */
/* SPRHBM Security PolicyGroup: BIOS_W                                          */
/* SPRC0 Security PolicyGroup: BIOS_W                                           */
/* SPRMCC Security PolicyGroup: BIOS_W                                          */
/* SPRUCC Security PolicyGroup: BIOS_W                                          */
/* Base Address Register for HB Registers
Low-BW QoS Enforcement

*/


#define HBBAR_N1_IIO_VTD_REG 0x11020174

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 hb_base_address : 20;

                            /* Bits[19:0], Access Type=RW, default=0x00000000*/

                            /*
                               Provides a 4KB-aligned base address for
                               registers relating to Low-BW QoS Enforcement
                               (DDRT). MS2IOSF aborts all inbound accesses to
                               this region.
                            */
    UINT32 rsvd : 12;

                            /* Bits[31:20], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} HBBAR_N1_IIO_VTD_STRUCT;

/* VTBAR_N0_IIO_VTD_REG supported on:                                           */
/*      SPRA0 (0x20800180)                                                      */
/*      SPRB0 (0x20800180)                                                      */
/*      SPRHBM (0x20800180)                                                     */
/*      SPRC0 (0x20800180)                                                      */
/*      SPRMCC (0x20800180)                                                     */
/*      SPRUCC (0x20800180)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: BIOS_W                                           */
/* SPRB0 Security PolicyGroup: BIOS_W                                           */
/* SPRHBM Security PolicyGroup: BIOS_W                                          */
/* SPRC0 Security PolicyGroup: BIOS_W                                           */
/* SPRMCC Security PolicyGroup: BIOS_W                                          */
/* SPRUCC Security PolicyGroup: BIOS_W                                          */
/* Base Address Register for VT-d Registers
*/


#define VTBAR_N0_IIO_VTD_REG 0x11020180

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 vtd_chipset_base_address_enable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               Note that accesses to registers pointed to by
                               VTBAR are accessible via message channel or JTAG
                               mini-port, irrespective of the setting of this
                               enable bit i.e. even if this bit is clear,
                               read/write to VT-d registers are completed
                               normally (writes update registers and reads
                               return the value of the register) for accesses
                               from message channel or JTAG mini-port.
                            */
    UINT32 rsvd : 11;

                            /* Bits[11:1], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vtd_chipset_base_address : 20;

                            /* Bits[31:12], Access Type=RW, default=0x00000000*/

                            /*
                               Provides a 4KB-aligned base address for
                               registers relating to VT-d (IOMMU). MS2IOSF
                               aborts all inbound accesses to this region.
                            */

  } Bits;
  UINT32 Data;

} VTBAR_N0_IIO_VTD_STRUCT;

/* VTBAR_N1_IIO_VTD_REG supported on:                                           */
/*      SPRA0 (0x20800184)                                                      */
/*      SPRB0 (0x20800184)                                                      */
/*      SPRHBM (0x20800184)                                                     */
/*      SPRC0 (0x20800184)                                                      */
/*      SPRMCC (0x20800184)                                                     */
/*      SPRUCC (0x20800184)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: BIOS_W                                           */
/* SPRB0 Security PolicyGroup: BIOS_W                                           */
/* SPRHBM Security PolicyGroup: BIOS_W                                          */
/* SPRC0 Security PolicyGroup: BIOS_W                                           */
/* SPRMCC Security PolicyGroup: BIOS_W                                          */
/* SPRUCC Security PolicyGroup: BIOS_W                                          */
/* Base Address Register for VT-d Registers
*/


#define VTBAR_N1_IIO_VTD_REG 0x11020184

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 vtd_chipset_base_address : 20;

                            /* Bits[19:0], Access Type=RW, default=0x00000000*/

                            /*
                               Provides a 4KB-aligned base address for
                               registers relating to VT-d (IOMMU). MS2IOSF
                               aborts all inbound accesses to this region.
                            */
    UINT32 rsvd : 12;

                            /* Bits[31:20], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} VTBAR_N1_IIO_VTD_STRUCT;

/* VTCORERRSTS_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x20800190)                                                      */
/*      SPRB0 (0x20800190)                                                      */
/*      SPRHBM (0x20800190)                                                     */
/*      SPRC0 (0x20800190)                                                      */
/*      SPRMCC (0x20800190)                                                     */
/*      SPRUCC (0x20800190)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* VT Correctable Error Status
*/


#define VTCORERRSTS_IIO_VTD_REG 0x11020190

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 iommu_tag_iotlb_par_err : 1;

                            /* Bits[0:0], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing an IOTLB
                               lookup
                            */
    UINT32 iommu_tag_sl_l2_par_err : 1;

                            /* Bits[1:1], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred during IOMMU Second
                               Level L2 lookup
                            */
    UINT32 iommu_tag_sl_l3_par_err : 1;

                            /* Bits[2:2], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred during IOMMU Second
                               Level L3 lookup
                            */
    UINT32 iommu_tag_sl_l4_par_err : 1;

                            /* Bits[3:3], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred during IOMMU Second
                               Level L4 lookup
                            */
    UINT32 iommu_tag_sl_l5_par_err : 1;

                            /* Bits[4:4], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred during IOMMU Second
                               Level L5 lookup
                            */
    UINT32 iommu_tag_fl_l2_par_err : 1;

                            /* Bits[5:5], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred during IOMMU First
                               Level L2 lookup
                            */
    UINT32 iommu_tag_fl_l3_par_err : 1;

                            /* Bits[6:6], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred during IOMMU First
                               Level L3 lookup
                            */
    UINT32 iommu_tag_fl_l4_par_err : 1;

                            /* Bits[7:7], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred during IOMMU First
                               Level L4 lookup
                            */
    UINT32 iommu_tag_fl_l5_par_err : 1;

                            /* Bits[8:8], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred during IOMMU First
                               Level L5 lookup
                            */
    UINT32 iommu_tag_pasid_par_err : 1;

                            /* Bits[9:9], Access Type=RW/1C/V/P, default=0x00000000*/

                            /* Placeholder */
    UINT32 iommu_tag_rcc_par_err : 1;

                            /* Bits[10:10], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 iommu_tag_ice_par_err : 1;

                            /* Bits[11:11], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 iommu_data_sl_l2_par_err : 1;

                            /* Bits[12:12], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 iommu_data_sl_l3_par_err : 1;

                            /* Bits[13:13], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 iommu_data_sl_l4_par_err : 1;

                            /* Bits[14:14], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 iommu_data_sl_l5_par_err : 1;

                            /* Bits[15:15], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 iommu_data_fl_l2_par_err : 1;

                            /* Bits[16:16], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 iommu_data_fl_l3_par_err : 1;

                            /* Bits[17:17], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 iommu_data_fl_l4_par_err : 1;

                            /* Bits[18:18], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 iommu_data_fl_l5_par_err : 1;

                            /* Bits[19:19], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 iommu_data_pasid_err : 1;

                            /* Bits[20:20], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 iommu_data_rcc_par_err : 1;

                            /* Bits[21:21], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 iommu_data_ice_par_err : 1;

                            /* Bits[22:22], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 iommu_data_pwt_other_par_err : 1;

                            /* Bits[23:23], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 rsvd : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} VTCORERRSTS_IIO_VTD_STRUCT;

/* VTCORERRMSK_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x20800198)                                                      */
/*      SPRB0 (0x20800198)                                                      */
/*      SPRHBM (0x20800198)                                                     */
/*      SPRC0 (0x20800198)                                                      */
/*      SPRMCC (0x20800198)                                                     */
/*      SPRUCC (0x20800198)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* VT Correctable Error Mask
*/


#define VTCORERRMSK_IIO_VTD_REG 0x11020198

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 iommu_tag_iotlb_par_err_msk : 1;

                            /* Bits[0:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               Mask the tag parity error that occurred while
                               doing an IOTLB lookup
                            */
    UINT32 iommu_tag_sl_l2_par_err_msk : 1;

                            /* Bits[1:1], Access Type=RW/P, default=0x00000000*/

                            /*
                               Mask the tag parity error that occurred during
                               IOMMU Second Level L2 lookup
                            */
    UINT32 iommu_tag_sl_l3_par_err_msk : 1;

                            /* Bits[2:2], Access Type=RW/P, default=0x00000000*/

                            /*
                               Mask the tag parity error that occurred during
                               IOMMU Second Level L3 lookup
                            */
    UINT32 iommu_tag_sl_l4_par_err_msk : 1;

                            /* Bits[3:3], Access Type=RW/P, default=0x00000000*/

                            /*
                               Mask the tag parity error that occurred during
                               IOMMU Second Level L4 lookup
                            */
    UINT32 iommu_tag_sl_l5_par_err_msk : 1;

                            /* Bits[4:4], Access Type=RW/P, default=0x00000000*/

                            /*
                               Mask the tag parity error that occurred during
                               IOMMU Second Level L5 lookup
                            */
    UINT32 iommu_tag_fl_l2_par_err_msk : 1;

                            /* Bits[5:5], Access Type=RW/P, default=0x00000000*/

                            /*
                               Mask the tag parity error that occurred during
                               IOMMU First Level L2 lookup
                            */
    UINT32 iommu_tag_fl_l3_par_err_msk : 1;

                            /* Bits[6:6], Access Type=RW/P, default=0x00000000*/

                            /*
                               Mask the tag parity error that occurred during
                               IOMMU First Level L3 lookup
                            */
    UINT32 iommu_tag_fl_l4_par_err_msk : 1;

                            /* Bits[7:7], Access Type=RW/P, default=0x00000000*/

                            /*
                               Mask the tag parity error that occurred during
                               IOMMU First Level L4 lookup
                            */
    UINT32 iommu_tag_fl_l5_par_err_msk : 1;

                            /* Bits[8:8], Access Type=RW/P, default=0x00000000*/

                            /*
                               Mask the tag parity error that occurred during
                               IOMMU First Level L5 lookup
                            */
    UINT32 iommu_tag_pasid_par_err_msk : 1;

                            /* Bits[9:9], Access Type=RW/P, default=0x00000000*/

                            /* Placeholder */
    UINT32 iommu_tag_rcc_par_err_msk : 1;

                            /* Bits[10:10], Access Type=RW/P, default=0x00000000*/

                            /*
                               Mask the tag parity error that occurred while
                               doing a context cache lookup
                            */
    UINT32 iommu_tag_ice_par_err_msk : 1;

                            /* Bits[11:11], Access Type=RW/P, default=0x00000000*/

                            /*
                               Mask the tag parity error that occurred while
                               doing a context cache lookup
                            */
    UINT32 iommu_data_sl_l2_par_err : 1;

                            /* Bits[12:12], Access Type=RW/P, default=0x00000000*/

                            /*
                               Mask the tag parity error that occurred while
                               doing a context cache lookup
                            */
    UINT32 iommu_data_sl_l3_par_err : 1;

                            /* Bits[13:13], Access Type=RW/P, default=0x00000000*/

                            /*
                               Mask the tag parity error that occurred while
                               doing a context cache lookup
                            */
    UINT32 iommu_data_sl_l4_par_err : 1;

                            /* Bits[14:14], Access Type=RW/P, default=0x00000000*/

                            /*
                               Mask the tag parity error that occurred while
                               doing a context cache lookup
                            */
    UINT32 iommu_data_sl_l5_par_err : 1;

                            /* Bits[15:15], Access Type=RW/P, default=0x00000000*/

                            /*
                               Mask the tag parity error that occurred while
                               doing a context cache lookup
                            */
    UINT32 iommu_data_fl_l2_par_err : 1;

                            /* Bits[16:16], Access Type=RW/P, default=0x00000000*/

                            /*
                               Mask the tag parity error that occurred while
                               doing a context cache lookup
                            */
    UINT32 iommu_data_fl_l3_par_err : 1;

                            /* Bits[17:17], Access Type=RW/P, default=0x00000000*/

                            /*
                               Mask the tag parity error that occurred while
                               doing a context cache lookup
                            */
    UINT32 iommu_data_fl_l4_par_err : 1;

                            /* Bits[18:18], Access Type=RW/P, default=0x00000000*/

                            /*
                               Mask the tag parity error that occurred while
                               doing a context cache lookup
                            */
    UINT32 iommu_data_fl_l5_par_err : 1;

                            /* Bits[19:19], Access Type=RW/P, default=0x00000000*/

                            /*
                               Mask the tag parity error that occurred while
                               doing a context cache lookup
                            */
    UINT32 iommu_data_pasid_par_err : 1;

                            /* Bits[20:20], Access Type=RW/P, default=0x00000000*/

                            /*
                               Mask the tag parity error that occurred while
                               doing a context cache lookup
                            */
    UINT32 iommu_data_rcc_par_err : 1;

                            /* Bits[21:21], Access Type=RW/P, default=0x00000000*/

                            /*
                               Mask the tag parity error that occurred while
                               doing a context cache lookup
                            */
    UINT32 iommu_data_ice_par_err : 1;

                            /* Bits[22:22], Access Type=RW/P, default=0x00000000*/

                            /*
                               Mask the tag parity error that occurred while
                               doing a context cache lookup
                            */
    UINT32 iommu_data_pwt_other_par_err : 1;

                            /* Bits[23:23], Access Type=RW/P, default=0x00000000*/

                            /*
                               Mask the tag parity error that occurred while
                               doing a context cache lookup
                            */
    UINT32 rsvd : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} VTCORERRMSK_IIO_VTD_STRUCT;

/* VTCORFERR_IIO_VTD_REG supported on:                                          */
/*      SPRA0 (0x208001a0)                                                      */
/*      SPRB0 (0x208001a0)                                                      */
/*      SPRHBM (0x208001a0)                                                     */
/*      SPRC0 (0x208001a0)                                                      */
/*      SPRMCC (0x208001a0)                                                     */
/*      SPRUCC (0x208001a0)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* The error status log indicates which error is causing the report of the first correctable error event.
*/


#define VTCORFERR_IIO_VTD_REG 0x110201A0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 iommu_tag_iotlb_par_err : 1;

                            /* Bits[0:0], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing an IOTLB
                               lookup
                            */
    UINT32 iommu_tag_sl_l2_par_err : 1;

                            /* Bits[1:1], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred during IOMMU Second
                               Level L2 lookup
                            */
    UINT32 iommu_tag_sl_l3_par_err : 1;

                            /* Bits[2:2], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred during IOMMU Second
                               Level L3 lookup
                            */
    UINT32 iommu_tag_sl_l4_par_err : 1;

                            /* Bits[3:3], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred during IOMMU Second
                               Level L4 lookup
                            */
    UINT32 iommu_tag_sl_l5_par_err : 1;

                            /* Bits[4:4], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred during IOMMU Second
                               Level L5 lookup
                            */
    UINT32 iommu_tag_fl_l2_par_err : 1;

                            /* Bits[5:5], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred during IOMMU First
                               Level L2 lookup
                            */
    UINT32 iommu_tag_fl_l3_par_err : 1;

                            /* Bits[6:6], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred during IOMMU First
                               Level L3 lookup
                            */
    UINT32 iommu_tag_fl_l4_par_err : 1;

                            /* Bits[7:7], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred during IOMMU First
                               Level L4 lookup
                            */
    UINT32 iommu_tag_fl_l5_par_err : 1;

                            /* Bits[8:8], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred during IOMMU First
                               Level L5 lookup
                            */
    UINT32 iommu_tag_pasid_par_err : 1;

                            /* Bits[9:9], Access Type=RO/V/P, default=0x00000000*/

                            /* Placeholder */
    UINT32 iommu_tag_rcc_par_err : 1;

                            /* Bits[10:10], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 iommu_tag_ice_par_err : 1;

                            /* Bits[11:11], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 iommu_data_sl_l2_par_err : 1;

                            /* Bits[12:12], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 iommu_data_sl_l3_par_err : 1;

                            /* Bits[13:13], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 iommu_data_sl_l4_par_err : 1;

                            /* Bits[14:14], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 iommu_data_sl_l5_par_err : 1;

                            /* Bits[15:15], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 iommu_data_fl_l2_par_err : 1;

                            /* Bits[16:16], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 iommu_data_fl_l3_par_err : 1;

                            /* Bits[17:17], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 iommu_data_fl_l4_par_err : 1;

                            /* Bits[18:18], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 iommu_data_fl_l5_par_err : 1;

                            /* Bits[19:19], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 iommu_data_pasid_err : 1;

                            /* Bits[20:20], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 iommu_data_rcc_err : 1;

                            /* Bits[21:21], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 iommu_data_ice_err : 1;

                            /* Bits[22:22], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 iommu_data_pwt_other_par_err : 1;

                            /* Bits[23:23], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 rsvd : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} VTCORFERR_IIO_VTD_STRUCT;

/* VTCORNERR_IIO_VTD_REG supported on:                                          */
/*      SPRA0 (0x208001a4)                                                      */
/*      SPRB0 (0x208001a4)                                                      */
/*      SPRHBM (0x208001a4)                                                     */
/*      SPRC0 (0x208001a4)                                                      */
/*      SPRMCC (0x208001a4)                                                     */
/*      SPRUCC (0x208001a4)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* The error status log indicates all correctable errors that have occurred since the first correctable error event (second event and later events - multiple bits may be set).
*/


#define VTCORNERR_IIO_VTD_REG 0x110201A4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 iommu_tag_iotlb_par_err : 1;

                            /* Bits[0:0], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing an IOTLB
                               lookup
                            */
    UINT32 iommu_tag_sl_l2_par_err : 1;

                            /* Bits[1:1], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred during IOMMU Second
                               Level L2 lookup
                            */
    UINT32 iommu_tag_sl_l3_par_err : 1;

                            /* Bits[2:2], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred during IOMMU Second
                               Level L3 lookup
                            */
    UINT32 iommu_tag_sl_l4_par_err : 1;

                            /* Bits[3:3], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred during IOMMU Second
                               Level L4 lookup
                            */
    UINT32 iommu_tag_sl_l5_par_err : 1;

                            /* Bits[4:4], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred during IOMMU Second
                               Level L5 lookup
                            */
    UINT32 iommu_tag_fl_l2_par_err : 1;

                            /* Bits[5:5], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred during IOMMU First
                               Level L2 lookup
                            */
    UINT32 iommu_tag_fl_l3_par_err : 1;

                            /* Bits[6:6], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred during IOMMU First
                               Level L3 lookup
                            */
    UINT32 iommu_tag_fl_l4_par_err : 1;

                            /* Bits[7:7], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred during IOMMU First
                               Level L4 lookup
                            */
    UINT32 iommu_tag_fl_l5_par_err : 1;

                            /* Bits[8:8], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred during IOMMU First
                               Level L5 lookup
                            */
    UINT32 iommu_tag_pasid_par_err : 1;

                            /* Bits[9:9], Access Type=RO/V/P, default=0x00000000*/

                            /* Placeholder */
    UINT32 iommu_tag_rcc_par_err : 1;

                            /* Bits[10:10], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 iommu_tag_ice_par_err : 1;

                            /* Bits[11:11], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 iommu_data_sl_l2_par_err : 1;

                            /* Bits[12:12], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 iommu_data_sl_l3_par_err : 1;

                            /* Bits[13:13], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 iommu_data_sl_l4_par_err : 1;

                            /* Bits[14:14], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 iommu_data_sl_l5_par_err : 1;

                            /* Bits[15:15], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 iommu_data_fl_l2_par_err : 1;

                            /* Bits[16:16], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 iommu_data_fl_l3_par_err : 1;

                            /* Bits[17:17], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 iommu_data_fl_l4_par_err : 1;

                            /* Bits[18:18], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 iommu_data_fl_l5_par_err : 1;

                            /* Bits[19:19], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 iommu_data_pasid_par_err : 1;

                            /* Bits[20:20], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 iommu_data_rcc_par_err : 1;

                            /* Bits[21:21], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 iommu_data_ice_par_err : 1;

                            /* Bits[22:22], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 iommu_data_pwt_other_par_err : 1;

                            /* Bits[23:23], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Tag parity error occurred while doing a context
                               cache lookup
                            */
    UINT32 rsvd : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} VTCORNERR_IIO_VTD_STRUCT;

/* VTCORERRCNT_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x208001a8)                                                      */
/*      SPRB0 (0x208001a8)                                                      */
/*      SPRHBM (0x208001a8)                                                     */
/*      SPRC0 (0x208001a8)                                                      */
/*      SPRMCC (0x208001a8)                                                     */
/*      SPRUCC (0x208001a8)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register maintains a counter for the VTd-related correctable errors 
*/


#define VTCORERRCNT_IIO_VTD_REG 0x110201A8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 errcnt : 7;

                            /* Bits[6:0], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Error Accumulator (Counter)[br] This counter
                               counts all VTd correctable errors.[br]
                               Notes:[br] - This register is cleared by writing
                               7Fh.[br] - Maximum counter available is 127d
                               (7Fh)
                            */
    UINT32 errovf : 1;

                            /* Bits[7:7], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Error Accumulator Overflow[br] 0: No overflow
                               occurred[br] 1: Error overflow. The error count
                               may not be valid.
                            */
    UINT32 rsvd : 24;

                            /* Bits[31:8], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} VTCORERRCNT_IIO_VTD_STRUCT;

/* VTUNCERRSTS_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x208001ac)                                                      */
/*      SPRB0 (0x208001ac)                                                      */
/*      SPRHBM (0x208001ac)                                                     */
/*      SPRC0 (0x208001ac)                                                      */
/*      SPRMCC (0x208001ac)                                                     */
/*      SPRUCC (0x208001ac)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* VT Uncorrectable Error Status
*/


#define VTUNCERRSTS_IIO_VTD_REG 0x110201AC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 iommu_data_iotlb_par_err : 1;

                            /* Bits[0:0], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Data parity error occurred while doing an IOTLB
                               lookup
                            */
    UINT32 pq_req_par_err : 1;

                            /* Bits[1:1], Access Type=RW/1C/V/P, default=0x00000000*/

                            /* Pending queue request parity error */
    UINT32 pwt_req_par_err : 1;

                            /* Bits[2:2], Access Type=RW/1C/V/P, default=0x00000000*/

                            /* Page walk tracker request parity error */
    UINT32 iommu_mem_resp_abort : 1;

                            /* Bits[3:3], Access Type=RW/1C/V/P, default=0x00000000*/

                            /* Unsuccessful completion to IOMMU */
    UINT32 ats_pmr_check_abort : 1;

                            /* Bits[4:4], Access Type=RW/1C/V/P, default=0x00000000*/

                            /* ATS address hit PMR check abort */
    UINT32 rsvd : 11;

                            /* Bits[15:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 pmr_check_abort : 1;

                            /* Bits[16:16], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               MS2IOSF blocked a memory request targeting the
                               VT-d protected memory region
                            */
    UINT32 hpa_overflow : 1;

                            /* Bits[17:17], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Size of inbound translated address exceeds
                               system limitation
                            */
    UINT32 gpa_overflow : 1;

                            /* Bits[18:18], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Size of inbound address exceeds IOMMU
                               translation capability
                            */
    UINT32 illegal_msi : 1;

                            /* Bits[19:19], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               MS2IOSF detected an illegal inbound access to
                               the MSI range (0xFEExxxxx)
                            */
    UINT32 at_translated_illegal_device : 1;

                            /* Bits[20:20], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Illegal encoding of Address Type (AT) in the
                               inbound IOSF request header
                            */
    UINT32 spare : 1;

                            /* Bits[21:21], Access Type=RW/1C/V/P, default=0x00000000*/

                            /* Spare Error Bit */
    UINT32 rsvd_22 : 10;

                            /* Bits[31:22], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} VTUNCERRSTS_IIO_VTD_STRUCT;

/* VTUNCERRMSK_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x208001b0)                                                      */
/*      SPRB0 (0x208001b0)                                                      */
/*      SPRHBM (0x208001b0)                                                     */
/*      SPRC0 (0x208001b0)                                                      */
/*      SPRMCC (0x208001b0)                                                     */
/*      SPRUCC (0x208001b0)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Mask out error reporting to IIO. Bit [31] should always be set to 1. We recommend that the other bits be left as zero so these internal errors are reported out. [br]
Setting bits will not prevent any error collecting INSIDE of VTd (in the VTd Fault Recording Registers).
*/


#define VTUNCERRMSK_IIO_VTD_REG 0x110201B0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 iommu_data_iotlb_par_err : 1;

                            /* Bits[0:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               Mask the data parity error that occurred while
                               doing an IOTLB lookup
                            */
    UINT32 pq_req_par_err : 1;

                            /* Bits[1:1], Access Type=RW/P, default=0x00000000*/

                            /*
                               Mask the error logging for Pending queue request
                               parity error
                            */
    UINT32 pwt_req_par_err : 1;

                            /* Bits[2:2], Access Type=RW/P, default=0x00000000*/

                            /*
                               Mask the error logging for Page walk tracer
                               request parity error
                            */
    UINT32 iommu_mem_resp_abort : 1;

                            /* Bits[3:3], Access Type=RW/P, default=0x00000000*/

                            /*
                               Mask the error logging for Unsuccessful
                               completion to IOMMU
                            */
    UINT32 ats_pmr_check_abort : 1;

                            /* Bits[4:4], Access Type=RW/P, default=0x00000000*/

                            /* Mask the error logging for ATS PMR check abort */
    UINT32 rsvd : 11;

                            /* Bits[15:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 pmr_check_abort : 1;

                            /* Bits[16:16], Access Type=RW/P, default=0x00000000*/

                            /* Mask the error logging for PMR violation */
    UINT32 hpa_overflow : 1;

                            /* Bits[17:17], Access Type=RW/P, default=0x00000000*/

                            /*
                               Mask the error logging for Size of inbound
                               translated address exceeds system limitation
                            */
    UINT32 gpa_overflow : 1;

                            /* Bits[18:18], Access Type=RW/P, default=0x00000000*/

                            /*
                               Mask the error logging for Size of inbound
                               address exceeds IOMMU translation capability
                            */
    UINT32 illegal_msi : 1;

                            /* Bits[19:19], Access Type=RW/P, default=0x00000000*/

                            /*
                               Mask the error logging for MS2IOSF detected an
                               illegal inbound access to the MSI range
                               (0xFEExxxxx)
                            */
    UINT32 at_translated_illegal_device : 1;

                            /* Bits[20:20], Access Type=RW/P, default=0x00000000*/

                            /*
                               Mask the error logging for Illegal encoding of
                               address translation in inbound request packet
                            */
    UINT32 spare : 1;

                            /* Bits[21:21], Access Type=RW/P, default=0x00000000*/

                            /* Mask the error logging for Spare Error Bit */
    UINT32 rsvd_22 : 10;

                            /* Bits[31:22], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} VTUNCERRMSK_IIO_VTD_STRUCT;

/* VTUNCERRSEV_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x208001b4)                                                      */
/*      SPRB0 (0x208001b4)                                                      */
/*      SPRHBM (0x208001b4)                                                     */
/*      SPRC0 (0x208001b4)                                                      */
/*      SPRMCC (0x208001b4)                                                     */
/*      SPRUCC (0x208001b4)                                                     */
/* Register default value on SPRA0: 0x003F001F                                  */
/* Register default value on SPRB0: 0x003F001F                                  */
/* Register default value on SPRHBM: 0x003F001F                                 */
/* Register default value on SPRC0: 0x003F001F                                  */
/* Register default value on SPRMCC: 0x003F001F                                 */
/* Register default value on SPRUCC: 0x003F001F                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* VT Uncorrectable Error Severity
*/


#define VTUNCERRSEV_IIO_VTD_REG 0x110201B4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 iommu_data_iotlb_par_err : 1;

                            /* Bits[0:0], Access Type=RW/P, default=0x00000001*/

                            /*
                               Severity of data parity error that occurred
                               while doing an IOTLB lookup.[br] Set to 0x0 for
                               Non-Fatal or 0x1 for Fatal
                            */
    UINT32 pq_req_par_err : 1;

                            /* Bits[1:1], Access Type=RW/P, default=0x00000001*/

                            /*
                               Severity for Pending queue request parity
                               error.[br] Set to 0x0 for Non-Fatal or 0x1 for
                               Fatal
                            */
    UINT32 pwt_other_par_err : 1;

                            /* Bits[2:2], Access Type=RW/P, default=0x00000001*/

                            /*
                               Severity for Page walk tracer other parity
                               error.[br] Set to 0x0 for Non-Fatal or 0x1 for
                               Fatal
                            */
    UINT32 iommu_mem_resp_abort : 1;

                            /* Bits[3:3], Access Type=RW/P, default=0x00000001*/

                            /*
                               Severity for Unsuccessful completion to
                               IOMMU.[br] Set to 0x0 for Non-Fatal or 0x1 for
                               Fatal
                            */
    UINT32 ats_pmr_check_abort : 1;

                            /* Bits[4:4], Access Type=RW/P, default=0x00000001*/

                            /*
                               Severity for ATS PMR check abort Set to 0x0 for
                               Non-Fatal or 0x1 for Fatal
                            */
    UINT32 rsvd : 11;

                            /* Bits[15:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 pmr_check_abort : 1;

                            /* Bits[16:16], Access Type=RW/P, default=0x00000001*/

                            /*
                               Severity for PMR violation.[br] Set to 0x0 for
                               Non-Fatal or 0x1 for Fatal
                            */
    UINT32 hpa_overflow : 1;

                            /* Bits[17:17], Access Type=RW/P, default=0x00000001*/

                            /*
                               Severity for Size of inbound translated address
                               exceeds system limitation.[br] Set to 0x0 for
                               Non-Fatal or 0x1 for Fatal
                            */
    UINT32 gpa_overflow : 1;

                            /* Bits[18:18], Access Type=RW/P, default=0x00000001*/

                            /*
                               Severity for Size of inbound address exceeds
                               IOMMU translation capability.[br] Set to 0x0 for
                               Non-Fatal or 0x1 for Fatal
                            */
    UINT32 illegal_msi : 1;

                            /* Bits[19:19], Access Type=RW/P, default=0x00000001*/

                            /*
                               Severity for MS2IOSF detected an illegal inbound
                               access to the MSI range (0xFEExxxxx).[br] Set to
                               0x0 for Non-Fatal or 0x1 for Fatal
                            */
    UINT32 at_translated_illegal_device : 1;

                            /* Bits[20:20], Access Type=RW/P, default=0x00000001*/

                            /*
                               Severity for Illegal encoding of address
                               translation in inbound request packet.[br] Set
                               to 0x0 for Non-Fatal or 0x1 for Fatal
                            */
    UINT32 spare : 1;

                            /* Bits[21:21], Access Type=RW/P, default=0x00000001*/

                            /*
                               Severity for Spare Error Bit.[br] Set to 0x0 for
                               Non-Fatal or 0x1 for Fatal
                            */
    UINT32 rsvd_22 : 10;

                            /* Bits[31:22], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} VTUNCERRSEV_IIO_VTD_STRUCT;

/* VTUNCFERR_IIO_VTD_REG supported on:                                          */
/*      SPRA0 (0x208001b8)                                                      */
/*      SPRB0 (0x208001b8)                                                      */
/*      SPRHBM (0x208001b8)                                                     */
/*      SPRC0 (0x208001b8)                                                      */
/*      SPRMCC (0x208001b8)                                                     */
/*      SPRUCC (0x208001b8)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* The error status log indicates which error is causing the report of the first uncorrectable error event.
*/


#define VTUNCFERR_IIO_VTD_REG 0x110201B8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 iommu_data_iotlb_par_err : 1;

                            /* Bits[0:0], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Data parity error occurred while doing an IOTLB
                               lookup
                            */
    UINT32 pq_req_par_err : 1;

                            /* Bits[1:1], Access Type=RO/V/P, default=0x00000000*/

                            /* Pending queue request parity error */
    UINT32 pwt_req_par_err : 1;

                            /* Bits[2:2], Access Type=RO/V/P, default=0x00000000*/

                            /* Page walk tracer request parity error */
    UINT32 iommu_mem_resp_abort : 1;

                            /* Bits[3:3], Access Type=RO/V/P, default=0x00000000*/

                            /* Unsuccessful completion to IOMMU */
    UINT32 ats_pmr_check_abort : 1;

                            /* Bits[4:4], Access Type=RO/V/P, default=0x00000000*/

                            /* ATS address hit PMR check abort */
    UINT32 rsvd : 11;

                            /* Bits[15:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 pmr_check_abort : 1;

                            /* Bits[16:16], Access Type=RO/V/P, default=0x00000000*/

                            /* PMR violation */
    UINT32 hpa_overflow : 1;

                            /* Bits[17:17], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Size of inbound translated address exceeds
                               system limitation
                            */
    UINT32 gpa_overflow : 1;

                            /* Bits[18:18], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Size of inbound address exceeds IOMMU
                               translation capability
                            */
    UINT32 illegal_msi : 1;

                            /* Bits[19:19], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               MS2IOSF detected an illegal inbound access to
                               the MSI range (0xFEExxxxx)
                            */
    UINT32 at_translated_illegal_device : 1;

                            /* Bits[20:20], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Illegal encoding of address translation in
                               inbound request packet
                            */
    UINT32 spare : 1;

                            /* Bits[21:21], Access Type=RO/V/P, default=0x00000000*/

                            /* Spare Error Bit */
    UINT32 rsvd_22 : 10;

                            /* Bits[31:22], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} VTUNCFERR_IIO_VTD_STRUCT;

/* VTUNCNERR_IIO_VTD_REG supported on:                                          */
/*      SPRA0 (0x208001bc)                                                      */
/*      SPRB0 (0x208001bc)                                                      */
/*      SPRHBM (0x208001bc)                                                     */
/*      SPRC0 (0x208001bc)                                                      */
/*      SPRMCC (0x208001bc)                                                     */
/*      SPRUCC (0x208001bc)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* The error status log indicates all uncorrectable errors that have occurred since the first uncorrectable error event (second event and later events - multiple bits may be set).
*/


#define VTUNCNERR_IIO_VTD_REG 0x110201BC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 iommu_data_iotlb_par_err : 1;

                            /* Bits[0:0], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Data parity error occurred while doing an IOTLB
                               lookup
                            */
    UINT32 pq_req_par_err : 1;

                            /* Bits[1:1], Access Type=RO/V/P, default=0x00000000*/

                            /* Pending queue request parity error */
    UINT32 pwt_req_par_err : 1;

                            /* Bits[2:2], Access Type=RO/V/P, default=0x00000000*/

                            /* Page walk tracer request parity error */
    UINT32 iommu_mem_resp_abort : 1;

                            /* Bits[3:3], Access Type=RO/V/P, default=0x00000000*/

                            /* Unsuccessful completion to IOMMU */
    UINT32 ats_pmr_check_abort : 1;

                            /* Bits[4:4], Access Type=RO/V/P, default=0x00000000*/

                            /* ATS address hit PMR check abort */
    UINT32 rsvd : 11;

                            /* Bits[15:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 pmr_check_abort : 1;

                            /* Bits[16:16], Access Type=RO/V/P, default=0x00000000*/

                            /* PMR violation */
    UINT32 hpa_overflow : 1;

                            /* Bits[17:17], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Size of inbound translated address exceeds
                               system limitation
                            */
    UINT32 gpa_overflow : 1;

                            /* Bits[18:18], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Size of inbound address exceeds IOMMU
                               translation capability
                            */
    UINT32 illegal_msi : 1;

                            /* Bits[19:19], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               MS2IOSF detected an illegal inbound access to
                               the MSI range (0xFEExxxxx)
                            */
    UINT32 at_translated_illegal_device : 1;

                            /* Bits[20:20], Access Type=RO/V/P, default=0x00000000*/

                            /*
                               Illegal encoding of address translation in
                               inbound request packet
                            */
    UINT32 spare : 1;

                            /* Bits[21:21], Access Type=RO/V/P, default=0x00000000*/

                            /* Spare Error Bit */
    UINT32 rsvd_22 : 10;

                            /* Bits[31:22], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} VTUNCNERR_IIO_VTD_STRUCT;

/* IIOMISCCTRL_N0_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x208001c0)                                                      */
/*      SPRB0 (0x208001c0)                                                      */
/*      SPRHBM (0x208001c0)                                                     */
/*      SPRC0 (0x208001c0)                                                      */
/*      SPRMCC (0x208001c0)                                                     */
/*      SPRUCC (0x208001c0)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* IIO MISC Control
*/


#define IIOMISCCTRL_N0_IIO_VTD_REG 0x110201C0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd_0 : 1;

                            /* Bits[0:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd : 1;

                            /* Bits[1:1], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 en1k : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               This bit when set, enables 1K granularity for
                               I/O space decode in each of the virtual P2P
                               bridges corresponding to root ports, and DMI
                               ports.
                            */
    UINT32 enable_mctpb_to_stack0 : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               By default, MCTP broadcast will not be sourced
                               from a non-zero stack ID M2IOSF. Consequently,
                               ITC does not allow local p2p mctp broadcast to
                               stack 0 by default. This defeature bit allows
                               the design to support broadcast to stack 0 when
                               set.
                            */
    UINT32 rsvd_4 : 6;

                            /* Bits[9:4], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 legacy_port : 1;

                            /* Bits[10:10], Access Type=RW/V, default=0x00000000*/

                            /*
                               This field indicates if this MS2IOSF instance
                               connects to the legacy DMI port, which is the
                               case if this is the legacy socket and the
                               MS2IOSF stack ID equals zero. [br] Hardware
                               initializes this bit based on straps.
                            */
    UINT32 splitlockopt : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               To reduce latency for splitlock transactions,
                               when set, Ubox will not send Stopreq3, Stopreq4,
                               Startreq2 & Startreq3 to MS2IOSF. This bit
                               configures MS2IOSF so that it does not wait for
                               those messages from UBOX during a lock flow.
                            */
    UINT32 lock_thaw_mode : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Mode controls how inbound queues in the south
                               agents (PCIE, DMI) thaw when they are target of
                               a locked read.[br] 0: Thaw only posted
                               requests[br] 1: Thaw posted and non-posted
                               requests.[br] Note that if the lock target is
                               also a problematic port (as indicated by in
                               MISCCTRLSTS register), then this becomes
                               meaningless because both posted and non-posted
                               requests are thawed.
                            */
    UINT32 rsvd_13 : 6;

                            /* Bits[18:13], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rvgaen : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000000*/

                            /*
                               Remote VGA EnableEnables VGA accesses to be sent
                               to remote node.[br] If set, accesses to the VGA
                               region (A_0000 to B_FFFF) will be forwarded to
                               the CHA where it will determine the node ID
                               where the VGA region resides. It will then be
                               forwarded to the given remote node.[br] If
                               clear, then VGA accesses will be forwarded to
                               the local PCIe port that has its VGAEN set. If
                               none have their VGAEN set, then the request will
                               be forwarded to the local DMI port, if operating
                               in DMI mode. If it is not operating in DMI mode,
                               then the request will be aborted.
                            */
    UINT32 rsvd_20 : 4;

                            /* Bits[23:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 disable_all_allocating_flows : 1;

                            /* Bits[24:24], Access Type=RW, default=0x00000000*/

                            /*
                               When this bit is set, MS2IOSF will no longer
                               issue any new inbound writes that can allocate
                               into LLC. Instead, all the writes will use one
                               of the non-allocating commands. Software should
                               set this bit only when no requests are being
                               actively issued, e.g. via lock/quiesce flow.
                            */
    UINT32 disable_inb_config_sai_check : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /*
                               When set, MS2IOSF allows inbound configuration
                               requests from all sources without checking for
                               SAI
                            */
    UINT32 rsvd_26 : 6;

                            /* Bits[31:26], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} IIOMISCCTRL_N0_IIO_VTD_STRUCT;

/* IIOMISCCTRL_N1_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x208001c4)                                                      */
/*      SPRB0 (0x208001c4)                                                      */
/*      SPRHBM (0x208001c4)                                                     */
/*      SPRC0 (0x208001c4)                                                      */
/*      SPRMCC (0x208001c4)                                                     */
/*      SPRUCC (0x208001c4)                                                     */
/* Register default value on SPRA0: 0x00800010                                  */
/* Register default value on SPRB0: 0x00800010                                  */
/* Register default value on SPRHBM: 0x00800010                                 */
/* Register default value on SPRC0: 0x00800010                                  */
/* Register default value on SPRMCC: 0x00800010                                 */
/* Register default value on SPRUCC: 0x00800010                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* IIO MISC Control
*/


#define IIOMISCCTRL_N1_IIO_VTD_REG 0x110201C4

#if defined(SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 showportid : 1;

                            /* Bits[0:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               This register field is obsolete. In previous
                               generations, if enabled, the AD Ring TNID[2:0]
                               field reflected the PCI Express Port identifier.
                            */
    UINT32 force_6b_mc_group : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Defeature that affects the number of bits in the
                               address representing the multicast group:[br]
                               0x0 Number of bits defined by the respective
                               bank's mcast_ctrl.mc_num_group setting[br] 0x1
                               Force the number of bits to 6
                            */
    UINT32 rsvd : 2;

                            /* Bits[3:2], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 poisocfen : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000001*/

                            /*
                               Poison Outbound Completion Forwarding Enable[br]
                               Enables poisoned data received on outbound
                               completions to be forwarded to the destination
                               (IOSF Peer).[br] 0: Poison indication is not
                               forwarded with the data (this may result in
                               silent corruption if AER poison reporting is
                               disabled in the PCIe root port).[br] 1: Poison
                               indication is forwarded with the data
                            */
    UINT32 poisfen : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Poison Forwarding Enable[br] Enables poisoned
                               data to be forwarded to the destination (DRAM or
                               Cache or IOSF Peer, for all inbound requests and
                               outbound requests that are not completions).[br]
                               0: Poison indication is not forwarded with the
                               data (this may result in silent corruption if
                               AER poison reporting is disabled in the PCIe
                               root port).[br] 1: Poison indication is
                               forwarded with the data
                            */
    UINT32 rsvd_6 : 1;

                            /* Bits[6:6], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rdcur_cachenear : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Setting this bit will set the cachenear field in
                               the RdCur opcode causing the CHA to cache the
                               line in the LLC
                            */
    UINT32 rsvd_8 : 15;

                            /* Bits[22:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 irp_ob_ncs_faf_en : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000001*/

                            /*
                               Enable outbound NCS fire-and-forget for
                               transactions requiring data responses
                            */
    UINT32 rsvd_24 : 6;

                            /* Bits[29:24], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 csr_wrcache_snapshot_drain_during_lock : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               When this register is set M2IOSF will take a
                               snapshot of the outstanding txns in the IRP
                               wrcache and will only track if those are drained
                               before indicating idle or cachelines_drained to
                               the lock arbiter in TC. This will allow channels
                               that have do_not_block_during_lock set to have
                               outstanding txns and still allow the lock state
                               m/c to progress without waiting for those txns
                               to be drained
                            */
    UINT32 csr_en_dns_txn_during_lock : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /*
                               When set, MS2IOSF allows outbound requests
                               during lock. If MS2IOSF receives a request
                               during lock, and this bit is set, MS2IOSF will:
                               [br] 1. Thaw the target channel (UpS & DnS)[br]
                               2. Issue the request as a normal memory request,
                               not a locked memory request (MS2IOSF will never
                               issue MRdLck or MWrLck on IOSF)[br] 3. Log an
                               error (chicken bit set or not) in
                               TCERRSTS.OTC_TXN_DUR_LOCK
                            */

  } Bits;
  UINT32 Data;

} IIOMISCCTRL_N1_IIO_VTD_SPRA0_SPRB0_SPRHBM_STRUCT;
#endif /* (SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) */

#if defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 showportid : 1;

                            /* Bits[0:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               This register field is obsolete. In previous
                               generations, if enabled, the AD Ring TNID[2:0]
                               field reflected the PCI Express Port identifier.
                            */
    UINT32 force_6b_mc_group : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Defeature that affects the number of bits in the
                               address representing the multicast group:[br]
                               0x0 Number of bits defined by the respective
                               bank's mcast_ctrl.mc_num_group setting[br] 0x1
                               Force the number of bits to 6
                            */
    UINT32 rsvd : 2;

                            /* Bits[3:2], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 poisocfen : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000001*/

                            /*
                               Poison Outbound Completion Forwarding Enable[br]
                               Enables poisoned data received on outbound
                               completions to be forwarded to the destination
                               (IOSF Peer).[br] 0: Poison indication is not
                               forwarded with the data (this may result in
                               silent corruption if AER poison reporting is
                               disabled in the PCIe root port).[br] 1: Poison
                               indication is forwarded with the data
                            */
    UINT32 poisfen : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Poison Forwarding Enable[br] Enables poisoned
                               data to be forwarded to the destination (DRAM or
                               Cache or IOSF Peer, for all inbound requests and
                               outbound requests that are not completions).[br]
                               0: Poison indication is not forwarded with the
                               data (this may result in silent corruption if
                               AER poison reporting is disabled in the PCIe
                               root port).[br] 1: Poison indication is
                               forwarded with the data
                            */
    UINT32 rsvd_6 : 1;

                            /* Bits[6:6], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rdcur_cachenear : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Setting this bit will set the cachenear field in
                               the RdCur opcode causing the CHA to cache the
                               line in the LLC
                            */
    UINT32 rdcurptl_cachenear : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Setting this bit will set the cachenear field in
                               the FsRdCurrPtl opcode causing the CHA to cache
                               the line in the LLC
                            */
    UINT32 rsvd_9 : 14;

                            /* Bits[22:9], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 irp_ob_ncs_faf_en : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000001*/

                            /*
                               Enable outbound NCS fire-and-forget for
                               transactions requiring data responses
                            */
    UINT32 rsvd_24 : 6;

                            /* Bits[29:24], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 csr_wrcache_snapshot_drain_during_lock : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               When this register is set M2IOSF will take a
                               snapshot of the outstanding txns in the IRP
                               wrcache and will only track if those are drained
                               before indicating idle or cachelines_drained to
                               the lock arbiter in TC. This will allow channels
                               that have do_not_block_during_lock set to have
                               outstanding txns and still allow the lock state
                               m/c to progress without waiting for those txns
                               to be drained
                            */
    UINT32 csr_en_dns_txn_during_lock : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /*
                               When set, MS2IOSF allows outbound requests
                               during lock. If MS2IOSF receives a request
                               during lock, and this bit is set, MS2IOSF will:
                               [br] 1. Thaw the target channel (UpS & DnS)[br]
                               2. Issue the request as a normal memory request,
                               not a locked memory request (MS2IOSF will never
                               issue MRdLck or MWrLck on IOSF)[br] 3. Log an
                               error (chicken bit set or not) in
                               TCERRSTS.OTC_TXN_DUR_LOCK
                            */

  } Bits;
  UINT32 Data;

} IIOMISCCTRL_N1_IIO_VTD_SPRC0_SPRMCC_SPRUCC_STRUCT;
#endif /* (SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 showportid : 1;

                            /* Bits[0:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               This register field is obsolete. In previous
                               generations, if enabled, the AD Ring TNID[2:0]
                               field reflected the PCI Express Port identifier.
                            */
    UINT32 force_6b_mc_group : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Defeature that affects the number of bits in the
                               address representing the multicast group:[br]
                               0x0 Number of bits defined by the respective
                               bank's mcast_ctrl.mc_num_group setting[br] 0x1
                               Force the number of bits to 6
                            */
    UINT32 rsvd : 2;

                            /* Bits[3:2], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 poisocfen : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000001*/

                            /*
                               Poison Outbound Completion Forwarding Enable[br]
                               Enables poisoned data received on outbound
                               completions to be forwarded to the destination
                               (IOSF Peer).[br] 0: Poison indication is not
                               forwarded with the data (this may result in
                               silent corruption if AER poison reporting is
                               disabled in the PCIe root port).[br] 1: Poison
                               indication is forwarded with the data
                            */
    UINT32 poisfen : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Poison Forwarding Enable[br] Enables poisoned
                               data to be forwarded to the destination (DRAM or
                               Cache or IOSF Peer, for all inbound requests and
                               outbound requests that are not completions).[br]
                               0: Poison indication is not forwarded with the
                               data (this may result in silent corruption if
                               AER poison reporting is disabled in the PCIe
                               root port).[br] 1: Poison indication is
                               forwarded with the data
                            */
    UINT32 rsvd_6 : 1;

                            /* Bits[6:6], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rdcur_cachenear : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Setting this bit will set the cachenear field in
                               the RdCur opcode causing the CHA to cache the
                               line in the LLC
                            */
    UINT32 rsvd_8 : 15;

                            /* Bits[22:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 irp_ob_ncs_faf_en : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000001*/

                            /*
                               Enable outbound NCS fire-and-forget for
                               transactions requiring data responses
                            */
    UINT32 rsvd_24 : 6;

                            /* Bits[29:24], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 csr_wrcache_snapshot_drain_during_lock : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               When this register is set M2IOSF will take a
                               snapshot of the outstanding txns in the IRP
                               wrcache and will only track if those are drained
                               before indicating idle or cachelines_drained to
                               the lock arbiter in TC. This will allow channels
                               that have do_not_block_during_lock set to have
                               outstanding txns and still allow the lock state
                               m/c to progress without waiting for those txns
                               to be drained
                            */
    UINT32 csr_en_dns_txn_during_lock : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /*
                               When set, MS2IOSF allows outbound requests
                               during lock. If MS2IOSF receives a request
                               during lock, and this bit is set, MS2IOSF will:
                               [br] 1. Thaw the target channel (UpS & DnS)[br]
                               2. Issue the request as a normal memory request,
                               not a locked memory request (MS2IOSF will never
                               issue MRdLck or MWrLck on IOSF)[br] 3. Log an
                               error (chicken bit set or not) in
                               TCERRSTS.OTC_TXN_DUR_LOCK
                            */

  } Bits;
  UINT32 Data;

} IIOMISCCTRL_N1_IIO_VTD_STRUCT;

/* EOI_BROADCAST_EN_IIO_VTD_REG supported on:                                   */
/*      SPRA0 (0x208001e0)                                                      */
/*      SPRB0 (0x208001e0)                                                      */
/*      SPRHBM (0x208001e0)                                                     */
/*      SPRC0 (0x208001e0)                                                      */
/*      SPRMCC (0x208001e0)                                                     */
/*      SPRUCC (0x208001e0)                                                     */
/* Register default value on SPRA0: 0x00080000                                  */
/* Register default value on SPRB0: 0x00080000                                  */
/* Register default value on SPRHBM: 0x00080000                                 */
/* Register default value on SPRC0: 0x00080000                                  */
/* Register default value on SPRMCC: 0x00080000                                 */
/* Register default value on SPRUCC: 0x00080000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register indicates which decoder banks should be the target of broadcast EOI messages.
*/


#define EOI_BROADCAST_EN_IIO_VTD_REG 0x110201E0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 eoi_bcast_en : 20;

                            /* Bits[19:0], Access Type=RW, default=0x00080000*/

                            /*
                               EOI Broadcast Enable - Enable EOI broadcast to
                               all banks for which the corresponding bit is set
                               (bit 0 - bank 0, bit 1 - bank 1, etc).[br] When
                               set, EOI message will be broadcast down this
                               channel.[br] BIOS must clear the bit for a bank
                               if it is connected to an NTB. It must also clear
                               it for devices that should not or cannot receive
                               EOI.
                            */
    UINT32 rsvd : 12;

                            /* Bits[31:20], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} EOI_BROADCAST_EN_IIO_VTD_STRUCT;

/* MCTP_BROADCAST_EN_IIO_VTD_REG supported on:                                  */
/*      SPRA0 (0x208001e4)                                                      */
/*      SPRB0 (0x208001e4)                                                      */
/*      SPRHBM (0x208001e4)                                                     */
/*      SPRC0 (0x208001e4)                                                      */
/*      SPRMCC (0x208001e4)                                                     */
/*      SPRUCC (0x208001e4)                                                     */
/* Register default value on SPRA0: 0x000800FF                                  */
/* Register default value on SPRB0: 0x000800FF                                  */
/* Register default value on SPRHBM: 0x000800FF                                 */
/* Register default value on SPRC0: 0x000800FF                                  */
/* Register default value on SPRMCC: 0x000800FF                                 */
/* Register default value on SPRUCC: 0x000800FF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register indicates which decoder banks should be the target of broadcast MCTP messages.
*/


#define MCTP_BROADCAST_EN_IIO_VTD_REG 0x110201E4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mctp_bcast_en : 20;

                            /* Bits[19:0], Access Type=RW, default=0x000800FF*/

                            /*
                               MCTP Broadcast Enable - Enable MCTP broadcast to
                               all banks for which the corresponding bit is set
                               (bit 0 - bank 0, bit 1 - bank 1, etc).[br] When
                               set, this bit will enable a broadcast MCTP
                               message (w/ Routing Type of 'Broadcast from RC')
                               to the device ID of the corresponding bank. This
                               bit is provided as a general chicken bit in case
                               there are devices that cannot handle receiving
                               this message or for the case where p2p posted
                               traffic is to be specifically prohibited to this
                               port to avoid deadlocks, like can happen if this
                               port is the 'problematic' port.
                            */
    UINT32 rsvd : 12;

                            /* Bits[31:20], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MCTP_BROADCAST_EN_IIO_VTD_STRUCT;

/* ENQ_CAPABLE_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x208001e8)                                                      */
/*      SPRB0 (0x208001e8)                                                      */
/*      SPRHBM (0x208001e8)                                                     */
/*      SPRC0 (0x208001e8)                                                      */
/*      SPRMCC (0x208001e8)                                                     */
/*      SPRUCC (0x208001e8)                                                     */
/* Register default value on SPRA0: 0x00080000                                  */
/* Register default value on SPRB0: 0x00080000                                  */
/* Register default value on SPRHBM: 0x00080000                                 */
/* Register default value on SPRC0: 0x00080000                                  */
/* Register default value on SPRMCC: 0x00080000                                 */
/* Register default value on SPRUCC: 0x00080000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register indicates whether the bank is ENQ capable or not.
*/


#define ENQ_CAPABLE_IIO_VTD_REG 0x110201E8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 enq_capable : 20;

                            /* Bits[19:0], Access Type=RW, default=0x00080000*/

                            /*
                               0 - Not Enq Capable 1 - Enq Capable enq_capable
                               bit for subtractive bank (bit-27) is set by
                               default.
                            */
    UINT32 rsvd : 12;

                            /* Bits[31:20], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ENQ_CAPABLE_IIO_VTD_STRUCT;

/* GENPROTRANGE0_BASE_N0_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800200)                                                      */
/*      SPRB0 (0x20800200)                                                      */
/*      SPRHBM (0x20800200)                                                     */
/*      SPRC0 (0x20800200)                                                      */
/*      SPRMCC (0x20800200)                                                     */
/*      SPRUCC (0x20800200)                                                     */
/* Register default value on SPRA0: 0xFFFF0000                                  */
/* Register default value on SPRB0: 0xFFFF0000                                  */
/* Register default value on SPRHBM: 0xFFFF0000                                 */
/* Register default value on SPRC0: 0xFFFF0000                                  */
/* Register default value on SPRMCC: 0xFFFF0000                                 */
/* Register default value on SPRUCC: 0xFFFF0000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Base address of generic memory address range that needs to be protected from inbound accesses. The protected memory range can be anywhere in the memory space addressable by the processor. Addresses that fall in this range i.e. GenProtRange.Base[63:16] <= Address [63:16] <= GenProtRange.Limit [63:16], are completer aborted by MS2IOSF. Setting the protected range base address greater than the limit address disables the protected memory region. Since this register provides for a generic range, it can be used to protect any system memory region or MMIO region from DMA accesses. This register is programmed once at boot time and does not change after that, including any quiesce flows.
*/


#define GENPROTRANGE0_BASE_N0_IIO_VTD_REG 0x11020200

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 16;

                            /* Bits[15:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 addr : 16;

                            /* Bits[31:16], Access Type=RW, default=0x0000FFFF*/

                            /*
                               Base address [51:16] of generic memory address
                               range that MS2IOSF protects from inbound
                               accesses
                            */

  } Bits;
  UINT32 Data;

} GENPROTRANGE0_BASE_N0_IIO_VTD_STRUCT;

/* GENPROTRANGE0_BASE_N1_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800204)                                                      */
/*      SPRB0 (0x20800204)                                                      */
/*      SPRHBM (0x20800204)                                                     */
/*      SPRC0 (0x20800204)                                                      */
/*      SPRMCC (0x20800204)                                                     */
/*      SPRUCC (0x20800204)                                                     */
/* Register default value on SPRA0: 0x000FFFFF                                  */
/* Register default value on SPRB0: 0x000FFFFF                                  */
/* Register default value on SPRHBM: 0x000FFFFF                                 */
/* Register default value on SPRC0: 0x000FFFFF                                  */
/* Register default value on SPRMCC: 0x000FFFFF                                 */
/* Register default value on SPRUCC: 0x000FFFFF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Base address of generic memory address range that needs to be protected from inbound accesses. The protected memory range can be anywhere in the memory space addressable by the processor. Addresses that fall in this range i.e. GenProtRange.Base[63:16] <= Address [63:16] <= GenProtRange.Limit [63:16], are completer aborted by MS2IOSF. Setting the protected range base address greater than the limit address disables the protected memory region. Since this register provides for a generic range, it can be used to protect any system memory region or MMIO region from DMA accesses. This register is programmed once at boot time and does not change after that, including any quiesce flows.
*/


#define GENPROTRANGE0_BASE_N1_IIO_VTD_REG 0x11020204

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 addr : 20;

                            /* Bits[19:0], Access Type=RW, default=0x000FFFFF*/

                            /*
                               Base address [51:16] of generic memory address
                               range that MS2IOSF protects from inbound
                               accesses
                            */
    UINT32 rsvd : 12;

                            /* Bits[31:20], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} GENPROTRANGE0_BASE_N1_IIO_VTD_STRUCT;

/* GENPROTRANGE0_LIMIT_N0_IIO_VTD_REG supported on:                             */
/*      SPRA0 (0x20800208)                                                      */
/*      SPRB0 (0x20800208)                                                      */
/*      SPRHBM (0x20800208)                                                     */
/*      SPRC0 (0x20800208)                                                      */
/*      SPRMCC (0x20800208)                                                     */
/*      SPRUCC (0x20800208)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Limit address of generic memory address range that needs to be protected from inbound accesses. The protected memory range can be anywhere in the memory space addressable by the processor. Addresses that fall in this range i.e. GenProtRange.Base[63:16] <= Address [63:16] <= GenProtRange.Limit [63:16], are completer aborted by MS2IOSF. Setting the protected range base address greater than the limit address disables the protected memory region. Since this register provides for a generic range, it can be used to protect any system memory region or MMIO region from DMA accesses. This register is programmed once at boot time and does not change after that, including any quiesce flows. 
*/


#define GENPROTRANGE0_LIMIT_N0_IIO_VTD_REG 0x11020208

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 16;

                            /* Bits[15:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 addr : 16;

                            /* Bits[31:16], Access Type=RW, default=0x00000000*/

                            /*
                               Limit address [51:16] of generic memory address
                               range that MS2IOSF protects from inbound
                               accesses
                            */

  } Bits;
  UINT32 Data;

} GENPROTRANGE0_LIMIT_N0_IIO_VTD_STRUCT;

/* GENPROTRANGE0_LIMIT_N1_IIO_VTD_REG supported on:                             */
/*      SPRA0 (0x2080020c)                                                      */
/*      SPRB0 (0x2080020c)                                                      */
/*      SPRHBM (0x2080020c)                                                     */
/*      SPRC0 (0x2080020c)                                                      */
/*      SPRMCC (0x2080020c)                                                     */
/*      SPRUCC (0x2080020c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Limit address of generic memory address range that needs to be protected from inbound accesses. The protected memory range can be anywhere in the memory space addressable by the processor. Addresses that fall in this range i.e. GenProtRange.Base[63:16] <= Address [63:16] <= GenProtRange.Limit [63:16], are completer aborted by MS2IOSF. Setting the protected range base address greater than the limit address disables the protected memory region. Since this register provides for a generic range, it can be used to protect any system memory region or MMIO region from DMA accesses. This register is programmed once at boot time and does not change after that, including any quiesce flows. 
*/


#define GENPROTRANGE0_LIMIT_N1_IIO_VTD_REG 0x1102020C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 addr : 20;

                            /* Bits[19:0], Access Type=RW, default=0x00000000*/

                            /*
                               Limit address [51:16] of generic memory address
                               range that MS2IOSF protects from inbound
                               accesses
                            */
    UINT32 rsvd : 12;

                            /* Bits[31:20], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} GENPROTRANGE0_LIMIT_N1_IIO_VTD_STRUCT;

/* GENPROTRANGE1_BASE_N0_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800210)                                                      */
/*      SPRB0 (0x20800210)                                                      */
/*      SPRHBM (0x20800210)                                                     */
/*      SPRC0 (0x20800210)                                                      */
/*      SPRMCC (0x20800210)                                                     */
/*      SPRUCC (0x20800210)                                                     */
/* Register default value on SPRA0: 0xFFFF0000                                  */
/* Register default value on SPRB0: 0xFFFF0000                                  */
/* Register default value on SPRHBM: 0xFFFF0000                                 */
/* Register default value on SPRC0: 0xFFFF0000                                  */
/* Register default value on SPRMCC: 0xFFFF0000                                 */
/* Register default value on SPRUCC: 0xFFFF0000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Refer to description for GENPROTRANGE0
*/


#define GENPROTRANGE1_BASE_N0_IIO_VTD_REG 0x11020210

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 16;

                            /* Bits[15:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 addr : 16;

                            /* Bits[31:16], Access Type=RW, default=0x0000FFFF*/

                            /*
                               Base address [51:16] of generic memory address
                               range that MS2IOSF protects from inbound
                               accesses
                            */

  } Bits;
  UINT32 Data;

} GENPROTRANGE1_BASE_N0_IIO_VTD_STRUCT;

/* GENPROTRANGE1_BASE_N1_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800214)                                                      */
/*      SPRB0 (0x20800214)                                                      */
/*      SPRHBM (0x20800214)                                                     */
/*      SPRC0 (0x20800214)                                                      */
/*      SPRMCC (0x20800214)                                                     */
/*      SPRUCC (0x20800214)                                                     */
/* Register default value on SPRA0: 0x000FFFFF                                  */
/* Register default value on SPRB0: 0x000FFFFF                                  */
/* Register default value on SPRHBM: 0x000FFFFF                                 */
/* Register default value on SPRC0: 0x000FFFFF                                  */
/* Register default value on SPRMCC: 0x000FFFFF                                 */
/* Register default value on SPRUCC: 0x000FFFFF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Refer to description for GENPROTRANGE0
*/


#define GENPROTRANGE1_BASE_N1_IIO_VTD_REG 0x11020214

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 addr : 20;

                            /* Bits[19:0], Access Type=RW, default=0x000FFFFF*/

                            /*
                               Base address [51:16] of generic memory address
                               range that MS2IOSF protects from inbound
                               accesses
                            */
    UINT32 rsvd : 12;

                            /* Bits[31:20], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} GENPROTRANGE1_BASE_N1_IIO_VTD_STRUCT;

/* GENPROTRANGE1_LIMIT_N0_IIO_VTD_REG supported on:                             */
/*      SPRA0 (0x20800218)                                                      */
/*      SPRB0 (0x20800218)                                                      */
/*      SPRHBM (0x20800218)                                                     */
/*      SPRC0 (0x20800218)                                                      */
/*      SPRMCC (0x20800218)                                                     */
/*      SPRUCC (0x20800218)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Refer to description for GENPROTRANGE0
*/


#define GENPROTRANGE1_LIMIT_N0_IIO_VTD_REG 0x11020218

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 16;

                            /* Bits[15:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 addr : 16;

                            /* Bits[31:16], Access Type=RW, default=0x00000000*/

                            /*
                               Limit address [51:16] of generic memory address
                               range that MS2IOSF protects from inbound
                               accesses
                            */

  } Bits;
  UINT32 Data;

} GENPROTRANGE1_LIMIT_N0_IIO_VTD_STRUCT;

/* GENPROTRANGE1_LIMIT_N1_IIO_VTD_REG supported on:                             */
/*      SPRA0 (0x2080021c)                                                      */
/*      SPRB0 (0x2080021c)                                                      */
/*      SPRHBM (0x2080021c)                                                     */
/*      SPRC0 (0x2080021c)                                                      */
/*      SPRMCC (0x2080021c)                                                     */
/*      SPRUCC (0x2080021c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Refer to description for GENPROTRANGE0
*/


#define GENPROTRANGE1_LIMIT_N1_IIO_VTD_REG 0x1102021C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 addr : 20;

                            /* Bits[19:0], Access Type=RW, default=0x00000000*/

                            /*
                               Limit address [51:16] of generic memory address
                               range that MS2IOSF protects from inbound
                               accesses
                            */
    UINT32 rsvd : 12;

                            /* Bits[31:20], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} GENPROTRANGE1_LIMIT_N1_IIO_VTD_STRUCT;

/* GENPROTRANGE2_BASE_N0_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800220)                                                      */
/*      SPRB0 (0x20800220)                                                      */
/*      SPRHBM (0x20800220)                                                     */
/*      SPRC0 (0x20800220)                                                      */
/*      SPRMCC (0x20800220)                                                     */
/*      SPRUCC (0x20800220)                                                     */
/* Register default value on SPRA0: 0xFFFF0000                                  */
/* Register default value on SPRB0: 0xFFFF0000                                  */
/* Register default value on SPRHBM: 0xFFFF0000                                 */
/* Register default value on SPRC0: 0xFFFF0000                                  */
/* Register default value on SPRMCC: 0xFFFF0000                                 */
/* Register default value on SPRUCC: 0xFFFF0000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Refer to description for GENPROTRANGE0
*/


#define GENPROTRANGE2_BASE_N0_IIO_VTD_REG 0x11020220

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 16;

                            /* Bits[15:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 addr : 16;

                            /* Bits[31:16], Access Type=RW, default=0x0000FFFF*/

                            /*
                               Base address [51:16] of generic memory address
                               range that MS2IOSF protects from inbound
                               accesses
                            */

  } Bits;
  UINT32 Data;

} GENPROTRANGE2_BASE_N0_IIO_VTD_STRUCT;

/* GENPROTRANGE2_BASE_N1_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800224)                                                      */
/*      SPRB0 (0x20800224)                                                      */
/*      SPRHBM (0x20800224)                                                     */
/*      SPRC0 (0x20800224)                                                      */
/*      SPRMCC (0x20800224)                                                     */
/*      SPRUCC (0x20800224)                                                     */
/* Register default value on SPRA0: 0x000FFFFF                                  */
/* Register default value on SPRB0: 0x000FFFFF                                  */
/* Register default value on SPRHBM: 0x000FFFFF                                 */
/* Register default value on SPRC0: 0x000FFFFF                                  */
/* Register default value on SPRMCC: 0x000FFFFF                                 */
/* Register default value on SPRUCC: 0x000FFFFF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Refer to description for GENPROTRANGE0
*/


#define GENPROTRANGE2_BASE_N1_IIO_VTD_REG 0x11020224

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 addr : 20;

                            /* Bits[19:0], Access Type=RW, default=0x000FFFFF*/

                            /*
                               Base address [51:16] of generic memory address
                               range that MS2IOSF protects from inbound
                               accesses
                            */
    UINT32 rsvd : 12;

                            /* Bits[31:20], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} GENPROTRANGE2_BASE_N1_IIO_VTD_STRUCT;

/* GENPROTRANGE2_LIMIT_N0_IIO_VTD_REG supported on:                             */
/*      SPRA0 (0x20800228)                                                      */
/*      SPRB0 (0x20800228)                                                      */
/*      SPRHBM (0x20800228)                                                     */
/*      SPRC0 (0x20800228)                                                      */
/*      SPRMCC (0x20800228)                                                     */
/*      SPRUCC (0x20800228)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Refer to description for GENPROTRANGE0
*/


#define GENPROTRANGE2_LIMIT_N0_IIO_VTD_REG 0x11020228

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 16;

                            /* Bits[15:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 addr : 16;

                            /* Bits[31:16], Access Type=RW, default=0x00000000*/

                            /*
                               Limit address [51:16] of generic memory address
                               range that MS2IOSF protects from inbound
                               accesses
                            */

  } Bits;
  UINT32 Data;

} GENPROTRANGE2_LIMIT_N0_IIO_VTD_STRUCT;

/* GENPROTRANGE2_LIMIT_N1_IIO_VTD_REG supported on:                             */
/*      SPRA0 (0x2080022c)                                                      */
/*      SPRB0 (0x2080022c)                                                      */
/*      SPRHBM (0x2080022c)                                                     */
/*      SPRC0 (0x2080022c)                                                      */
/*      SPRMCC (0x2080022c)                                                     */
/*      SPRUCC (0x2080022c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Refer to description for GENPROTRANGE0
*/


#define GENPROTRANGE2_LIMIT_N1_IIO_VTD_REG 0x1102022C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 addr : 20;

                            /* Bits[19:0], Access Type=RW, default=0x00000000*/

                            /*
                               Limit address [51:16] of generic memory address
                               range that MS2IOSF protects from inbound
                               accesses
                            */
    UINT32 rsvd : 12;

                            /* Bits[31:20], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} GENPROTRANGE2_LIMIT_N1_IIO_VTD_STRUCT;

/* GENPROTRANGE3_BASE_N0_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800230)                                                      */
/*      SPRB0 (0x20800230)                                                      */
/*      SPRHBM (0x20800230)                                                     */
/*      SPRC0 (0x20800230)                                                      */
/*      SPRMCC (0x20800230)                                                     */
/*      SPRUCC (0x20800230)                                                     */
/* Register default value on SPRA0: 0xFFFF0000                                  */
/* Register default value on SPRB0: 0xFFFF0000                                  */
/* Register default value on SPRHBM: 0xFFFF0000                                 */
/* Register default value on SPRC0: 0xFFFF0000                                  */
/* Register default value on SPRMCC: 0xFFFF0000                                 */
/* Register default value on SPRUCC: 0xFFFF0000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Refer to description for GENPROTRANGE0
*/


#define GENPROTRANGE3_BASE_N0_IIO_VTD_REG 0x11020230

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 16;

                            /* Bits[15:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 addr : 16;

                            /* Bits[31:16], Access Type=RW, default=0x0000FFFF*/

                            /*
                               Base address [51:16] of generic memory address
                               range that MS2IOSF protects from inbound
                               accesses
                            */

  } Bits;
  UINT32 Data;

} GENPROTRANGE3_BASE_N0_IIO_VTD_STRUCT;

/* GENPROTRANGE3_BASE_N1_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800234)                                                      */
/*      SPRB0 (0x20800234)                                                      */
/*      SPRHBM (0x20800234)                                                     */
/*      SPRC0 (0x20800234)                                                      */
/*      SPRMCC (0x20800234)                                                     */
/*      SPRUCC (0x20800234)                                                     */
/* Register default value on SPRA0: 0x000FFFFF                                  */
/* Register default value on SPRB0: 0x000FFFFF                                  */
/* Register default value on SPRHBM: 0x000FFFFF                                 */
/* Register default value on SPRC0: 0x000FFFFF                                  */
/* Register default value on SPRMCC: 0x000FFFFF                                 */
/* Register default value on SPRUCC: 0x000FFFFF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Refer to description for GENPROTRANGE0
*/


#define GENPROTRANGE3_BASE_N1_IIO_VTD_REG 0x11020234

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 addr : 20;

                            /* Bits[19:0], Access Type=RW, default=0x000FFFFF*/

                            /*
                               Base address [51:16] of generic memory address
                               range that MS2IOSF protects from inbound
                               accesses
                            */
    UINT32 rsvd : 12;

                            /* Bits[31:20], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} GENPROTRANGE3_BASE_N1_IIO_VTD_STRUCT;

/* GENPROTRANGE3_LIMIT_N0_IIO_VTD_REG supported on:                             */
/*      SPRA0 (0x20800238)                                                      */
/*      SPRB0 (0x20800238)                                                      */
/*      SPRHBM (0x20800238)                                                     */
/*      SPRC0 (0x20800238)                                                      */
/*      SPRMCC (0x20800238)                                                     */
/*      SPRUCC (0x20800238)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Refer to description for GENPROTRANGE0
*/


#define GENPROTRANGE3_LIMIT_N0_IIO_VTD_REG 0x11020238

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 16;

                            /* Bits[15:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 addr : 16;

                            /* Bits[31:16], Access Type=RW, default=0x00000000*/

                            /*
                               Limit address [51:16] of generic memory address
                               range that MS2IOSF protects from inbound
                               accesses
                            */

  } Bits;
  UINT32 Data;

} GENPROTRANGE3_LIMIT_N0_IIO_VTD_STRUCT;

/* GENPROTRANGE3_LIMIT_N1_IIO_VTD_REG supported on:                             */
/*      SPRA0 (0x2080023c)                                                      */
/*      SPRB0 (0x2080023c)                                                      */
/*      SPRHBM (0x2080023c)                                                     */
/*      SPRC0 (0x2080023c)                                                      */
/*      SPRMCC (0x2080023c)                                                     */
/*      SPRUCC (0x2080023c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Refer to description for GENPROTRANGE0
*/


#define GENPROTRANGE3_LIMIT_N1_IIO_VTD_REG 0x1102023C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 addr : 20;

                            /* Bits[19:0], Access Type=RW, default=0x00000000*/

                            /*
                               Limit address [51:16] of generic memory address
                               range that MS2IOSF protects from inbound
                               accesses
                            */
    UINT32 rsvd : 12;

                            /* Bits[31:20], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} GENPROTRANGE3_LIMIT_N1_IIO_VTD_STRUCT;

/* GENPROTRANGE4_BASE_N0_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800240)                                                      */
/*      SPRB0 (0x20800240)                                                      */
/*      SPRHBM (0x20800240)                                                     */
/*      SPRC0 (0x20800240)                                                      */
/*      SPRMCC (0x20800240)                                                     */
/*      SPRUCC (0x20800240)                                                     */
/* Register default value on SPRA0: 0xFFFF0000                                  */
/* Register default value on SPRB0: 0xFFFF0000                                  */
/* Register default value on SPRHBM: 0xFFFF0000                                 */
/* Register default value on SPRC0: 0xFFFF0000                                  */
/* Register default value on SPRMCC: 0xFFFF0000                                 */
/* Register default value on SPRUCC: 0xFFFF0000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Refer to description for GENPROTRANGE0
*/


#define GENPROTRANGE4_BASE_N0_IIO_VTD_REG 0x11020240

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 16;

                            /* Bits[15:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 addr : 16;

                            /* Bits[31:16], Access Type=RW, default=0x0000FFFF*/

                            /*
                               Base address [51:16] of generic memory address
                               range that MS2IOSF protects from inbound
                               accesses
                            */

  } Bits;
  UINT32 Data;

} GENPROTRANGE4_BASE_N0_IIO_VTD_STRUCT;

/* GENPROTRANGE4_BASE_N1_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800244)                                                      */
/*      SPRB0 (0x20800244)                                                      */
/*      SPRHBM (0x20800244)                                                     */
/*      SPRC0 (0x20800244)                                                      */
/*      SPRMCC (0x20800244)                                                     */
/*      SPRUCC (0x20800244)                                                     */
/* Register default value on SPRA0: 0x000FFFFF                                  */
/* Register default value on SPRB0: 0x000FFFFF                                  */
/* Register default value on SPRHBM: 0x000FFFFF                                 */
/* Register default value on SPRC0: 0x000FFFFF                                  */
/* Register default value on SPRMCC: 0x000FFFFF                                 */
/* Register default value on SPRUCC: 0x000FFFFF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Refer to description for GENPROTRANGE0
*/


#define GENPROTRANGE4_BASE_N1_IIO_VTD_REG 0x11020244

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 addr : 20;

                            /* Bits[19:0], Access Type=RW, default=0x000FFFFF*/

                            /*
                               Base address [51:16] of generic memory address
                               range that MS2IOSF protects from inbound
                               accesses
                            */
    UINT32 rsvd : 12;

                            /* Bits[31:20], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} GENPROTRANGE4_BASE_N1_IIO_VTD_STRUCT;

/* GENPROTRANGE4_LIMIT_N0_IIO_VTD_REG supported on:                             */
/*      SPRA0 (0x20800248)                                                      */
/*      SPRB0 (0x20800248)                                                      */
/*      SPRHBM (0x20800248)                                                     */
/*      SPRC0 (0x20800248)                                                      */
/*      SPRMCC (0x20800248)                                                     */
/*      SPRUCC (0x20800248)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Refer to description for GENPROTRANGE0
*/


#define GENPROTRANGE4_LIMIT_N0_IIO_VTD_REG 0x11020248

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 16;

                            /* Bits[15:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 addr : 16;

                            /* Bits[31:16], Access Type=RW, default=0x00000000*/

                            /*
                               Limit address [51:16] of generic memory address
                               range that MS2IOSF protects from inbound
                               accesses
                            */

  } Bits;
  UINT32 Data;

} GENPROTRANGE4_LIMIT_N0_IIO_VTD_STRUCT;

/* GENPROTRANGE4_LIMIT_N1_IIO_VTD_REG supported on:                             */
/*      SPRA0 (0x2080024c)                                                      */
/*      SPRB0 (0x2080024c)                                                      */
/*      SPRHBM (0x2080024c)                                                     */
/*      SPRC0 (0x2080024c)                                                      */
/*      SPRMCC (0x2080024c)                                                     */
/*      SPRUCC (0x2080024c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Refer to description for GENPROTRANGE0
*/


#define GENPROTRANGE4_LIMIT_N1_IIO_VTD_REG 0x1102024C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 addr : 20;

                            /* Bits[19:0], Access Type=RW, default=0x00000000*/

                            /*
                               Limit address [51:16] of generic memory address
                               range that MS2IOSF protects from inbound
                               accesses
                            */
    UINT32 rsvd : 12;

                            /* Bits[31:20], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} GENPROTRANGE4_LIMIT_N1_IIO_VTD_STRUCT;

/* GENPROTRANGE5_BASE_N0_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800250)                                                      */
/*      SPRB0 (0x20800250)                                                      */
/*      SPRHBM (0x20800250)                                                     */
/*      SPRC0 (0x20800250)                                                      */
/*      SPRMCC (0x20800250)                                                     */
/*      SPRUCC (0x20800250)                                                     */
/* Register default value on SPRA0: 0xFFFF0000                                  */
/* Register default value on SPRB0: 0xFFFF0000                                  */
/* Register default value on SPRHBM: 0xFFFF0000                                 */
/* Register default value on SPRC0: 0xFFFF0000                                  */
/* Register default value on SPRMCC: 0xFFFF0000                                 */
/* Register default value on SPRUCC: 0xFFFF0000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Refer to description for GENPROTRANGE0
*/


#define GENPROTRANGE5_BASE_N0_IIO_VTD_REG 0x11020250

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 16;

                            /* Bits[15:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 addr : 16;

                            /* Bits[31:16], Access Type=RW, default=0x0000FFFF*/

                            /*
                               Base address [51:16] of generic memory address
                               range that MS2IOSF protects from inbound
                               accesses
                            */

  } Bits;
  UINT32 Data;

} GENPROTRANGE5_BASE_N0_IIO_VTD_STRUCT;

/* GENPROTRANGE5_BASE_N1_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800254)                                                      */
/*      SPRB0 (0x20800254)                                                      */
/*      SPRHBM (0x20800254)                                                     */
/*      SPRC0 (0x20800254)                                                      */
/*      SPRMCC (0x20800254)                                                     */
/*      SPRUCC (0x20800254)                                                     */
/* Register default value on SPRA0: 0x000FFFFF                                  */
/* Register default value on SPRB0: 0x000FFFFF                                  */
/* Register default value on SPRHBM: 0x000FFFFF                                 */
/* Register default value on SPRC0: 0x000FFFFF                                  */
/* Register default value on SPRMCC: 0x000FFFFF                                 */
/* Register default value on SPRUCC: 0x000FFFFF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Refer to description for GENPROTRANGE0
*/


#define GENPROTRANGE5_BASE_N1_IIO_VTD_REG 0x11020254

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 addr : 20;

                            /* Bits[19:0], Access Type=RW, default=0x000FFFFF*/

                            /*
                               Base address [51:16] of generic memory address
                               range that MS2IOSF protects from inbound
                               accesses
                            */
    UINT32 rsvd : 12;

                            /* Bits[31:20], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} GENPROTRANGE5_BASE_N1_IIO_VTD_STRUCT;

/* GENPROTRANGE5_LIMIT_N0_IIO_VTD_REG supported on:                             */
/*      SPRA0 (0x20800258)                                                      */
/*      SPRB0 (0x20800258)                                                      */
/*      SPRHBM (0x20800258)                                                     */
/*      SPRC0 (0x20800258)                                                      */
/*      SPRMCC (0x20800258)                                                     */
/*      SPRUCC (0x20800258)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Refer to description for GENPROTRANGE0
*/


#define GENPROTRANGE5_LIMIT_N0_IIO_VTD_REG 0x11020258

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 16;

                            /* Bits[15:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 addr : 16;

                            /* Bits[31:16], Access Type=RW, default=0x00000000*/

                            /*
                               Limit address [51:16] of generic memory address
                               range that MS2IOSF protects from inbound
                               accesses
                            */

  } Bits;
  UINT32 Data;

} GENPROTRANGE5_LIMIT_N0_IIO_VTD_STRUCT;

/* GENPROTRANGE5_LIMIT_N1_IIO_VTD_REG supported on:                             */
/*      SPRA0 (0x2080025c)                                                      */
/*      SPRB0 (0x2080025c)                                                      */
/*      SPRHBM (0x2080025c)                                                     */
/*      SPRC0 (0x2080025c)                                                      */
/*      SPRMCC (0x2080025c)                                                     */
/*      SPRUCC (0x2080025c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Refer to description for GENPROTRANGE0
*/


#define GENPROTRANGE5_LIMIT_N1_IIO_VTD_REG 0x1102025C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 addr : 20;

                            /* Bits[19:0], Access Type=RW, default=0x00000000*/

                            /*
                               Limit address [51:16] of generic memory address
                               range that MS2IOSF protects from inbound
                               accesses
                            */
    UINT32 rsvd : 12;

                            /* Bits[31:20], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} GENPROTRANGE5_LIMIT_N1_IIO_VTD_STRUCT;

/* LTDPR_IIO_VTD_REG supported on:                                              */
/*      SPRA0 (0x20800290)                                                      */
/*      SPRB0 (0x20800290)                                                      */
/*      SPRHBM (0x20800290)                                                     */
/*      SPRC0 (0x20800290)                                                      */
/*      SPRMCC (0x20800290)                                                     */
/*      SPRUCC (0x20800290)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: BIOS_W                                           */
/* SPRB0 Security PolicyGroup: BIOS_W                                           */
/* SPRHBM Security PolicyGroup: BIOS_W                                          */
/* SPRC0 Security PolicyGroup: BIOS_W                                           */
/* SPRMCC Security PolicyGroup: BIOS_W                                          */
/* SPRUCC Security PolicyGroup: BIOS_W                                          */
/* This register holds the address and size of the DMA protected memory region (DPR) for Intel TXT and/or LT-SX MP. Notes:[br]
- If TSEG is not enabled, then the top of this range becomes the base ME stolen space, whichever would have been the location of TSEG, assuming it had been enabled.[br]
- The DPR range works independently of any other range - Generic Protected ranges, TSEG range, VT-d tables, VT-d protection ranges, MMCFG protection range and is done post any VTd translation or LT checks. Therefore incoming cycles are checked against this range after the VTd translation and faulted if they hit this protected range, even if they passed the VTd translation.[br]
- All the memory checks are OR'ed with respect to NOT being allowed to go to memory. So if either Generic protection range, DPR, VT-d, TSEG range disallows the cycle, then the cycle is not allowed to go to memory. Or in other words, all the above checks must pass before a cycle is allowed to DRAM.
*/


#define LTDPR_IIO_VTD_REG 0x11020290

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 res_lock : 1;

                            /* Bits[0:0], Access Type=RW/O, default=0x00000000*/

                            /*
                               Bits 19:0 are locked down in this register when
                               this bit is set. Can this be set while other
                               bits are being written to in the same write
                               transaction?
                            */
    UINT32 protregsts : 1;

                            /* Bits[1:1], Access Type=RO/V, default=0x00000000*/

                            /*
                               Protection Region Status. MS2IOSF sets this bit
                               when the protection has been enabled in
                               hardware. When protection is disabled, then this
                               bit is clear.
                            */
    UINT32 commandbit : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               Writing a '1' to this bit will enable
                               protection. Writing a '0' to this bit will
                               disable protection.
                            */
    UINT32 rsvd : 1;

                            /* Bits[3:3], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 size : 8;

                            /* Bits[11:4], Access Type=RW, default=0x00000000*/

                            /*
                               DMA Protected Range Size. This is the size of
                               memory, in MB, that will be protected from DMA
                               accesses. A value of 0x00 in this field means no
                               additional memory is protected. The maximum
                               amount of memory that will be protected is 255
                               MB.
                            */
    UINT32 rsvd_12 : 8;

                            /* Bits[19:12], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 topofdpr : 12;

                            /* Bits[31:20], Access Type=RO/V, default=0x00000000*/

                            /*
                               Top address + 1 of the DMA Protected Range
                               (DPR). This is read-only and HW initializes it
                               with the value from TSEGBASE[31:20].
                            */

  } Bits;
  UINT32 Data;

} LTDPR_IIO_VTD_STRUCT;

/* MMIOL_RULE0_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x20800300)                                                      */
/*      SPRB0 (0x20800300)                                                      */
/*      SPRHBM (0x20800300)                                                     */
/*      SPRC0 (0x20800300)                                                      */
/*      SPRMCC (0x20800300)                                                     */
/*      SPRUCC (0x20800300)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* MMIO Low Rule 0
*/


#define MMIOL_RULE0_IIO_VTD_REG 0x11020300

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable for this MMIO rule. */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 rsvd : 3;

                            /* Bits[5:3], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 baseaddress : 10;

                            /* Bits[15:6], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 4MB.
                            */
    UINT32 remotestackid : 4;

                            /* Bits[19:16], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target MS2IOSF stack in the target
                               socket.
                            */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 limitaddress : 10;

                            /* Bits[31:22], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               top limit address. Both base and limit must
                               match to declare a match to this MMIO rule.
                            */

  } Bits;
  UINT32 Data;

} MMIOL_RULE0_IIO_VTD_STRUCT;

/* MMIOL_RULE1_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x20800304)                                                      */
/*      SPRB0 (0x20800304)                                                      */
/*      SPRHBM (0x20800304)                                                     */
/*      SPRC0 (0x20800304)                                                      */
/*      SPRMCC (0x20800304)                                                     */
/*      SPRUCC (0x20800304)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* MMIO Low Rule 0
*/


#define MMIOL_RULE1_IIO_VTD_REG 0x11020304

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable for this MMIO rule. */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 rsvd : 3;

                            /* Bits[5:3], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 baseaddress : 10;

                            /* Bits[15:6], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 4MB.
                            */
    UINT32 remotestackid : 4;

                            /* Bits[19:16], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target MS2IOSF stack in the target
                               socket.
                            */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 limitaddress : 10;

                            /* Bits[31:22], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               top limit address. Both base and limit must
                               match to declare a match to this MMIO rule.
                            */

  } Bits;
  UINT32 Data;

} MMIOL_RULE1_IIO_VTD_STRUCT;

/* MMIOL_RULE2_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x20800308)                                                      */
/*      SPRB0 (0x20800308)                                                      */
/*      SPRHBM (0x20800308)                                                     */
/*      SPRC0 (0x20800308)                                                      */
/*      SPRMCC (0x20800308)                                                     */
/*      SPRUCC (0x20800308)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* MMIO Low Rule 0
*/


#define MMIOL_RULE2_IIO_VTD_REG 0x11020308

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable for this MMIO rule. */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 rsvd : 3;

                            /* Bits[5:3], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 baseaddress : 10;

                            /* Bits[15:6], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 4MB.
                            */
    UINT32 remotestackid : 4;

                            /* Bits[19:16], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target MS2IOSF stack in the target
                               socket.
                            */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 limitaddress : 10;

                            /* Bits[31:22], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               top limit address. Both base and limit must
                               match to declare a match to this MMIO rule.
                            */

  } Bits;
  UINT32 Data;

} MMIOL_RULE2_IIO_VTD_STRUCT;

/* MMIOL_RULE3_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x2080030c)                                                      */
/*      SPRB0 (0x2080030c)                                                      */
/*      SPRHBM (0x2080030c)                                                     */
/*      SPRC0 (0x2080030c)                                                      */
/*      SPRMCC (0x2080030c)                                                     */
/*      SPRUCC (0x2080030c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* MMIO Low Rule 0
*/


#define MMIOL_RULE3_IIO_VTD_REG 0x1102030C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable for this MMIO rule. */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 rsvd : 3;

                            /* Bits[5:3], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 baseaddress : 10;

                            /* Bits[15:6], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 4MB.
                            */
    UINT32 remotestackid : 4;

                            /* Bits[19:16], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target MS2IOSF stack in the target
                               socket.
                            */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 limitaddress : 10;

                            /* Bits[31:22], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               top limit address. Both base and limit must
                               match to declare a match to this MMIO rule.
                            */

  } Bits;
  UINT32 Data;

} MMIOL_RULE3_IIO_VTD_STRUCT;

/* MMIOL_RULE4_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x20800310)                                                      */
/*      SPRB0 (0x20800310)                                                      */
/*      SPRHBM (0x20800310)                                                     */
/*      SPRC0 (0x20800310)                                                      */
/*      SPRMCC (0x20800310)                                                     */
/*      SPRUCC (0x20800310)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* MMIO Low Rule 0
*/


#define MMIOL_RULE4_IIO_VTD_REG 0x11020310

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable for this MMIO rule. */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 rsvd : 3;

                            /* Bits[5:3], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 baseaddress : 10;

                            /* Bits[15:6], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 4MB.
                            */
    UINT32 remotestackid : 4;

                            /* Bits[19:16], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target MS2IOSF stack in the target
                               socket.
                            */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 limitaddress : 10;

                            /* Bits[31:22], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               top limit address. Both base and limit must
                               match to declare a match to this MMIO rule.
                            */

  } Bits;
  UINT32 Data;

} MMIOL_RULE4_IIO_VTD_STRUCT;

/* MMIOL_RULE5_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x20800314)                                                      */
/*      SPRB0 (0x20800314)                                                      */
/*      SPRHBM (0x20800314)                                                     */
/*      SPRC0 (0x20800314)                                                      */
/*      SPRMCC (0x20800314)                                                     */
/*      SPRUCC (0x20800314)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* MMIO Low Rule 0
*/


#define MMIOL_RULE5_IIO_VTD_REG 0x11020314

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable for this MMIO rule. */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 rsvd : 3;

                            /* Bits[5:3], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 baseaddress : 10;

                            /* Bits[15:6], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 4MB.
                            */
    UINT32 remotestackid : 4;

                            /* Bits[19:16], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target MS2IOSF stack in the target
                               socket.
                            */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 limitaddress : 10;

                            /* Bits[31:22], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               top limit address. Both base and limit must
                               match to declare a match to this MMIO rule.
                            */

  } Bits;
  UINT32 Data;

} MMIOL_RULE5_IIO_VTD_STRUCT;

/* MMIOL_RULE6_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x20800318)                                                      */
/*      SPRB0 (0x20800318)                                                      */
/*      SPRHBM (0x20800318)                                                     */
/*      SPRC0 (0x20800318)                                                      */
/*      SPRMCC (0x20800318)                                                     */
/*      SPRUCC (0x20800318)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* MMIO Low Rule 0
*/


#define MMIOL_RULE6_IIO_VTD_REG 0x11020318

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable for this MMIO rule. */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 rsvd : 3;

                            /* Bits[5:3], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 baseaddress : 10;

                            /* Bits[15:6], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 4MB.
                            */
    UINT32 remotestackid : 4;

                            /* Bits[19:16], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target MS2IOSF stack in the target
                               socket.
                            */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 limitaddress : 10;

                            /* Bits[31:22], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               top limit address. Both base and limit must
                               match to declare a match to this MMIO rule.
                            */

  } Bits;
  UINT32 Data;

} MMIOL_RULE6_IIO_VTD_STRUCT;

/* MMIOL_RULE7_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x2080031c)                                                      */
/*      SPRB0 (0x2080031c)                                                      */
/*      SPRHBM (0x2080031c)                                                     */
/*      SPRC0 (0x2080031c)                                                      */
/*      SPRMCC (0x2080031c)                                                     */
/*      SPRUCC (0x2080031c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* MMIO Low Rule 0
*/


#define MMIOL_RULE7_IIO_VTD_REG 0x1102031C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable for this MMIO rule. */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 rsvd : 3;

                            /* Bits[5:3], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 baseaddress : 10;

                            /* Bits[15:6], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 4MB.
                            */
    UINT32 remotestackid : 4;

                            /* Bits[19:16], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target MS2IOSF stack in the target
                               socket.
                            */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 limitaddress : 10;

                            /* Bits[31:22], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               top limit address. Both base and limit must
                               match to declare a match to this MMIO rule.
                            */

  } Bits;
  UINT32 Data;

} MMIOL_RULE7_IIO_VTD_STRUCT;

/* MMIOL_RULE8_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x20800320)                                                      */
/*      SPRB0 (0x20800320)                                                      */
/*      SPRHBM (0x20800320)                                                     */
/*      SPRC0 (0x20800320)                                                      */
/*      SPRMCC (0x20800320)                                                     */
/*      SPRUCC (0x20800320)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* MMIO Low Rule 0
*/


#define MMIOL_RULE8_IIO_VTD_REG 0x11020320

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable for this MMIO rule. */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 rsvd : 3;

                            /* Bits[5:3], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 baseaddress : 10;

                            /* Bits[15:6], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 4MB.
                            */
    UINT32 remotestackid : 4;

                            /* Bits[19:16], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target MS2IOSF stack in the target
                               socket.
                            */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 limitaddress : 10;

                            /* Bits[31:22], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               top limit address. Both base and limit must
                               match to declare a match to this MMIO rule.
                            */

  } Bits;
  UINT32 Data;

} MMIOL_RULE8_IIO_VTD_STRUCT;

/* MMIOL_RULE9_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x20800324)                                                      */
/*      SPRB0 (0x20800324)                                                      */
/*      SPRHBM (0x20800324)                                                     */
/*      SPRC0 (0x20800324)                                                      */
/*      SPRMCC (0x20800324)                                                     */
/*      SPRUCC (0x20800324)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* MMIO Low Rule 0
*/


#define MMIOL_RULE9_IIO_VTD_REG 0x11020324

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable for this MMIO rule. */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 rsvd : 3;

                            /* Bits[5:3], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 baseaddress : 10;

                            /* Bits[15:6], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 4MB.
                            */
    UINT32 remotestackid : 4;

                            /* Bits[19:16], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target MS2IOSF stack in the target
                               socket.
                            */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 limitaddress : 10;

                            /* Bits[31:22], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               top limit address. Both base and limit must
                               match to declare a match to this MMIO rule.
                            */

  } Bits;
  UINT32 Data;

} MMIOL_RULE9_IIO_VTD_STRUCT;

/* MMIOL_RULE10_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x20800328)                                                      */
/*      SPRB0 (0x20800328)                                                      */
/*      SPRHBM (0x20800328)                                                     */
/*      SPRC0 (0x20800328)                                                      */
/*      SPRMCC (0x20800328)                                                     */
/*      SPRUCC (0x20800328)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* MMIO Low Rule 0
*/


#define MMIOL_RULE10_IIO_VTD_REG 0x11020328

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable for this MMIO rule. */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 rsvd : 3;

                            /* Bits[5:3], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 baseaddress : 10;

                            /* Bits[15:6], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 4MB.
                            */
    UINT32 remotestackid : 4;

                            /* Bits[19:16], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target MS2IOSF stack in the target
                               socket.
                            */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 limitaddress : 10;

                            /* Bits[31:22], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               top limit address. Both base and limit must
                               match to declare a match to this MMIO rule.
                            */

  } Bits;
  UINT32 Data;

} MMIOL_RULE10_IIO_VTD_STRUCT;

/* MMIOL_RULE11_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x2080032c)                                                      */
/*      SPRB0 (0x2080032c)                                                      */
/*      SPRHBM (0x2080032c)                                                     */
/*      SPRC0 (0x2080032c)                                                      */
/*      SPRMCC (0x2080032c)                                                     */
/*      SPRUCC (0x2080032c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* MMIO Low Rule 0
*/


#define MMIOL_RULE11_IIO_VTD_REG 0x1102032C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable for this MMIO rule. */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 rsvd : 3;

                            /* Bits[5:3], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 baseaddress : 10;

                            /* Bits[15:6], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 4MB.
                            */
    UINT32 remotestackid : 4;

                            /* Bits[19:16], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target MS2IOSF stack in the target
                               socket.
                            */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 limitaddress : 10;

                            /* Bits[31:22], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               top limit address. Both base and limit must
                               match to declare a match to this MMIO rule.
                            */

  } Bits;
  UINT32 Data;

} MMIOL_RULE11_IIO_VTD_STRUCT;

/* MMIOL_RULE12_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x20800330)                                                      */
/*      SPRB0 (0x20800330)                                                      */
/*      SPRHBM (0x20800330)                                                     */
/*      SPRC0 (0x20800330)                                                      */
/*      SPRMCC (0x20800330)                                                     */
/*      SPRUCC (0x20800330)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* MMIO Low Rule 0
*/


#define MMIOL_RULE12_IIO_VTD_REG 0x11020330

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable for this MMIO rule. */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 rsvd : 3;

                            /* Bits[5:3], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 baseaddress : 10;

                            /* Bits[15:6], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 4MB.
                            */
    UINT32 remotestackid : 4;

                            /* Bits[19:16], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target MS2IOSF stack in the target
                               socket.
                            */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 limitaddress : 10;

                            /* Bits[31:22], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               top limit address. Both base and limit must
                               match to declare a match to this MMIO rule.
                            */

  } Bits;
  UINT32 Data;

} MMIOL_RULE12_IIO_VTD_STRUCT;

/* MMIOL_RULE13_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x20800334)                                                      */
/*      SPRB0 (0x20800334)                                                      */
/*      SPRHBM (0x20800334)                                                     */
/*      SPRC0 (0x20800334)                                                      */
/*      SPRMCC (0x20800334)                                                     */
/*      SPRUCC (0x20800334)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* MMIO Low Rule 0
*/


#define MMIOL_RULE13_IIO_VTD_REG 0x11020334

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable for this MMIO rule. */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 rsvd : 3;

                            /* Bits[5:3], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 baseaddress : 10;

                            /* Bits[15:6], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 4MB.
                            */
    UINT32 remotestackid : 4;

                            /* Bits[19:16], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target MS2IOSF stack in the target
                               socket.
                            */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 limitaddress : 10;

                            /* Bits[31:22], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               top limit address. Both base and limit must
                               match to declare a match to this MMIO rule.
                            */

  } Bits;
  UINT32 Data;

} MMIOL_RULE13_IIO_VTD_STRUCT;

/* MMIOL_RULE14_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x20800338)                                                      */
/*      SPRB0 (0x20800338)                                                      */
/*      SPRHBM (0x20800338)                                                     */
/*      SPRC0 (0x20800338)                                                      */
/*      SPRMCC (0x20800338)                                                     */
/*      SPRUCC (0x20800338)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* MMIO Low Rule 0
*/


#define MMIOL_RULE14_IIO_VTD_REG 0x11020338

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable for this MMIO rule. */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 rsvd : 3;

                            /* Bits[5:3], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 baseaddress : 10;

                            /* Bits[15:6], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 4MB.
                            */
    UINT32 remotestackid : 4;

                            /* Bits[19:16], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target MS2IOSF stack in the target
                               socket.
                            */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 limitaddress : 10;

                            /* Bits[31:22], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               top limit address. Both base and limit must
                               match to declare a match to this MMIO rule.
                            */

  } Bits;
  UINT32 Data;

} MMIOL_RULE14_IIO_VTD_STRUCT;

/* MMIOL_RULE15_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x2080033c)                                                      */
/*      SPRB0 (0x2080033c)                                                      */
/*      SPRHBM (0x2080033c)                                                     */
/*      SPRC0 (0x2080033c)                                                      */
/*      SPRMCC (0x2080033c)                                                     */
/*      SPRUCC (0x2080033c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* MMIO Low Rule 0
*/


#define MMIOL_RULE15_IIO_VTD_REG 0x1102033C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable for this MMIO rule. */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 rsvd : 3;

                            /* Bits[5:3], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 baseaddress : 10;

                            /* Bits[15:6], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 4MB.
                            */
    UINT32 remotestackid : 4;

                            /* Bits[19:16], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target MS2IOSF stack in the target
                               socket.
                            */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 limitaddress : 10;

                            /* Bits[31:22], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               top limit address. Both base and limit must
                               match to declare a match to this MMIO rule.
                            */

  } Bits;
  UINT32 Data;

} MMIOL_RULE15_IIO_VTD_STRUCT;

/* MMIOL_RULE16_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x20800340)                                                      */
/*      SPRB0 (0x20800340)                                                      */
/*      SPRHBM (0x20800340)                                                     */
/*      SPRC0 (0x20800340)                                                      */
/*      SPRMCC (0x20800340)                                                     */
/*      SPRUCC (0x20800340)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* MMIO Low Rule 0
*/


#define MMIOL_RULE16_IIO_VTD_REG 0x11020340

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable for this MMIO rule. */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 rsvd : 3;

                            /* Bits[5:3], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 baseaddress : 10;

                            /* Bits[15:6], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 4MB.
                            */
    UINT32 remotestackid : 4;

                            /* Bits[19:16], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target MS2IOSF stack in the target
                               socket.
                            */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 limitaddress : 10;

                            /* Bits[31:22], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               top limit address. Both base and limit must
                               match to declare a match to this MMIO rule.
                            */

  } Bits;
  UINT32 Data;

} MMIOL_RULE16_IIO_VTD_STRUCT;

/* MMIOL_RULE17_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x20800344)                                                      */
/*      SPRB0 (0x20800344)                                                      */
/*      SPRHBM (0x20800344)                                                     */
/*      SPRC0 (0x20800344)                                                      */
/*      SPRMCC (0x20800344)                                                     */
/*      SPRUCC (0x20800344)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* MMIO Low Rule 0
*/


#define MMIOL_RULE17_IIO_VTD_REG 0x11020344

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable for this MMIO rule. */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 rsvd : 3;

                            /* Bits[5:3], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 baseaddress : 10;

                            /* Bits[15:6], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 4MB.
                            */
    UINT32 remotestackid : 4;

                            /* Bits[19:16], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target MS2IOSF stack in the target
                               socket.
                            */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 limitaddress : 10;

                            /* Bits[31:22], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               top limit address. Both base and limit must
                               match to declare a match to this MMIO rule.
                            */

  } Bits;
  UINT32 Data;

} MMIOL_RULE17_IIO_VTD_STRUCT;

/* MMIOL_RULE18_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x20800348)                                                      */
/*      SPRB0 (0x20800348)                                                      */
/*      SPRHBM (0x20800348)                                                     */
/*      SPRC0 (0x20800348)                                                      */
/*      SPRMCC (0x20800348)                                                     */
/*      SPRUCC (0x20800348)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* MMIO Low Rule 0
*/


#define MMIOL_RULE18_IIO_VTD_REG 0x11020348

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable for this MMIO rule. */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 rsvd : 3;

                            /* Bits[5:3], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 baseaddress : 10;

                            /* Bits[15:6], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 4MB.
                            */
    UINT32 remotestackid : 4;

                            /* Bits[19:16], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target MS2IOSF stack in the target
                               socket.
                            */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 limitaddress : 10;

                            /* Bits[31:22], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               top limit address. Both base and limit must
                               match to declare a match to this MMIO rule.
                            */

  } Bits;
  UINT32 Data;

} MMIOL_RULE18_IIO_VTD_STRUCT;

/* MMIOL_RULE19_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x2080034c)                                                      */
/*      SPRB0 (0x2080034c)                                                      */
/*      SPRHBM (0x2080034c)                                                     */
/*      SPRC0 (0x2080034c)                                                      */
/*      SPRMCC (0x2080034c)                                                     */
/*      SPRUCC (0x2080034c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* MMIO Low Rule 0
*/


#define MMIOL_RULE19_IIO_VTD_REG 0x1102034C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable for this MMIO rule. */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 rsvd : 3;

                            /* Bits[5:3], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 baseaddress : 10;

                            /* Bits[15:6], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 4MB.
                            */
    UINT32 remotestackid : 4;

                            /* Bits[19:16], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target MS2IOSF stack in the target
                               socket.
                            */
    UINT32 rsvd_20 : 2;

                            /* Bits[21:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 limitaddress : 10;

                            /* Bits[31:22], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[31:22] of the MMIO rule
                               top limit address. Both base and limit must
                               match to declare a match to this MMIO rule.
                            */

  } Bits;
  UINT32 Data;

} MMIOL_RULE19_IIO_VTD_STRUCT;

/* LOWBWMEM_CTRL_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x20800358)                                                      */
/*      SPRB0 (0x20800358)                                                      */
/*      SPRHBM (0x20800358)                                                     */
/*      SPRC0 (0x20800358)                                                      */
/*      SPRMCC (0x20800358)                                                     */
/*      SPRUCC (0x20800358)                                                     */
/* Register default value on SPRA0: 0x00812010                                  */
/* Register default value on SPRB0: 0x00812010                                  */
/* Register default value on SPRHBM: 0x00812010                                 */
/* Register default value on SPRC0: 0x00812010                                  */
/* Register default value on SPRMCC: 0x00812010                                 */
/* Register default value on SPRUCC: 0x00812010                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: BIOS_W                                           */
/* SPRB0 Security PolicyGroup: BIOS_W                                           */
/* SPRHBM Security PolicyGroup: BIOS_W                                          */
/* SPRC0 Security PolicyGroup: BIOS_W                                           */
/* SPRMCC Security PolicyGroup: BIOS_W                                          */
/* SPRUCC Security PolicyGroup: BIOS_W                                          */
/* Control register for low-bandwidth memory management
*/


#define LOWBWMEM_CTRL_IIO_VTD_REG 0x11020358

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 wrtrackerlowbwcredits : 8;

                            /* Bits[7:0], Access Type=RW, default=0x00000010*/

                            /*
                               Max Wr$ Tracker credits (in ITC) for Low BW Mem.
                               This does not reserve a tracker entry for Low BW
                               traffic, rather it sets a ceiling on how many
                               entries can be used for such traffic. MS2IOSF
                               does not yet implement this.
                            */
    UINT32 rdtrackerlowbwcredits : 8;

                            /* Bits[15:8], Access Type=RW, default=0x00000020*/

                            /*
                               Max number of outstanding Low BW Mem reads that
                               are allowed from ITC. This does not reserve any
                               entries for Low BW traffic, rather it sets a
                               ceiling on how many such cacheline requests can
                               be outstanding (from request to OTC completion)
                               at a time.
                            */
    UINT32 maxlowbwprqcreditswm : 5;

                            /* Bits[20:16], Access Type=RW, default=0x00000001*/

                            /*
                               Max M2PCIe PRQ credits for Low BW Mem. This does
                               not reserve PRQ credits for Low BW traffic,
                               rather it sets a ceiling on how many credits can
                               be used for such traffic
                            */
    UINT32 minhighbwprqcreditswm : 5;

                            /* Bits[25:21], Access Type=RW, default=0x00000004*/

                            /*
                               Minimum number of PRQ credits that need to be
                               reserved for DDR4 traffic
                            */
    UINT32 rsvd : 4;

                            /* Bits[29:26], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 wrtrackerlowbwcrediten : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               Enables the functionality specified in
                               WrTrackerLowBWCredits
                            */
    UINT32 rdtrackerlowbwcrediten : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /*
                               Enables the functionality specified in
                               RdTrackerLowBWCredits
                            */

  } Bits;
  UINT32 Data;

} LOWBWMEM_CTRL_IIO_VTD_STRUCT;

/* LOWBWMEM_BASE_N0_IIO_VTD_REG supported on:                                   */
/*      SPRA0 (0x20800360)                                                      */
/*      SPRB0 (0x20800360)                                                      */
/*      SPRHBM (0x20800360)                                                     */
/*      SPRC0 (0x20800360)                                                      */
/*      SPRMCC (0x20800360)                                                     */
/*      SPRUCC (0x20800360)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Base/Limit address of low-bandwidth memory
*/


#define LOWBWMEM_BASE_N0_IIO_VTD_REG 0x11020360

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 26;

                            /* Bits[25:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 addr_range_field : 6;

                            /* Bits[31:26], Access Type=RW, default=0x00000000*/

                            /* Defines the Base OR Limit of DDRT reg */

  } Bits;
  UINT32 Data;

} LOWBWMEM_BASE_N0_IIO_VTD_STRUCT;

/* LOWBWMEM_BASE_N1_IIO_VTD_REG supported on:                                   */
/*      SPRA0 (0x20800364)                                                      */
/*      SPRB0 (0x20800364)                                                      */
/*      SPRHBM (0x20800364)                                                     */
/*      SPRC0 (0x20800364)                                                      */
/*      SPRMCC (0x20800364)                                                     */
/*      SPRUCC (0x20800364)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Base/Limit address of low-bandwidth memory
*/


#define LOWBWMEM_BASE_N1_IIO_VTD_REG 0x11020364

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 addr_range_field : 20;

                            /* Bits[19:0], Access Type=RW, default=0x00000000*/

                            /* Defines the Base OR Limit of DDRT reg */
    UINT32 rsvd : 12;

                            /* Bits[31:20], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} LOWBWMEM_BASE_N1_IIO_VTD_STRUCT;

/* LOWBWMEM_LIMIT_N0_IIO_VTD_REG supported on:                                  */
/*      SPRA0 (0x20800368)                                                      */
/*      SPRB0 (0x20800368)                                                      */
/*      SPRHBM (0x20800368)                                                     */
/*      SPRC0 (0x20800368)                                                      */
/*      SPRMCC (0x20800368)                                                     */
/*      SPRUCC (0x20800368)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Base/Limit address of low-bandwidth memory
*/


#define LOWBWMEM_LIMIT_N0_IIO_VTD_REG 0x11020368

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 26;

                            /* Bits[25:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 addr_range_field : 6;

                            /* Bits[31:26], Access Type=RW, default=0x00000000*/

                            /* Defines the Base OR Limit of DDRT reg */

  } Bits;
  UINT32 Data;

} LOWBWMEM_LIMIT_N0_IIO_VTD_STRUCT;

/* LOWBWMEM_LIMIT_N1_IIO_VTD_REG supported on:                                  */
/*      SPRA0 (0x2080036c)                                                      */
/*      SPRB0 (0x2080036c)                                                      */
/*      SPRHBM (0x2080036c)                                                     */
/*      SPRC0 (0x2080036c)                                                      */
/*      SPRMCC (0x2080036c)                                                     */
/*      SPRUCC (0x2080036c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Base/Limit address of low-bandwidth memory
*/


#define LOWBWMEM_LIMIT_N1_IIO_VTD_REG 0x1102036C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 addr_range_field : 20;

                            /* Bits[19:0], Access Type=RW, default=0x00000000*/

                            /* Defines the Base OR Limit of DDRT reg */
    UINT32 rsvd : 12;

                            /* Bits[31:20], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} LOWBWMEM_LIMIT_N1_IIO_VTD_STRUCT;

/* MMIOL_TGT_LIST0_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x20800380)                                                      */
/*      SPRB0 (0x20800380)                                                      */
/*      SPRHBM (0x20800380)                                                     */
/*      SPRC0 (0x20800380)                                                      */
/*      SPRMCC (0x20800380)                                                     */
/*      SPRUCC (0x20800380)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* For each 5-bit "Target Node ID" field, if the top bit is clear, the target is a remote socket and the lower 3 bits indicate the target socket ID. If the top bit is set, the target is the local socket and the lower 4 bits indicate the target MS2IOSF stack ID.
*/


#define MMIOL_TGT_LIST0_IIO_VTD_REG 0x11020380

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mmiol0_tgt : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /* Target Node ID for the MMIOL Rule 0 */
    UINT32 mmiol1_tgt : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /* Target Node ID for the MMIOL Rule 1 */
    UINT32 mmiol2_tgt : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /* Target Node ID for the MMIOL Rule 2 */
    UINT32 mmiol3_tgt : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /* Target Node ID for the MMIOL Rule 3 */
    UINT32 mmiol4_tgt : 5;

                            /* Bits[24:20], Access Type=RW, default=0x00000000*/

                            /* Target Node ID for the MMIOL Rule 4 */
    UINT32 mmiol5_tgt : 5;

                            /* Bits[29:25], Access Type=RW, default=0x00000000*/

                            /* Target Node ID for the MMIOL Rule 5 */
    UINT32 rsvd : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MMIOL_TGT_LIST0_IIO_VTD_STRUCT;

/* MMIOL_TGT_LIST1_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x20800384)                                                      */
/*      SPRB0 (0x20800384)                                                      */
/*      SPRHBM (0x20800384)                                                     */
/*      SPRC0 (0x20800384)                                                      */
/*      SPRMCC (0x20800384)                                                     */
/*      SPRUCC (0x20800384)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* For each 5-bit "Target Node ID" field, if the top bit is clear, the target is a remote socket and the lower 3 bits indicate the target socket ID. If the top bit is set, the target is the local socket and the lower 4 bits indicate the target MS2IOSF stack ID.
*/


#define MMIOL_TGT_LIST1_IIO_VTD_REG 0x11020384

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mmiol6_tgt : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /* Target Node ID for the MMIOL Rule 6 */
    UINT32 mmiol7_tgt : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /* Target Node ID for the MMIOL Rule 7 */
    UINT32 mmiol8_tgt : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /* Target Node ID for the MMIOL Rule 8 */
    UINT32 mmiol9_tgt : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /* Target Node ID for the MMIOL Rule 9 */
    UINT32 mmiol10_tgt : 5;

                            /* Bits[24:20], Access Type=RW, default=0x00000000*/

                            /* Target Node ID for the MMIOL Rule 10 */
    UINT32 mmiol11_tgt : 5;

                            /* Bits[29:25], Access Type=RW, default=0x00000000*/

                            /* Target Node ID for the MMIOL Rule 11 */
    UINT32 rsvd : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MMIOL_TGT_LIST1_IIO_VTD_STRUCT;

/* MMIOL_TGT_LIST2_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x20800388)                                                      */
/*      SPRB0 (0x20800388)                                                      */
/*      SPRHBM (0x20800388)                                                     */
/*      SPRC0 (0x20800388)                                                      */
/*      SPRMCC (0x20800388)                                                     */
/*      SPRUCC (0x20800388)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* For each 5-bit "Target Node ID" field, if the top bit is clear, the target is a remote socket and the lower 3 bits indicate the target socket ID. If the top bit is set, the target is the local socket and the lower 4 bits indicate the target MS2IOSF stack ID.
*/


#define MMIOL_TGT_LIST2_IIO_VTD_REG 0x11020388

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mmiol12_tgt : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /* Target Node ID for the MMIOL Rule 12 */
    UINT32 mmiol13_tgt : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /* Target Node ID for the MMIOL Rule 13 */
    UINT32 mmiol14_tgt : 5;

                            /* Bits[14:10], Access Type=RW, default=0x00000000*/

                            /* Target Node ID for the MMIOL Rule 14 */
    UINT32 mmiol15_tgt : 5;

                            /* Bits[19:15], Access Type=RW, default=0x00000000*/

                            /* Target Node ID for the MMIOL Rule 15 */
    UINT32 mmiol16_tgt : 5;

                            /* Bits[24:20], Access Type=RW, default=0x00000000*/

                            /* Target Node ID for the MMIOL Rule 16 */
    UINT32 mmiol17_tgt : 5;

                            /* Bits[29:25], Access Type=RW, default=0x00000000*/

                            /* Target Node ID for the MMIOL Rule 17 */
    UINT32 rsvd : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MMIOL_TGT_LIST2_IIO_VTD_STRUCT;

/* MMIOL_TGT_LIST3_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x2080038c)                                                      */
/*      SPRB0 (0x2080038c)                                                      */
/*      SPRHBM (0x2080038c)                                                     */
/*      SPRC0 (0x2080038c)                                                      */
/*      SPRMCC (0x2080038c)                                                     */
/*      SPRUCC (0x2080038c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* For each 5-bit "Target Node ID" field, if the top bit is clear, the target is a remote socket and the lower 3 bits indicate the target socket ID. If the top bit is set, the target is the local socket and the lower 4 bits indicate the target MS2IOSF stack ID.
*/


#define MMIOL_TGT_LIST3_IIO_VTD_REG 0x1102038C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mmiol18_tgt : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /* Target Node ID for the MMIOL Rule 18 */
    UINT32 mmiol19_tgt : 5;

                            /* Bits[9:5], Access Type=RW, default=0x00000000*/

                            /* Target Node ID for the MMIOL Rule 19 */
    UINT32 rsvd : 22;

                            /* Bits[31:10], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MMIOL_TGT_LIST3_IIO_VTD_STRUCT;

/* BUSID_LOCAL_RULE_ADDRESS_0_IIO_VTD_REG supported on:                         */
/*      SPRA0 (0x208003d0)                                                      */
/*      SPRB0 (0x208003d0)                                                      */
/*      SPRHBM (0x208003d0)                                                     */
/*      SPRC0 (0x208003d0)                                                      */
/*      SPRMCC (0x208003d0)                                                     */
/*      SPRUCC (0x208003d0)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* BusID Local Rule 0
*/


#define BUSID_LOCAL_RULE_ADDRESS_0_IIO_VTD_REG 0x110203D0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 busidl0_base : 8;

                            /* Bits[7:0], Access Type=RW, default=0x00000000*/

                            /* Bus Base for Local 0 Target */
    UINT32 busidl0_limit : 8;

                            /* Bits[15:8], Access Type=RW, default=0x00000000*/

                            /* Bus Limit for Local 0 Target */
    UINT32 busidl1_limit : 8;

                            /* Bits[23:16], Access Type=RW, default=0x00000000*/

                            /* Bus Limit for Local 1 Target */
    UINT32 busidl2_limit : 8;

                            /* Bits[31:24], Access Type=RW, default=0x00000000*/

                            /* Bus Limit for Local 2 Target */

  } Bits;
  UINT32 Data;

} BUSID_LOCAL_RULE_ADDRESS_0_IIO_VTD_STRUCT;

/* BUSID_LOCAL_RULE_ADDRESS_1_IIO_VTD_REG supported on:                         */
/*      SPRA0 (0x208003d4)                                                      */
/*      SPRB0 (0x208003d4)                                                      */
/*      SPRHBM (0x208003d4)                                                     */
/*      SPRC0 (0x208003d4)                                                      */
/*      SPRMCC (0x208003d4)                                                     */
/*      SPRUCC (0x208003d4)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* BusID Local Rule 1
*/


#define BUSID_LOCAL_RULE_ADDRESS_1_IIO_VTD_REG 0x110203D4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 busidl3_limit : 8;

                            /* Bits[7:0], Access Type=RW, default=0x00000000*/

                            /* Bus Limit for Local 3 Target */
    UINT32 busidl4_limit : 8;

                            /* Bits[15:8], Access Type=RW, default=0x00000000*/

                            /* Bus Limit for Local 4 Target */
    UINT32 busidl5_limit : 8;

                            /* Bits[23:16], Access Type=RW, default=0x00000000*/

                            /* Bus Limit for Local 5 Target */
    UINT32 busidl6_limit : 8;

                            /* Bits[31:24], Access Type=RW, default=0x00000000*/

                            /* Bus Limit for Local 6 Target */

  } Bits;
  UINT32 Data;

} BUSID_LOCAL_RULE_ADDRESS_1_IIO_VTD_STRUCT;

/* BUSID_LOCAL_RULE_TGT_IIO_VTD_REG supported on:                               */
/*      SPRA0 (0x208003d8)                                                      */
/*      SPRB0 (0x208003d8)                                                      */
/*      SPRHBM (0x208003d8)                                                     */
/*      SPRC0 (0x208003d8)                                                      */
/*      SPRMCC (0x208003d8)                                                     */
/*      SPRUCC (0x208003d8)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* BusID Local Rule Target 0
*/


#define BUSID_LOCAL_RULE_TGT_IIO_VTD_REG 0x110203D8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 busidl0_tgt : 4;

                            /* Bits[3:0], Access Type=RW, default=0x00000000*/

                            /* Local 0 Target Local MS2IOSF StackID. */
    UINT32 busidl1_tgt : 4;

                            /* Bits[7:4], Access Type=RW, default=0x00000000*/

                            /* Local 1 Target Local MS2IOSF StackID. */
    UINT32 busidl2_tgt : 4;

                            /* Bits[11:8], Access Type=RW, default=0x00000000*/

                            /* Local 2 Target Local MS2IOSF StackID. */
    UINT32 busidl3_tgt : 4;

                            /* Bits[15:12], Access Type=RW, default=0x00000000*/

                            /* Local 3 Target Local MS2IOSF StackID. */
    UINT32 busidl4_tgt : 4;

                            /* Bits[19:16], Access Type=RW, default=0x00000000*/

                            /* Local 4 Target Local MS2IOSF StackID. */
    UINT32 busidl5_tgt : 4;

                            /* Bits[23:20], Access Type=RW, default=0x00000000*/

                            /* Local 5 Target Local MS2IOSF StackID. */
    UINT32 busidl6_tgt : 4;

                            /* Bits[27:24], Access Type=RW, default=0x00000000*/

                            /* Local 6 Target Local MS2IOSF StackID. */
    UINT32 busidl7_tgt : 4;

                            /* Bits[31:28], Access Type=RW, default=0x00000000*/

                            /* Local 7 Target Local MS2IOSF StackID. */

  } Bits;
  UINT32 Data;

} BUSID_LOCAL_RULE_TGT_IIO_VTD_STRUCT;

/* BUSID_GLOB_RULE_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x208003e0)                                                      */
/*      SPRB0 (0x208003e0)                                                      */
/*      SPRHBM (0x208003e0)                                                     */
/*      SPRC0 (0x208003e0)                                                      */
/*      SPRMCC (0x208003e0)                                                     */
/*      SPRUCC (0x208003e0)                                                     */
/* Register default value on SPRA0: 0x00003FC8                                  */
/* Register default value on SPRB0: 0x00003FC8                                  */
/* Register default value on SPRHBM: 0x00003FC8                                 */
/* Register default value on SPRC0: 0x00003FC8                                  */
/* Register default value on SPRMCC: 0x00003FC8                                 */
/* Register default value on SPRUCC: 0x00003FC8                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* BusID Global Rule
*/


#define BUSID_GLOB_RULE_IIO_VTD_REG 0x110203E0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rule_enable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable for this Bus Number interleave decoder. */
    UINT32 length : 3;

                            /* Bits[3:1], Access Type=RW, default=0x00000004*/

                            /*
                               This field document the max bus number supported
                               by the interleave decoder.[br] MS2IOSF supports
                               the following configurations:[br] 110:
                               MaxBusNumber = 63 (i.e. 64MB MMCFG range)[br]
                               101: MaxBusNumber = 127 (i.e. 128MB MMCFG
                               range)[br] 100: MaxBusNumber = 256 (i.e. 256MB
                               MMCFG range)[br] 010: MaxBusNumber = 512 (i.e.
                               512MB MMCFG range)[br] 001: MaxBusNumber = 1048
                               (i.e. 1G MMCFG range)[br] 000: MaxBusNumber =
                               2048 (i.e. 2G MMCFG range)[br] Minimum
                               granularity of MMCFG range is 64MB
                            */
    UINT32 rsvd : 2;

                            /* Bits[5:4], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 valid_targets : 8;

                            /* Bits[13:6], Access Type=RW, default=0x000000FF*/

                            /*
                               Marks the valid targets. Request to an invalid
                               target will result in an ABORT.
                            */
    UINT32 rsvd_14 : 18;

                            /* Bits[31:14], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} BUSID_GLOB_RULE_IIO_VTD_STRUCT;

/* BUSID_GLOB_RULE_TGT_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x208003e4)                                                      */
/*      SPRB0 (0x208003e4)                                                      */
/*      SPRHBM (0x208003e4)                                                     */
/*      SPRC0 (0x208003e4)                                                      */
/*      SPRMCC (0x208003e4)                                                     */
/*      SPRUCC (0x208003e4)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Each 4-bit "Target Node ID" field represents the target socket ID. The top bit should not be used since systems are limited to 8 sockets. 
*/


#define BUSID_GLOB_RULE_TGT_IIO_VTD_REG 0x110203E4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 busidg0_tgt : 4;

                            /* Bits[3:0], Access Type=RW, default=0x00000000*/

                            /* Remote Bus Range 0 Target Node ID */
    UINT32 busidg1_tgt : 4;

                            /* Bits[7:4], Access Type=RW, default=0x00000000*/

                            /* Remote Bus Range 1 Target Node ID */
    UINT32 busidg2_tgt : 4;

                            /* Bits[11:8], Access Type=RW, default=0x00000000*/

                            /* Remote Bus Range 2 Target Node ID */
    UINT32 busidg3_tgt : 4;

                            /* Bits[15:12], Access Type=RW, default=0x00000000*/

                            /* Remote Bus Range 3 Target Node ID */
    UINT32 busidg4_tgt : 4;

                            /* Bits[19:16], Access Type=RW, default=0x00000000*/

                            /* Remote Bus Range 4 Target Node ID */
    UINT32 busidg5_tgt : 4;

                            /* Bits[23:20], Access Type=RW, default=0x00000000*/

                            /* Remote Bus Range 5 Target Node ID */
    UINT32 busidg6_tgt : 4;

                            /* Bits[27:24], Access Type=RW, default=0x00000000*/

                            /* Remote Bus Range 6 Target Node ID */
    UINT32 busidg7_tgt : 4;

                            /* Bits[31:28], Access Type=RW, default=0x00000000*/

                            /* Remote Bus Range 7 Target Node ID */

  } Bits;
  UINT32 Data;

} BUSID_GLOB_RULE_TGT_IIO_VTD_STRUCT;

/* BUSID_LOCAL_RULE_ADDRESS_2_IIO_VTD_REG supported on:                         */
/*      SPRA0 (0x208003e8)                                                      */
/*      SPRB0 (0x208003e8)                                                      */
/*      SPRHBM (0x208003e8)                                                     */
/*      SPRC0 (0x208003e8)                                                      */
/*      SPRMCC (0x208003e8)                                                     */
/*      SPRUCC (0x208003e8)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* BusID Local Rule Address 2
*/


#define BUSID_LOCAL_RULE_ADDRESS_2_IIO_VTD_REG 0x110203E8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 busidl7_limit : 8;

                            /* Bits[7:0], Access Type=RW, default=0x00000000*/

                            /* Bus Limit for Local 7 Target */
    UINT32 busidl8_limit : 8;

                            /* Bits[15:8], Access Type=RW, default=0x00000000*/

                            /* Bus Limit for Local Target 8 */
    UINT32 busidl9_limit : 8;

                            /* Bits[23:16], Access Type=RW, default=0x00000000*/

                            /* Bus Limit for Local Target 9 */
    UINT32 busidl10_limit : 8;

                            /* Bits[31:24], Access Type=RW, default=0x00000000*/

                            /* Bus Limit for Local Target 10 */

  } Bits;
  UINT32 Data;

} BUSID_LOCAL_RULE_ADDRESS_2_IIO_VTD_STRUCT;

/* BUSID_LOCAL_RULE_ADDRESS_3_IIO_VTD_REG supported on:                         */
/*      SPRA0 (0x208003ec)                                                      */
/*      SPRB0 (0x208003ec)                                                      */
/*      SPRHBM (0x208003ec)                                                     */
/*      SPRC0 (0x208003ec)                                                      */
/*      SPRMCC (0x208003ec)                                                     */
/*      SPRUCC (0x208003ec)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* BusID Local Rule Address 3
*/


#define BUSID_LOCAL_RULE_ADDRESS_3_IIO_VTD_REG 0x110203EC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 busidl11_limit : 8;

                            /* Bits[7:0], Access Type=RW, default=0x00000000*/

                            /* Bus Limit for Local Target 11 */
    UINT32 rsvd : 24;

                            /* Bits[31:8], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} BUSID_LOCAL_RULE_ADDRESS_3_IIO_VTD_STRUCT;

/* SAD_TARGET_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x208003f0)                                                      */
/*      SPRB0 (0x208003f0)                                                      */
/*      SPRHBM (0x208003f0)                                                     */
/*      SPRC0 (0x208003f0)                                                      */
/*      SPRMCC (0x208003f0)                                                     */
/*      SPRUCC (0x208003f0)                                                     */
/* Register default value on SPRA0: 0x00002000                                  */
/* Register default value on SPRB0: 0x00002000                                  */
/* Register default value on SPRHBM: 0x00002000                                 */
/* Register default value on SPRC0: 0x00002000                                  */
/* Register default value on SPRMCC: 0x00002000                                 */
/* Register default value on SPRUCC: 0x00002000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* SAD Target Configuration
*/


#define SAD_TARGET_IIO_VTD_REG 0x110203F0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 flash_target : 4;

                            /* Bits[3:0], Access Type=RO, default=0x00000000*/

                            /*
                               Target Node ID of the Flash Target[br] If the
                               top bit is clear, the target is a remote socket
                               and the lower 3 bits indicate the target socket
                               ID. If the top bit is set, the target is the
                               local socket and the lower 3 bits indicate the
                               target MS2IOSF stack ID.[br] Note: This field is
                               not used since peer to peer traffic is not
                               allowed to target the Flash range.
                            */
    UINT32 legacy_pch_target : 4;

                            /* Bits[7:4], Access Type=RW, default=0x00000000*/

                            /*
                               Target Node ID of the Legacy PCH Target.[br] If
                               the top bit is clear, the target is a remote
                               socket and the lower 3 bits indicate the target
                               socket ID. If the top bit is set, the target is
                               the local socket and the lower 3 bits indicate
                               the target MS2IOSF stack ID.[br] BIOS programs
                               this bitfield.
                            */
    UINT32 vga_target : 5;

                            /* Bits[12:8], Access Type=RW, default=0x00000000*/

                            /*
                               Target Node ID of the VGA Target[br] If the top
                               bit is clear, the target is a remote socket and
                               the lower 3 bits indicate the target socket ID.
                               If the top bit is set, the target is the local
                               socket and the lower 4 bits indicate the target
                               MS2IOSF stack ID.
                            */
    UINT32 rrc_to_pch : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000001*/

                            /*
                               Control whether RRC messages are routed to PCH
                               or OOBMSM (OOBMSM = 0, PCH = 1)
                            */
    UINT32 rsvd : 2;

                            /* Bits[15:14], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vga_stack : 4;

                            /* Bits[19:16], Access Type=RW, default=0x00000000*/

                            /* StackID of the VGA Target */
    UINT32 pch_stack : 3;

                            /* Bits[22:20], Access Type=RW, default=0x00000000*/

                            /* StackID of the legacy PCH Target */
    UINT32 rsvd_23 : 9;

                            /* Bits[31:23], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} SAD_TARGET_IIO_VTD_STRUCT;

/* SAD_CONTROL_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x208003f4)                                                      */
/*      SPRB0 (0x208003f4)                                                      */
/*      SPRHBM (0x208003f4)                                                     */
/*      SPRC0 (0x208003f4)                                                      */
/*      SPRMCC (0x208003f4)                                                     */
/*      SPRUCC (0x208003f4)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* SAD Target Configuration
*/


#define SAD_CONTROL_IIO_VTD_REG 0x110203F4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 local_nodeid : 4;

                            /* Bits[3:0], Access Type=RW/V, default=0x00000000*/

                            /*
                               The socket ID where this MS2IOSF is located.[br]
                               Hardware initializes this value from soft-
                               straps.
                            */
    UINT32 rsvd : 12;

                            /* Bits[15:4], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 mmiol_granularity : 4;

                            /* Bits[19:16], Access Type=RW, default=0x00000000*/

                            /*
                               The minimum granularity of the MMIOL SAD
                               Decode[br] 2^(MMIOL_Granularity+22)[br]
                               Supported Granularities are:[br] 0000b: 4M[br]
                               0001b: 8M[br] 0010b: 16M[br] 0011b: 32M[br]
                               0100b: 64M[br] 0101b: 128M[br] 0110b: 256M[br]
                               0111b: 512M[br] 1000b: 1G[br] 1001b: 2G
                            */
    UINT32 rsvd_20 : 4;

                            /* Bits[23:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 mmioh_granularity : 5;

                            /* Bits[28:24], Access Type=RW, default=0x00000000*/

                            /*
                               The minimum granularity of the MMIOH SAD Decode
                               2^(MMIOH_Granularity+24)[br] Supported
                               Granularities are:[br] 00000b: 16M[br] 00001b:
                               32M[br] 00010b: 64M[br] 00011b: 128M[br] 00100b:
                               256M[br] 00101b: 512M[br] 00110b: 1G[br] 00111b:
                               2G[br] 01000b: 4G[br] 01001b: 8G[br] 01010b:
                               16G[br] 01011b: 32G
                            */
    UINT32 rsvd_29 : 3;

                            /* Bits[31:29], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} SAD_CONTROL_IIO_VTD_STRUCT;

/* M2IO_HARD_STRAPS_IIO_VTD_REG supported on:                                   */
/*      SPRA0 (0x208003f8)                                                      */
/*      SPRB0 (0x208003f8)                                                      */
/*      SPRHBM (0x208003f8)                                                     */
/*      SPRC0 (0x208003f8)                                                      */
/*      SPRMCC (0x208003f8)                                                     */
/*      SPRUCC (0x208003f8)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: BIOS_W                                           */
/* SPRB0 Security PolicyGroup: BIOS_W                                           */
/* SPRHBM Security PolicyGroup: BIOS_W                                          */
/* SPRC0 Security PolicyGroup: BIOS_W                                           */
/* SPRMCC Security PolicyGroup: BIOS_W                                          */
/* SPRUCC Security PolicyGroup: BIOS_W                                          */
/* DMI anywhere feature: 
HSD:HAS:1406474513
*/


#define M2IO_HARD_STRAPS_IIO_VTD_REG 0x110203F8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 is_aggregator : 1;

                            /* Bits[0:0], Access Type=RW/V, default=0x00000000*/

                            /*
                               Reflects the value of the strap that indicates
                               if this is the MS2IOSF instance responsible for
                               aggregating INTx and GPE messages for the local
                               socket.
                            */
    UINT32 rsvd : 31;

                            /* Bits[31:1], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} M2IO_HARD_STRAPS_IIO_VTD_STRUCT;

/* BUSID_LOCAL_RULE_TGT1_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800400)                                                      */
/*      SPRB0 (0x20800400)                                                      */
/*      SPRHBM (0x20800400)                                                     */
/*      SPRC0 (0x20800400)                                                      */
/*      SPRMCC (0x20800400)                                                     */
/*      SPRUCC (0x20800400)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* BusID Local Rule Target 1
*/


#define BUSID_LOCAL_RULE_TGT1_IIO_VTD_REG 0x11020400

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 busidl8_tgt : 4;

                            /* Bits[3:0], Access Type=RW, default=0x00000000*/

                            /* Local 8 Target Local MS2IOSF StackID. */
    UINT32 busidl9_tgt : 4;

                            /* Bits[7:4], Access Type=RW, default=0x00000000*/

                            /* Local 9 Target Local MS2IOSF StackID. */
    UINT32 busidl10_tgt : 4;

                            /* Bits[11:8], Access Type=RW, default=0x00000000*/

                            /* Local 10 Target Local MS2IOSF StackID. */
    UINT32 busidl11_tgt : 4;

                            /* Bits[15:12], Access Type=RW, default=0x00000000*/

                            /* Local 11 Target Local MS2IOSF StackID. */
    UINT32 rsvd : 16;

                            /* Bits[31:16], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} BUSID_LOCAL_RULE_TGT1_IIO_VTD_STRUCT;

/* SNC_CONFIG_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x2080042c)                                                      */
/*      SPRB0 (0x2080042c)                                                      */
/*      SPRHBM (0x2080042c)                                                     */
/*      SPRC0 (0x2080042c)                                                      */
/*      SPRMCC (0x2080042c)                                                     */
/*      SPRUCC (0x2080042c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SNC Config
*/


#define SNC_CONFIG_IIO_VTD_REG 0x1102042C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 full_snc_en : 1;

                            /* Bits[0:0], Access Type=RW/P, default=0x00000000*/

                            /* full snc enable */
    UINT32 snc_ind_en : 1;

                            /* Bits[1:1], Access Type=RW/P, default=0x00000000*/

                            /* SNC IND enable */
    UINT32 num_snc_clu : 2;

                            /* Bits[3:2], Access Type=RW/P, default=0x00000000*/

                            /* Num of SNC Clusters */
    UINT32 rsvd : 28;

                            /* Bits[31:4], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} SNC_CONFIG_IIO_VTD_STRUCT;

/* SNC_BASE_1_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x20800430)                                                      */
/*      SPRB0 (0x20800430)                                                      */
/*      SPRHBM (0x20800430)                                                     */
/*      SPRC0 (0x20800430)                                                      */
/*      SPRMCC (0x20800430)                                                     */
/*      SPRUCC (0x20800430)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SNC base 1
*/


#define SNC_BASE_1_IIO_VTD_REG 0x11020430

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 starting_addr_0 : 16;

                            /* Bits[15:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               Starting Address for Cluster 0[br] Base Address
                               [45:30]. This is the 1G aligned base address of
                               local cluster 0. Any address less than this
                               address will have SNLocal=0.
                            */
    UINT32 address_mask_45_40 : 6;

                            /* Bits[21:16], Access Type=RW/P, default=0x00000000*/

                            /*
                               Controls bits [45:40] of the 2LM hash address
                               mask
                            */
    UINT32 address_mask_hi_51_46 : 6;

                            /* Bits[27:22], Access Type=RW/P, default=0x00000000*/

                            /*
                               High-order Controls bits [51:46] of the 2LM hash
                               address mask
                            */
    UINT32 rsvd : 4;

                            /* Bits[31:28], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} SNC_BASE_1_IIO_VTD_STRUCT;

/* SNC_BASE_2_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x20800434)                                                      */
/*      SPRB0 (0x20800434)                                                      */
/*      SPRHBM (0x20800434)                                                     */
/*      SPRC0 (0x20800434)                                                      */
/*      SPRMCC (0x20800434)                                                     */
/*      SPRUCC (0x20800434)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SNC base 2
*/


#define SNC_BASE_2_IIO_VTD_REG 0x11020434

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 starting_addr_1 : 16;

                            /* Bits[15:0], Access Type=RW/P, default=0x00000000*/

                            /* starting address for cluster 1 */
    UINT32 rsvd : 1;

                            /* Bits[16:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 address_mask_39_28 : 12;

                            /* Bits[28:17], Access Type=RW/P, default=0x00000000*/

                            /*
                               Controls bits [39:28] of the 2LM hash address
                               mask
                            */
    UINT32 rsvd_29 : 3;

                            /* Bits[31:29], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} SNC_BASE_2_IIO_VTD_STRUCT;

/* SNC_BASE_3_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x20800438)                                                      */
/*      SPRB0 (0x20800438)                                                      */
/*      SPRHBM (0x20800438)                                                     */
/*      SPRC0 (0x20800438)                                                      */
/*      SPRMCC (0x20800438)                                                     */
/*      SPRUCC (0x20800438)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SNC base 3
*/


#define SNC_BASE_3_IIO_VTD_REG 0x11020438

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 starting_addr_2 : 16;

                            /* Bits[15:0], Access Type=RW/P, default=0x00000000*/

                            /* starting address for cluster 2 */
    UINT32 rsvd : 16;

                            /* Bits[31:16], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} SNC_BASE_3_IIO_VTD_STRUCT;

/* SNC_BASE_4_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x2080043c)                                                      */
/*      SPRB0 (0x2080043c)                                                      */
/*      SPRHBM (0x2080043c)                                                     */
/*      SPRC0 (0x2080043c)                                                      */
/*      SPRMCC (0x2080043c)                                                     */
/*      SPRUCC (0x2080043c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SNC base 4
*/


#define SNC_BASE_4_IIO_VTD_REG 0x1102043C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 starting_addr_3 : 16;

                            /* Bits[15:0], Access Type=RW/P, default=0x00000000*/

                            /* starting address for cluster 3 */
    UINT32 rsvd : 16;

                            /* Bits[31:16], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} SNC_BASE_4_IIO_VTD_STRUCT;

/* SNC_BASE_5_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x20800440)                                                      */
/*      SPRB0 (0x20800440)                                                      */
/*      SPRHBM (0x20800440)                                                     */
/*      SPRC0 (0x20800440)                                                      */
/*      SPRMCC (0x20800440)                                                     */
/*      SPRUCC (0x20800440)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SNC base 5
*/


#define SNC_BASE_5_IIO_VTD_REG 0x11020440

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 starting_addr_4 : 16;

                            /* Bits[15:0], Access Type=RW/P, default=0x00000000*/

                            /* starting address for cluster 4 */
    UINT32 rsvd : 16;

                            /* Bits[31:16], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} SNC_BASE_5_IIO_VTD_STRUCT;

/* SNC_UPPER_BASE_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x20800444)                                                      */
/*      SPRB0 (0x20800444)                                                      */
/*      SPRHBM (0x20800444)                                                     */
/*      SPRC0 (0x20800444)                                                      */
/*      SPRMCC (0x20800444)                                                     */
/*      SPRUCC (0x20800444)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SNC Upper Base
*/


#define SNC_UPPER_BASE_IIO_VTD_REG 0x11020444

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 starting_addr_upper_1 : 6;

                            /* Bits[5:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               Starting Address Upper Address bits [51:46] for
                               Cluster 1
                            */
    UINT32 starting_addr_upper_2 : 6;

                            /* Bits[11:6], Access Type=RW/P, default=0x00000000*/

                            /*
                               Starting Address Upper Address bits [51:46] for
                               Cluster 2
                            */
    UINT32 starting_addr_upper_3 : 6;

                            /* Bits[17:12], Access Type=RW/P, default=0x00000000*/

                            /*
                               Starting Address Upper Address bits [51:46] for
                               Cluster 3
                            */
    UINT32 starting_addr_upper_4 : 6;

                            /* Bits[23:18], Access Type=RW/P, default=0x00000000*/

                            /*
                               Starting Address Upper Address bits [51:46] for
                               Cluster 4
                            */
    UINT32 starting_addr_upper_5 : 6;

                            /* Bits[29:24], Access Type=RW/P, default=0x00000000*/

                            /*
                               Starting Address Upper Address bits [51:46] for
                               Cluster 5[br] Note there is no fifth cluster,
                               but this register is still needed because the
                               base address of the fifth cluster sets the limit
                               address for the fourth cluster.
                            */
    UINT32 rsvd : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} SNC_UPPER_BASE_IIO_VTD_STRUCT;

/* UNCORE_SNC_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x20800448)                                                      */
/*      SPRB0 (0x20800448)                                                      */
/*      SPRHBM (0x20800448)                                                     */
/*      SPRC0 (0x20800448)                                                      */
/*      SPRMCC (0x20800448)                                                     */
/*      SPRUCC (0x20800448)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* These fields obsolete the CboID Cluster # fields from the core copy of the SNC_CONFIG register and are used by the uncore to determine the number of CHAs per cluster and the base CHA of each cluster.
*/


#define UNCORE_SNC_IIO_VTD_REG 0x11020448

#if defined(SPRA0_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 num_chas_per_cluster : 6;

                            /* Bits[5:0], Access Type=RW/P, default=0x00000000*/

                            /* Number of CHAs per SNC Cluster */
    UINT32 base_cha_cluster_1 : 6;

                            /* Bits[11:6], Access Type=RW/P, default=0x00000000*/

                            /* Base of CHA Cluster 1 */
    UINT32 base_cha_cluster_2 : 6;

                            /* Bits[17:12], Access Type=RW/P, default=0x00000000*/

                            /* Base of CHA Cluster 2 */
    UINT32 base_cha_cluster_3 : 6;

                            /* Bits[23:18], Access Type=RW/P, default=0x00000000*/

                            /* Base of CHA Cluster 3 */
    UINT32 rsvd : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} UNCORE_SNC_IIO_VTD_SPRA0_STRUCT;
#endif /* (SPRA0_HOST) */

#if defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 num_chas_per_cluster : 7;

                            /* Bits[6:0], Access Type=RW/P, default=0x00000000*/

                            /* Number of CHAs per SNC Cluster */
    UINT32 base_cha_cluster_1 : 7;

                            /* Bits[13:7], Access Type=RW/P, default=0x00000000*/

                            /* Base of CHA Cluster 1 */
    UINT32 base_cha_cluster_2 : 7;

                            /* Bits[20:14], Access Type=RW/P, default=0x00000000*/

                            /* Base of CHA Cluster 2 */
    UINT32 base_cha_cluster_3 : 7;

                            /* Bits[27:21], Access Type=RW/P, default=0x00000000*/

                            /* Base of CHA Cluster 3 */
    UINT32 rsvd : 4;

                            /* Bits[31:28], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} UNCORE_SNC_IIO_VTD_SPRB0_SPRHBM_SPRC0_SPRMCC_SPRUCC_STRUCT;
#endif /* (SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

/* UMA_CLUSTER_CONFIG_IIO_VTD_REG supported on:                                 */
/*      SPRA0 (0x2080044c)                                                      */
/*      SPRB0 (0x2080044c)                                                      */
/*      SPRHBM (0x2080044c)                                                     */
/*      SPRC0 (0x2080044c)                                                      */
/*      SPRMCC (0x2080044c)                                                     */
/*      SPRUCC (0x2080044c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* UMA Cluster Config
*/


#define UMA_CLUSTER_CONFIG_IIO_VTD_REG 0x1102044C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 uma_clustering_enable : 1;

                            /* Bits[0:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               Enable bit for UMA based clustering mode.
                               Overrides FULL_SNC_ENABLE and SNC_IND_ENABLE if
                               set.
                            */
    UINT32 uma_defeature_xor : 1;

                            /* Bits[1:1], Access Type=RW/P, default=0x00000000*/

                            /*
                               Enable bit for XOR defeature mode. By default,
                               UMA mode clustering uses
                               Addr[26:25]^Addr[18:17]^Addr[12:11]^Addr[9:8].
                               But when this bit is set to 1, Addr[12:11] are
                               used.
                            */
    UINT32 rsvd : 30;

                            /* Bits[31:2], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} UMA_CLUSTER_CONFIG_IIO_VTD_STRUCT;

/* HASHADDRMASK_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x20800450)                                                      */
/*      SPRB0 (0x20800450)                                                      */
/*      SPRHBM (0x20800450)                                                     */
/*      SPRC0 (0x20800450)                                                      */
/*      SPRMCC (0x20800450)                                                     */
/*      SPRUCC (0x20800450)                                                     */
/* Register default value on SPRA0: 0x00FFFFFF                                  */
/* Register default value on SPRB0: 0x00FFFFFF                                  */
/* Register default value on SPRHBM: 0x00FFFFFF                                 */
/* Register default value on SPRC0: 0x00FFFFFF                                  */
/* Register default value on SPRMCC: 0x00FFFFFF                                 */
/* Register default value on SPRUCC: 0x00FFFFFF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* Hash Address Mask
*/


#define HASHADDRMASK_IIO_VTD_REG 0x11020450

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 hashaddrmask : 24;

                            /* Bits[23:0], Access Type=RW/P, default=0x00FFFFFF*/

                            /* Hash Address [51:28] Mask */
    UINT32 numberofcbox : 6;

                            /* Bits[29:24], Access Type=RW/P, default=0x00000000*/

                            /*
                               Total number of CHAs (1 -> 64)[br] A value of 0
                               in this field specifies a value of 64 CHAs.
                            */
    UINT32 rsvd : 1;

                            /* Bits[30:30], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 unified_snc_mode_enable : 1;

                            /* Bits[31:31], Access Type=RW/P, default=0x00000000*/

                            /*
                               When enabled, use UMA Cluster Config to pick SNC
                               ID when missing all other SNC range checks
                            */

  } Bits;
  UINT32 Data;

} HASHADDRMASK_IIO_VTD_STRUCT;

/* B2B_THRESHOLD_ITCPIPE_N0_IIO_VTD_REG supported on:                           */
/*      SPRA0 (0x20800458)                                                      */
/*      SPRB0 (0x20800458)                                                      */
/*      SPRHBM (0x20800458)                                                     */
/*      SPRC0 (0x20800458)                                                      */
/*      SPRMCC (0x20800458)                                                     */
/*      SPRUCC (0x20800458)                                                     */
/* Register default value on SPRA0: 0x01803006                                  */
/* Register default value on SPRB0: 0x01803006                                  */
/* Register default value on SPRHBM: 0x01803006                                 */
/* Register default value on SPRC0: 0x01803006                                  */
/* Register default value on SPRMCC: 0x01803006                                 */
/* Register default value on SPRUCC: 0x01803006                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* B2B Shadow Threshold value for ITC pipe
*/


#define B2B_THRESHOLD_ITCPIPE_N0_IIO_VTD_REG 0x11020458

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 pf_shadow_threshold : 11;

                            /* Bits[10:0], Access Type=RW/P, default=0x00000006*/

                            /* Prefetch Shadow Threshold */
    UINT32 cmp_shadow_threshold : 11;

                            /* Bits[21:11], Access Type=RW/P, default=0x00000006*/

                            /* Completion Shadow Threshold */
    UINT32 fp_shadow_threshold : 10;

                            /* Bits[31:22], Access Type=RW/P, default=0x00000006*/

                            /* Fastpath Shadow Threshold */

  } Bits;
  UINT32 Data;

} B2B_THRESHOLD_ITCPIPE_N0_IIO_VTD_STRUCT;

/* B2B_THRESHOLD_ITCPIPE_N1_IIO_VTD_REG supported on:                           */
/*      SPRA0 (0x2080045c)                                                      */
/*      SPRB0 (0x2080045c)                                                      */
/*      SPRHBM (0x2080045c)                                                     */
/*      SPRC0 (0x2080045c)                                                      */
/*      SPRMCC (0x2080045c)                                                     */
/*      SPRUCC (0x2080045c)                                                     */
/* Register default value on SPRA0: 0x0100400C                                  */
/* Register default value on SPRB0: 0x0100400C                                  */
/* Register default value on SPRHBM: 0x0100400C                                 */
/* Register default value on SPRC0: 0x0100400C                                  */
/* Register default value on SPRMCC: 0x0100400C                                 */
/* Register default value on SPRUCC: 0x0100400C                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* B2B Shadow Threshold value for ITC pipe
*/


#define B2B_THRESHOLD_ITCPIPE_N1_IIO_VTD_REG 0x1102045C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 fp_shadow_threshold : 1;

                            /* Bits[0:0], Access Type=RW/P, default=0x00000000*/

                            /* Fastpath Shadow Threshold */
    UINT32 np_shadow_threshold : 11;

                            /* Bits[11:1], Access Type=RW/P, default=0x00000006*/

                            /* Non-posted Shadow Threshold */
    UINT32 arbblock_pfavail_threshold : 10;

                            /* Bits[21:12], Access Type=RW/P, default=0x00000004*/

                            /*
                               Allow Pf header arb if Num Pf avail is greater
                               than threshold when Hit427 collides with Hdr524
                            */
    UINT32 arbblock_favail_threshold : 10;

                            /* Bits[31:22], Access Type=RW/P, default=0x00000004*/

                            /*
                               Allow fetch header arb if Num Pf avail is
                               greater than threshold when Hit427 collides with
                               Hdr524
                            */

  } Bits;
  UINT32 Data;

} B2B_THRESHOLD_ITCPIPE_N1_IIO_VTD_STRUCT;


/* LOCAL_GEN_BASE_N0_IIO_VTD_REG supported on:                                  */
/*      SPRA0 (0x20800488)                                                      */
/*      SPRB0 (0x20800488)                                                      */
/*      SPRHBM (0x20800488)                                                     */
/*      SPRC0 (0x20800488)                                                      */
/*      SPRMCC (0x20800488)                                                     */
/*      SPRUCC (0x20800488)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: BIOS_W                                           */
/* SPRB0 Security PolicyGroup: BIOS_W                                           */
/* SPRHBM Security PolicyGroup: BIOS_W                                          */
/* SPRC0 Security PolicyGroup: BIOS_W                                           */
/* SPRMCC Security PolicyGroup: BIOS_W                                          */
/* SPRUCC Security PolicyGroup: BIOS_W                                          */
/* Local Generic Stolen Memory Base Address
*/


#define LOCAL_GEN_BASE_N0_IIO_VTD_REG 0x11020488

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 22;

                            /* Bits[21:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 addr : 10;

                            /* Bits[31:22], Access Type=RW, default=0x00000000*/

                            /*
                               [51:22] of physical base address of local
                               generic SAI protected memory region. MS2IOSF
                               checks inbound IOSF requests against hits to
                               these ranges and performs an SAI check to
                               determine if the request is allowed. Generic SAI
                               protected memory range addresses must be aligned
                               to a 4 MB boundary.[br] This address is the base
                               address of range 0 (associated with SAI0).
                            */

  } Bits;
  UINT32 Data;

} LOCAL_GEN_BASE_N0_IIO_VTD_STRUCT;

/* LOCAL_GEN_BASE_N1_IIO_VTD_REG supported on:                                  */
/*      SPRA0 (0x2080048c)                                                      */
/*      SPRB0 (0x2080048c)                                                      */
/*      SPRHBM (0x2080048c)                                                     */
/*      SPRC0 (0x2080048c)                                                      */
/*      SPRMCC (0x2080048c)                                                     */
/*      SPRUCC (0x2080048c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: BIOS_W                                           */
/* SPRB0 Security PolicyGroup: BIOS_W                                           */
/* SPRHBM Security PolicyGroup: BIOS_W                                          */
/* SPRC0 Security PolicyGroup: BIOS_W                                           */
/* SPRMCC Security PolicyGroup: BIOS_W                                          */
/* SPRUCC Security PolicyGroup: BIOS_W                                          */
/* Local Generic Stolen Memory Base Address
*/


#define LOCAL_GEN_BASE_N1_IIO_VTD_REG 0x1102048C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 addr : 20;

                            /* Bits[19:0], Access Type=RW, default=0x00000000*/

                            /*
                               [51:22] of physical base address of local
                               generic SAI protected memory region. MS2IOSF
                               checks inbound IOSF requests against hits to
                               these ranges and performs an SAI check to
                               determine if the request is allowed. Generic SAI
                               protected memory range addresses must be aligned
                               to a 4 MB boundary.[br] This address is the base
                               address of range 0 (associated with SAI0).
                            */
    UINT32 rsvd : 12;

                            /* Bits[31:20], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} LOCAL_GEN_BASE_N1_IIO_VTD_STRUCT;

/* LOCAL_GEN_LIMIT0_N0_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x20800490)                                                      */
/*      SPRB0 (0x20800490)                                                      */
/*      SPRHBM (0x20800490)                                                     */
/*      SPRC0 (0x20800490)                                                      */
/*      SPRMCC (0x20800490)                                                     */
/*      SPRUCC (0x20800490)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: BIOS_W                                           */
/* SPRB0 Security PolicyGroup: BIOS_W                                           */
/* SPRHBM Security PolicyGroup: BIOS_W                                          */
/* SPRC0 Security PolicyGroup: BIOS_W                                           */
/* SPRMCC Security PolicyGroup: BIOS_W                                          */
/* SPRUCC Security PolicyGroup: BIOS_W                                          */
/* Local Generic Stolen Memory Range 0 Limit Address
*/


#define LOCAL_GEN_LIMIT0_N0_IIO_VTD_REG 0x11020490

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 21;

                            /* Bits[20:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 en : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /* Enable range check for region 0 */
    UINT32 addr : 10;

                            /* Bits[31:22], Access Type=RW, default=0x00000000*/

                            /*
                               [51:22] of physical limit address of local
                               generic SAI protected memory range 0. MS2IOSF
                               checks inbound IOSF requests against hits to
                               these ranges and performs an SAI check to
                               determine if the request is allowed. Generic SAI
                               protected memory range addresses must be aligned
                               to a 4 MB boundary.[br] This address is
                               simultaneously the limit address of range 0 and
                               the base address of range 1.
                            */

  } Bits;
  UINT32 Data;

} LOCAL_GEN_LIMIT0_N0_IIO_VTD_STRUCT;

/* LOCAL_GEN_LIMIT0_N1_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x20800494)                                                      */
/*      SPRB0 (0x20800494)                                                      */
/*      SPRHBM (0x20800494)                                                     */
/*      SPRC0 (0x20800494)                                                      */
/*      SPRMCC (0x20800494)                                                     */
/*      SPRUCC (0x20800494)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: BIOS_W                                           */
/* SPRB0 Security PolicyGroup: BIOS_W                                           */
/* SPRHBM Security PolicyGroup: BIOS_W                                          */
/* SPRC0 Security PolicyGroup: BIOS_W                                           */
/* SPRMCC Security PolicyGroup: BIOS_W                                          */
/* SPRUCC Security PolicyGroup: BIOS_W                                          */
/* Local Generic Stolen Memory Range 0 Limit Address
*/


#define LOCAL_GEN_LIMIT0_N1_IIO_VTD_REG 0x11020494

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 addr : 20;

                            /* Bits[19:0], Access Type=RW, default=0x00000000*/

                            /*
                               [51:22] of physical limit address of local
                               generic SAI protected memory range 0. MS2IOSF
                               checks inbound IOSF requests against hits to
                               these ranges and performs an SAI check to
                               determine if the request is allowed. Generic SAI
                               protected memory range addresses must be aligned
                               to a 4 MB boundary.[br] This address is
                               simultaneously the limit address of range 0 and
                               the base address of range 1.
                            */
    UINT32 rsvd : 12;

                            /* Bits[31:20], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} LOCAL_GEN_LIMIT0_N1_IIO_VTD_STRUCT;

/* LOCAL_GEN_LIMIT1_N0_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x20800498)                                                      */
/*      SPRB0 (0x20800498)                                                      */
/*      SPRHBM (0x20800498)                                                     */
/*      SPRC0 (0x20800498)                                                      */
/*      SPRMCC (0x20800498)                                                     */
/*      SPRUCC (0x20800498)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: BIOS_W                                           */
/* SPRB0 Security PolicyGroup: BIOS_W                                           */
/* SPRHBM Security PolicyGroup: BIOS_W                                          */
/* SPRC0 Security PolicyGroup: BIOS_W                                           */
/* SPRMCC Security PolicyGroup: BIOS_W                                          */
/* SPRUCC Security PolicyGroup: BIOS_W                                          */
/* Local Generic Stolen Memory Range 1 Limit Address
*/


#define LOCAL_GEN_LIMIT1_N0_IIO_VTD_REG 0x11020498

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 21;

                            /* Bits[20:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 en : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /* Enable range check for region 1 */
    UINT32 addr : 10;

                            /* Bits[31:22], Access Type=RW, default=0x00000000*/

                            /*
                               [51:22] of physical limit address of local
                               generic SAI protected memory range 1. MS2IOSF
                               checks inbound IOSF requests against hits to
                               these ranges and performs an SAI check to
                               determine if the request is allowed. Generic SAI
                               protected memory range addresses must be aligned
                               to a 4 MB boundary.[br] This address is
                               simultaneously the limit address of range 1 and
                               the base address of range 2.
                            */

  } Bits;
  UINT32 Data;

} LOCAL_GEN_LIMIT1_N0_IIO_VTD_STRUCT;

/* LOCAL_GEN_LIMIT1_N1_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x2080049c)                                                      */
/*      SPRB0 (0x2080049c)                                                      */
/*      SPRHBM (0x2080049c)                                                     */
/*      SPRC0 (0x2080049c)                                                      */
/*      SPRMCC (0x2080049c)                                                     */
/*      SPRUCC (0x2080049c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: BIOS_W                                           */
/* SPRB0 Security PolicyGroup: BIOS_W                                           */
/* SPRHBM Security PolicyGroup: BIOS_W                                          */
/* SPRC0 Security PolicyGroup: BIOS_W                                           */
/* SPRMCC Security PolicyGroup: BIOS_W                                          */
/* SPRUCC Security PolicyGroup: BIOS_W                                          */
/* Local Generic Stolen Memory Range 1 Limit Address
*/


#define LOCAL_GEN_LIMIT1_N1_IIO_VTD_REG 0x1102049C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 addr : 20;

                            /* Bits[19:0], Access Type=RW, default=0x00000000*/

                            /*
                               [51:22] of physical limit address of local
                               generic SAI protected memory range 1. MS2IOSF
                               checks inbound IOSF requests against hits to
                               these ranges and performs an SAI check to
                               determine if the request is allowed. Generic SAI
                               protected memory range addresses must be aligned
                               to a 4 MB boundary.[br] This address is
                               simultaneously the limit address of range 1 and
                               the base address of range 2.
                            */
    UINT32 rsvd : 12;

                            /* Bits[31:20], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} LOCAL_GEN_LIMIT1_N1_IIO_VTD_STRUCT;

/* LOCAL_GEN_LIMIT2_N0_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x208004a0)                                                      */
/*      SPRB0 (0x208004a0)                                                      */
/*      SPRHBM (0x208004a0)                                                     */
/*      SPRC0 (0x208004a0)                                                      */
/*      SPRMCC (0x208004a0)                                                     */
/*      SPRUCC (0x208004a0)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: BIOS_W                                           */
/* SPRB0 Security PolicyGroup: BIOS_W                                           */
/* SPRHBM Security PolicyGroup: BIOS_W                                          */
/* SPRC0 Security PolicyGroup: BIOS_W                                           */
/* SPRMCC Security PolicyGroup: BIOS_W                                          */
/* SPRUCC Security PolicyGroup: BIOS_W                                          */
/* Local Generic SAI Protected Memory Range 2 Limit Address
*/


#define LOCAL_GEN_LIMIT2_N0_IIO_VTD_REG 0x110204A0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 21;

                            /* Bits[20:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 en : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /* Enable range check for region 2 */
    UINT32 addr : 10;

                            /* Bits[31:22], Access Type=RW, default=0x00000000*/

                            /*
                               [51:22] of physical limit address of local
                               generic SAI protected memory range 2. MS2IOSF
                               checks inbound IOSF requests against hits to
                               these ranges and performs an SAI check to
                               determine if the request is allowed. Generic SAI
                               protected memory range addresses must be aligned
                               to a 4 MB boundary.[br] This address is
                               simultaneously the limit address of range 2 and
                               the base address of range 3.
                            */

  } Bits;
  UINT32 Data;

} LOCAL_GEN_LIMIT2_N0_IIO_VTD_STRUCT;

/* LOCAL_GEN_LIMIT2_N1_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x208004a4)                                                      */
/*      SPRB0 (0x208004a4)                                                      */
/*      SPRHBM (0x208004a4)                                                     */
/*      SPRC0 (0x208004a4)                                                      */
/*      SPRMCC (0x208004a4)                                                     */
/*      SPRUCC (0x208004a4)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: BIOS_W                                           */
/* SPRB0 Security PolicyGroup: BIOS_W                                           */
/* SPRHBM Security PolicyGroup: BIOS_W                                          */
/* SPRC0 Security PolicyGroup: BIOS_W                                           */
/* SPRMCC Security PolicyGroup: BIOS_W                                          */
/* SPRUCC Security PolicyGroup: BIOS_W                                          */
/* Local Generic SAI Protected Memory Range 2 Limit Address
*/


#define LOCAL_GEN_LIMIT2_N1_IIO_VTD_REG 0x110204A4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 addr : 20;

                            /* Bits[19:0], Access Type=RW, default=0x00000000*/

                            /*
                               [51:22] of physical limit address of local
                               generic SAI protected memory range 2. MS2IOSF
                               checks inbound IOSF requests against hits to
                               these ranges and performs an SAI check to
                               determine if the request is allowed. Generic SAI
                               protected memory range addresses must be aligned
                               to a 4 MB boundary.[br] This address is
                               simultaneously the limit address of range 2 and
                               the base address of range 3.
                            */
    UINT32 rsvd : 12;

                            /* Bits[31:20], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} LOCAL_GEN_LIMIT2_N1_IIO_VTD_STRUCT;

/* LOCAL_GEN_LIMIT3_N0_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x208004a8)                                                      */
/*      SPRB0 (0x208004a8)                                                      */
/*      SPRHBM (0x208004a8)                                                     */
/*      SPRC0 (0x208004a8)                                                      */
/*      SPRMCC (0x208004a8)                                                     */
/*      SPRUCC (0x208004a8)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: BIOS_W                                           */
/* SPRB0 Security PolicyGroup: BIOS_W                                           */
/* SPRHBM Security PolicyGroup: BIOS_W                                          */
/* SPRC0 Security PolicyGroup: BIOS_W                                           */
/* SPRMCC Security PolicyGroup: BIOS_W                                          */
/* SPRUCC Security PolicyGroup: BIOS_W                                          */
/* Local Generic SAI Protected Memory Range 3 Limit Address
*/


#define LOCAL_GEN_LIMIT3_N0_IIO_VTD_REG 0x110204A8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 21;

                            /* Bits[20:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 en : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /* Enable range check for region 3 */
    UINT32 addr : 10;

                            /* Bits[31:22], Access Type=RW, default=0x00000000*/

                            /*
                               [51:22] of physical limit address of local
                               generic SAI protected memory range 3. MS2IOSF
                               checks inbound IOSF requests against hits to
                               these ranges and performs an SAI check to
                               determine if the request is allowed. Generic SAI
                               protected memory range addresses must be aligned
                               to a 4 MB boundary.
                            */

  } Bits;
  UINT32 Data;

} LOCAL_GEN_LIMIT3_N0_IIO_VTD_STRUCT;

/* LOCAL_GEN_LIMIT3_N1_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x208004ac)                                                      */
/*      SPRB0 (0x208004ac)                                                      */
/*      SPRHBM (0x208004ac)                                                     */
/*      SPRC0 (0x208004ac)                                                      */
/*      SPRMCC (0x208004ac)                                                     */
/*      SPRUCC (0x208004ac)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: BIOS_W                                           */
/* SPRB0 Security PolicyGroup: BIOS_W                                           */
/* SPRHBM Security PolicyGroup: BIOS_W                                          */
/* SPRC0 Security PolicyGroup: BIOS_W                                           */
/* SPRMCC Security PolicyGroup: BIOS_W                                          */
/* SPRUCC Security PolicyGroup: BIOS_W                                          */
/* Local Generic SAI Protected Memory Range 3 Limit Address
*/


#define LOCAL_GEN_LIMIT3_N1_IIO_VTD_REG 0x110204AC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 addr : 20;

                            /* Bits[19:0], Access Type=RW, default=0x00000000*/

                            /*
                               [51:22] of physical limit address of local
                               generic SAI protected memory range 3. MS2IOSF
                               checks inbound IOSF requests against hits to
                               these ranges and performs an SAI check to
                               determine if the request is allowed. Generic SAI
                               protected memory range addresses must be aligned
                               to a 4 MB boundary.
                            */
    UINT32 rsvd : 12;

                            /* Bits[31:20], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} LOCAL_GEN_LIMIT3_N1_IIO_VTD_STRUCT;

/* PERFCTRLSTS_CH8_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x208004c0)                                                      */
/*      SPRB0 (0x208004c0)                                                      */
/*      SPRHBM (0x208004c0)                                                     */
/*      SPRC0 (0x208004c0)                                                      */
/*      SPRMCC (0x208004c0)                                                     */
/*      SPRUCC (0x208004c0)                                                     */
/* Register default value on SPRA0: 0x00020091                                  */
/* Register default value on SPRB0: 0x00020091                                  */
/* Register default value on SPRHBM: 0x00020091                                 */
/* Register default value on SPRC0: 0x00020091                                  */
/* Register default value on SPRMCC: 0x00020091                                 */
/* Register default value on SPRUCC: 0x00020091                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Performance Control and Status for IOSF Channel
*/


#define PERFCTRLSTS_CH8_IIO_VTD_REG 0x110204C0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 read_stream_policy : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000001*/

                            /* Read Stream Policy */
    UINT32 read_passing_read_disable : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               NOT IMPLEMENTED. MS2IOSF does not support
                               reordering of read requests within a channel,
                               but may do so in a future implementation.
                            */
    UINT32 rsvd : 1;

                            /* Bits[2:2], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 nosnoopopwren : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Enable No-Snoop on VC0 writes received on this
                               port[br] This applies to writes with the
                               following conditions:[br] NS=1 AND (TPH=0 OR
                               TPHDIS=1)[br] 1: Inbound writes to memory with
                               above conditions will be treated as non-coherent
                               (no snoops) writes - MS2IOSF will use the non-
                               allocating NS flow[br] 0: Inbound writes to
                               memory with above conditions will be treated as
                               allocating writes.[br] Notes:[br] - If TPH=1 and
                               TPHDIS=0 then NS is ignored and this bit is
                               ignored[br] - VC1/VCm writes are not controlled
                               by this bit since they are always non-snoop and
                               can be no other way.[br] - TPH and
                               ForceNoSnoopWrEn have higher precedence than
                               this bit
                            */
    UINT32 read_stream_interleave_size : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000001*/

                            /* Read Stream Interleave Size */
    UINT32 forcenosnoopwren : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Force No-Snoop on VC0 writes received on this
                               port[br] 1: All writes received on this port are
                               treated as though the NS bit is set and will use
                               the Non-Snoop non-allocating flow.[br] 0: Writes
                               will be treated as non-snoop only if the NS bit
                               is set and the NoSnoopWrEn bit is set.[br]
                               Notes:[br] - VC1/VCm traffic is not impacted by
                               this bit since all writes from VC1 and VCm are
                               always Non-Snoop[br] - This bit has precedence
                               over the NoSnoopWrEn field in this register[br]
                               - Forcing writes to be non-snoop with this bit
                               takes precedence over TPH
                            */
    UINT32 implicit_nosnoop : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               1: Issue CLFlush for every remote socket
                               cacheline if TH=0 or Prioritize_TPH = 0[br] 0:
                               do not force CLFlush for these writes[br] Note:
                               This bit should not be set at the same time as
                               Implicit_TPH (Implicit_NoSnoop gets priority)
                            */
    UINT32 use_allocating_flow_wr : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               Force all Snooping writes from this port will
                               use the Allocating Flow[br] 1: All Snooping
                               writes received on this port use the allocating
                               flow[br] 0: All Snooping Writes will use the
                               Non-Allocating Flow[br] Notes:[br] - VC1/VCm
                               traffic is not impacted by this bit since all
                               writes from VC1 and VCm are always Non-Snoop
                            */
    UINT32 rsvd_8 : 2;

                            /* Bits[9:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 partial_cohrd_op : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/
    UINT32 rsvd_11 : 1;

                            /* Bits[11:11], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 disable_ro : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Disables Relaxed Ordering for this Channel. If
                               set, all writes are treated as though RO=0.
                            */
    UINT32 force_ro : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Forces Relaxed Ordering for this Channel. If
                               set, all writes are treated as though RO=1,
                               except MSIs.
                            */
    UINT32 rsvd_14 : 2;

                            /* Bits[15:14], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 disable_tph : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               TLP Processing Hint Disable[br] When set, writes
                               or reads with TPH=1, will be treated as if
                               TPH=0. Refer to the Transaction Flow chapter for
                               details about the flows for the different cases
                               of TPH.
                            */
    UINT32 prioritize_tph : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000001*/

                            /*
                               If TH bit is set on a cacheline belonging to the
                               remote socket:[br] 1: the writeback phase uses
                               WbPushMtoI[br] 0: the writeback will use
                               CLCleanse
                            */
    UINT32 implicit_tph : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               1: all snooping writes are treated as though
                               TH=1[br] 0: snooping writes will use TH value
                               received
                            */
    UINT32 rsvd_19 : 13;

                            /* Bits[31:19], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} PERFCTRLSTS_CH8_IIO_VTD_STRUCT;

/* MISCCTRLSTS_CH8_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x208004c4)                                                      */
/*      SPRB0 (0x208004c4)                                                      */
/*      SPRHBM (0x208004c4)                                                     */
/*      SPRC0 (0x208004c4)                                                      */
/*      SPRMCC (0x208004c4)                                                     */
/*      SPRUCC (0x208004c4)                                                     */
/* Register default value on SPRA0: 0x00800000                                  */
/* Register default value on SPRB0: 0x00A00000                                  */
/* Register default value on SPRHBM: 0x00A00000                                 */
/* Register default value on SPRC0: 0x00A00000                                  */
/* Register default value on SPRMCC: 0x00A00000                                 */
/* Register default value on SPRUCC: 0x00A00000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Miscellaneous Control and Status for IOSF Channel
*/


#define MISCCTRLSTS_CH8_IIO_VTD_REG 0x110204C4

#if defined(SPRA0_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vc1_read_bypass_write : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               0: Reads push writes within this channel[br] -1:
                               Reads are allowed to bypass blocked writes
                               within this channel
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 problematic_channel_for_lock_flows : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               This bit is set by BIOS when it knows that this
                               channel port is connected to a device that
                               creates Posted-Posted dependency on its In-Out
                               queues. BIOS writers must read the 'Ordering
                               Chapter' of MS2IOSF HAS to get a complete list
                               of devices that are considered to have this
                               dependency.[br] Briefly, this bit may be set on
                               a link if:[br] This channel is connected to an
                               NTB port.[br] This channel is connected to a
                               buggy Intel NIC device: one of
                               zoar/Oplin/Hartwell or any other PCIe device
                               that has a Posted-Posted dependency.[br] MS2IOSF
                               lock flows depend on the setting of this bit to
                               treat this port in a special way during the
                               flows. Note that if BIOS is setting up the lock
                               flow to be in the 'UPI compatible' mode (refer
                               to UBOX HAS for details), then this bit must be
                               set to 0.
                            */
    UINT32 rsvd_7 : 4;

                            /* Bits[10:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 do_not_block_during_lock : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if the channel
                               should NOT be blocked (1 = do not block).
                            */
    UINT32 enable_isoch : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /* The channel is enabled as an Isoch channel */
    UINT32 no_channel_throttle_in_quiesce : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               During Quiesce, this channel would not throttle
                               if this bit is set.
                            */
    UINT32 allow_one_np_os : 1;

                            /* Bits[14:14], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 dis_hdr_storage : 1;

                            /* Bits[15:15], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_16 : 5;

                            /* Bits[20:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 zero_ob_tc : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MISCCTRLSTS_CH8_IIO_VTD_SPRA0_STRUCT;
#endif /* (SPRA0_HOST) */

#if defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vc1_read_bypass_write : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               0: Reads push writes within this channel[br] -1:
                               Reads are allowed to bypass blocked writes
                               within this channel
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 problematic_channel_for_lock_flows : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               This bit is set by BIOS when it knows that this
                               channel port is connected to a device that
                               creates Posted-Posted dependency on its In-Out
                               queues. BIOS writers must read the 'Ordering
                               Chapter' of MS2IOSF HAS to get a complete list
                               of devices that are considered to have this
                               dependency.[br] Briefly, this bit may be set on
                               a link if:[br] This channel is connected to an
                               NTB port.[br] This channel is connected to a
                               buggy Intel NIC device: one of
                               zoar/Oplin/Hartwell or any other PCIe device
                               that has a Posted-Posted dependency.[br] MS2IOSF
                               lock flows depend on the setting of this bit to
                               treat this port in a special way during the
                               flows. Note that if BIOS is setting up the lock
                               flow to be in the 'UPI compatible' mode (refer
                               to UBOX HAS for details), then this bit must be
                               set to 0.
                            */
    UINT32 rsvd_7 : 4;

                            /* Bits[10:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 do_not_block_during_lock : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if the channel
                               should NOT be blocked (1 = do not block).
                            */
    UINT32 enable_isoch : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /* The channel is enabled as an Isoch channel */
    UINT32 no_channel_throttle_in_quiesce : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               During Quiesce, this channel would not throttle
                               if this bit is set.
                            */
    UINT32 allow_one_np_os : 1;

                            /* Bits[14:14], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 dis_hdr_storage : 1;

                            /* Bits[15:15], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_16 : 5;

                            /* Bits[20:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 zero_ob_tc : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000001*/

                            /*
                               Zero out the TC field for outbound requests (P
                               and NP only)
                            */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 block_non_posted_only_during_lock : 1;

                            /* Bits[24:24], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if for the channel
                               only Non-Posteds should be blocked
                            */
    UINT32 rsvd_25 : 7;

                            /* Bits[31:25], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MISCCTRLSTS_CH8_IIO_VTD_SPRB0_SPRHBM_SPRC0_SPRMCC_SPRUCC_STRUCT;
#endif /* (SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vc1_read_bypass_write : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               0: Reads push writes within this channel[br] -1:
                               Reads are allowed to bypass blocked writes
                               within this channel
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 problematic_channel_for_lock_flows : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               This bit is set by BIOS when it knows that this
                               channel port is connected to a device that
                               creates Posted-Posted dependency on its In-Out
                               queues. BIOS writers must read the 'Ordering
                               Chapter' of MS2IOSF HAS to get a complete list
                               of devices that are considered to have this
                               dependency.[br] Briefly, this bit may be set on
                               a link if:[br] This channel is connected to an
                               NTB port.[br] This channel is connected to a
                               buggy Intel NIC device: one of
                               zoar/Oplin/Hartwell or any other PCIe device
                               that has a Posted-Posted dependency.[br] MS2IOSF
                               lock flows depend on the setting of this bit to
                               treat this port in a special way during the
                               flows. Note that if BIOS is setting up the lock
                               flow to be in the 'UPI compatible' mode (refer
                               to UBOX HAS for details), then this bit must be
                               set to 0.
                            */
    UINT32 rsvd_7 : 4;

                            /* Bits[10:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 do_not_block_during_lock : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if the channel
                               should NOT be blocked (1 = do not block).
                            */
    UINT32 enable_isoch : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /* The channel is enabled as an Isoch channel */
    UINT32 no_channel_throttle_in_quiesce : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               During Quiesce, this channel would not throttle
                               if this bit is set.
                            */
    UINT32 allow_one_np_os : 1;

                            /* Bits[14:14], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 dis_hdr_storage : 1;

                            /* Bits[15:15], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_16 : 5;

                            /* Bits[20:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 zero_ob_tc : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MISCCTRLSTS_CH8_IIO_VTD_STRUCT;

/* PERFCTRLSTS_CH9_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x208004c8)                                                      */
/*      SPRB0 (0x208004c8)                                                      */
/*      SPRHBM (0x208004c8)                                                     */
/*      SPRC0 (0x208004c8)                                                      */
/*      SPRMCC (0x208004c8)                                                     */
/*      SPRUCC (0x208004c8)                                                     */
/* Register default value on SPRA0: 0x00020091                                  */
/* Register default value on SPRB0: 0x00020091                                  */
/* Register default value on SPRHBM: 0x00020091                                 */
/* Register default value on SPRC0: 0x00020091                                  */
/* Register default value on SPRMCC: 0x00020091                                 */
/* Register default value on SPRUCC: 0x00020091                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Performance Control and Status for IOSF Channel
*/


#define PERFCTRLSTS_CH9_IIO_VTD_REG 0x110204C8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 read_stream_policy : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000001*/

                            /* Read Stream Policy */
    UINT32 read_passing_read_disable : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               NOT IMPLEMENTED. MS2IOSF does not support
                               reordering of read requests within a channel,
                               but may do so in a future implementation.
                            */
    UINT32 rsvd : 1;

                            /* Bits[2:2], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 nosnoopopwren : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Enable No-Snoop on VC0 writes received on this
                               port[br] This applies to writes with the
                               following conditions:[br] NS=1 AND (TPH=0 OR
                               TPHDIS=1)[br] 1: Inbound writes to memory with
                               above conditions will be treated as non-coherent
                               (no snoops) writes - MS2IOSF will use the non-
                               allocating NS flow[br] 0: Inbound writes to
                               memory with above conditions will be treated as
                               allocating writes.[br] Notes:[br] - If TPH=1 and
                               TPHDIS=0 then NS is ignored and this bit is
                               ignored[br] - VC1/VCm writes are not controlled
                               by this bit since they are always non-snoop and
                               can be no other way.[br] - TPH and
                               ForceNoSnoopWrEn have higher precedence than
                               this bit
                            */
    UINT32 read_stream_interleave_size : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000001*/

                            /* Read Stream Interleave Size */
    UINT32 forcenosnoopwren : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Force No-Snoop on VC0 writes received on this
                               port[br] 1: All writes received on this port are
                               treated as though the NS bit is set and will use
                               the Non-Snoop non-allocating flow.[br] 0: Writes
                               will be treated as non-snoop only if the NS bit
                               is set and the NoSnoopWrEn bit is set.[br]
                               Notes:[br] - VC1/VCm traffic is not impacted by
                               this bit since all writes from VC1 and VCm are
                               always Non-Snoop[br] - This bit has precedence
                               over the NoSnoopWrEn field in this register[br]
                               - Forcing writes to be non-snoop with this bit
                               takes precedence over TPH
                            */
    UINT32 implicit_nosnoop : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               1: Issue CLFlush for every remote socket
                               cacheline if TH=0 or Prioritize_TPH = 0[br] 0:
                               do not force CLFlush for these writes[br] Note:
                               This bit should not be set at the same time as
                               Implicit_TPH (Implicit_NoSnoop gets priority)
                            */
    UINT32 use_allocating_flow_wr : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               Force all Snooping writes from this port will
                               use the Allocating Flow[br] 1: All Snooping
                               writes received on this port use the allocating
                               flow[br] 0: All Snooping Writes will use the
                               Non-Allocating Flow[br] Notes:[br] - VC1/VCm
                               traffic is not impacted by this bit since all
                               writes from VC1 and VCm are always Non-Snoop
                            */
    UINT32 rsvd_8 : 2;

                            /* Bits[9:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 partial_cohrd_op : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/
    UINT32 rsvd_11 : 1;

                            /* Bits[11:11], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 disable_ro : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Disables Relaxed Ordering for this Channel. If
                               set, all writes are treated as though RO=0.
                            */
    UINT32 force_ro : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Forces Relaxed Ordering for this Channel. If
                               set, all writes are treated as though RO=1,
                               except MSIs.
                            */
    UINT32 rsvd_14 : 2;

                            /* Bits[15:14], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 disable_tph : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               TLP Processing Hint Disable[br] When set, writes
                               or reads with TPH=1, will be treated as if
                               TPH=0. Refer to the Transaction Flow chapter for
                               details about the flows for the different cases
                               of TPH.
                            */
    UINT32 prioritize_tph : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000001*/

                            /*
                               If TH bit is set on a cacheline belonging to the
                               remote socket:[br] 1: the writeback phase uses
                               WbPushMtoI[br] 0: the writeback will use
                               CLCleanse
                            */
    UINT32 implicit_tph : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               1: all snooping writes are treated as though
                               TH=1[br] 0: snooping writes will use TH value
                               received
                            */
    UINT32 rsvd_19 : 13;

                            /* Bits[31:19], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} PERFCTRLSTS_CH9_IIO_VTD_STRUCT;

/* MISCCTRLSTS_CH9_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x208004cc)                                                      */
/*      SPRB0 (0x208004cc)                                                      */
/*      SPRHBM (0x208004cc)                                                     */
/*      SPRC0 (0x208004cc)                                                      */
/*      SPRMCC (0x208004cc)                                                     */
/*      SPRUCC (0x208004cc)                                                     */
/* Register default value on SPRA0: 0x00800000                                  */
/* Register default value on SPRB0: 0x00A00000                                  */
/* Register default value on SPRHBM: 0x00A00000                                 */
/* Register default value on SPRC0: 0x00A00000                                  */
/* Register default value on SPRMCC: 0x00A00000                                 */
/* Register default value on SPRUCC: 0x00A00000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Miscellaneous Control and Status for IOSF Channel
*/


#define MISCCTRLSTS_CH9_IIO_VTD_REG 0x110204CC

#if defined(SPRA0_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vc1_read_bypass_write : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               0: Reads push writes within this channel[br] -1:
                               Reads are allowed to bypass blocked writes
                               within this channel
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 problematic_channel_for_lock_flows : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               This bit is set by BIOS when it knows that this
                               channel port is connected to a device that
                               creates Posted-Posted dependency on its In-Out
                               queues. BIOS writers must read the 'Ordering
                               Chapter' of MS2IOSF HAS to get a complete list
                               of devices that are considered to have this
                               dependency.[br] Briefly, this bit may be set on
                               a link if:[br] This channel is connected to an
                               NTB port.[br] This channel is connected to a
                               buggy Intel NIC device: one of
                               zoar/Oplin/Hartwell or any other PCIe device
                               that has a Posted-Posted dependency.[br] MS2IOSF
                               lock flows depend on the setting of this bit to
                               treat this port in a special way during the
                               flows. Note that if BIOS is setting up the lock
                               flow to be in the 'UPI compatible' mode (refer
                               to UBOX HAS for details), then this bit must be
                               set to 0.
                            */
    UINT32 rsvd_7 : 4;

                            /* Bits[10:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 do_not_block_during_lock : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if the channel
                               should NOT be blocked (1 = do not block).
                            */
    UINT32 enable_isoch : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /* The channel is enabled as an Isoch channel */
    UINT32 no_channel_throttle_in_quiesce : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               During Quiesce, this channel would not throttle
                               if this bit is set.
                            */
    UINT32 allow_one_np_os : 1;

                            /* Bits[14:14], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 dis_hdr_storage : 1;

                            /* Bits[15:15], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_16 : 5;

                            /* Bits[20:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 zero_ob_tc : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MISCCTRLSTS_CH9_IIO_VTD_SPRA0_STRUCT;
#endif /* (SPRA0_HOST) */

#if defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vc1_read_bypass_write : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               0: Reads push writes within this channel[br] -1:
                               Reads are allowed to bypass blocked writes
                               within this channel
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 problematic_channel_for_lock_flows : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               This bit is set by BIOS when it knows that this
                               channel port is connected to a device that
                               creates Posted-Posted dependency on its In-Out
                               queues. BIOS writers must read the 'Ordering
                               Chapter' of MS2IOSF HAS to get a complete list
                               of devices that are considered to have this
                               dependency.[br] Briefly, this bit may be set on
                               a link if:[br] This channel is connected to an
                               NTB port.[br] This channel is connected to a
                               buggy Intel NIC device: one of
                               zoar/Oplin/Hartwell or any other PCIe device
                               that has a Posted-Posted dependency.[br] MS2IOSF
                               lock flows depend on the setting of this bit to
                               treat this port in a special way during the
                               flows. Note that if BIOS is setting up the lock
                               flow to be in the 'UPI compatible' mode (refer
                               to UBOX HAS for details), then this bit must be
                               set to 0.
                            */
    UINT32 rsvd_7 : 4;

                            /* Bits[10:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 do_not_block_during_lock : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if the channel
                               should NOT be blocked (1 = do not block).
                            */
    UINT32 enable_isoch : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /* The channel is enabled as an Isoch channel */
    UINT32 no_channel_throttle_in_quiesce : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               During Quiesce, this channel would not throttle
                               if this bit is set.
                            */
    UINT32 allow_one_np_os : 1;

                            /* Bits[14:14], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 dis_hdr_storage : 1;

                            /* Bits[15:15], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_16 : 5;

                            /* Bits[20:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 zero_ob_tc : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000001*/

                            /*
                               Zero out the TC field for outbound requests (P
                               and NP only)
                            */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 block_non_posted_only_during_lock : 1;

                            /* Bits[24:24], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if for the channel
                               only Non-Posteds should be blocked
                            */
    UINT32 rsvd_25 : 7;

                            /* Bits[31:25], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MISCCTRLSTS_CH9_IIO_VTD_SPRB0_SPRHBM_SPRC0_SPRMCC_SPRUCC_STRUCT;
#endif /* (SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vc1_read_bypass_write : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               0: Reads push writes within this channel[br] -1:
                               Reads are allowed to bypass blocked writes
                               within this channel
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 problematic_channel_for_lock_flows : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               This bit is set by BIOS when it knows that this
                               channel port is connected to a device that
                               creates Posted-Posted dependency on its In-Out
                               queues. BIOS writers must read the 'Ordering
                               Chapter' of MS2IOSF HAS to get a complete list
                               of devices that are considered to have this
                               dependency.[br] Briefly, this bit may be set on
                               a link if:[br] This channel is connected to an
                               NTB port.[br] This channel is connected to a
                               buggy Intel NIC device: one of
                               zoar/Oplin/Hartwell or any other PCIe device
                               that has a Posted-Posted dependency.[br] MS2IOSF
                               lock flows depend on the setting of this bit to
                               treat this port in a special way during the
                               flows. Note that if BIOS is setting up the lock
                               flow to be in the 'UPI compatible' mode (refer
                               to UBOX HAS for details), then this bit must be
                               set to 0.
                            */
    UINT32 rsvd_7 : 4;

                            /* Bits[10:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 do_not_block_during_lock : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if the channel
                               should NOT be blocked (1 = do not block).
                            */
    UINT32 enable_isoch : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /* The channel is enabled as an Isoch channel */
    UINT32 no_channel_throttle_in_quiesce : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               During Quiesce, this channel would not throttle
                               if this bit is set.
                            */
    UINT32 allow_one_np_os : 1;

                            /* Bits[14:14], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 dis_hdr_storage : 1;

                            /* Bits[15:15], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_16 : 5;

                            /* Bits[20:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 zero_ob_tc : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MISCCTRLSTS_CH9_IIO_VTD_STRUCT;

/* PERFCTRLSTS_CH10_IIO_VTD_REG supported on:                                   */
/*      SPRA0 (0x208004d0)                                                      */
/*      SPRB0 (0x208004d0)                                                      */
/*      SPRHBM (0x208004d0)                                                     */
/*      SPRC0 (0x208004d0)                                                      */
/*      SPRMCC (0x208004d0)                                                     */
/*      SPRUCC (0x208004d0)                                                     */
/* Register default value on SPRA0: 0x00020091                                  */
/* Register default value on SPRB0: 0x00020091                                  */
/* Register default value on SPRHBM: 0x00020091                                 */
/* Register default value on SPRC0: 0x00020091                                  */
/* Register default value on SPRMCC: 0x00020091                                 */
/* Register default value on SPRUCC: 0x00020091                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Performance Control and Status for IOSF Channel
*/


#define PERFCTRLSTS_CH10_IIO_VTD_REG 0x110204D0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 read_stream_policy : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000001*/

                            /* Read Stream Policy */
    UINT32 read_passing_read_disable : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               NOT IMPLEMENTED. MS2IOSF does not support
                               reordering of read requests within a channel,
                               but may do so in a future implementation.
                            */
    UINT32 rsvd : 1;

                            /* Bits[2:2], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 nosnoopopwren : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Enable No-Snoop on VC0 writes received on this
                               port[br] This applies to writes with the
                               following conditions:[br] NS=1 AND (TPH=0 OR
                               TPHDIS=1)[br] 1: Inbound writes to memory with
                               above conditions will be treated as non-coherent
                               (no snoops) writes - MS2IOSF will use the non-
                               allocating NS flow[br] 0: Inbound writes to
                               memory with above conditions will be treated as
                               allocating writes.[br] Notes:[br] - If TPH=1 and
                               TPHDIS=0 then NS is ignored and this bit is
                               ignored[br] - VC1/VCm writes are not controlled
                               by this bit since they are always non-snoop and
                               can be no other way.[br] - TPH and
                               ForceNoSnoopWrEn have higher precedence than
                               this bit
                            */
    UINT32 read_stream_interleave_size : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000001*/

                            /* Read Stream Interleave Size */
    UINT32 forcenosnoopwren : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Force No-Snoop on VC0 writes received on this
                               port[br] 1: All writes received on this port are
                               treated as though the NS bit is set and will use
                               the Non-Snoop non-allocating flow.[br] 0: Writes
                               will be treated as non-snoop only if the NS bit
                               is set and the NoSnoopWrEn bit is set.[br]
                               Notes:[br] - VC1/VCm traffic is not impacted by
                               this bit since all writes from VC1 and VCm are
                               always Non-Snoop[br] - This bit has precedence
                               over the NoSnoopWrEn field in this register[br]
                               - Forcing writes to be non-snoop with this bit
                               takes precedence over TPH
                            */
    UINT32 implicit_nosnoop : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               1: Issue CLFlush for every remote socket
                               cacheline if TH=0 or Prioritize_TPH = 0[br] 0:
                               do not force CLFlush for these writes[br] Note:
                               This bit should not be set at the same time as
                               Implicit_TPH (Implicit_NoSnoop gets priority)
                            */
    UINT32 use_allocating_flow_wr : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               Force all Snooping writes from this port will
                               use the Allocating Flow[br] 1: All Snooping
                               writes received on this port use the allocating
                               flow[br] 0: All Snooping Writes will use the
                               Non-Allocating Flow[br] Notes:[br] - VC1/VCm
                               traffic is not impacted by this bit since all
                               writes from VC1 and VCm are always Non-Snoop
                            */
    UINT32 rsvd_8 : 2;

                            /* Bits[9:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 partial_cohrd_op : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/
    UINT32 rsvd_11 : 1;

                            /* Bits[11:11], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 disable_ro : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Disables Relaxed Ordering for this Channel. If
                               set, all writes are treated as though RO=0.
                            */
    UINT32 force_ro : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Forces Relaxed Ordering for this Channel. If
                               set, all writes are treated as though RO=1,
                               except MSIs.
                            */
    UINT32 rsvd_14 : 2;

                            /* Bits[15:14], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 disable_tph : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               TLP Processing Hint Disable[br] When set, writes
                               or reads with TPH=1, will be treated as if
                               TPH=0. Refer to the Transaction Flow chapter for
                               details about the flows for the different cases
                               of TPH.
                            */
    UINT32 prioritize_tph : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000001*/

                            /*
                               If TH bit is set on a cacheline belonging to the
                               remote socket:[br] 1: the writeback phase uses
                               WbPushMtoI[br] 0: the writeback will use
                               CLCleanse
                            */
    UINT32 implicit_tph : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               1: all snooping writes are treated as though
                               TH=1[br] 0: snooping writes will use TH value
                               received
                            */
    UINT32 rsvd_19 : 13;

                            /* Bits[31:19], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} PERFCTRLSTS_CH10_IIO_VTD_STRUCT;

/* MISCCTRLSTS_CH10_IIO_VTD_REG supported on:                                   */
/*      SPRA0 (0x208004d4)                                                      */
/*      SPRB0 (0x208004d4)                                                      */
/*      SPRHBM (0x208004d4)                                                     */
/*      SPRC0 (0x208004d4)                                                      */
/*      SPRMCC (0x208004d4)                                                     */
/*      SPRUCC (0x208004d4)                                                     */
/* Register default value on SPRA0: 0x00800000                                  */
/* Register default value on SPRB0: 0x00A00000                                  */
/* Register default value on SPRHBM: 0x00A00000                                 */
/* Register default value on SPRC0: 0x00A00000                                  */
/* Register default value on SPRMCC: 0x00A00000                                 */
/* Register default value on SPRUCC: 0x00A00000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Miscellaneous Control and Status for IOSF Channel
*/


#define MISCCTRLSTS_CH10_IIO_VTD_REG 0x110204D4

#if defined(SPRA0_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vc1_read_bypass_write : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               0: Reads push writes within this channel[br] -1:
                               Reads are allowed to bypass blocked writes
                               within this channel
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 problematic_channel_for_lock_flows : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               This bit is set by BIOS when it knows that this
                               channel port is connected to a device that
                               creates Posted-Posted dependency on its In-Out
                               queues. BIOS writers must read the 'Ordering
                               Chapter' of MS2IOSF HAS to get a complete list
                               of devices that are considered to have this
                               dependency.[br] Briefly, this bit may be set on
                               a link if:[br] This channel is connected to an
                               NTB port.[br] This channel is connected to a
                               buggy Intel NIC device: one of
                               zoar/Oplin/Hartwell or any other PCIe device
                               that has a Posted-Posted dependency.[br] MS2IOSF
                               lock flows depend on the setting of this bit to
                               treat this port in a special way during the
                               flows. Note that if BIOS is setting up the lock
                               flow to be in the 'UPI compatible' mode (refer
                               to UBOX HAS for details), then this bit must be
                               set to 0.
                            */
    UINT32 rsvd_7 : 4;

                            /* Bits[10:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 do_not_block_during_lock : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if the channel
                               should NOT be blocked (1 = do not block).
                            */
    UINT32 enable_isoch : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /* The channel is enabled as an Isoch channel */
    UINT32 no_channel_throttle_in_quiesce : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               During Quiesce, this channel would not throttle
                               if this bit is set.
                            */
    UINT32 allow_one_np_os : 1;

                            /* Bits[14:14], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 dis_hdr_storage : 1;

                            /* Bits[15:15], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_16 : 5;

                            /* Bits[20:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 zero_ob_tc : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MISCCTRLSTS_CH10_IIO_VTD_SPRA0_STRUCT;
#endif /* (SPRA0_HOST) */

#if defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vc1_read_bypass_write : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               0: Reads push writes within this channel[br] -1:
                               Reads are allowed to bypass blocked writes
                               within this channel
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 problematic_channel_for_lock_flows : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               This bit is set by BIOS when it knows that this
                               channel port is connected to a device that
                               creates Posted-Posted dependency on its In-Out
                               queues. BIOS writers must read the 'Ordering
                               Chapter' of MS2IOSF HAS to get a complete list
                               of devices that are considered to have this
                               dependency.[br] Briefly, this bit may be set on
                               a link if:[br] This channel is connected to an
                               NTB port.[br] This channel is connected to a
                               buggy Intel NIC device: one of
                               zoar/Oplin/Hartwell or any other PCIe device
                               that has a Posted-Posted dependency.[br] MS2IOSF
                               lock flows depend on the setting of this bit to
                               treat this port in a special way during the
                               flows. Note that if BIOS is setting up the lock
                               flow to be in the 'UPI compatible' mode (refer
                               to UBOX HAS for details), then this bit must be
                               set to 0.
                            */
    UINT32 rsvd_7 : 4;

                            /* Bits[10:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 do_not_block_during_lock : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if the channel
                               should NOT be blocked (1 = do not block).
                            */
    UINT32 enable_isoch : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /* The channel is enabled as an Isoch channel */
    UINT32 no_channel_throttle_in_quiesce : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               During Quiesce, this channel would not throttle
                               if this bit is set.
                            */
    UINT32 allow_one_np_os : 1;

                            /* Bits[14:14], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 dis_hdr_storage : 1;

                            /* Bits[15:15], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_16 : 5;

                            /* Bits[20:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 zero_ob_tc : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000001*/

                            /*
                               Zero out the TC field for outbound requests (P
                               and NP only)
                            */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 block_non_posted_only_during_lock : 1;

                            /* Bits[24:24], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if for the channel
                               only Non-Posteds should be blocked
                            */
    UINT32 rsvd_25 : 7;

                            /* Bits[31:25], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MISCCTRLSTS_CH10_IIO_VTD_SPRB0_SPRHBM_SPRC0_SPRMCC_SPRUCC_STRUCT;
#endif /* (SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vc1_read_bypass_write : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               0: Reads push writes within this channel[br] -1:
                               Reads are allowed to bypass blocked writes
                               within this channel
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 problematic_channel_for_lock_flows : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               This bit is set by BIOS when it knows that this
                               channel port is connected to a device that
                               creates Posted-Posted dependency on its In-Out
                               queues. BIOS writers must read the 'Ordering
                               Chapter' of MS2IOSF HAS to get a complete list
                               of devices that are considered to have this
                               dependency.[br] Briefly, this bit may be set on
                               a link if:[br] This channel is connected to an
                               NTB port.[br] This channel is connected to a
                               buggy Intel NIC device: one of
                               zoar/Oplin/Hartwell or any other PCIe device
                               that has a Posted-Posted dependency.[br] MS2IOSF
                               lock flows depend on the setting of this bit to
                               treat this port in a special way during the
                               flows. Note that if BIOS is setting up the lock
                               flow to be in the 'UPI compatible' mode (refer
                               to UBOX HAS for details), then this bit must be
                               set to 0.
                            */
    UINT32 rsvd_7 : 4;

                            /* Bits[10:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 do_not_block_during_lock : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if the channel
                               should NOT be blocked (1 = do not block).
                            */
    UINT32 enable_isoch : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /* The channel is enabled as an Isoch channel */
    UINT32 no_channel_throttle_in_quiesce : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               During Quiesce, this channel would not throttle
                               if this bit is set.
                            */
    UINT32 allow_one_np_os : 1;

                            /* Bits[14:14], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 dis_hdr_storage : 1;

                            /* Bits[15:15], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_16 : 5;

                            /* Bits[20:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 zero_ob_tc : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MISCCTRLSTS_CH10_IIO_VTD_STRUCT;

/* PERFCTRLSTS_CH11_IIO_VTD_REG supported on:                                   */
/*      SPRA0 (0x208004d8)                                                      */
/*      SPRB0 (0x208004d8)                                                      */
/*      SPRHBM (0x208004d8)                                                     */
/*      SPRC0 (0x208004d8)                                                      */
/*      SPRMCC (0x208004d8)                                                     */
/*      SPRUCC (0x208004d8)                                                     */
/* Register default value on SPRA0: 0x00020091                                  */
/* Register default value on SPRB0: 0x00020091                                  */
/* Register default value on SPRHBM: 0x00020091                                 */
/* Register default value on SPRC0: 0x00020091                                  */
/* Register default value on SPRMCC: 0x00020091                                 */
/* Register default value on SPRUCC: 0x00020091                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Performance Control and Status for IOSF Channel
*/


#define PERFCTRLSTS_CH11_IIO_VTD_REG 0x110204D8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 read_stream_policy : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000001*/

                            /* Read Stream Policy */
    UINT32 read_passing_read_disable : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               NOT IMPLEMENTED. MS2IOSF does not support
                               reordering of read requests within a channel,
                               but may do so in a future implementation.
                            */
    UINT32 rsvd : 1;

                            /* Bits[2:2], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 nosnoopopwren : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Enable No-Snoop on VC0 writes received on this
                               port[br] This applies to writes with the
                               following conditions:[br] NS=1 AND (TPH=0 OR
                               TPHDIS=1)[br] 1: Inbound writes to memory with
                               above conditions will be treated as non-coherent
                               (no snoops) writes - MS2IOSF will use the non-
                               allocating NS flow[br] 0: Inbound writes to
                               memory with above conditions will be treated as
                               allocating writes.[br] Notes:[br] - If TPH=1 and
                               TPHDIS=0 then NS is ignored and this bit is
                               ignored[br] - VC1/VCm writes are not controlled
                               by this bit since they are always non-snoop and
                               can be no other way.[br] - TPH and
                               ForceNoSnoopWrEn have higher precedence than
                               this bit
                            */
    UINT32 read_stream_interleave_size : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000001*/

                            /* Read Stream Interleave Size */
    UINT32 forcenosnoopwren : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Force No-Snoop on VC0 writes received on this
                               port[br] 1: All writes received on this port are
                               treated as though the NS bit is set and will use
                               the Non-Snoop non-allocating flow.[br] 0: Writes
                               will be treated as non-snoop only if the NS bit
                               is set and the NoSnoopWrEn bit is set.[br]
                               Notes:[br] - VC1/VCm traffic is not impacted by
                               this bit since all writes from VC1 and VCm are
                               always Non-Snoop[br] - This bit has precedence
                               over the NoSnoopWrEn field in this register[br]
                               - Forcing writes to be non-snoop with this bit
                               takes precedence over TPH
                            */
    UINT32 implicit_nosnoop : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               1: Issue CLFlush for every remote socket
                               cacheline if TH=0 or Prioritize_TPH = 0[br] 0:
                               do not force CLFlush for these writes[br] Note:
                               This bit should not be set at the same time as
                               Implicit_TPH (Implicit_NoSnoop gets priority)
                            */
    UINT32 use_allocating_flow_wr : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               Force all Snooping writes from this port will
                               use the Allocating Flow[br] 1: All Snooping
                               writes received on this port use the allocating
                               flow[br] 0: All Snooping Writes will use the
                               Non-Allocating Flow[br] Notes:[br] - VC1/VCm
                               traffic is not impacted by this bit since all
                               writes from VC1 and VCm are always Non-Snoop
                            */
    UINT32 rsvd_8 : 2;

                            /* Bits[9:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 partial_cohrd_op : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/
    UINT32 rsvd_11 : 1;

                            /* Bits[11:11], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 disable_ro : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Disables Relaxed Ordering for this Channel. If
                               set, all writes are treated as though RO=0.
                            */
    UINT32 force_ro : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Forces Relaxed Ordering for this Channel. If
                               set, all writes are treated as though RO=1,
                               except MSIs.
                            */
    UINT32 rsvd_14 : 2;

                            /* Bits[15:14], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 disable_tph : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               TLP Processing Hint Disable[br] When set, writes
                               or reads with TPH=1, will be treated as if
                               TPH=0. Refer to the Transaction Flow chapter for
                               details about the flows for the different cases
                               of TPH.
                            */
    UINT32 prioritize_tph : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000001*/

                            /*
                               If TH bit is set on a cacheline belonging to the
                               remote socket:[br] 1: the writeback phase uses
                               WbPushMtoI[br] 0: the writeback will use
                               CLCleanse
                            */
    UINT32 implicit_tph : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               1: all snooping writes are treated as though
                               TH=1[br] 0: snooping writes will use TH value
                               received
                            */
    UINT32 rsvd_19 : 13;

                            /* Bits[31:19], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} PERFCTRLSTS_CH11_IIO_VTD_STRUCT;

/* MISCCTRLSTS_CH11_IIO_VTD_REG supported on:                                   */
/*      SPRA0 (0x208004dc)                                                      */
/*      SPRB0 (0x208004dc)                                                      */
/*      SPRHBM (0x208004dc)                                                     */
/*      SPRC0 (0x208004dc)                                                      */
/*      SPRMCC (0x208004dc)                                                     */
/*      SPRUCC (0x208004dc)                                                     */
/* Register default value on SPRA0: 0x00800000                                  */
/* Register default value on SPRB0: 0x00A00000                                  */
/* Register default value on SPRHBM: 0x00A00000                                 */
/* Register default value on SPRC0: 0x00A00000                                  */
/* Register default value on SPRMCC: 0x00A00000                                 */
/* Register default value on SPRUCC: 0x00A00000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Miscellaneous Control and Status for IOSF Channel
*/


#define MISCCTRLSTS_CH11_IIO_VTD_REG 0x110204DC

#if defined(SPRA0_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vc1_read_bypass_write : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               0: Reads push writes within this channel[br] -1:
                               Reads are allowed to bypass blocked writes
                               within this channel
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 problematic_channel_for_lock_flows : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               This bit is set by BIOS when it knows that this
                               channel port is connected to a device that
                               creates Posted-Posted dependency on its In-Out
                               queues. BIOS writers must read the 'Ordering
                               Chapter' of MS2IOSF HAS to get a complete list
                               of devices that are considered to have this
                               dependency.[br] Briefly, this bit may be set on
                               a link if:[br] This channel is connected to an
                               NTB port.[br] This channel is connected to a
                               buggy Intel NIC device: one of
                               zoar/Oplin/Hartwell or any other PCIe device
                               that has a Posted-Posted dependency.[br] MS2IOSF
                               lock flows depend on the setting of this bit to
                               treat this port in a special way during the
                               flows. Note that if BIOS is setting up the lock
                               flow to be in the 'UPI compatible' mode (refer
                               to UBOX HAS for details), then this bit must be
                               set to 0.
                            */
    UINT32 rsvd_7 : 4;

                            /* Bits[10:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 do_not_block_during_lock : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if the channel
                               should NOT be blocked (1 = do not block).
                            */
    UINT32 enable_isoch : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /* The channel is enabled as an Isoch channel */
    UINT32 no_channel_throttle_in_quiesce : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               During Quiesce, this channel would not throttle
                               if this bit is set.
                            */
    UINT32 allow_one_np_os : 1;

                            /* Bits[14:14], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 dis_hdr_storage : 1;

                            /* Bits[15:15], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_16 : 5;

                            /* Bits[20:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 zero_ob_tc : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MISCCTRLSTS_CH11_IIO_VTD_SPRA0_STRUCT;
#endif /* (SPRA0_HOST) */

#if defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vc1_read_bypass_write : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               0: Reads push writes within this channel[br] -1:
                               Reads are allowed to bypass blocked writes
                               within this channel
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 problematic_channel_for_lock_flows : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               This bit is set by BIOS when it knows that this
                               channel port is connected to a device that
                               creates Posted-Posted dependency on its In-Out
                               queues. BIOS writers must read the 'Ordering
                               Chapter' of MS2IOSF HAS to get a complete list
                               of devices that are considered to have this
                               dependency.[br] Briefly, this bit may be set on
                               a link if:[br] This channel is connected to an
                               NTB port.[br] This channel is connected to a
                               buggy Intel NIC device: one of
                               zoar/Oplin/Hartwell or any other PCIe device
                               that has a Posted-Posted dependency.[br] MS2IOSF
                               lock flows depend on the setting of this bit to
                               treat this port in a special way during the
                               flows. Note that if BIOS is setting up the lock
                               flow to be in the 'UPI compatible' mode (refer
                               to UBOX HAS for details), then this bit must be
                               set to 0.
                            */
    UINT32 rsvd_7 : 4;

                            /* Bits[10:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 do_not_block_during_lock : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if the channel
                               should NOT be blocked (1 = do not block).
                            */
    UINT32 enable_isoch : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /* The channel is enabled as an Isoch channel */
    UINT32 no_channel_throttle_in_quiesce : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               During Quiesce, this channel would not throttle
                               if this bit is set.
                            */
    UINT32 allow_one_np_os : 1;

                            /* Bits[14:14], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 dis_hdr_storage : 1;

                            /* Bits[15:15], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_16 : 5;

                            /* Bits[20:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 zero_ob_tc : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000001*/

                            /*
                               Zero out the TC field for outbound requests (P
                               and NP only)
                            */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 block_non_posted_only_during_lock : 1;

                            /* Bits[24:24], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if for the channel
                               only Non-Posteds should be blocked
                            */
    UINT32 rsvd_25 : 7;

                            /* Bits[31:25], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MISCCTRLSTS_CH11_IIO_VTD_SPRB0_SPRHBM_SPRC0_SPRMCC_SPRUCC_STRUCT;
#endif /* (SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vc1_read_bypass_write : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               0: Reads push writes within this channel[br] -1:
                               Reads are allowed to bypass blocked writes
                               within this channel
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 problematic_channel_for_lock_flows : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               This bit is set by BIOS when it knows that this
                               channel port is connected to a device that
                               creates Posted-Posted dependency on its In-Out
                               queues. BIOS writers must read the 'Ordering
                               Chapter' of MS2IOSF HAS to get a complete list
                               of devices that are considered to have this
                               dependency.[br] Briefly, this bit may be set on
                               a link if:[br] This channel is connected to an
                               NTB port.[br] This channel is connected to a
                               buggy Intel NIC device: one of
                               zoar/Oplin/Hartwell or any other PCIe device
                               that has a Posted-Posted dependency.[br] MS2IOSF
                               lock flows depend on the setting of this bit to
                               treat this port in a special way during the
                               flows. Note that if BIOS is setting up the lock
                               flow to be in the 'UPI compatible' mode (refer
                               to UBOX HAS for details), then this bit must be
                               set to 0.
                            */
    UINT32 rsvd_7 : 4;

                            /* Bits[10:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 do_not_block_during_lock : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if the channel
                               should NOT be blocked (1 = do not block).
                            */
    UINT32 enable_isoch : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /* The channel is enabled as an Isoch channel */
    UINT32 no_channel_throttle_in_quiesce : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               During Quiesce, this channel would not throttle
                               if this bit is set.
                            */
    UINT32 allow_one_np_os : 1;

                            /* Bits[14:14], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 dis_hdr_storage : 1;

                            /* Bits[15:15], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_16 : 5;

                            /* Bits[20:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 zero_ob_tc : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MISCCTRLSTS_CH11_IIO_VTD_STRUCT;

/* TCMCRCVST0_N0_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x20800500)                                                      */
/*      SPRB0 (0x20800500)                                                      */
/*      SPRHBM (0x20800500)                                                     */
/*      SPRC0 (0x20800500)                                                      */
/*      SPRMCC (0x20800500)                                                     */
/*      SPRUCC (0x20800500)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Multicast receiver stack 0
*/


#define TCMCRCVST0_N0_IIO_VTD_REG 0x11020500

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 multicastrcvstack0 : 16;

                            /* Bits[15:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               For each bit that's Set, this peer MS2IOSF stack
                               gets a copy of any Multicast TLPs for the
                               associated Multicast Group.[br] This should be
                               set if the corresponding bit of the MC_Receive
                               register for any of the root ports connected to
                               the peer MS2IOSF stack is set.
                            */
    UINT32 rsvd : 16;

                            /* Bits[31:16], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TCMCRCVST0_N0_IIO_VTD_STRUCT;

/* TCMCRCVST0_N1_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x20800504)                                                      */
/*      SPRB0 (0x20800504)                                                      */
/*      SPRHBM (0x20800504)                                                     */
/*      SPRC0 (0x20800504)                                                      */
/*      SPRMCC (0x20800504)                                                     */
/*      SPRUCC (0x20800504)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Multicast receiver stack 0
*/


#define TCMCRCVST0_N1_IIO_VTD_REG 0x11020504

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 32;

                            /* Bits[31:0], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TCMCRCVST0_N1_IIO_VTD_STRUCT;

/* TCMCRCVST1_N0_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x20800508)                                                      */
/*      SPRB0 (0x20800508)                                                      */
/*      SPRHBM (0x20800508)                                                     */
/*      SPRC0 (0x20800508)                                                      */
/*      SPRMCC (0x20800508)                                                     */
/*      SPRUCC (0x20800508)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Multicast receiver stack 1
*/


#define TCMCRCVST1_N0_IIO_VTD_REG 0x11020508

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 multicastrcvstack1 : 16;

                            /* Bits[15:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               For each bit that's Set, this peer MS2IOSF stack
                               gets a copy of any Multicast TLPs for the
                               associated Multicast Group.[br] This should be
                               set if the corresponding bit of the MC_Receive
                               register for any of the root ports connected to
                               the peer MS2IOSF stack is set.
                            */
    UINT32 rsvd : 16;

                            /* Bits[31:16], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TCMCRCVST1_N0_IIO_VTD_STRUCT;

/* TCMCRCVST1_N1_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x2080050c)                                                      */
/*      SPRB0 (0x2080050c)                                                      */
/*      SPRHBM (0x2080050c)                                                     */
/*      SPRC0 (0x2080050c)                                                      */
/*      SPRMCC (0x2080050c)                                                     */
/*      SPRUCC (0x2080050c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Multicast receiver stack 1
*/


#define TCMCRCVST1_N1_IIO_VTD_REG 0x1102050C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 32;

                            /* Bits[31:0], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TCMCRCVST1_N1_IIO_VTD_STRUCT;

/* TCMCRCVST2_N0_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x20800510)                                                      */
/*      SPRB0 (0x20800510)                                                      */
/*      SPRHBM (0x20800510)                                                     */
/*      SPRC0 (0x20800510)                                                      */
/*      SPRMCC (0x20800510)                                                     */
/*      SPRUCC (0x20800510)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Multicast receiver stack 2
*/


#define TCMCRCVST2_N0_IIO_VTD_REG 0x11020510

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 multicastrcvstack2 : 16;

                            /* Bits[15:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               For each bit that's Set, this peer MS2IOSF stack
                               gets a copy of any Multicast TLPs for the
                               associated Multicast Group.[br] This should be
                               set if the corresponding bit of the MC_Receive
                               register for any of the root ports connected to
                               the peer MS2IOSF stack is set.
                            */
    UINT32 rsvd : 16;

                            /* Bits[31:16], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TCMCRCVST2_N0_IIO_VTD_STRUCT;

/* TCMCRCVST2_N1_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x20800514)                                                      */
/*      SPRB0 (0x20800514)                                                      */
/*      SPRHBM (0x20800514)                                                     */
/*      SPRC0 (0x20800514)                                                      */
/*      SPRMCC (0x20800514)                                                     */
/*      SPRUCC (0x20800514)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Multicast receiver stack 2
*/


#define TCMCRCVST2_N1_IIO_VTD_REG 0x11020514

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 32;

                            /* Bits[31:0], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TCMCRCVST2_N1_IIO_VTD_STRUCT;

/* TCMCRCVST3_N0_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x20800518)                                                      */
/*      SPRB0 (0x20800518)                                                      */
/*      SPRHBM (0x20800518)                                                     */
/*      SPRC0 (0x20800518)                                                      */
/*      SPRMCC (0x20800518)                                                     */
/*      SPRUCC (0x20800518)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Multicast receiver stack 3
*/


#define TCMCRCVST3_N0_IIO_VTD_REG 0x11020518

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 multicastrcvstack3 : 16;

                            /* Bits[15:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               For each bit that's Set, this peer MS2IOSF stack
                               gets a copy of any Multicast TLPs for the
                               associated Multicast Group.[br] This should be
                               set if the corresponding bit of the MC_Receive
                               register for any of the root ports connected to
                               the peer MS2IOSF stack is set.
                            */
    UINT32 rsvd : 16;

                            /* Bits[31:16], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TCMCRCVST3_N0_IIO_VTD_STRUCT;

/* TCMCRCVST3_N1_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x2080051c)                                                      */
/*      SPRB0 (0x2080051c)                                                      */
/*      SPRHBM (0x2080051c)                                                     */
/*      SPRC0 (0x2080051c)                                                      */
/*      SPRMCC (0x2080051c)                                                     */
/*      SPRUCC (0x2080051c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Multicast receiver stack 3
*/


#define TCMCRCVST3_N1_IIO_VTD_REG 0x1102051C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 32;

                            /* Bits[31:0], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TCMCRCVST3_N1_IIO_VTD_STRUCT;

/* TCMCRCVST4_N0_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x20800520)                                                      */
/*      SPRB0 (0x20800520)                                                      */
/*      SPRHBM (0x20800520)                                                     */
/*      SPRC0 (0x20800520)                                                      */
/*      SPRMCC (0x20800520)                                                     */
/*      SPRUCC (0x20800520)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Multicast receiver stack 4
*/


#define TCMCRCVST4_N0_IIO_VTD_REG 0x11020520

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 multicastrcvstack4 : 16;

                            /* Bits[15:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               For each bit that's Set, this peer MS2IOSF stack
                               gets a copy of any Multicast TLPs for the
                               associated Multicast Group.[br] This should be
                               set if the corresponding bit of the MC_Receive
                               register for any of the root ports connected to
                               the peer MS2IOSF stack is set.
                            */
    UINT32 rsvd : 16;

                            /* Bits[31:16], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TCMCRCVST4_N0_IIO_VTD_STRUCT;

/* TCMCRCVST4_N1_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x20800524)                                                      */
/*      SPRB0 (0x20800524)                                                      */
/*      SPRHBM (0x20800524)                                                     */
/*      SPRC0 (0x20800524)                                                      */
/*      SPRMCC (0x20800524)                                                     */
/*      SPRUCC (0x20800524)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Multicast receiver stack 4
*/


#define TCMCRCVST4_N1_IIO_VTD_REG 0x11020524

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 32;

                            /* Bits[31:0], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TCMCRCVST4_N1_IIO_VTD_STRUCT;

/* TCMCRCVST5_N0_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x20800528)                                                      */
/*      SPRB0 (0x20800528)                                                      */
/*      SPRHBM (0x20800528)                                                     */
/*      SPRC0 (0x20800528)                                                      */
/*      SPRMCC (0x20800528)                                                     */
/*      SPRUCC (0x20800528)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Multicast receiver stack 5
*/


#define TCMCRCVST5_N0_IIO_VTD_REG 0x11020528

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 multicastrcvstack5 : 16;

                            /* Bits[15:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               For each bit that's Set, this peer MS2IOSF stack
                               gets a copy of any Multicast TLPs for the
                               associated Multicast Group.[br] This should be
                               set if the corresponding bit of the MC_Receive
                               register for any of the root ports connected to
                               the peer MS2IOSF stack is set.
                            */
    UINT32 rsvd : 16;

                            /* Bits[31:16], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TCMCRCVST5_N0_IIO_VTD_STRUCT;

/* TCMCRCVST5_N1_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x2080052c)                                                      */
/*      SPRB0 (0x2080052c)                                                      */
/*      SPRHBM (0x2080052c)                                                     */
/*      SPRC0 (0x2080052c)                                                      */
/*      SPRMCC (0x2080052c)                                                     */
/*      SPRUCC (0x2080052c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Multicast receiver stack 5
*/


#define TCMCRCVST5_N1_IIO_VTD_REG 0x1102052C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 32;

                            /* Bits[31:0], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TCMCRCVST5_N1_IIO_VTD_STRUCT;

/* TCMCRCVMEM_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x20800530)                                                      */
/*      SPRB0 (0x20800530)                                                      */
/*      SPRHBM (0x20800530)                                                     */
/*      SPRC0 (0x20800530)                                                      */
/*      SPRMCC (0x20800530)                                                     */
/*      SPRUCC (0x20800530)                                                     */
/* Register default value on SPRA0: 0x000000FF                                  */
/* Register default value on SPRB0: 0x000000FF                                  */
/* Register default value on SPRHBM: 0x000000FF                                 */
/* Register default value on SPRC0: 0x000000FF                                  */
/* Register default value on SPRMCC: 0x000000FF                                 */
/* Register default value on SPRUCC: 0x000000FF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Multicast receiver memory
*/


#define TCMCRCVMEM_IIO_VTD_REG 0x11020530

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 multicastrcvmem : 16;

                            /* Bits[15:0], Access Type=RW/P, default=0x000000FF*/

                            /* Multicast receiver memory. */
    UINT32 rsvd : 16;

                            /* Bits[31:16], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TCMCRCVMEM_IIO_VTD_STRUCT;

/* TCSKTSAD_IIO_VTD_REG supported on:                                           */
/*      SPRA0 (0x20800538)                                                      */
/*      SPRB0 (0x20800538)                                                      */
/*      SPRHBM (0x20800538)                                                     */
/*      SPRC0 (0x20800538)                                                      */
/*      SPRMCC (0x20800538)                                                     */
/*      SPRUCC (0x20800538)                                                     */
/* Register default value on SPRA0: 0x00000006                                  */
/* Register default value on SPRB0: 0x00000006                                  */
/* Register default value on SPRHBM: 0x00000006                                 */
/* Register default value on SPRC0: 0x00000006                                  */
/* Register default value on SPRMCC: 0x00000006                                 */
/* Register default value on SPRUCC: 0x00000006                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Socket and SAD target
*/


#define TCSKTSAD_IIO_VTD_REG 0x11020538

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mctpb_loc_skt : 12;

                            /* Bits[11:0], Access Type=RW/P, default=0x00000006*/

                            /*
                               For broadcast messages (MCTP): which MS2IOSF
                               stack in the local sockets to forward broadcast
                               messages.
                            */
    UINT32 mctpb_rem_skt : 8;

                            /* Bits[19:12], Access Type=RW/P, default=0x00000000*/

                            /*
                               For broadcast messages (MCTP): which MS2IOSF
                               stacks in the remote sockets to forward
                               broadcast messages.
                            */
    UINT32 rsvd : 12;

                            /* Bits[31:20], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TCSKTSAD_IIO_VTD_STRUCT;

/* ITCCTRL01_N0_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x20800540)                                                      */
/*      SPRB0 (0x20800540)                                                      */
/*      SPRHBM (0x20800540)                                                     */
/*      SPRC0 (0x20800540)                                                      */
/*      SPRMCC (0x20800540)                                                     */
/*      SPRUCC (0x20800540)                                                     */
/* Register default value on SPRA0: 0x14000810                                  */
/* Register default value on SPRB0: 0x14000810                                  */
/* Register default value on SPRHBM: 0x14000810                                 */
/* Register default value on SPRC0: 0x14208810                                  */
/* Register default value on SPRMCC: 0x14208810                                 */
/* Register default value on SPRUCC: 0x14208810                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* ITC control 01
*/


#define ITCCTRL01_N0_IIO_VTD_REG 0x11020540

#if defined(SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 3;

                            /* Bits[2:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 dis_convert_cpllk : 1;

                            /* Bits[3:3], Access Type=RW/P, default=0x00000000*/

                            /*
                               When 0, ITC will convert locked completions to
                               normal[br] completions. When 1, ITC will not
                               convert locked[br] completions to normal
                               completions.
                            */
    UINT32 dis_ns_on_tph : 1;

                            /* Bits[4:4], Access Type=RW/P, default=0x00000001*/

                            /*
                               When 0, NS and TPH bits may both be set. When 1,
                               NS[br] bit will be cleared if the TPH bit is set
                               and TPH is not[br] disabled.
                            */
    UINT32 csr_atomic_tph_disable : 1;

                            /* Bits[5:5], Access Type=RW/P, default=0x00000000*/

                            /* Atomic TPH disable */
    UINT32 csr_force_tph_writes : 1;

                            /* Bits[6:6], Access Type=RW/P, default=0x00000000*/

                            /* Force TPH on all inbound writes */
    UINT32 rsvd_7 : 4;

                            /* Bits[10:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 csr_cballocen : 1;

                            /* Bits[11:11], Access Type=RW/P, default=0x00000001*/

                            /*
                               CB allocation enable[br] Lock:
                               IIO_DFX_LCK_CTL.DBGBUSLCK
                            */
    UINT32 rsvd_12 : 1;

                            /* Bits[12:12], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 spare : 9;

                            /* Bits[21:13], Access Type=RW/P, default=0x00000000*/

                            /* Spare CSRs */
    UINT32 rsvd_22 : 2;

                            /* Bits[23:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 en_ro_c : 1;

                            /* Bits[24:24], Access Type=RW/P, default=0x00000000*/

                            /* EN RO completion */
    UINT32 en_ro_np : 1;

                            /* Bits[25:25], Access Type=RW/P, default=0x00000000*/

                            /* Enable RO Non-Posted */
    UINT32 en_ro_p : 1;

                            /* Bits[26:26], Access Type=RW/P, default=0x00000001*/

                            /* Enable RO Posted */
    UINT32 cr_disable_dword_mask : 1;

                            /* Bits[27:27], Access Type=RW/P, default=0x00000000*/

                            /*
                               Disable Dword Mask. If set, drive all eight
                               dword lanes from ITC to IRP. If clear, zero out
                               the invalid dword lanes. One lane = one dword
                               (32 bytes total).[br] Raymond add above
                               description to RDL
                            */
    UINT32 enable_cmpl_comb : 1;

                            /* Bits[28:28], Access Type=RW/P, default=0x00000001*/

                            /*
                               Enable completion combining. When set to zero,
                               MS2IOSF breaks up completions on cacheline
                               boundaries.
                            */
    UINT32 itc_inb_ler_disable : 1;

                            /* Bits[29:29], Access Type=RW/P, default=0x00000000*/

                            /*
                               When set to 1, Disable ITC logging MAbort error
                               due to PCIE port being in LER mode.[br] Lock:
                               IIO_DFX_LCK_CTL.DBGBUSLCK
                            */
    UINT32 legacy_busno_en : 1;

                            /* Bits[30:30], Access Type=RW/P, default=0x00000000*/

                            /*
                               Legacy code use 0 for bus number. Defeature for
                               bus number in requester ID of VTd requests.
                            */
    UINT32 en_ovrd_attr_ns : 1;

                            /* Bits[31:31], Access Type=RW/P, default=0x00000000*/

                            /* Enable non-snoop override attribute */

  } Bits;
  UINT32 Data;

} ITCCTRL01_N0_IIO_VTD_SPRA0_SPRB0_SPRHBM_STRUCT;
#endif /* (SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) */

#if defined(SPRC0_HOST) || defined(SPRUCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 3;

                            /* Bits[2:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 dis_convert_cpllk : 1;

                            /* Bits[3:3], Access Type=RW/P, default=0x00000000*/

                            /*
                               When 0, ITC will convert locked completions to
                               normal[br] completions. When 1, ITC will not
                               convert locked[br] completions to normal
                               completions.
                            */
    UINT32 dis_ns_on_tph : 1;

                            /* Bits[4:4], Access Type=RW/P, default=0x00000001*/

                            /*
                               When 0, NS and TPH bits may both be set. When 1,
                               NS[br] bit will be cleared if the TPH bit is set
                               and TPH is not[br] disabled.
                            */
    UINT32 csr_atomic_tph_disable : 1;

                            /* Bits[5:5], Access Type=RW/P, default=0x00000000*/

                            /* Atomic TPH disable */
    UINT32 csr_force_tph_writes : 1;

                            /* Bits[6:6], Access Type=RW/P, default=0x00000000*/

                            /* Force TPH on all inbound writes */
    UINT32 csrb2bpfrspfnblocken : 1;

                            /* Bits[7:7], Access Type=RW/P, default=0x00000000*/

                            /*
                               Enable response function based blocking of B2b
                               prefetches
                            */
    UINT32 csrb2bcmprspfnblocken : 1;

                            /* Bits[8:8], Access Type=RW/P, default=0x00000000*/

                            /*
                               Enable response function based blocking of B2b
                               completions
                            */
    UINT32 csrb2bfprspfnblocken : 1;

                            /* Bits[9:9], Access Type=RW/P, default=0x00000000*/

                            /*
                               Enable response function based blocking of B2b
                               fastpath posteds
                            */
    UINT32 csrb2bnprspfnblocken : 1;

                            /* Bits[10:10], Access Type=RW/P, default=0x00000000*/

                            /*
                               Enable response function based blocking of B2b
                               non-posteds
                            */
    UINT32 csr_cballocen : 1;

                            /* Bits[11:11], Access Type=RW/P, default=0x00000001*/

                            /*
                               CB allocation enable[br] Lock:
                               IIO_DFX_LCK_CTL.DBGBUSLCK
                            */
    UINT32 dfx_max_cache_atomic : 8;

                            /* Bits[19:12], Access Type=RW/P, default=0x00000008*/

                            /*
                               Max number of IRP Cache entries reserved for
                               atomic txns
                            */
    UINT32 max_isoch_atomic : 2;

                            /* Bits[21:20], Access Type=RW/P, default=0x00000002*/

                            /*
                               Max Number of IRP cache entries reserved for
                               Atomic transactions that are Isoch
                            */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ignore_serialization_ro2so : 1;

                            /* Bits[23:23], Access Type=RW/P, default=0x00000000*/

                            /*
                               Ignore serialization requirement for transition
                               from relax-ordered to strongly-ordered
                            */
    UINT32 en_ro_c : 1;

                            /* Bits[24:24], Access Type=RW/P, default=0x00000000*/

                            /* EN RO completion */
    UINT32 en_ro_np : 1;

                            /* Bits[25:25], Access Type=RW/P, default=0x00000000*/

                            /* Enable RO Non-Posted */
    UINT32 en_ro_p : 1;

                            /* Bits[26:26], Access Type=RW/P, default=0x00000001*/

                            /* Enable RO Posted */
    UINT32 cr_disable_dword_mask : 1;

                            /* Bits[27:27], Access Type=RW/P, default=0x00000000*/

                            /*
                               Disable Dword Mask. If set, drive all eight
                               dword lanes from ITC to IRP. If clear, zero out
                               the invalid dword lanes. One lane = one dword
                               (32 bytes total).[br] Raymond add above
                               description to RDL
                            */
    UINT32 enable_cmpl_comb : 1;

                            /* Bits[28:28], Access Type=RW/P, default=0x00000001*/

                            /*
                               Enable completion combining. When set to zero,
                               MS2IOSF breaks up completions on cacheline
                               boundaries.
                            */
    UINT32 itc_inb_ler_disable : 1;

                            /* Bits[29:29], Access Type=RW/P, default=0x00000000*/

                            /*
                               When set to 1, Disable ITC logging MAbort error
                               due to PCIE port being in LER mode.[br] Lock:
                               IIO_DFX_LCK_CTL.DBGBUSLCK
                            */
    UINT32 legacy_busno_en : 1;

                            /* Bits[30:30], Access Type=RW/P, default=0x00000000*/

                            /*
                               Legacy code use 0 for bus number. Defeature for
                               bus number in requester ID of VTd requests.
                            */
    UINT32 en_ovrd_attr_ns : 1;

                            /* Bits[31:31], Access Type=RW/P, default=0x00000000*/

                            /* Enable non-snoop override attribute */

  } Bits;
  UINT32 Data;

} ITCCTRL01_N0_IIO_VTD_SPRC0_SPRUCC_STRUCT;
#endif /* (SPRC0_HOST) || defined(SPRUCC_HOST) */

#if defined(SPRMCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 3;

                            /* Bits[2:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 dis_convert_cpllk : 1;

                            /* Bits[3:3], Access Type=RW/P, default=0x00000000*/

                            /*
                               When 0, ITC will convert locked completions to
                               normal[br] completions. When 1, ITC will not
                               convert locked[br] completions to normal
                               completions.
                            */
    UINT32 dis_ns_on_tph : 1;

                            /* Bits[4:4], Access Type=RW/P, default=0x00000001*/

                            /*
                               When 0, NS and TPH bits may both be set. When 1,
                               NS[br] bit will be cleared if the TPH bit is set
                               and TPH is not[br] disabled.
                            */
    UINT32 csr_atomic_tph_disable : 1;

                            /* Bits[5:5], Access Type=RW/P, default=0x00000000*/

                            /* Atomic TPH disable */
    UINT32 csr_force_tph_writes : 1;

                            /* Bits[6:6], Access Type=RW/P, default=0x00000000*/

                            /* Force TPH on all inbound writes */
    UINT32 rsvd_7 : 4;

                            /* Bits[10:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 csr_cballocen : 1;

                            /* Bits[11:11], Access Type=RW/P, default=0x00000001*/

                            /*
                               CB allocation enable[br] Lock:
                               IIO_DFX_LCK_CTL.DBGBUSLCK
                            */
    UINT32 dfx_max_cache_atomic : 8;

                            /* Bits[19:12], Access Type=RW/P, default=0x00000008*/

                            /*
                               Max number of IRP Cache entries reserved for
                               atomic txns
                            */
    UINT32 max_isoch_atomic : 2;

                            /* Bits[21:20], Access Type=RW/P, default=0x00000002*/

                            /*
                               Max Number of IRP cache entries reserved for
                               Atomic transactions that are Isoch
                            */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ignore_serialization_ro2so : 1;

                            /* Bits[23:23], Access Type=RW/P, default=0x00000000*/

                            /*
                               Ignore serialization requirement for transition
                               from relax-ordered to strongly-ordered
                            */
    UINT32 en_ro_c : 1;

                            /* Bits[24:24], Access Type=RW/P, default=0x00000000*/

                            /* EN RO completion */
    UINT32 en_ro_np : 1;

                            /* Bits[25:25], Access Type=RW/P, default=0x00000000*/

                            /* Enable RO Non-Posted */
    UINT32 en_ro_p : 1;

                            /* Bits[26:26], Access Type=RW/P, default=0x00000001*/

                            /* Enable RO Posted */
    UINT32 cr_disable_dword_mask : 1;

                            /* Bits[27:27], Access Type=RW/P, default=0x00000000*/

                            /*
                               Disable Dword Mask. If set, drive all eight
                               dword lanes from ITC to IRP. If clear, zero out
                               the invalid dword lanes. One lane = one dword
                               (32 bytes total).[br] Raymond add above
                               description to RDL
                            */
    UINT32 enable_cmpl_comb : 1;

                            /* Bits[28:28], Access Type=RW/P, default=0x00000001*/

                            /*
                               Enable completion combining. When set to zero,
                               MS2IOSF breaks up completions on cacheline
                               boundaries.
                            */
    UINT32 itc_inb_ler_disable : 1;

                            /* Bits[29:29], Access Type=RW/P, default=0x00000000*/

                            /*
                               When set to 1, Disable ITC logging MAbort error
                               due to PCIE port being in LER mode.[br] Lock:
                               IIO_DFX_LCK_CTL.DBGBUSLCK
                            */
    UINT32 legacy_busno_en : 1;

                            /* Bits[30:30], Access Type=RW/P, default=0x00000000*/

                            /*
                               Legacy code use 0 for bus number. Defeature for
                               bus number in requester ID of VTd requests.
                            */
    UINT32 en_ovrd_attr_ns : 1;

                            /* Bits[31:31], Access Type=RW/P, default=0x00000000*/

                            /* Enable non-snoop override attribute */

  } Bits;
  UINT32 Data;

} ITCCTRL01_N0_IIO_VTD_SPRMCC_STRUCT;
#endif /* (SPRMCC_HOST) */

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 3;

                            /* Bits[2:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 dis_convert_cpllk : 1;

                            /* Bits[3:3], Access Type=RW/P, default=0x00000000*/

                            /*
                               When 0, ITC will convert locked completions to
                               normal[br] completions. When 1, ITC will not
                               convert locked[br] completions to normal
                               completions.
                            */
    UINT32 dis_ns_on_tph : 1;

                            /* Bits[4:4], Access Type=RW/P, default=0x00000001*/

                            /*
                               When 0, NS and TPH bits may both be set. When 1,
                               NS[br] bit will be cleared if the TPH bit is set
                               and TPH is not[br] disabled.
                            */
    UINT32 csr_atomic_tph_disable : 1;

                            /* Bits[5:5], Access Type=RW/P, default=0x00000000*/

                            /* Atomic TPH disable */
    UINT32 csr_force_tph_writes : 1;

                            /* Bits[6:6], Access Type=RW/P, default=0x00000000*/

                            /* Force TPH on all inbound writes */
    UINT32 rsvd_7 : 4;

                            /* Bits[10:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 csr_cballocen : 1;

                            /* Bits[11:11], Access Type=RW/P, default=0x00000001*/

                            /*
                               CB allocation enable[br] Lock:
                               IIO_DFX_LCK_CTL.DBGBUSLCK
                            */
    UINT32 rsvd_12 : 12;

                            /* Bits[23:12], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 en_ro_c : 1;

                            /* Bits[24:24], Access Type=RW/P, default=0x00000000*/

                            /* EN RO completion */
    UINT32 en_ro_np : 1;

                            /* Bits[25:25], Access Type=RW/P, default=0x00000000*/

                            /* Enable RO Non-Posted */
    UINT32 en_ro_p : 1;

                            /* Bits[26:26], Access Type=RW/P, default=0x00000001*/

                            /* Enable RO Posted */
    UINT32 cr_disable_dword_mask : 1;

                            /* Bits[27:27], Access Type=RW/P, default=0x00000000*/

                            /*
                               Disable Dword Mask. If set, drive all eight
                               dword lanes from ITC to IRP. If clear, zero out
                               the invalid dword lanes. One lane = one dword
                               (32 bytes total).[br] Raymond add above
                               description to RDL
                            */
    UINT32 enable_cmpl_comb : 1;

                            /* Bits[28:28], Access Type=RW/P, default=0x00000001*/

                            /*
                               Enable completion combining. When set to zero,
                               MS2IOSF breaks up completions on cacheline
                               boundaries.
                            */
    UINT32 itc_inb_ler_disable : 1;

                            /* Bits[29:29], Access Type=RW/P, default=0x00000000*/

                            /*
                               When set to 1, Disable ITC logging MAbort error
                               due to PCIE port being in LER mode.[br] Lock:
                               IIO_DFX_LCK_CTL.DBGBUSLCK
                            */
    UINT32 legacy_busno_en : 1;

                            /* Bits[30:30], Access Type=RW/P, default=0x00000000*/

                            /*
                               Legacy code use 0 for bus number. Defeature for
                               bus number in requester ID of VTd requests.
                            */
    UINT32 en_ovrd_attr_ns : 1;

                            /* Bits[31:31], Access Type=RW/P, default=0x00000000*/

                            /* Enable non-snoop override attribute */

  } Bits;
  UINT32 Data;

} ITCCTRL01_N0_IIO_VTD_STRUCT;

/* ITCCTRL01_N1_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x20800544)                                                      */
/*      SPRB0 (0x20800544)                                                      */
/*      SPRHBM (0x20800544)                                                     */
/*      SPRC0 (0x20800544)                                                      */
/*      SPRMCC (0x20800544)                                                     */
/*      SPRUCC (0x20800544)                                                     */
/* Register default value on SPRA0: 0x00900000                                  */
/* Register default value on SPRB0: 0x78900000                                  */
/* Register default value on SPRHBM: 0x78900000                                 */
/* Register default value on SPRC0: 0x78900000                                  */
/* Register default value on SPRMCC: 0x78900000                                 */
/* Register default value on SPRUCC: 0x78900000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* ITC control 01
*/


#define ITCCTRL01_N1_IIO_VTD_REG 0x11020544

#if defined(SPRA0_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 check_p_dest_every_state : 1;

                            /* Bits[0:0], Access Type=RW/P, default=0x00000000*/

                            /* Check Posted destination every state */
    UINT32 check_p_dest_every_line : 1;

                            /* Bits[1:1], Access Type=RW/P, default=0x00000000*/

                            /* Check Posted destination every line */
    UINT32 serialize_mcast : 1;

                            /* Bits[2:2], Access Type=RW/P, default=0x00000000*/

                            /* Serialize Multicast */
    UINT32 serialize_all : 1;

                            /* Bits[3:3], Access Type=RW/P, default=0x00000000*/

                            /* Serialize all */
    UINT32 loopback_p2p_targets : 8;

                            /* Bits[11:4], Access Type=RW/P, default=0x00000000*/

                            /*
                               Loopback P2P targets[br] Lock:
                               IIO_DFX_LCK_CTL.DBGBUSLCK
                            */
    UINT32 trdy_go_en : 8;

                            /* Bits[19:12], Access Type=RW/P, default=0x00000000*/

                            /*
                               Determines which channels contribute to
                               generation of the trdy_go sideband signal (write
                               acknowledge signal). Bits 0..3 select the
                               channels for generating trdy_go on IOSF port 0
                               (channels 0-3) and bits 4..7 select the channels
                               for generating trdy_go on IOSF port 1 (channels
                               4-7).
                            */
    UINT32 p2p_timer_scale : 5;

                            /* Bits[24:20], Access Type=RW/P, default=0x00000009*/

                            /* P2P timer scale */
    UINT32 csr_persistent_mem_dis : 1;

                            /* Bits[25:25], Access Type=RW/P, default=0x00000000*/

                            /* Persistent Memory flow disable */
    UINT32 disable_sub_channel : 1;

                            /* Bits[26:26], Access Type=RO, default=0x00000000*/

                            /*
                               disable sub channel for b2b throughput in same
                               IOSF channel
                            */
    UINT32 enable_itc_b2b_norm_pf : 1;

                            /* Bits[27:27], Access Type=RW/P, default=0x00000000*/

                            /*
                               Setting this bit will enable ITC to send b2b
                               prefetches on the same channel using the normal
                               pipeline
                            */
    UINT32 enable_itc_b2b_fast : 1;

                            /* Bits[28:28], Access Type=RW/P, default=0x00000000*/

                            /*
                               Setting this bit will enable ITC to send b2b
                               posted transactions on the same channel
                            */
    UINT32 enable_itc_b2b_non_posted : 1;

                            /* Bits[29:29], Access Type=RW/P, default=0x00000000*/

                            /*
                               Setting this bit will enable ITC to send b2b
                               nonposted transactions on the same channel
                            */
    UINT32 enable_itc_b2b_norm_cpl : 1;

                            /* Bits[30:30], Access Type=RW/P, default=0x00000000*/

                            /*
                               Setting this bit will enable ITC to send b2b
                               completions on the same channel using the normal
                               path
                            */
    UINT32 rsvd : 1;

                            /* Bits[31:31], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCCTRL01_N1_IIO_VTD_SPRA0_STRUCT;
#endif /* (SPRA0_HOST) */

#if defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 check_p_dest_every_state : 1;

                            /* Bits[0:0], Access Type=RW/P, default=0x00000000*/

                            /* Check Posted destination every state */
    UINT32 check_p_dest_every_line : 1;

                            /* Bits[1:1], Access Type=RW/P, default=0x00000000*/

                            /* Check Posted destination every line */
    UINT32 serialize_mcast : 1;

                            /* Bits[2:2], Access Type=RW/P, default=0x00000000*/

                            /* Serialize Multicast */
    UINT32 serialize_all : 1;

                            /* Bits[3:3], Access Type=RW/P, default=0x00000000*/

                            /* Serialize all */
    UINT32 loopback_p2p_targets : 8;

                            /* Bits[11:4], Access Type=RW/P, default=0x00000000*/

                            /*
                               Loopback P2P targets[br] Lock:
                               IIO_DFX_LCK_CTL.DBGBUSLCK
                            */
    UINT32 trdy_go_en : 8;

                            /* Bits[19:12], Access Type=RW/P, default=0x00000000*/

                            /*
                               Determines which channels contribute to
                               generation of the trdy_go sideband signal (write
                               acknowledge signal). Bits 0..3 select the
                               channels for generating trdy_go on IOSF port 0
                               (channels 0-3) and bits 4..7 select the channels
                               for generating trdy_go on IOSF port 1 (channels
                               4-7).
                            */
    UINT32 p2p_timer_scale : 5;

                            /* Bits[24:20], Access Type=RW/P, default=0x00000009*/

                            /* P2P timer scale */
    UINT32 csr_persistent_mem_dis : 1;

                            /* Bits[25:25], Access Type=RW/P, default=0x00000000*/

                            /* Persistent Memory flow disable */
    UINT32 disable_sub_channel : 1;

                            /* Bits[26:26], Access Type=RO, default=0x00000000*/

                            /*
                               disable sub channel for b2b throughput in same
                               IOSF channel
                            */
    UINT32 enable_itc_b2b_norm_pf : 1;

                            /* Bits[27:27], Access Type=RW/P, default=0x00000001*/

                            /*
                               Setting this bit will enable ITC to send b2b
                               prefetches on the same channel using the normal
                               pipeline
                            */
    UINT32 enable_itc_b2b_fast : 1;

                            /* Bits[28:28], Access Type=RW/P, default=0x00000001*/

                            /*
                               Setting this bit will enable ITC to send b2b
                               posted transactions on the same channel
                            */
    UINT32 enable_itc_b2b_non_posted : 1;

                            /* Bits[29:29], Access Type=RW/P, default=0x00000001*/

                            /*
                               Setting this bit will enable ITC to send b2b
                               nonposted transactions on the same channel
                            */
    UINT32 enable_itc_b2b_norm_cpl : 1;

                            /* Bits[30:30], Access Type=RW/P, default=0x00000001*/

                            /*
                               Setting this bit will enable ITC to send b2b
                               completions on the same channel using the normal
                               path
                            */
    UINT32 disable_tgtconfp2p_prealloccmp : 1;

                            /* Bits[31:31], Access Type=RW/P, default=0x00000000*/

                            /*
                               When 1, disable the factor
                               HdrTgtConfOrPreAllocCmpS595H in
                               HdrTgtConfOrPreAllocCmpS595H
                            */

  } Bits;
  UINT32 Data;

} ITCCTRL01_N1_IIO_VTD_SPRB0_SPRHBM_SPRC0_SPRMCC_SPRUCC_STRUCT;
#endif /* (SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 check_p_dest_every_state : 1;

                            /* Bits[0:0], Access Type=RW/P, default=0x00000000*/

                            /* Check Posted destination every state */
    UINT32 check_p_dest_every_line : 1;

                            /* Bits[1:1], Access Type=RW/P, default=0x00000000*/

                            /* Check Posted destination every line */
    UINT32 serialize_mcast : 1;

                            /* Bits[2:2], Access Type=RW/P, default=0x00000000*/

                            /* Serialize Multicast */
    UINT32 serialize_all : 1;

                            /* Bits[3:3], Access Type=RW/P, default=0x00000000*/

                            /* Serialize all */
    UINT32 loopback_p2p_targets : 8;

                            /* Bits[11:4], Access Type=RW/P, default=0x00000000*/

                            /*
                               Loopback P2P targets[br] Lock:
                               IIO_DFX_LCK_CTL.DBGBUSLCK
                            */
    UINT32 trdy_go_en : 8;

                            /* Bits[19:12], Access Type=RW/P, default=0x00000000*/

                            /*
                               Determines which channels contribute to
                               generation of the trdy_go sideband signal (write
                               acknowledge signal). Bits 0..3 select the
                               channels for generating trdy_go on IOSF port 0
                               (channels 0-3) and bits 4..7 select the channels
                               for generating trdy_go on IOSF port 1 (channels
                               4-7).
                            */
    UINT32 p2p_timer_scale : 5;

                            /* Bits[24:20], Access Type=RW/P, default=0x00000009*/

                            /* P2P timer scale */
    UINT32 csr_persistent_mem_dis : 1;

                            /* Bits[25:25], Access Type=RW/P, default=0x00000000*/

                            /* Persistent Memory flow disable */
    UINT32 disable_sub_channel : 1;

                            /* Bits[26:26], Access Type=RO, default=0x00000000*/

                            /*
                               disable sub channel for b2b throughput in same
                               IOSF channel
                            */
    UINT32 enable_itc_b2b_norm_pf : 1;

                            /* Bits[27:27], Access Type=RW/P, default=0x00000000*/

                            /*
                               Setting this bit will enable ITC to send b2b
                               prefetches on the same channel using the normal
                               pipeline
                            */
    UINT32 enable_itc_b2b_fast : 1;

                            /* Bits[28:28], Access Type=RW/P, default=0x00000000*/

                            /*
                               Setting this bit will enable ITC to send b2b
                               posted transactions on the same channel
                            */
    UINT32 enable_itc_b2b_non_posted : 1;

                            /* Bits[29:29], Access Type=RW/P, default=0x00000000*/

                            /*
                               Setting this bit will enable ITC to send b2b
                               nonposted transactions on the same channel
                            */
    UINT32 enable_itc_b2b_norm_cpl : 1;

                            /* Bits[30:30], Access Type=RW/P, default=0x00000000*/

                            /*
                               Setting this bit will enable ITC to send b2b
                               completions on the same channel using the normal
                               path
                            */
    UINT32 rsvd : 1;

                            /* Bits[31:31], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCCTRL01_N1_IIO_VTD_STRUCT;

/* ITCCTRL23_N0_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x20800548)                                                      */
/*      SPRB0 (0x20800548)                                                      */
/*      SPRHBM (0x20800548)                                                     */
/*      SPRC0 (0x20800548)                                                      */
/*      SPRMCC (0x20800548)                                                     */
/*      SPRUCC (0x20800548)                                                     */
/* Register default value on SPRA0: 0x00040100                                  */
/* Register default value on SPRB0: 0x00040100                                  */
/* Register default value on SPRHBM: 0x00040100                                 */
/* Register default value on SPRC0: 0x00240100                                  */
/* Register default value on SPRMCC: 0x00240100                                 */
/* Register default value on SPRUCC: 0x00240100                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* ITC control 23
*/


#define ITCCTRL23_N0_IIO_VTD_REG 0x11020548

#if defined(SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 max_irp_p2p_np : 10;

                            /* Bits[9:0], Access Type=RW/P, default=0x00000100*/

                            /*
                               Limits the number of outstanding local and
                               remote P2P non-posted requests. Provides a limit
                               for a single channel. Specifies the number of
                               requests without a completion
                               (HdrBlockIrpP2pNpSnnnH). This has no effect on
                               confined P2P requests.
                            */
    UINT32 max_irp_p2p_p : 10;

                            /* Bits[19:10], Access Type=RW/P, default=0x00000100*/

                            /*
                               Limits the number of outstanding local and
                               remote P2P posted requests. Provides a limit for
                               a single channel. Specifies the number of
                               requests without prh_done
                               (HdrBlockIrpP2pPSnnnH). This has no effect on
                               confined P2P requests.
                            */
    UINT32 rsvd : 12;

                            /* Bits[31:20], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCCTRL23_N0_IIO_VTD_SPRA0_SPRB0_SPRHBM_STRUCT;
#endif /* (SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) */

#if defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 max_irp_p2p_np : 10;

                            /* Bits[9:0], Access Type=RW/P, default=0x00000100*/

                            /*
                               Limits the number of outstanding local and
                               remote P2P non-posted requests. Provides a limit
                               for a single channel. Specifies the number of
                               requests without a completion
                               (HdrBlockIrpP2pNpSnnnH). This has no effect on
                               confined P2P requests.
                            */
    UINT32 max_irp_p2p_p : 10;

                            /* Bits[19:10], Access Type=RW/P, default=0x00000100*/

                            /*
                               Limits the number of outstanding local and
                               remote P2P posted requests. Provides a limit for
                               a single channel. Specifies the number of
                               requests without prh_done
                               (HdrBlockIrpP2pPSnnnH). This has no effect on
                               confined P2P requests.
                            */
    UINT32 max_cache_hdr_crdt_atomic : 7;

                            /* Bits[26:20], Access Type=RW/P, default=0x00000002*/

                            /*
                               Max Cache Hdr Credits reserved for atomic
                               transactions
                            */
    UINT32 rsvd : 1;

                            /* Bits[27:27], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 preserve_ro_msi : 1;

                            /* Bits[28:28], Access Type=RW/P, default=0x00000000*/

                            /*
                               Preserve/Forward the RO attribute for MSIs
                               (default is to squash the RO and zero it for
                               MSIs)
                            */
    UINT32 preserve_ro_vlw : 1;

                            /* Bits[29:29], Access Type=RW/P, default=0x00000000*/

                            /*
                               Preserve/Forward the RO attribute for VLWs
                               (default is to squash the RO and zero it for
                               VLWs)
                            */
    UINT32 usecurrtgtfrcrejnoadv : 1;

                            /* Bits[30:30], Access Type=RW/P, default=0x00000000*/

                            /*
                               Defeature used to revert back the target to
                               whatever the wave3 A and B-step had (which was
                               the prior target). This is used to check for
                               some of the force reject cases for posteds
                               (where the advance of the shadow pipe is
                               squashed)
                            */
    UINT32 dis_pipetype_reset_for_rej : 1;

                            /* Bits[31:31], Access Type=RW/P, default=0x00000000*/

                            /*
                               Defeature used to disable the pipe type reset
                               for reject cases. This reverts back the fix for
                               HSD 14010942056
                            */

  } Bits;
  UINT32 Data;

} ITCCTRL23_N0_IIO_VTD_SPRC0_SPRMCC_SPRUCC_STRUCT;
#endif /* (SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 max_irp_p2p_np : 10;

                            /* Bits[9:0], Access Type=RW/P, default=0x00000100*/

                            /*
                               Limits the number of outstanding local and
                               remote P2P non-posted requests. Provides a limit
                               for a single channel. Specifies the number of
                               requests without a completion
                               (HdrBlockIrpP2pNpSnnnH). This has no effect on
                               confined P2P requests.
                            */
    UINT32 max_irp_p2p_p : 10;

                            /* Bits[19:10], Access Type=RW/P, default=0x00000100*/

                            /*
                               Limits the number of outstanding local and
                               remote P2P posted requests. Provides a limit for
                               a single channel. Specifies the number of
                               requests without prh_done
                               (HdrBlockIrpP2pPSnnnH). This has no effect on
                               confined P2P requests.
                            */
    UINT32 rsvd : 12;

                            /* Bits[31:20], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCCTRL23_N0_IIO_VTD_STRUCT;

/* ITCCTRL23_N1_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x2080054c)                                                      */
/*      SPRB0 (0x2080054c)                                                      */
/*      SPRHBM (0x2080054c)                                                     */
/*      SPRC0 (0x2080054c)                                                      */
/*      SPRMCC (0x2080054c)                                                     */
/*      SPRUCC (0x2080054c)                                                     */
/* Register default value on SPRA0: 0x40000002                                  */
/* Register default value on SPRB0: 0x40000002                                  */
/* Register default value on SPRHBM: 0x40000002                                 */
/* Register default value on SPRC0: 0x40000002                                  */
/* Register default value on SPRMCC: 0x40000002                                 */
/* Register default value on SPRUCC: 0x40000002                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* ITC control 23
*/


#define ITCCTRL23_N1_IIO_VTD_REG 0x1102054C

#if defined(SPRA0_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 en_32b_data : 1;

                            /* Bits[0:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               Enable 32 byte data[br] Lock:
                               IIO_DFX_LCK_CTL.DBGBUSLCK
                            */
    UINT32 rcb128 : 1;

                            /* Bits[1:1], Access Type=RW/P, default=0x00000001*/

                            /*
                               If set, RCB=128. If clear, RCB=64. Affects
                               completion combining logic.
                            */
    UINT32 mctp_segid_size : 2;

                            /* Bits[3:2], Access Type=RW/P, default=0x00000000*/

                            /*
                               MCTP segment ID size. Selects how many upper
                               bits of the Destination ID will be used to
                               indicate the Segment ID of which PCIe segment
                               the target belongs to. The Source ID upper bits
                               should reflect the Segment ID of the source, but
                               this is not decoded by hardware until the target
                               device generates a response and uses the Source
                               ID as the Destination ID.
                            */
    UINT32 cfg_my_seg : 3;

                            /* Bits[6:4], Access Type=RW/P, default=0x00000000*/

                            /* MCTP segment ID size, shadowed to IOTC */
    UINT32 gldtr_segno : 3;

                            /* Bits[9:7], Access Type=RW/P, default=0x00000000*/

                            /* Gladiator Segno, shadowed to IOTC */
    UINT32 rsvd : 16;

                            /* Bits[25:10], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 disable_msg_immune_to_viral : 1;

                            /* Bits[26:26], Access Type=RW/P, default=0x00000000*/

                            /*
                               ITC dfx for disable_msg_immune_to_viral[br]
                               Lock: IIO_DFX_LCK_CTL.DBGBUSLCK
                            */
    UINT32 disable_cfg_immune_to_viral : 1;

                            /* Bits[27:27], Access Type=RW/P, default=0x00000000*/

                            /*
                               ITC dfx for disable_cfg_immune_to_viral[br]
                               Lock: IIO_DFX_LCK_CTL.DBGBUSLCK
                            */
    UINT32 dis_sb01base_decode_fix : 1;

                            /* Bits[28:28], Access Type=RW/P, default=0x00000000*/

                            /*
                               ITC dfx for dis_sb01base_decode_fix[br] Lock:
                               IIO_DFX_LCK_CTL.DBGBUSLCK
                            */
    UINT32 dis_sb01base_vtd_fix : 1;

                            /* Bits[29:29], Access Type=RW/P, default=0x00000000*/

                            /*
                               ITC dfx for dis_sb01base_vtd_fix[br] Lock:
                               IIO_DFX_LCK_CTL.DBGBUSLCK
                            */
    UINT32 itc_ctrl_misc : 2;

                            /* Bits[31:30], Access Type=RW/P, default=0x00000001*/

                            /*
                               Bit zero of this field configures MS2IOSF
                               completion handling during viral. When this bit
                               is set, MS2IOSF propagates completions unchanged
                               during viral (default behavior is to convert
                               completions to UR). [br] Note: Clearing this bit
                               causes all completions during viral to return
                               ones data, including configuration read
                               completions, which may limit debug.
                            */

  } Bits;
  UINT32 Data;

} ITCCTRL23_N1_IIO_VTD_SPRA0_STRUCT;
#endif /* (SPRA0_HOST) */

#if defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 en_32b_data : 1;

                            /* Bits[0:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               Enable 32 byte data[br] Lock:
                               IIO_DFX_LCK_CTL.DBGBUSLCK
                            */
    UINT32 rcb128 : 1;

                            /* Bits[1:1], Access Type=RW/P, default=0x00000001*/

                            /*
                               If set, RCB=128. If clear, RCB=64. Affects
                               completion combining logic.
                            */
    UINT32 mctp_segid_size : 2;

                            /* Bits[3:2], Access Type=RW/P, default=0x00000000*/

                            /*
                               MCTP segment ID size. Selects how many upper
                               bits of the Destination ID will be used to
                               indicate the Segment ID of which PCIe segment
                               the target belongs to. The Source ID upper bits
                               should reflect the Segment ID of the source, but
                               this is not decoded by hardware until the target
                               device generates a response and uses the Source
                               ID as the Destination ID.
                            */
    UINT32 cfg_my_seg : 3;

                            /* Bits[6:4], Access Type=RW/P, default=0x00000000*/

                            /* MCTP segment ID size, shadowed to IOTC */
    UINT32 gldtr_segno : 3;

                            /* Bits[9:7], Access Type=RW/P, default=0x00000000*/

                            /* Gladiator Segno, shadowed to IOTC */
    UINT32 enable_itc_b2b_fast_per_channel : 4;

                            /* Bits[13:10], Access Type=RW/P, default=0x00000000*/

                            /*
                               Enable b2b txns in ITC fast hdr pipeline per
                               channel. by default all 8 channels are enable
                            */
    UINT32 enable_itc_b2b_np_per_channel : 4;

                            /* Bits[17:14], Access Type=RW/P, default=0x00000000*/

                            /*
                               Enable b2b txns in ITC Np hdr pipeline per
                               channel. these are for Misc channels which are
                               disabled by default. all 8 DMI channels are
                               enabled
                            */
    UINT32 enable_itc_b2b_norm_pf_per_channel : 4;

                            /* Bits[21:18], Access Type=RW/P, default=0x00000000*/

                            /*
                               Enable b2b txns in ITC Norm Pf hdr pipeline per
                               channel. these are for misc channels which are
                               disabled by default. all 8 DMI channels are
                               enabled
                            */
    UINT32 enable_itc_b2b_norm_cpl_per_channel : 4;

                            /* Bits[25:22], Access Type=RW/P, default=0x00000000*/

                            /*
                               Enable b2b txns in ITC Norm Pf hdr pipeline for
                               completions per channel. these are for misc
                               channels which are disabled by default. all 8
                               DMI channels are enabled
                            */
    UINT32 disable_msg_immune_to_viral : 1;

                            /* Bits[26:26], Access Type=RW/P, default=0x00000000*/

                            /*
                               ITC dfx for disable_msg_immune_to_viral[br]
                               Lock: IIO_DFX_LCK_CTL.DBGBUSLCK
                            */
    UINT32 disable_cfg_immune_to_viral : 1;

                            /* Bits[27:27], Access Type=RW/P, default=0x00000000*/

                            /*
                               ITC dfx for disable_cfg_immune_to_viral[br]
                               Lock: IIO_DFX_LCK_CTL.DBGBUSLCK
                            */
    UINT32 dis_sb01base_decode_fix : 1;

                            /* Bits[28:28], Access Type=RW/P, default=0x00000000*/

                            /*
                               ITC dfx for dis_sb01base_decode_fix[br] Lock:
                               IIO_DFX_LCK_CTL.DBGBUSLCK
                            */
    UINT32 dis_sb01base_vtd_fix : 1;

                            /* Bits[29:29], Access Type=RW/P, default=0x00000000*/

                            /*
                               ITC dfx for dis_sb01base_vtd_fix[br] Lock:
                               IIO_DFX_LCK_CTL.DBGBUSLCK
                            */
    UINT32 itc_ctrl_misc : 2;

                            /* Bits[31:30], Access Type=RW/P, default=0x00000001*/

                            /*
                               Bit zero of this field configures MS2IOSF
                               completion handling during viral. When this bit
                               is set, MS2IOSF propagates completions unchanged
                               during viral (default behavior is to convert
                               completions to UR). [br] Note: Clearing this bit
                               causes all completions during viral to return
                               ones data, including configuration read
                               completions, which may limit debug.
                            */

  } Bits;
  UINT32 Data;

} ITCCTRL23_N1_IIO_VTD_SPRB0_SPRHBM_SPRC0_SPRMCC_SPRUCC_STRUCT;
#endif /* (SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 en_32b_data : 1;

                            /* Bits[0:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               Enable 32 byte data[br] Lock:
                               IIO_DFX_LCK_CTL.DBGBUSLCK
                            */
    UINT32 rcb128 : 1;

                            /* Bits[1:1], Access Type=RW/P, default=0x00000001*/

                            /*
                               If set, RCB=128. If clear, RCB=64. Affects
                               completion combining logic.
                            */
    UINT32 mctp_segid_size : 2;

                            /* Bits[3:2], Access Type=RW/P, default=0x00000000*/

                            /*
                               MCTP segment ID size. Selects how many upper
                               bits of the Destination ID will be used to
                               indicate the Segment ID of which PCIe segment
                               the target belongs to. The Source ID upper bits
                               should reflect the Segment ID of the source, but
                               this is not decoded by hardware until the target
                               device generates a response and uses the Source
                               ID as the Destination ID.
                            */
    UINT32 cfg_my_seg : 3;

                            /* Bits[6:4], Access Type=RW/P, default=0x00000000*/

                            /* MCTP segment ID size, shadowed to IOTC */
    UINT32 gldtr_segno : 3;

                            /* Bits[9:7], Access Type=RW/P, default=0x00000000*/

                            /* Gladiator Segno, shadowed to IOTC */
    UINT32 rsvd : 16;

                            /* Bits[25:10], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 disable_msg_immune_to_viral : 1;

                            /* Bits[26:26], Access Type=RW/P, default=0x00000000*/

                            /*
                               ITC dfx for disable_msg_immune_to_viral[br]
                               Lock: IIO_DFX_LCK_CTL.DBGBUSLCK
                            */
    UINT32 disable_cfg_immune_to_viral : 1;

                            /* Bits[27:27], Access Type=RW/P, default=0x00000000*/

                            /*
                               ITC dfx for disable_cfg_immune_to_viral[br]
                               Lock: IIO_DFX_LCK_CTL.DBGBUSLCK
                            */
    UINT32 dis_sb01base_decode_fix : 1;

                            /* Bits[28:28], Access Type=RW/P, default=0x00000000*/

                            /*
                               ITC dfx for dis_sb01base_decode_fix[br] Lock:
                               IIO_DFX_LCK_CTL.DBGBUSLCK
                            */
    UINT32 dis_sb01base_vtd_fix : 1;

                            /* Bits[29:29], Access Type=RW/P, default=0x00000000*/

                            /*
                               ITC dfx for dis_sb01base_vtd_fix[br] Lock:
                               IIO_DFX_LCK_CTL.DBGBUSLCK
                            */
    UINT32 itc_ctrl_misc : 2;

                            /* Bits[31:30], Access Type=RW/P, default=0x00000001*/

                            /*
                               Bit zero of this field configures MS2IOSF
                               completion handling during viral. When this bit
                               is set, MS2IOSF propagates completions unchanged
                               during viral (default behavior is to convert
                               completions to UR). [br] Note: Clearing this bit
                               causes all completions during viral to return
                               ones data, including configuration read
                               completions, which may limit debug.
                            */

  } Bits;
  UINT32 Data;

} ITCCTRL23_N1_IIO_VTD_STRUCT;

/* TCMCRCVST6_N0_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x20800550)                                                      */
/*      SPRB0 (0x20800550)                                                      */
/*      SPRHBM (0x20800550)                                                     */
/*      SPRC0 (0x20800550)                                                      */
/*      SPRMCC (0x20800550)                                                     */
/*      SPRUCC (0x20800550)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Multicast receiver stack 6
*/


#define TCMCRCVST6_N0_IIO_VTD_REG 0x11020550

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 multicastrcvstack6 : 16;

                            /* Bits[15:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               For each bit that's Set, this peer MS2IOSF stack
                               gets a copy of any Multicast TLPs for the
                               associated Multicast Group.[br] This should be
                               set if the corresponding bit of the MC_Receive
                               register for any of the root ports connected to
                               the peer MS2IOSF stack is set.
                            */
    UINT32 rsvd : 16;

                            /* Bits[31:16], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TCMCRCVST6_N0_IIO_VTD_STRUCT;

/* TCMCRCVST6_N1_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x20800554)                                                      */
/*      SPRB0 (0x20800554)                                                      */
/*      SPRHBM (0x20800554)                                                     */
/*      SPRC0 (0x20800554)                                                      */
/*      SPRMCC (0x20800554)                                                     */
/*      SPRUCC (0x20800554)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Multicast receiver stack 6
*/


#define TCMCRCVST6_N1_IIO_VTD_REG 0x11020554

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 32;

                            /* Bits[31:0], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TCMCRCVST6_N1_IIO_VTD_STRUCT;

/* TCMCRCVST7_N0_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x20800558)                                                      */
/*      SPRB0 (0x20800558)                                                      */
/*      SPRHBM (0x20800558)                                                     */
/*      SPRC0 (0x20800558)                                                      */
/*      SPRMCC (0x20800558)                                                     */
/*      SPRUCC (0x20800558)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Multicast receiver stack 7
*/


#define TCMCRCVST7_N0_IIO_VTD_REG 0x11020558

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 multicastrcvstack7 : 16;

                            /* Bits[15:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               For each bit that's Set, this peer MS2IOSF stack
                               gets a copy of any Multicast TLPs for the
                               associated Multicast Group.[br] This should be
                               set if the corresponding bit of the MC_Receive
                               register for any of the root ports connected to
                               the peer MS2IOSF stack is set.
                            */
    UINT32 rsvd : 16;

                            /* Bits[31:16], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TCMCRCVST7_N0_IIO_VTD_STRUCT;

/* TCMCRCVST7_N1_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x2080055c)                                                      */
/*      SPRB0 (0x2080055c)                                                      */
/*      SPRHBM (0x2080055c)                                                     */
/*      SPRC0 (0x2080055c)                                                      */
/*      SPRMCC (0x2080055c)                                                     */
/*      SPRUCC (0x2080055c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Multicast receiver stack 7
*/


#define TCMCRCVST7_N1_IIO_VTD_REG 0x1102055C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 32;

                            /* Bits[31:0], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TCMCRCVST7_N1_IIO_VTD_STRUCT;

/* OTCCTRL23_N0_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x20800560)                                                      */
/*      SPRB0 (0x20800560)                                                      */
/*      SPRHBM (0x20800560)                                                     */
/*      SPRC0 (0x20800560)                                                      */
/*      SPRMCC (0x20800560)                                                     */
/*      SPRUCC (0x20800560)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* OTC control 23
*/


#define OTCCTRL23_N0_IIO_VTD_REG 0x11020560

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 retry_buff_empty_check_disable : 1;

                            /* Bits[0:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               retry_buff_empty_check_disable during lock[br]
                               Lock: IIO_DFX_LCK_CTL.DBGBUSLCK
                            */
    UINT32 legacy_busno_en : 1;

                            /* Bits[1:1], Access Type=RW/P, default=0x00000000*/

                            /* DFT for legacy_busno_en */
    UINT32 disable_ur_viral_mask : 1;

                            /* Bits[2:2], Access Type=RW/P, default=0x00000000*/

                            /* DFT for disable_ur_viral_mask */
    UINT32 block_secbar_alias_wr : 1;

                            /* Bits[3:3], Access Type=RW/P, default=0x00000000*/

                            /* DFT for block_secbar_alias_wr */
    UINT32 block_secbar_alias_rd : 1;

                            /* Bits[4:4], Access Type=RW/P, default=0x00000000*/

                            /* DFT for block_secbar_alias_rd */
    UINT32 block_pribar_alias_wr : 1;

                            /* Bits[5:5], Access Type=RW/P, default=0x00000000*/

                            /* DFT for block_pribar_alias_wr */
    UINT32 block_pribar_alias_rd : 1;

                            /* Bits[6:6], Access Type=RW/P, default=0x00000000*/

                            /* DFT for block_pribar_alias_rd */
    UINT32 viral_ob_c_stat_ur : 1;

                            /* Bits[7:7], Access Type=RW/P, default=0x00000000*/

                            /* DFT for viral_ob_c_stat_ur */
    UINT32 dis_sb01base_cfg_fix : 1;

                            /* Bits[8:8], Access Type=RW/P, default=0x00000000*/

                            /* DFT for dis_sb01base_cfg_fix */
    UINT32 dis_2nd_vtd_ob_entry : 1;

                            /* Bits[9:9], Access Type=RW/P, default=0x00000000*/

                            /* DFT for dis_2nd_vtd_ob_entry */
    UINT32 dis_p_pool_borrow : 1;

                            /* Bits[10:10], Access Type=RW/P, default=0x00000000*/

                            /* DFT for dis_p_pool_borrow */
    UINT32 dis_np_pool_borrow : 1;

                            /* Bits[11:11], Access Type=RW/P, default=0x00000000*/

                            /* DFT for dis_np_pool_borrow */
    UINT32 dis_c_borrow : 1;

                            /* Bits[12:12], Access Type=RW/P, default=0x00000000*/

                            /* DFT for dis_c_borrow */
    UINT32 dis_p2p_np_borrow : 1;

                            /* Bits[13:13], Access Type=RW/P, default=0x00000000*/

                            /* DFT for dis_p2p_np_borrow */
    UINT32 dis_p2p_p_borrow : 1;

                            /* Bits[14:14], Access Type=RW/P, default=0x00000000*/

                            /* DFT for dis_p2p_p_borrow */
    UINT32 dis_irpnp_pool_priority : 1;

                            /* Bits[15:15], Access Type=RW/P, default=0x00000000*/

                            /* DFT for dis_irpnp_pool_priority */
    UINT32 dis_enq_req : 1;

                            /* Bits[16:16], Access Type=RW/P, default=0x00000000*/

                            /* Defeature bit to disable ENQ request */
    UINT32 en_prealloc_enq : 1;

                            /* Bits[17:17], Access Type=RW/P, default=0x00000000*/

                            /*
                               If this bit is set to 1, it enables the
                               preallocation pipeline
                            */
    UINT32 poison_master_abort_log : 1;

                            /* Bits[18:18], Access Type=RW/P, default=0x00000000*/

                            /*
                               Default condition is 0, in this case, only if
                               posion bit is set, logging would happen. If this
                               bit is set to 1, then it was log master abort
                               condition.
                            */
    UINT32 misc_dft : 13;

                            /* Bits[31:19], Access Type=RW/P, default=0x00000000*/

                            /* Reserved for DFT */

  } Bits;
  UINT32 Data;

} OTCCTRL23_N0_IIO_VTD_STRUCT;

/* OTCCTRL23_N1_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x20800564)                                                      */
/*      SPRB0 (0x20800564)                                                      */
/*      SPRHBM (0x20800564)                                                     */
/*      SPRC0 (0x20800564)                                                      */
/*      SPRMCC (0x20800564)                                                     */
/*      SPRUCC (0x20800564)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* OTC control 23
*/


#define OTCCTRL23_N1_IIO_VTD_REG 0x11020564

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 misc_dft : 32;

                            /* Bits[31:0], Access Type=RW/P, default=0x00000000*/

                            /* Reserved for DFT */

  } Bits;
  UINT32 Data;

} OTCCTRL23_N1_IIO_VTD_STRUCT;

/* TCMCRCVST8_N0_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x20800568)                                                      */
/*      SPRB0 (0x20800568)                                                      */
/*      SPRHBM (0x20800568)                                                     */
/*      SPRC0 (0x20800568)                                                      */
/*      SPRMCC (0x20800568)                                                     */
/*      SPRUCC (0x20800568)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Multicast receiver stack 8
*/


#define TCMCRCVST8_N0_IIO_VTD_REG 0x11020568

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 multicastrcvstack8 : 16;

                            /* Bits[15:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               For each bit that's Set, this peer MS2IOSF stack
                               gets a copy of any Multicast TLPs for the
                               associated Multicast Group.[br] This should be
                               set if the corresponding bit of the MC_Receive
                               register for any of the root ports connected to
                               the peer MS2IOSF stack is set.
                            */
    UINT32 rsvd : 16;

                            /* Bits[31:16], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TCMCRCVST8_N0_IIO_VTD_STRUCT;

/* TCMCRCVST8_N1_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x2080056c)                                                      */
/*      SPRB0 (0x2080056c)                                                      */
/*      SPRHBM (0x2080056c)                                                     */
/*      SPRC0 (0x2080056c)                                                      */
/*      SPRMCC (0x2080056c)                                                     */
/*      SPRUCC (0x2080056c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Multicast receiver stack 8
*/


#define TCMCRCVST8_N1_IIO_VTD_REG 0x1102056C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 32;

                            /* Bits[31:0], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TCMCRCVST8_N1_IIO_VTD_STRUCT;

/* TCMCRCVST9_N0_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x20800570)                                                      */
/*      SPRB0 (0x20800570)                                                      */
/*      SPRHBM (0x20800570)                                                     */
/*      SPRC0 (0x20800570)                                                      */
/*      SPRMCC (0x20800570)                                                     */
/*      SPRUCC (0x20800570)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Multicast receiver stack 9
*/


#define TCMCRCVST9_N0_IIO_VTD_REG 0x11020570

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 multicastrcvstack9 : 16;

                            /* Bits[15:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               For each bit that's Set, this peer MS2IOSF stack
                               gets a copy of any Multicast TLPs for the
                               associated Multicast Group.[br] This should be
                               set if the corresponding bit of the MC_Receive
                               register for any of the root ports connected to
                               the peer MS2IOSF stack is set.
                            */
    UINT32 rsvd : 16;

                            /* Bits[31:16], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TCMCRCVST9_N0_IIO_VTD_STRUCT;

/* TCMCRCVST9_N1_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x20800574)                                                      */
/*      SPRB0 (0x20800574)                                                      */
/*      SPRHBM (0x20800574)                                                     */
/*      SPRC0 (0x20800574)                                                      */
/*      SPRMCC (0x20800574)                                                     */
/*      SPRUCC (0x20800574)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Multicast receiver stack 9
*/


#define TCMCRCVST9_N1_IIO_VTD_REG 0x11020574

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 32;

                            /* Bits[31:0], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TCMCRCVST9_N1_IIO_VTD_STRUCT;

/* TCMCRCVST10_N0_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x20800578)                                                      */
/*      SPRB0 (0x20800578)                                                      */
/*      SPRHBM (0x20800578)                                                     */
/*      SPRC0 (0x20800578)                                                      */
/*      SPRMCC (0x20800578)                                                     */
/*      SPRUCC (0x20800578)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Multicast receiver stack 7
*/


#define TCMCRCVST10_N0_IIO_VTD_REG 0x11020578

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 multicastrcvstack10 : 16;

                            /* Bits[15:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               For each bit that's Set, this peer MS2IOSF stack
                               gets a copy of any Multicast TLPs for the
                               associated Multicast Group.[br] This should be
                               set if the corresponding bit of the MC_Receive
                               register for any of the root ports connected to
                               the peer MS2IOSF stack is set.
                            */
    UINT32 rsvd : 16;

                            /* Bits[31:16], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TCMCRCVST10_N0_IIO_VTD_STRUCT;

/* TCMCRCVST10_N1_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x2080057c)                                                      */
/*      SPRB0 (0x2080057c)                                                      */
/*      SPRHBM (0x2080057c)                                                     */
/*      SPRC0 (0x2080057c)                                                      */
/*      SPRMCC (0x2080057c)                                                     */
/*      SPRUCC (0x2080057c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Multicast receiver stack 7
*/


#define TCMCRCVST10_N1_IIO_VTD_REG 0x1102057C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 32;

                            /* Bits[31:0], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TCMCRCVST10_N1_IIO_VTD_STRUCT;

/* TCMCRCVST11_N0_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x20800580)                                                      */
/*      SPRB0 (0x20800580)                                                      */
/*      SPRHBM (0x20800580)                                                     */
/*      SPRC0 (0x20800580)                                                      */
/*      SPRMCC (0x20800580)                                                     */
/*      SPRUCC (0x20800580)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Multicast receiver stack 7
*/


#define TCMCRCVST11_N0_IIO_VTD_REG 0x11020580

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 multicastrcvstack11 : 16;

                            /* Bits[15:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               For each bit that's Set, this peer MS2IOSF stack
                               gets a copy of any Multicast TLPs for the
                               associated Multicast Group.[br] This should be
                               set if the corresponding bit of the MC_Receive
                               register for any of the root ports connected to
                               the peer MS2IOSF stack is set.
                            */
    UINT32 rsvd : 16;

                            /* Bits[31:16], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TCMCRCVST11_N0_IIO_VTD_STRUCT;

/* TCMCRCVST11_N1_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x20800584)                                                      */
/*      SPRB0 (0x20800584)                                                      */
/*      SPRHBM (0x20800584)                                                     */
/*      SPRC0 (0x20800584)                                                      */
/*      SPRMCC (0x20800584)                                                     */
/*      SPRUCC (0x20800584)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Multicast receiver stack 7
*/


#define TCMCRCVST11_N1_IIO_VTD_REG 0x11020584

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 32;

                            /* Bits[31:0], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TCMCRCVST11_N1_IIO_VTD_STRUCT;

/* ITCCTRL67_N0_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x20800588)                                                      */
/*      SPRB0 (0x20800588)                                                      */
/*      SPRHBM (0x20800588)                                                     */
/*      SPRC0 (0x20800588)                                                      */
/*      SPRMCC (0x20800588)                                                     */
/*      SPRUCC (0x20800588)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0xFFFFFFFF                                  */
/* Register default value on SPRHBM: 0xFFFFFFFF                                 */
/* Register default value on SPRC0: 0xFFFFFFFF                                  */
/* Register default value on SPRMCC: 0xFFFFFFFF                                 */
/* Register default value on SPRUCC: 0xFFFFFFFF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* ITC control 67
*/


#define ITCCTRL67_N0_IIO_VTD_REG 0x11020588

#if defined(SPRA0_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 32;

                            /* Bits[31:0], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCCTRL67_N0_IIO_VTD_SPRA0_STRUCT;
#endif /* (SPRA0_HOST) */

#if defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 enable_itc_b2b_fast_per_channel : 8;

                            /* Bits[7:0], Access Type=RW/P, default=0x000000FF*/

                            /*
                               Enable b2b txns in ITC fast hdr pipeline per
                               channel. by default all 8 channels are enable
                            */
    UINT32 enable_itc_b2b_np_per_channel : 8;

                            /* Bits[15:8], Access Type=RW/P, default=0x000000FF*/

                            /*
                               Enable b2b txns in ITC Np hdr pipeline per
                               channel. by default all 8 channels are enable
                            */
    UINT32 enable_itc_b2b_norm_pf_per_channel : 8;

                            /* Bits[23:16], Access Type=RW/P, default=0x000000FF*/

                            /*
                               Enable b2b txns in ITC Norm Pf hdr pipeline per
                               channel. by default all 8 channels are enable
                            */
    UINT32 enable_itc_b2b_norm_cpl_per_channel : 8;

                            /* Bits[31:24], Access Type=RW/P, default=0x000000FF*/

                            /*
                               Enable b2b txns in ITC Norm Pf hdr pipeline for
                               completions per channel. by default all 8
                               channels are enable
                            */

  } Bits;
  UINT32 Data;

} ITCCTRL67_N0_IIO_VTD_SPRB0_SPRHBM_SPRC0_SPRMCC_SPRUCC_STRUCT;
#endif /* (SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

/* ITCCTRL67_N1_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x2080058c)                                                      */
/*      SPRB0 (0x2080058c)                                                      */
/*      SPRHBM (0x2080058c)                                                     */
/*      SPRC0 (0x2080058c)                                                      */
/*      SPRMCC (0x2080058c)                                                     */
/*      SPRUCC (0x2080058c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* ITC control 67
*/


#define ITCCTRL67_N1_IIO_VTD_REG 0x1102058C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 misc_dft_rws : 32;

                            /* Bits[31:0], Access Type=RW/P, default=0x00000000*/

                            /* Reserved for DFT with RWS */

  } Bits;
  UINT32 Data;

} ITCCTRL67_N1_IIO_VTD_STRUCT;

/* ITCCTRL89_N0_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x20800598)                                                      */
/*      SPRB0 (0x20800598)                                                      */
/*      SPRHBM (0x20800598)                                                     */
/*      SPRC0 (0x20800598)                                                      */
/*      SPRMCC (0x20800598)                                                     */
/*      SPRUCC (0x20800598)                                                     */
/* Register default value on SPRA0: 0xFFFFFFFF                                  */
/* Register default value on SPRB0: 0xFFFFFFFF                                  */
/* Register default value on SPRHBM: 0xFFFFFFFF                                 */
/* Register default value on SPRC0: 0xFFFFFFFF                                  */
/* Register default value on SPRMCC: 0xFFFFFFFF                                 */
/* Register default value on SPRUCC: 0xFFFFFFFF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* ITC control 89
*/


#define ITCCTRL89_N0_IIO_VTD_REG 0x11020598

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 en_gbl_serialize_irp_p2p_np : 12;

                            /* Bits[11:0], Access Type=RW/P, default=0x00000FFF*/

                            /*
                               Enable serialization of non-posted p2p when
                               destination queue is backed up on any channel
                            */
    UINT32 en_gbl_serialize_irp_p2p_p : 12;

                            /* Bits[23:12], Access Type=RW/P, default=0x00000FFF*/

                            /*
                               Enable serialization of posted p2p when
                               destination queue is backed up on any channel.
                            */
    UINT32 en_chnl_serialize_irp_p2p_p : 8;

                            /* Bits[31:24], Access Type=RW/P, default=0x000000FF*/

                            /*
                               Enable serialization of posted p2p when
                               destination queue is backed up on that same
                               channel
                            */

  } Bits;
  UINT32 Data;

} ITCCTRL89_N0_IIO_VTD_STRUCT;

/* ITCCTRL89_N1_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x2080059c)                                                      */
/*      SPRB0 (0x2080059c)                                                      */
/*      SPRHBM (0x2080059c)                                                     */
/*      SPRC0 (0x2080059c)                                                      */
/*      SPRMCC (0x2080059c)                                                     */
/*      SPRUCC (0x2080059c)                                                     */
/* Register default value on SPRA0: 0x0018FFFF                                  */
/* Register default value on SPRB0: 0x0C18FFFF                                  */
/* Register default value on SPRHBM: 0x0C18FFFF                                 */
/* Register default value on SPRC0: 0x0C18FFFF                                  */
/* Register default value on SPRMCC: 0x0C18FFFF                                 */
/* Register default value on SPRUCC: 0x0C18FFFF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* ITC control 89
*/


#define ITCCTRL89_N1_IIO_VTD_REG 0x1102059C

#if defined(SPRA0_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 en_chnl_serialize_irp_p2p_p : 4;

                            /* Bits[3:0], Access Type=RW/P, default=0x0000000F*/

                            /*
                               Enable serialization of posted p2p when
                               destination queue is backed up on that same
                               channel
                            */
    UINT32 en_chnl_serialize_irp_p2p_np : 12;

                            /* Bits[15:4], Access Type=RW/P, default=0x00000FFF*/

                            /*
                               Enable serialization of non-posted p2p when
                               destination queue is backed up on that same
                               channel
                            */
    UINT32 pi_wbq_chk_dis : 1;

                            /* Bits[16:16], Access Type=RW/P, default=0x00000000*/

                            /* Disable for Posted Interrupt Write-back Queue */
    UINT32 max_pi_wbq : 8;

                            /* Bits[24:17], Access Type=RW/P, default=0x0000000C*/

                            /* Maximum Posted Interrupt fo write-back queue */
    UINT32 rsvd : 7;

                            /* Bits[31:25], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCCTRL89_N1_IIO_VTD_SPRA0_STRUCT;
#endif /* (SPRA0_HOST) */

#if defined(SPRB0_HOST) || defined(SPRHBM_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 en_chnl_serialize_irp_p2p_p : 4;

                            /* Bits[3:0], Access Type=RW/P, default=0x0000000F*/

                            /*
                               Enable serialization of posted p2p when
                               destination queue is backed up on that same
                               channel
                            */
    UINT32 en_chnl_serialize_irp_p2p_np : 12;

                            /* Bits[15:4], Access Type=RW/P, default=0x00000FFF*/

                            /*
                               Enable serialization of non-posted p2p when
                               destination queue is backed up on that same
                               channel
                            */
    UINT32 pi_wbq_chk_dis : 1;

                            /* Bits[16:16], Access Type=RW/P, default=0x00000000*/

                            /* Disable for Posted Interrupt Write-back Queue */
    UINT32 max_pi_wbq : 8;

                            /* Bits[24:17], Access Type=RW/P, default=0x0000000C*/

                            /* Maximum Posted Interrupt fo write-back queue */
    UINT32 inv_cset_sel : 1;

                            /* Bits[25:25], Access Type=RW/P, default=0x00000000*/

                            /*
                               This bit is used to switch the cset selection
                               for a request from the default behavior of using
                               addr[7:6] to addr[6:7] for performance
                               improvement based on payload [br] Encoding [br]
                               0 : Use addr[7:6] [br] 1: Use addr [6:7] [br]
                            */
    UINT32 prh_pend_check1a_en : 1;

                            /* Bits[26:26], Access Type=RW/P, default=0x00000001*/

                            /*
                               enable prh pend crediting check: default is 1:
                               means enabled
                            */
    UINT32 csr_defeature_crdt_rtn_idle : 1;

                            /* Bits[27:27], Access Type=RW/P, default=0x00000001*/

                            /*
                               this defeature bit when set, considers the crdts
                               returned to move the fabric to idle state. by
                               default it is set to 1
                            */
    UINT32 rsvd : 4;

                            /* Bits[31:28], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCCTRL89_N1_IIO_VTD_SPRB0_SPRHBM_STRUCT;
#endif /* (SPRB0_HOST) || defined(SPRHBM_HOST) */

#if defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 en_chnl_serialize_irp_p2p_p : 4;

                            /* Bits[3:0], Access Type=RW/P, default=0x0000000F*/

                            /*
                               Enable serialization of posted p2p when
                               destination queue is backed up on that same
                               channel
                            */
    UINT32 en_chnl_serialize_irp_p2p_np : 12;

                            /* Bits[15:4], Access Type=RW/P, default=0x00000FFF*/

                            /*
                               Enable serialization of non-posted p2p when
                               destination queue is backed up on that same
                               channel
                            */
    UINT32 pi_wbq_chk_dis : 1;

                            /* Bits[16:16], Access Type=RW/P, default=0x00000000*/

                            /* Disable for Posted Interrupt Write-back Queue */
    UINT32 max_pi_wbq : 8;

                            /* Bits[24:17], Access Type=RW/P, default=0x0000000C*/

                            /* Maximum Posted Interrupt fo write-back queue */
    UINT32 inv_cset_sel : 1;

                            /* Bits[25:25], Access Type=RW/P, default=0x00000000*/

                            /*
                               This bit is used to switch the cset selection
                               for a request from the default behavior of using
                               addr[7:6] to addr[6:7] for performance
                               improvement based on payload [br] Encoding [br]
                               0 : Use addr[7:6] [br] 1: Use addr [6:7] [br]
                            */
    UINT32 prh_pend_check1a_en : 1;

                            /* Bits[26:26], Access Type=RW/P, default=0x00000001*/

                            /*
                               enable prh pend crediting check: default is 1:
                               means enabled
                            */
    UINT32 csr_defeature_crdt_rtn_idle : 1;

                            /* Bits[27:27], Access Type=RW/P, default=0x00000001*/

                            /*
                               this defeature bit when set, considers the crdts
                               returned to move the fabric to idle state. by
                               default it is set to 1
                            */
    UINT32 csr_disable_new_crdt_init : 1;

                            /* Bits[28:28], Access Type=RW/P, default=0x00000000*/

                            /*
                               this defeature bit when set, considers the crdts
                               returned to move the fabric to idle state. by
                               default it is set to 1
                            */
    UINT32 crdt_fix_hw_init_flag_status : 1;

                            /* Bits[29:29], Access Type=RO, default=0x00000000*/

                            /*
                               this defeature bit when set, considers the crdts
                               returned to move the fabric to idle state. by
                               default it is set to 1
                            */
    UINT32 csr_disable_nzlpigcnt_subch1p_check : 1;

                            /* Bits[30:30], Access Type=RW/P, default=0x00000000*/

                            /*
                               Chicken bit for disabling fix for HSD
                               14010868542 - setting this bit will disable arb-
                               mask check for non-zero LPIG count for posted
                               traffic queue for sub-channel1 of all channels
                            */
    UINT32 csr_disable_reqpipe_hold_state : 1;

                            /* Bits[31:31], Access Type=RW/P, default=0x00000000*/

                            /*
                               Chicken bit for disabling fix for HSD
                               14011138042 - setting this bit will disable the
                               transition from REQ_ARB to REQ_HOLD state.
                               REQ_HOLD state was added for enforcing an order
                               for entering arb state post a flush
                            */

  } Bits;
  UINT32 Data;

} ITCCTRL89_N1_IIO_VTD_SPRC0_SPRMCC_SPRUCC_STRUCT;
#endif /* (SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 en_chnl_serialize_irp_p2p_p : 4;

                            /* Bits[3:0], Access Type=RW/P, default=0x0000000F*/

                            /*
                               Enable serialization of posted p2p when
                               destination queue is backed up on that same
                               channel
                            */
    UINT32 en_chnl_serialize_irp_p2p_np : 12;

                            /* Bits[15:4], Access Type=RW/P, default=0x00000FFF*/

                            /*
                               Enable serialization of non-posted p2p when
                               destination queue is backed up on that same
                               channel
                            */
    UINT32 pi_wbq_chk_dis : 1;

                            /* Bits[16:16], Access Type=RW/P, default=0x00000000*/

                            /* Disable for Posted Interrupt Write-back Queue */
    UINT32 max_pi_wbq : 8;

                            /* Bits[24:17], Access Type=RW/P, default=0x0000000C*/

                            /* Maximum Posted Interrupt fo write-back queue */
    UINT32 rsvd : 7;

                            /* Bits[31:25], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCCTRL89_N1_IIO_VTD_STRUCT;

/* ITCCTRL45_N0_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x208005a0)                                                      */
/*      SPRB0 (0x208005a0)                                                      */
/*      SPRHBM (0x208005a0)                                                     */
/*      SPRC0 (0x208005a0)                                                      */
/*      SPRMCC (0x208005a0)                                                     */
/*      SPRUCC (0x208005a0)                                                     */
/* Register default value on SPRA0: 0x20404680                                  */
/* Register default value on SPRB0: 0x20404680                                  */
/* Register default value on SPRHBM: 0x20404680                                 */
/* Register default value on SPRC0: 0x20404678                                  */
/* Register default value on SPRMCC: 0x20404678                                 */
/* Register default value on SPRUCC: 0x20404678                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* ITC control 45
*/


#define ITCCTRL45_N0_IIO_VTD_REG 0x110205A0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 dfx_max_cache : 8;

                            /* Bits[7:0], Access Type=RW/P, default=0x00000080*/

                            /* Max cache size */
    UINT32 rsvd : 1;

                            /* Bits[8:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 en_mmio_reads_from_cbmda : 1;

                            /* Bits[9:9], Access Type=RW/P, default=0x00000001*/

                            /* Allow MMIO reads from CBDMA */
    UINT32 irp_posted_entry : 1;

                            /* Bits[10:10], Access Type=RW/P, default=0x00000001*/

                            /* IRP posted entry */
    UINT32 max_mem_rd : 6;

                            /* Bits[16:11], Access Type=RW/P, default=0x00000008*/

                            /* Max memory read */
    UINT32 rsvd_17 : 1;

                            /* Bits[17:17], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 max_ncp2ps : 6;

                            /* Bits[23:18], Access Type=RW/P, default=0x00000010*/

                            /* Max NCP2PS */
    UINT32 rsvd_24 : 1;

                            /* Bits[24:24], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 max_ncp2pb : 6;

                            /* Bits[30:25], Access Type=RW/P, default=0x00000010*/

                            /* Max NCP2PB */
    UINT32 isoch_absolute_priority : 1;

                            /* Bits[31:31], Access Type=RW/P, default=0x00000000*/

                            /* Isoch Absolute Priority */

  } Bits;
  UINT32 Data;

} ITCCTRL45_N0_IIO_VTD_STRUCT;

/* ITCCTRL45_N1_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x208005a4)                                                      */
/*      SPRB0 (0x208005a4)                                                      */
/*      SPRHBM (0x208005a4)                                                     */
/*      SPRC0 (0x208005a4)                                                      */
/*      SPRMCC (0x208005a4)                                                     */
/*      SPRUCC (0x208005a4)                                                     */
/* Register default value on SPRA0: 0x10040407                                  */
/* Register default value on SPRB0: 0x10040407                                  */
/* Register default value on SPRHBM: 0x10040407                                 */
/* Register default value on SPRC0: 0x10040387                                  */
/* Register default value on SPRMCC: 0x10040387                                 */
/* Register default value on SPRUCC: 0x10040387                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* ITC control 45
*/


#define ITCCTRL45_N1_IIO_VTD_REG 0x110205A4

#if defined(SPRA0_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 max_isoch_count : 3;

                            /* Bits[2:0], Access Type=RW/P, default=0x00000007*/

                            /*
                               Max number of credits given to ISOCH before a
                               credit must be given to non-ISOCH when non-ISOCH
                               is waiting for a credit.
                            */
    UINT32 max_isoch : 2;

                            /* Bits[4:3], Access Type=RW/P, default=0x00000000*/

                            /*
                               Number of IRP data credits reserved for ISOCH
                               (cstack ? 2h1 : 2h0)
                            */
    UINT32 rsvd : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 max_cache_hdr_crdt : 7;

                            /* Bits[12:6], Access Type=RW/P, default=0x00000010*/

                            /* Max Cache header credit */
    UINT32 rsvd_13 : 1;

                            /* Bits[13:13], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 max_cache_dat_crdt : 7;

                            /* Bits[20:14], Access Type=RW/P, default=0x00000010*/

                            /* Max Cache data credit */
    UINT32 rsvd_21 : 2;

                            /* Bits[22:21], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 abort_p2p_dmi : 1;

                            /* Bits[23:23], Access Type=RW/P, default=0x00000000*/

                            /*
                               Abort all p2p to the CSTACK on this socket. To
                               avoid a possible deadlock condition,[br] this
                               bit should be set for PSTACK1. It should be
                               cleared for all other stacks.
                            */
    UINT32 max_irp_cmpl : 5;

                            /* Bits[28:24], Access Type=RW/P, default=0x00000010*/

                            /*
                               Max number of completions sent to IRP. Only used
                               when outbound NCS fire-and-forget is enabled in
                               IRP.
                            */
    UINT32 rsvd_29 : 3;

                            /* Bits[31:29], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCCTRL45_N1_IIO_VTD_SPRA0_STRUCT;
#endif /* (SPRA0_HOST) */

#if defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 max_isoch_count : 3;

                            /* Bits[2:0], Access Type=RW/P, default=0x00000007*/

                            /*
                               Max number of credits given to ISOCH before a
                               credit must be given to non-ISOCH when non-ISOCH
                               is waiting for a credit.
                            */
    UINT32 max_isoch : 2;

                            /* Bits[4:3], Access Type=RW/P, default=0x00000000*/

                            /*
                               Number of IRP data credits reserved for ISOCH
                               (cstack ? 2h1 : 2h0)
                            */
    UINT32 rsvd : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 max_cache_hdr_crdt : 7;

                            /* Bits[12:6], Access Type=RW/P, default=0x00000010*/

                            /* Max Cache header credit */
    UINT32 rsvd_13 : 1;

                            /* Bits[13:13], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 max_cache_dat_crdt : 7;

                            /* Bits[20:14], Access Type=RW/P, default=0x00000010*/

                            /* Max Cache data credit */
    UINT32 disable_normfast_arbpri : 1;

                            /* Bits[21:21], Access Type=RW/P, default=0x00000000*/

                            /*
                               Disable the arb priority logic between normal
                               and fastpath
                            */
    UINT32 disable_npfast_arbpri : 1;

                            /* Bits[22:22], Access Type=RW/P, default=0x00000000*/

                            /*
                               Disable the arb priority logic between Np and
                               fastpath
                            */
    UINT32 abort_p2p_dmi : 1;

                            /* Bits[23:23], Access Type=RW/P, default=0x00000000*/

                            /*
                               Abort all p2p to the CSTACK on this socket. To
                               avoid a possible deadlock condition,[br] this
                               bit should be set for PSTACK1. It should be
                               cleared for all other stacks.
                            */
    UINT32 max_irp_cmpl : 5;

                            /* Bits[28:24], Access Type=RW/P, default=0x00000010*/

                            /*
                               Max number of completions sent to IRP. Only used
                               when outbound NCS fire-and-forget is enabled in
                               IRP.
                            */
    UINT32 allow_npfast_simultaneous_arb : 1;

                            /* Bits[29:29], Access Type=RW/P, default=0x00000000*/

                            /*
                               Allow Np and fastpath pipelines to arb at the
                               same time
                            */
    UINT32 csr_visa_mux_sel_ddrt_wr : 1;

                            /* Bits[30:30], Access Type=RW/P, default=0x00000000*/

                            /*
                               Mux select between ddrtwr and piwbq to be added
                               to Visa VisaMuxItcIrpCrdSnnnH
                            */
    UINT32 rsvd_31 : 1;

                            /* Bits[31:31], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCCTRL45_N1_IIO_VTD_SPRB0_SPRHBM_SPRC0_SPRMCC_SPRUCC_STRUCT;
#endif /* (SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 max_isoch_count : 3;

                            /* Bits[2:0], Access Type=RW/P, default=0x00000007*/

                            /*
                               Max number of credits given to ISOCH before a
                               credit must be given to non-ISOCH when non-ISOCH
                               is waiting for a credit.
                            */
    UINT32 max_isoch : 2;

                            /* Bits[4:3], Access Type=RW/P, default=0x00000000*/

                            /*
                               Number of IRP data credits reserved for ISOCH
                               (cstack ? 2h1 : 2h0)
                            */
    UINT32 rsvd : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 max_cache_hdr_crdt : 7;

                            /* Bits[12:6], Access Type=RW/P, default=0x00000010*/

                            /* Max Cache header credit */
    UINT32 rsvd_13 : 1;

                            /* Bits[13:13], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 max_cache_dat_crdt : 7;

                            /* Bits[20:14], Access Type=RW/P, default=0x00000010*/

                            /* Max Cache data credit */
    UINT32 rsvd_21 : 2;

                            /* Bits[22:21], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 abort_p2p_dmi : 1;

                            /* Bits[23:23], Access Type=RW/P, default=0x00000000*/

                            /*
                               Abort all p2p to the CSTACK on this socket. To
                               avoid a possible deadlock condition,[br] this
                               bit should be set for PSTACK1. It should be
                               cleared for all other stacks.
                            */
    UINT32 max_irp_cmpl : 5;

                            /* Bits[28:24], Access Type=RW/P, default=0x00000010*/

                            /*
                               Max number of completions sent to IRP. Only used
                               when outbound NCS fire-and-forget is enabled in
                               IRP.
                            */
    UINT32 rsvd_29 : 3;

                            /* Bits[31:29], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCCTRL45_N1_IIO_VTD_STRUCT;

/* OTCCTRL01_N0_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x208005a8)                                                      */
/*      SPRB0 (0x208005a8)                                                      */
/*      SPRHBM (0x208005a8)                                                     */
/*      SPRC0 (0x208005a8)                                                      */
/*      SPRMCC (0x208005a8)                                                     */
/*      SPRUCC (0x208005a8)                                                     */
/* Register default value on SPRA0: 0x40020030                                  */
/* Register default value on SPRB0: 0x40020030                                  */
/* Register default value on SPRHBM: 0x40020030                                 */
/* Register default value on SPRC0: 0x40020031                                  */
/* Register default value on SPRMCC: 0x40020031                                 */
/* Register default value on SPRUCC: 0x40020031                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* OTC control 01
*/


#define OTCCTRL01_N0_IIO_VTD_REG 0x110205A8

#if defined(SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 3;

                            /* Bits[2:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 en_32b_data : 1;

                            /* Bits[3:3], Access Type=RW/P, default=0x00000000*/

                            /* Enable 32 byte data */
    UINT32 cfg_thresh_chnl : 10;

                            /* Bits[13:4], Access Type=RW/P, default=0x00000003*/

                            /* Channel 0 threshold */
    UINT32 np_serial_thresh : 10;

                            /* Bits[23:14], Access Type=RW/P, default=0x00000008*/

                            /* Free allocation reload */
    UINT32 np_max_crdt_use : 8;

                            /* Bits[31:24], Access Type=RW/P, default=0x00000040*/

                            /* Non-posted maximum credit used. */

  } Bits;
  UINT32 Data;

} OTCCTRL01_N0_IIO_VTD_SPRA0_SPRB0_SPRHBM_STRUCT;
#endif /* (SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) */

#if defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 en_sbe_mmrd : 1;

                            /* Bits[0:0], Access Type=RW/P, default=0x00000001*/

                            /*
                               this is a defeature bit to enable a logic in
                               m2iosf_ring_trans to support the mmrd when
                               addrlen =1
                            */
    UINT32 rsvd : 2;

                            /* Bits[2:1], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 en_32b_data : 1;

                            /* Bits[3:3], Access Type=RW/P, default=0x00000000*/

                            /* Enable 32 byte data */
    UINT32 cfg_thresh_chnl : 10;

                            /* Bits[13:4], Access Type=RW/P, default=0x00000003*/

                            /* Channel 0 threshold */
    UINT32 np_serial_thresh : 10;

                            /* Bits[23:14], Access Type=RW/P, default=0x00000008*/

                            /* Free allocation reload */
    UINT32 np_max_crdt_use : 8;

                            /* Bits[31:24], Access Type=RW/P, default=0x00000040*/

                            /* Non-posted maximum credit used. */

  } Bits;
  UINT32 Data;

} OTCCTRL01_N0_IIO_VTD_SPRC0_SPRMCC_SPRUCC_STRUCT;
#endif /* (SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 3;

                            /* Bits[2:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 en_32b_data : 1;

                            /* Bits[3:3], Access Type=RW/P, default=0x00000000*/

                            /* Enable 32 byte data */
    UINT32 cfg_thresh_chnl : 10;

                            /* Bits[13:4], Access Type=RW/P, default=0x00000003*/

                            /* Channel 0 threshold */
    UINT32 np_serial_thresh : 10;

                            /* Bits[23:14], Access Type=RW/P, default=0x00000008*/

                            /* Free allocation reload */
    UINT32 np_max_crdt_use : 8;

                            /* Bits[31:24], Access Type=RW/P, default=0x00000040*/

                            /* Non-posted maximum credit used. */

  } Bits;
  UINT32 Data;

} OTCCTRL01_N0_IIO_VTD_STRUCT;

/* OTCCTRL01_N1_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x208005ac)                                                      */
/*      SPRB0 (0x208005ac)                                                      */
/*      SPRHBM (0x208005ac)                                                     */
/*      SPRC0 (0x208005ac)                                                      */
/*      SPRMCC (0x208005ac)                                                     */
/*      SPRUCC (0x208005ac)                                                     */
/* Register default value on SPRA0: 0x00021638                                  */
/* Register default value on SPRB0: 0x00021638                                  */
/* Register default value on SPRHBM: 0x00021638                                 */
/* Register default value on SPRC0: 0x000A1638                                  */
/* Register default value on SPRMCC: 0x000A1638                                 */
/* Register default value on SPRUCC: 0x000A1638                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* OTC control 01
*/


#define OTCCTRL01_N1_IIO_VTD_REG 0x110205AC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 np_max_crdt_use : 2;

                            /* Bits[1:0], Access Type=RW/P, default=0x00000000*/

                            /* Non-posted maximum credit used. */
    UINT32 free_alloc_reload : 1;

                            /* Bits[2:2], Access Type=RW/P, default=0x00000000*/

                            /* Free allocation reload */
    UINT32 msg_max_crdt : 5;

                            /* Bits[7:3], Access Type=RW/P, default=0x00000007*/

                            /* maximum credit for message. */
    UINT32 otc_throt_occ_knob : 3;

                            /* Bits[10:8], Access Type=RW/P, default=0x00000006*/

                            /*
                               Based on this knob, we start throtting credit
                               returns to OTC buffers after a certain occupancy
                               is reached.
                            */
    UINT32 otc_throt_dly_knob : 3;

                            /* Bits[13:11], Access Type=RW/P, default=0x00000002*/

                            /*
                               Based on this knob, we decide how many clock
                               cycles to throttle credit returns.
                            */
    UINT32 otc_throt_disable : 1;

                            /* Bits[14:14], Access Type=RW/P, default=0x00000000*/

                            /*
                               Disable Occupancy based OTC credit return
                               throttling.
                            */
    UINT32 otc_ctrl_misc : 17;

                            /* Bits[31:15], Access Type=RW/P, default=0x00000004*/

                            /*
                               OTC spare Control bits [0] - Disable Otc2Misc
                               One in Four Arb Fix [3:1] - PrhPend credit value
                               to check for so that the structure does not get
                               full, default value - 2 : New bahvior, value =1
                               : rollback to previous implementation [16:4] -
                               Unused
                            */

  } Bits;
  UINT32 Data;

} OTCCTRL01_N1_IIO_VTD_STRUCT;

/* OTCCTRL45_N0_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x208005b0)                                                      */
/*      SPRB0 (0x208005b0)                                                      */
/*      SPRHBM (0x208005b0)                                                     */
/*      SPRC0 (0x208005b0)                                                      */
/*      SPRMCC (0x208005b0)                                                     */
/*      SPRUCC (0x208005b0)                                                     */
/* Register default value on SPRA0: 0x0000002C                                  */
/* Register default value on SPRB0: 0x0000002C                                  */
/* Register default value on SPRHBM: 0x0000002C                                 */
/* Register default value on SPRC0: 0x0000002C                                  */
/* Register default value on SPRMCC: 0x0000002C                                 */
/* Register default value on SPRUCC: 0x0000002C                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* OTC control 45
*/


#define OTCCTRL45_N0_IIO_VTD_REG 0x110205B0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 misc_dft2 : 32;

                            /* Bits[31:0], Access Type=RW/P, default=0x0000002C*/

                            /*
                               [63:6] - unused [5:0] - OTC version of min IRP
                               NP credits. OTC no longer uses
                               OTCPOOLCRDTS_1_0_0_CFG::Pool_NP_Min field (only
                               IRP does)
                            */

  } Bits;
  UINT32 Data;

} OTCCTRL45_N0_IIO_VTD_STRUCT;

/* OTCCTRL45_N1_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x208005b4)                                                      */
/*      SPRB0 (0x208005b4)                                                      */
/*      SPRHBM (0x208005b4)                                                     */
/*      SPRC0 (0x208005b4)                                                      */
/*      SPRMCC (0x208005b4)                                                     */
/*      SPRUCC (0x208005b4)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* OTC control 45
*/


#define OTCCTRL45_N1_IIO_VTD_REG 0x110205B4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 misc_dft2 : 32;

                            /* Bits[31:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               [63:6] - unused [5:0] - OTC version of min IRP
                               NP credits. OTC no longer uses
                               OTCPOOLCRDTS_1_0_0_CFG::Pool_NP_Min field (only
                               IRP does)
                            */

  } Bits;
  UINT32 Data;

} OTCCTRL45_N1_IIO_VTD_STRUCT;

/* OTCVCLN_N0_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x208005b8)                                                      */
/*      SPRB0 (0x208005b8)                                                      */
/*      SPRHBM (0x208005b8)                                                     */
/*      SPRC0 (0x208005b8)                                                      */
/*      SPRMCC (0x208005b8)                                                     */
/*      SPRUCC (0x208005b8)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* post-viral memory dump window
*/


#define OTCVCLN_N0_IIO_VTD_REG 0x110205B8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 vclean_enable : 1;

                            /* Bits[0:0], Access Type=RW/P, default=0x00000000*/

                            /* clean_enable_dev0 */
    UINT32 vclean_size : 24;

                            /* Bits[24:1], Access Type=RW/P, default=0x00000000*/

                            /* vclean_size_dev0 */
    UINT32 vclean_base : 7;

                            /* Bits[31:25], Access Type=RW/P, default=0x00000000*/

                            /* vclean_base_dev0 */

  } Bits;
  UINT32 Data;

} OTCVCLN_N0_IIO_VTD_STRUCT;

/* OTCVCLN_N1_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x208005bc)                                                      */
/*      SPRB0 (0x208005bc)                                                      */
/*      SPRHBM (0x208005bc)                                                     */
/*      SPRC0 (0x208005bc)                                                      */
/*      SPRMCC (0x208005bc)                                                     */
/*      SPRUCC (0x208005bc)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* post-viral memory dump window
*/


#define OTCVCLN_N1_IIO_VTD_REG 0x110205BC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 vclean_base : 13;

                            /* Bits[12:0], Access Type=RW/P, default=0x00000000*/

                            /* vclean_base_dev0 */
    UINT32 ltlck_spare : 19;

                            /* Bits[31:13], Access Type=RW/P, default=0x00000000*/

                            /* ltlck_spare */

  } Bits;
  UINT32 Data;

} OTCVCLN_N1_IIO_VTD_STRUCT;

/* PERFCTRLSTS_CH0_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x208005c0)                                                      */
/*      SPRB0 (0x208005c0)                                                      */
/*      SPRHBM (0x208005c0)                                                     */
/*      SPRC0 (0x208005c0)                                                      */
/*      SPRMCC (0x208005c0)                                                     */
/*      SPRUCC (0x208005c0)                                                     */
/* Register default value on SPRA0: 0x00020091                                  */
/* Register default value on SPRB0: 0x00020091                                  */
/* Register default value on SPRHBM: 0x00020091                                 */
/* Register default value on SPRC0: 0x00020091                                  */
/* Register default value on SPRMCC: 0x00020091                                 */
/* Register default value on SPRUCC: 0x00020091                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Performance Control and Status for IOSF Channel
*/


#define PERFCTRLSTS_CH0_IIO_VTD_REG 0x110205C0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 read_stream_policy : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000001*/

                            /* Read Stream Policy */
    UINT32 read_passing_read_disable : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               NOT IMPLEMENTED. MS2IOSF does not support
                               reordering of read requests within a channel,
                               but may do so in a future implementation.
                            */
    UINT32 rsvd : 1;

                            /* Bits[2:2], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 nosnoopopwren : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Enable No-Snoop on VC0 writes received on this
                               port[br] This applies to writes with the
                               following conditions:[br] NS=1 AND (TPH=0 OR
                               TPHDIS=1)[br] 1: Inbound writes to memory with
                               above conditions will be treated as non-coherent
                               (no snoops) writes - MS2IOSF will use the non-
                               allocating NS flow[br] 0: Inbound writes to
                               memory with above conditions will be treated as
                               allocating writes.[br] Notes:[br] - If TPH=1 and
                               TPHDIS=0 then NS is ignored and this bit is
                               ignored[br] - VC1/VCm writes are not controlled
                               by this bit since they are always non-snoop and
                               can be no other way.[br] - TPH and
                               ForceNoSnoopWrEn have higher precedence than
                               this bit
                            */
    UINT32 read_stream_interleave_size : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000001*/

                            /* Read Stream Interleave Size */
    UINT32 forcenosnoopwren : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Force No-Snoop on VC0 writes received on this
                               port[br] 1: All writes received on this port are
                               treated as though the NS bit is set and will use
                               the Non-Snoop non-allocating flow.[br] 0: Writes
                               will be treated as non-snoop only if the NS bit
                               is set and the NoSnoopWrEn bit is set.[br]
                               Notes:[br] - VC1/VCm traffic is not impacted by
                               this bit since all writes from VC1 and VCm are
                               always Non-Snoop[br] - This bit has precedence
                               over the NoSnoopWrEn field in this register[br]
                               - Forcing writes to be non-snoop with this bit
                               takes precedence over TPH
                            */
    UINT32 implicit_nosnoop : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               1: Issue CLFlush for every remote socket
                               cacheline if TH=0 or Prioritize_TPH = 0[br] 0:
                               do not force CLFlush for these writes[br] Note:
                               This bit should not be set at the same time as
                               Implicit_TPH (Implicit_NoSnoop gets priority)
                            */
    UINT32 use_allocating_flow_wr : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               Force all Snooping writes from this port will
                               use the Allocating Flow[br] 1: All Snooping
                               writes received on this port use the allocating
                               flow[br] 0: All Snooping Writes will use the
                               Non-Allocating Flow[br] Notes:[br] - VC1/VCm
                               traffic is not impacted by this bit since all
                               writes from VC1 and VCm are always Non-Snoop
                            */
    UINT32 rsvd_8 : 2;

                            /* Bits[9:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 partial_cohrd_op : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/
    UINT32 rsvd_11 : 1;

                            /* Bits[11:11], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 disable_ro : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Disables Relaxed Ordering for this Channel. If
                               set, all writes are treated as though RO=0.
                            */
    UINT32 force_ro : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Forces Relaxed Ordering for this Channel. If
                               set, all writes are treated as though RO=1,
                               except MSIs.
                            */
    UINT32 rsvd_14 : 2;

                            /* Bits[15:14], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 disable_tph : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               TLP Processing Hint Disable[br] When set, writes
                               or reads with TPH=1, will be treated as if
                               TPH=0. Refer to the Transaction Flow chapter for
                               details about the flows for the different cases
                               of TPH.
                            */
    UINT32 prioritize_tph : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000001*/

                            /*
                               If TH bit is set on a cacheline belonging to the
                               remote socket:[br] 1: the writeback phase uses
                               WbPushMtoI[br] 0: the writeback will use
                               CLCleanse
                            */
    UINT32 implicit_tph : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               1: all snooping writes are treated as though
                               TH=1[br] 0: snooping writes will use TH value
                               received
                            */
    UINT32 rsvd_19 : 13;

                            /* Bits[31:19], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} PERFCTRLSTS_CH0_IIO_VTD_STRUCT;

/* MISCCTRLSTS_CH0_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x208005c4)                                                      */
/*      SPRB0 (0x208005c4)                                                      */
/*      SPRHBM (0x208005c4)                                                     */
/*      SPRC0 (0x208005c4)                                                      */
/*      SPRMCC (0x208005c4)                                                     */
/*      SPRUCC (0x208005c4)                                                     */
/* Register default value on SPRA0: 0x00800000                                  */
/* Register default value on SPRB0: 0x00A00000                                  */
/* Register default value on SPRHBM: 0x00A00000                                 */
/* Register default value on SPRC0: 0x00A00000                                  */
/* Register default value on SPRMCC: 0x00A00000                                 */
/* Register default value on SPRUCC: 0x00A00000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Miscellaneous Control and Status for IOSF Channel
*/


#define MISCCTRLSTS_CH0_IIO_VTD_REG 0x110205C4

#if defined(SPRA0_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vc1_read_bypass_write : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               0: Reads push writes within this channel[br] -1:
                               Reads are allowed to bypass blocked writes
                               within this channel
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 problematic_channel_for_lock_flows : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               This bit is set by BIOS when it knows that this
                               channel port is connected to a device that
                               creates Posted-Posted dependency on its In-Out
                               queues. BIOS writers must read the 'Ordering
                               Chapter' of MS2IOSF HAS to get a complete list
                               of devices that are considered to have this
                               dependency.[br] Briefly, this bit may be set on
                               a link if:[br] This channel is connected to an
                               NTB port.[br] This channel is connected to a
                               buggy Intel NIC device: one of
                               zoar/Oplin/Hartwell or any other PCIe device
                               that has a Posted-Posted dependency.[br] MS2IOSF
                               lock flows depend on the setting of this bit to
                               treat this port in a special way during the
                               flows. Note that if BIOS is setting up the lock
                               flow to be in the 'UPI compatible' mode (refer
                               to UBOX HAS for details), then this bit must be
                               set to 0.
                            */
    UINT32 rsvd_7 : 4;

                            /* Bits[10:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 do_not_block_during_lock : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if the channel
                               should NOT be blocked (1 = do not block).
                            */
    UINT32 enable_isoch : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /* The channel is enabled as an Isoch channel */
    UINT32 no_channel_throttle_in_quiesce : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               During Quiesce, this channel would not throttle
                               if this bit is set.
                            */
    UINT32 allow_one_np_os : 1;

                            /* Bits[14:14], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 dis_hdr_storage : 1;

                            /* Bits[15:15], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_16 : 5;

                            /* Bits[20:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 zero_ob_tc : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MISCCTRLSTS_CH0_IIO_VTD_SPRA0_STRUCT;
#endif /* (SPRA0_HOST) */

#if defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vc1_read_bypass_write : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               0: Reads push writes within this channel[br] -1:
                               Reads are allowed to bypass blocked writes
                               within this channel
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 problematic_channel_for_lock_flows : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               This bit is set by BIOS when it knows that this
                               channel port is connected to a device that
                               creates Posted-Posted dependency on its In-Out
                               queues. BIOS writers must read the 'Ordering
                               Chapter' of MS2IOSF HAS to get a complete list
                               of devices that are considered to have this
                               dependency.[br] Briefly, this bit may be set on
                               a link if:[br] This channel is connected to an
                               NTB port.[br] This channel is connected to a
                               buggy Intel NIC device: one of
                               zoar/Oplin/Hartwell or any other PCIe device
                               that has a Posted-Posted dependency.[br] MS2IOSF
                               lock flows depend on the setting of this bit to
                               treat this port in a special way during the
                               flows. Note that if BIOS is setting up the lock
                               flow to be in the 'UPI compatible' mode (refer
                               to UBOX HAS for details), then this bit must be
                               set to 0.
                            */
    UINT32 rsvd_7 : 4;

                            /* Bits[10:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 do_not_block_during_lock : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if the channel
                               should NOT be blocked (1 = do not block).
                            */
    UINT32 enable_isoch : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /* The channel is enabled as an Isoch channel */
    UINT32 no_channel_throttle_in_quiesce : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               During Quiesce, this channel would not throttle
                               if this bit is set.
                            */
    UINT32 allow_one_np_os : 1;

                            /* Bits[14:14], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 dis_hdr_storage : 1;

                            /* Bits[15:15], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_16 : 5;

                            /* Bits[20:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 zero_ob_tc : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000001*/

                            /*
                               Zero out the TC field for outbound requests (P
                               and NP only)
                            */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 block_non_posted_only_during_lock : 1;

                            /* Bits[24:24], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if for the channel
                               only Non-Posteds should be blocked
                            */
    UINT32 rsvd_25 : 7;

                            /* Bits[31:25], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MISCCTRLSTS_CH0_IIO_VTD_SPRB0_SPRHBM_SPRC0_SPRMCC_SPRUCC_STRUCT;
#endif /* (SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vc1_read_bypass_write : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               0: Reads push writes within this channel[br] -1:
                               Reads are allowed to bypass blocked writes
                               within this channel
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 problematic_channel_for_lock_flows : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               This bit is set by BIOS when it knows that this
                               channel port is connected to a device that
                               creates Posted-Posted dependency on its In-Out
                               queues. BIOS writers must read the 'Ordering
                               Chapter' of MS2IOSF HAS to get a complete list
                               of devices that are considered to have this
                               dependency.[br] Briefly, this bit may be set on
                               a link if:[br] This channel is connected to an
                               NTB port.[br] This channel is connected to a
                               buggy Intel NIC device: one of
                               zoar/Oplin/Hartwell or any other PCIe device
                               that has a Posted-Posted dependency.[br] MS2IOSF
                               lock flows depend on the setting of this bit to
                               treat this port in a special way during the
                               flows. Note that if BIOS is setting up the lock
                               flow to be in the 'UPI compatible' mode (refer
                               to UBOX HAS for details), then this bit must be
                               set to 0.
                            */
    UINT32 rsvd_7 : 4;

                            /* Bits[10:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 do_not_block_during_lock : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if the channel
                               should NOT be blocked (1 = do not block).
                            */
    UINT32 enable_isoch : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /* The channel is enabled as an Isoch channel */
    UINT32 no_channel_throttle_in_quiesce : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               During Quiesce, this channel would not throttle
                               if this bit is set.
                            */
    UINT32 allow_one_np_os : 1;

                            /* Bits[14:14], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 dis_hdr_storage : 1;

                            /* Bits[15:15], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_16 : 5;

                            /* Bits[20:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 zero_ob_tc : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MISCCTRLSTS_CH0_IIO_VTD_STRUCT;

/* PERFCTRLSTS_CH1_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x208005c8)                                                      */
/*      SPRB0 (0x208005c8)                                                      */
/*      SPRHBM (0x208005c8)                                                     */
/*      SPRC0 (0x208005c8)                                                      */
/*      SPRMCC (0x208005c8)                                                     */
/*      SPRUCC (0x208005c8)                                                     */
/* Register default value on SPRA0: 0x00020091                                  */
/* Register default value on SPRB0: 0x00020091                                  */
/* Register default value on SPRHBM: 0x00020091                                 */
/* Register default value on SPRC0: 0x00020091                                  */
/* Register default value on SPRMCC: 0x00020091                                 */
/* Register default value on SPRUCC: 0x00020091                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Performance Control and Status for IOSF Channel
*/


#define PERFCTRLSTS_CH1_IIO_VTD_REG 0x110205C8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 read_stream_policy : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000001*/

                            /* Read Stream Policy */
    UINT32 read_passing_read_disable : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               NOT IMPLEMENTED. MS2IOSF does not support
                               reordering of read requests within a channel,
                               but may do so in a future implementation.
                            */
    UINT32 rsvd : 1;

                            /* Bits[2:2], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 nosnoopopwren : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Enable No-Snoop on VC0 writes received on this
                               port[br] This applies to writes with the
                               following conditions:[br] NS=1 AND (TPH=0 OR
                               TPHDIS=1)[br] 1: Inbound writes to memory with
                               above conditions will be treated as non-coherent
                               (no snoops) writes - MS2IOSF will use the non-
                               allocating NS flow[br] 0: Inbound writes to
                               memory with above conditions will be treated as
                               allocating writes.[br] Notes:[br] - If TPH=1 and
                               TPHDIS=0 then NS is ignored and this bit is
                               ignored[br] - VC1/VCm writes are not controlled
                               by this bit since they are always non-snoop and
                               can be no other way.[br] - TPH and
                               ForceNoSnoopWrEn have higher precedence than
                               this bit
                            */
    UINT32 read_stream_interleave_size : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000001*/

                            /* Read Stream Interleave Size */
    UINT32 forcenosnoopwren : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Force No-Snoop on VC0 writes received on this
                               port[br] 1: All writes received on this port are
                               treated as though the NS bit is set and will use
                               the Non-Snoop non-allocating flow.[br] 0: Writes
                               will be treated as non-snoop only if the NS bit
                               is set and the NoSnoopWrEn bit is set.[br]
                               Notes:[br] - VC1/VCm traffic is not impacted by
                               this bit since all writes from VC1 and VCm are
                               always Non-Snoop[br] - This bit has precedence
                               over the NoSnoopWrEn field in this register[br]
                               - Forcing writes to be non-snoop with this bit
                               takes precedence over TPH
                            */
    UINT32 implicit_nosnoop : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               1: Issue CLFlush for every remote socket
                               cacheline if TH=0 or Prioritize_TPH = 0[br] 0:
                               do not force CLFlush for these writes[br] Note:
                               This bit should not be set at the same time as
                               Implicit_TPH (Implicit_NoSnoop gets priority)
                            */
    UINT32 use_allocating_flow_wr : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               Force all Snooping writes from this port will
                               use the Allocating Flow[br] 1: All Snooping
                               writes received on this port use the allocating
                               flow[br] 0: All Snooping Writes will use the
                               Non-Allocating Flow[br] Notes:[br] - VC1/VCm
                               traffic is not impacted by this bit since all
                               writes from VC1 and VCm are always Non-Snoop
                            */
    UINT32 rsvd_8 : 2;

                            /* Bits[9:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 partial_cohrd_op : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/
    UINT32 rsvd_11 : 1;

                            /* Bits[11:11], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 disable_ro : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Disables Relaxed Ordering for this Channel. If
                               set, all writes are treated as though RO=0.
                            */
    UINT32 force_ro : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Forces Relaxed Ordering for this Channel. If
                               set, all writes are treated as though RO=1,
                               except MSIs.
                            */
    UINT32 rsvd_14 : 2;

                            /* Bits[15:14], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 disable_tph : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               TLP Processing Hint Disable[br] When set, writes
                               or reads with TPH=1, will be treated as if
                               TPH=0. Refer to the Transaction Flow chapter for
                               details about the flows for the different cases
                               of TPH.
                            */
    UINT32 prioritize_tph : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000001*/

                            /*
                               If TH bit is set on a cacheline belonging to the
                               remote socket:[br] 1: the writeback phase uses
                               WbPushMtoI[br] 0: the writeback will use
                               CLCleanse
                            */
    UINT32 implicit_tph : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               1: all snooping writes are treated as though
                               TH=1[br] 0: snooping writes will use TH value
                               received
                            */
    UINT32 rsvd_19 : 13;

                            /* Bits[31:19], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} PERFCTRLSTS_CH1_IIO_VTD_STRUCT;

/* MISCCTRLSTS_CH1_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x208005cc)                                                      */
/*      SPRB0 (0x208005cc)                                                      */
/*      SPRHBM (0x208005cc)                                                     */
/*      SPRC0 (0x208005cc)                                                      */
/*      SPRMCC (0x208005cc)                                                     */
/*      SPRUCC (0x208005cc)                                                     */
/* Register default value on SPRA0: 0x00800000                                  */
/* Register default value on SPRB0: 0x00A00000                                  */
/* Register default value on SPRHBM: 0x00A00000                                 */
/* Register default value on SPRC0: 0x00A00000                                  */
/* Register default value on SPRMCC: 0x00A00000                                 */
/* Register default value on SPRUCC: 0x00A00000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Miscellaneous Control and Status for IOSF Channel
*/


#define MISCCTRLSTS_CH1_IIO_VTD_REG 0x110205CC

#if defined(SPRA0_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vc1_read_bypass_write : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               0: Reads push writes within this channel[br] -1:
                               Reads are allowed to bypass blocked writes
                               within this channel
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 problematic_channel_for_lock_flows : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               This bit is set by BIOS when it knows that this
                               channel port is connected to a device that
                               creates Posted-Posted dependency on its In-Out
                               queues. BIOS writers must read the 'Ordering
                               Chapter' of MS2IOSF HAS to get a complete list
                               of devices that are considered to have this
                               dependency.[br] Briefly, this bit may be set on
                               a link if:[br] This channel is connected to an
                               NTB port.[br] This channel is connected to a
                               buggy Intel NIC device: one of
                               zoar/Oplin/Hartwell or any other PCIe device
                               that has a Posted-Posted dependency.[br] MS2IOSF
                               lock flows depend on the setting of this bit to
                               treat this port in a special way during the
                               flows. Note that if BIOS is setting up the lock
                               flow to be in the 'UPI compatible' mode (refer
                               to UBOX HAS for details), then this bit must be
                               set to 0.
                            */
    UINT32 rsvd_7 : 4;

                            /* Bits[10:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 do_not_block_during_lock : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if the channel
                               should NOT be blocked (1 = do not block).
                            */
    UINT32 enable_isoch : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /* The channel is enabled as an Isoch channel */
    UINT32 no_channel_throttle_in_quiesce : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               During Quiesce, this channel would not throttle
                               if this bit is set.
                            */
    UINT32 allow_one_np_os : 1;

                            /* Bits[14:14], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 dis_hdr_storage : 1;

                            /* Bits[15:15], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_16 : 5;

                            /* Bits[20:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 zero_ob_tc : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MISCCTRLSTS_CH1_IIO_VTD_SPRA0_STRUCT;
#endif /* (SPRA0_HOST) */

#if defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vc1_read_bypass_write : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               0: Reads push writes within this channel[br] -1:
                               Reads are allowed to bypass blocked writes
                               within this channel
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 problematic_channel_for_lock_flows : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               This bit is set by BIOS when it knows that this
                               channel port is connected to a device that
                               creates Posted-Posted dependency on its In-Out
                               queues. BIOS writers must read the 'Ordering
                               Chapter' of MS2IOSF HAS to get a complete list
                               of devices that are considered to have this
                               dependency.[br] Briefly, this bit may be set on
                               a link if:[br] This channel is connected to an
                               NTB port.[br] This channel is connected to a
                               buggy Intel NIC device: one of
                               zoar/Oplin/Hartwell or any other PCIe device
                               that has a Posted-Posted dependency.[br] MS2IOSF
                               lock flows depend on the setting of this bit to
                               treat this port in a special way during the
                               flows. Note that if BIOS is setting up the lock
                               flow to be in the 'UPI compatible' mode (refer
                               to UBOX HAS for details), then this bit must be
                               set to 0.
                            */
    UINT32 rsvd_7 : 4;

                            /* Bits[10:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 do_not_block_during_lock : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if the channel
                               should NOT be blocked (1 = do not block).
                            */
    UINT32 enable_isoch : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /* The channel is enabled as an Isoch channel */
    UINT32 no_channel_throttle_in_quiesce : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               During Quiesce, this channel would not throttle
                               if this bit is set.
                            */
    UINT32 allow_one_np_os : 1;

                            /* Bits[14:14], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 dis_hdr_storage : 1;

                            /* Bits[15:15], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_16 : 5;

                            /* Bits[20:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 zero_ob_tc : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000001*/

                            /*
                               Zero out the TC field for outbound requests (P
                               and NP only)
                            */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 block_non_posted_only_during_lock : 1;

                            /* Bits[24:24], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if for the channel
                               only Non-Posteds should be blocked
                            */
    UINT32 rsvd_25 : 7;

                            /* Bits[31:25], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MISCCTRLSTS_CH1_IIO_VTD_SPRB0_SPRHBM_SPRC0_SPRMCC_SPRUCC_STRUCT;
#endif /* (SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vc1_read_bypass_write : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               0: Reads push writes within this channel[br] -1:
                               Reads are allowed to bypass blocked writes
                               within this channel
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 problematic_channel_for_lock_flows : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               This bit is set by BIOS when it knows that this
                               channel port is connected to a device that
                               creates Posted-Posted dependency on its In-Out
                               queues. BIOS writers must read the 'Ordering
                               Chapter' of MS2IOSF HAS to get a complete list
                               of devices that are considered to have this
                               dependency.[br] Briefly, this bit may be set on
                               a link if:[br] This channel is connected to an
                               NTB port.[br] This channel is connected to a
                               buggy Intel NIC device: one of
                               zoar/Oplin/Hartwell or any other PCIe device
                               that has a Posted-Posted dependency.[br] MS2IOSF
                               lock flows depend on the setting of this bit to
                               treat this port in a special way during the
                               flows. Note that if BIOS is setting up the lock
                               flow to be in the 'UPI compatible' mode (refer
                               to UBOX HAS for details), then this bit must be
                               set to 0.
                            */
    UINT32 rsvd_7 : 4;

                            /* Bits[10:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 do_not_block_during_lock : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if the channel
                               should NOT be blocked (1 = do not block).
                            */
    UINT32 enable_isoch : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /* The channel is enabled as an Isoch channel */
    UINT32 no_channel_throttle_in_quiesce : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               During Quiesce, this channel would not throttle
                               if this bit is set.
                            */
    UINT32 allow_one_np_os : 1;

                            /* Bits[14:14], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 dis_hdr_storage : 1;

                            /* Bits[15:15], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_16 : 5;

                            /* Bits[20:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 zero_ob_tc : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MISCCTRLSTS_CH1_IIO_VTD_STRUCT;

/* PERFCTRLSTS_CH2_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x208005d0)                                                      */
/*      SPRB0 (0x208005d0)                                                      */
/*      SPRHBM (0x208005d0)                                                     */
/*      SPRC0 (0x208005d0)                                                      */
/*      SPRMCC (0x208005d0)                                                     */
/*      SPRUCC (0x208005d0)                                                     */
/* Register default value on SPRA0: 0x00020091                                  */
/* Register default value on SPRB0: 0x00020091                                  */
/* Register default value on SPRHBM: 0x00020091                                 */
/* Register default value on SPRC0: 0x00020091                                  */
/* Register default value on SPRMCC: 0x00020091                                 */
/* Register default value on SPRUCC: 0x00020091                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Performance Control and Status for IOSF Channel
*/


#define PERFCTRLSTS_CH2_IIO_VTD_REG 0x110205D0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 read_stream_policy : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000001*/

                            /* Read Stream Policy */
    UINT32 read_passing_read_disable : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               NOT IMPLEMENTED. MS2IOSF does not support
                               reordering of read requests within a channel,
                               but may do so in a future implementation.
                            */
    UINT32 rsvd : 1;

                            /* Bits[2:2], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 nosnoopopwren : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Enable No-Snoop on VC0 writes received on this
                               port[br] This applies to writes with the
                               following conditions:[br] NS=1 AND (TPH=0 OR
                               TPHDIS=1)[br] 1: Inbound writes to memory with
                               above conditions will be treated as non-coherent
                               (no snoops) writes - MS2IOSF will use the non-
                               allocating NS flow[br] 0: Inbound writes to
                               memory with above conditions will be treated as
                               allocating writes.[br] Notes:[br] - If TPH=1 and
                               TPHDIS=0 then NS is ignored and this bit is
                               ignored[br] - VC1/VCm writes are not controlled
                               by this bit since they are always non-snoop and
                               can be no other way.[br] - TPH and
                               ForceNoSnoopWrEn have higher precedence than
                               this bit
                            */
    UINT32 read_stream_interleave_size : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000001*/

                            /* Read Stream Interleave Size */
    UINT32 forcenosnoopwren : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Force No-Snoop on VC0 writes received on this
                               port[br] 1: All writes received on this port are
                               treated as though the NS bit is set and will use
                               the Non-Snoop non-allocating flow.[br] 0: Writes
                               will be treated as non-snoop only if the NS bit
                               is set and the NoSnoopWrEn bit is set.[br]
                               Notes:[br] - VC1/VCm traffic is not impacted by
                               this bit since all writes from VC1 and VCm are
                               always Non-Snoop[br] - This bit has precedence
                               over the NoSnoopWrEn field in this register[br]
                               - Forcing writes to be non-snoop with this bit
                               takes precedence over TPH
                            */
    UINT32 implicit_nosnoop : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               1: Issue CLFlush for every remote socket
                               cacheline if TH=0 or Prioritize_TPH = 0[br] 0:
                               do not force CLFlush for these writes[br] Note:
                               This bit should not be set at the same time as
                               Implicit_TPH (Implicit_NoSnoop gets priority)
                            */
    UINT32 use_allocating_flow_wr : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               Force all Snooping writes from this port will
                               use the Allocating Flow[br] 1: All Snooping
                               writes received on this port use the allocating
                               flow[br] 0: All Snooping Writes will use the
                               Non-Allocating Flow[br] Notes:[br] - VC1/VCm
                               traffic is not impacted by this bit since all
                               writes from VC1 and VCm are always Non-Snoop
                            */
    UINT32 rsvd_8 : 2;

                            /* Bits[9:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 partial_cohrd_op : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/
    UINT32 rsvd_11 : 1;

                            /* Bits[11:11], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 disable_ro : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Disables Relaxed Ordering for this Channel. If
                               set, all writes are treated as though RO=0.
                            */
    UINT32 force_ro : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Forces Relaxed Ordering for this Channel. If
                               set, all writes are treated as though RO=1,
                               except MSIs.
                            */
    UINT32 rsvd_14 : 2;

                            /* Bits[15:14], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 disable_tph : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               TLP Processing Hint Disable[br] When set, writes
                               or reads with TPH=1, will be treated as if
                               TPH=0. Refer to the Transaction Flow chapter for
                               details about the flows for the different cases
                               of TPH.
                            */
    UINT32 prioritize_tph : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000001*/

                            /*
                               If TH bit is set on a cacheline belonging to the
                               remote socket:[br] 1: the writeback phase uses
                               WbPushMtoI[br] 0: the writeback will use
                               CLCleanse
                            */
    UINT32 implicit_tph : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               1: all snooping writes are treated as though
                               TH=1[br] 0: snooping writes will use TH value
                               received
                            */
    UINT32 rsvd_19 : 13;

                            /* Bits[31:19], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} PERFCTRLSTS_CH2_IIO_VTD_STRUCT;

/* MISCCTRLSTS_CH2_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x208005d4)                                                      */
/*      SPRB0 (0x208005d4)                                                      */
/*      SPRHBM (0x208005d4)                                                     */
/*      SPRC0 (0x208005d4)                                                      */
/*      SPRMCC (0x208005d4)                                                     */
/*      SPRUCC (0x208005d4)                                                     */
/* Register default value on SPRA0: 0x00800000                                  */
/* Register default value on SPRB0: 0x00A00000                                  */
/* Register default value on SPRHBM: 0x00A00000                                 */
/* Register default value on SPRC0: 0x00A00000                                  */
/* Register default value on SPRMCC: 0x00A00000                                 */
/* Register default value on SPRUCC: 0x00A00000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Miscellaneous Control and Status for IOSF Channel
*/


#define MISCCTRLSTS_CH2_IIO_VTD_REG 0x110205D4

#if defined(SPRA0_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vc1_read_bypass_write : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               0: Reads push writes within this channel[br] -1:
                               Reads are allowed to bypass blocked writes
                               within this channel
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 problematic_channel_for_lock_flows : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               This bit is set by BIOS when it knows that this
                               channel port is connected to a device that
                               creates Posted-Posted dependency on its In-Out
                               queues. BIOS writers must read the 'Ordering
                               Chapter' of MS2IOSF HAS to get a complete list
                               of devices that are considered to have this
                               dependency.[br] Briefly, this bit may be set on
                               a link if:[br] This channel is connected to an
                               NTB port.[br] This channel is connected to a
                               buggy Intel NIC device: one of
                               zoar/Oplin/Hartwell or any other PCIe device
                               that has a Posted-Posted dependency.[br] MS2IOSF
                               lock flows depend on the setting of this bit to
                               treat this port in a special way during the
                               flows. Note that if BIOS is setting up the lock
                               flow to be in the 'UPI compatible' mode (refer
                               to UBOX HAS for details), then this bit must be
                               set to 0.
                            */
    UINT32 rsvd_7 : 4;

                            /* Bits[10:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 do_not_block_during_lock : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if the channel
                               should NOT be blocked (1 = do not block).
                            */
    UINT32 enable_isoch : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /* The channel is enabled as an Isoch channel */
    UINT32 no_channel_throttle_in_quiesce : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               During Quiesce, this channel would not throttle
                               if this bit is set.
                            */
    UINT32 allow_one_np_os : 1;

                            /* Bits[14:14], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 dis_hdr_storage : 1;

                            /* Bits[15:15], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_16 : 5;

                            /* Bits[20:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 zero_ob_tc : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MISCCTRLSTS_CH2_IIO_VTD_SPRA0_STRUCT;
#endif /* (SPRA0_HOST) */

#if defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vc1_read_bypass_write : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               0: Reads push writes within this channel[br] -1:
                               Reads are allowed to bypass blocked writes
                               within this channel
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 problematic_channel_for_lock_flows : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               This bit is set by BIOS when it knows that this
                               channel port is connected to a device that
                               creates Posted-Posted dependency on its In-Out
                               queues. BIOS writers must read the 'Ordering
                               Chapter' of MS2IOSF HAS to get a complete list
                               of devices that are considered to have this
                               dependency.[br] Briefly, this bit may be set on
                               a link if:[br] This channel is connected to an
                               NTB port.[br] This channel is connected to a
                               buggy Intel NIC device: one of
                               zoar/Oplin/Hartwell or any other PCIe device
                               that has a Posted-Posted dependency.[br] MS2IOSF
                               lock flows depend on the setting of this bit to
                               treat this port in a special way during the
                               flows. Note that if BIOS is setting up the lock
                               flow to be in the 'UPI compatible' mode (refer
                               to UBOX HAS for details), then this bit must be
                               set to 0.
                            */
    UINT32 rsvd_7 : 4;

                            /* Bits[10:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 do_not_block_during_lock : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if the channel
                               should NOT be blocked (1 = do not block).
                            */
    UINT32 enable_isoch : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /* The channel is enabled as an Isoch channel */
    UINT32 no_channel_throttle_in_quiesce : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               During Quiesce, this channel would not throttle
                               if this bit is set.
                            */
    UINT32 allow_one_np_os : 1;

                            /* Bits[14:14], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 dis_hdr_storage : 1;

                            /* Bits[15:15], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_16 : 5;

                            /* Bits[20:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 zero_ob_tc : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000001*/

                            /*
                               Zero out the TC field for outbound requests (P
                               and NP only)
                            */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 block_non_posted_only_during_lock : 1;

                            /* Bits[24:24], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if for the channel
                               only Non-Posteds should be blocked
                            */
    UINT32 rsvd_25 : 7;

                            /* Bits[31:25], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MISCCTRLSTS_CH2_IIO_VTD_SPRB0_SPRHBM_SPRC0_SPRMCC_SPRUCC_STRUCT;
#endif /* (SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vc1_read_bypass_write : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               0: Reads push writes within this channel[br] -1:
                               Reads are allowed to bypass blocked writes
                               within this channel
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 problematic_channel_for_lock_flows : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               This bit is set by BIOS when it knows that this
                               channel port is connected to a device that
                               creates Posted-Posted dependency on its In-Out
                               queues. BIOS writers must read the 'Ordering
                               Chapter' of MS2IOSF HAS to get a complete list
                               of devices that are considered to have this
                               dependency.[br] Briefly, this bit may be set on
                               a link if:[br] This channel is connected to an
                               NTB port.[br] This channel is connected to a
                               buggy Intel NIC device: one of
                               zoar/Oplin/Hartwell or any other PCIe device
                               that has a Posted-Posted dependency.[br] MS2IOSF
                               lock flows depend on the setting of this bit to
                               treat this port in a special way during the
                               flows. Note that if BIOS is setting up the lock
                               flow to be in the 'UPI compatible' mode (refer
                               to UBOX HAS for details), then this bit must be
                               set to 0.
                            */
    UINT32 rsvd_7 : 4;

                            /* Bits[10:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 do_not_block_during_lock : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if the channel
                               should NOT be blocked (1 = do not block).
                            */
    UINT32 enable_isoch : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /* The channel is enabled as an Isoch channel */
    UINT32 no_channel_throttle_in_quiesce : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               During Quiesce, this channel would not throttle
                               if this bit is set.
                            */
    UINT32 allow_one_np_os : 1;

                            /* Bits[14:14], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 dis_hdr_storage : 1;

                            /* Bits[15:15], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_16 : 5;

                            /* Bits[20:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 zero_ob_tc : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MISCCTRLSTS_CH2_IIO_VTD_STRUCT;

/* PERFCTRLSTS_CH3_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x208005d8)                                                      */
/*      SPRB0 (0x208005d8)                                                      */
/*      SPRHBM (0x208005d8)                                                     */
/*      SPRC0 (0x208005d8)                                                      */
/*      SPRMCC (0x208005d8)                                                     */
/*      SPRUCC (0x208005d8)                                                     */
/* Register default value on SPRA0: 0x00020091                                  */
/* Register default value on SPRB0: 0x00020091                                  */
/* Register default value on SPRHBM: 0x00020091                                 */
/* Register default value on SPRC0: 0x00020091                                  */
/* Register default value on SPRMCC: 0x00020091                                 */
/* Register default value on SPRUCC: 0x00020091                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Performance Control and Status for IOSF Channel
*/


#define PERFCTRLSTS_CH3_IIO_VTD_REG 0x110205D8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 read_stream_policy : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000001*/

                            /* Read Stream Policy */
    UINT32 read_passing_read_disable : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               NOT IMPLEMENTED. MS2IOSF does not support
                               reordering of read requests within a channel,
                               but may do so in a future implementation.
                            */
    UINT32 rsvd : 1;

                            /* Bits[2:2], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 nosnoopopwren : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Enable No-Snoop on VC0 writes received on this
                               port[br] This applies to writes with the
                               following conditions:[br] NS=1 AND (TPH=0 OR
                               TPHDIS=1)[br] 1: Inbound writes to memory with
                               above conditions will be treated as non-coherent
                               (no snoops) writes - MS2IOSF will use the non-
                               allocating NS flow[br] 0: Inbound writes to
                               memory with above conditions will be treated as
                               allocating writes.[br] Notes:[br] - If TPH=1 and
                               TPHDIS=0 then NS is ignored and this bit is
                               ignored[br] - VC1/VCm writes are not controlled
                               by this bit since they are always non-snoop and
                               can be no other way.[br] - TPH and
                               ForceNoSnoopWrEn have higher precedence than
                               this bit
                            */
    UINT32 read_stream_interleave_size : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000001*/

                            /* Read Stream Interleave Size */
    UINT32 forcenosnoopwren : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Force No-Snoop on VC0 writes received on this
                               port[br] 1: All writes received on this port are
                               treated as though the NS bit is set and will use
                               the Non-Snoop non-allocating flow.[br] 0: Writes
                               will be treated as non-snoop only if the NS bit
                               is set and the NoSnoopWrEn bit is set.[br]
                               Notes:[br] - VC1/VCm traffic is not impacted by
                               this bit since all writes from VC1 and VCm are
                               always Non-Snoop[br] - This bit has precedence
                               over the NoSnoopWrEn field in this register[br]
                               - Forcing writes to be non-snoop with this bit
                               takes precedence over TPH
                            */
    UINT32 implicit_nosnoop : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               1: Issue CLFlush for every remote socket
                               cacheline if TH=0 or Prioritize_TPH = 0[br] 0:
                               do not force CLFlush for these writes[br] Note:
                               This bit should not be set at the same time as
                               Implicit_TPH (Implicit_NoSnoop gets priority)
                            */
    UINT32 use_allocating_flow_wr : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               Force all Snooping writes from this port will
                               use the Allocating Flow[br] 1: All Snooping
                               writes received on this port use the allocating
                               flow[br] 0: All Snooping Writes will use the
                               Non-Allocating Flow[br] Notes:[br] - VC1/VCm
                               traffic is not impacted by this bit since all
                               writes from VC1 and VCm are always Non-Snoop
                            */
    UINT32 rsvd_8 : 2;

                            /* Bits[9:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 partial_cohrd_op : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/
    UINT32 rsvd_11 : 1;

                            /* Bits[11:11], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 disable_ro : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Disables Relaxed Ordering for this Channel. If
                               set, all writes are treated as though RO=0.
                            */
    UINT32 force_ro : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Forces Relaxed Ordering for this Channel. If
                               set, all writes are treated as though RO=1,
                               except MSIs.
                            */
    UINT32 rsvd_14 : 2;

                            /* Bits[15:14], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 disable_tph : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               TLP Processing Hint Disable[br] When set, writes
                               or reads with TPH=1, will be treated as if
                               TPH=0. Refer to the Transaction Flow chapter for
                               details about the flows for the different cases
                               of TPH.
                            */
    UINT32 prioritize_tph : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000001*/

                            /*
                               If TH bit is set on a cacheline belonging to the
                               remote socket:[br] 1: the writeback phase uses
                               WbPushMtoI[br] 0: the writeback will use
                               CLCleanse
                            */
    UINT32 implicit_tph : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               1: all snooping writes are treated as though
                               TH=1[br] 0: snooping writes will use TH value
                               received
                            */
    UINT32 rsvd_19 : 13;

                            /* Bits[31:19], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} PERFCTRLSTS_CH3_IIO_VTD_STRUCT;

/* MISCCTRLSTS_CH3_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x208005dc)                                                      */
/*      SPRB0 (0x208005dc)                                                      */
/*      SPRHBM (0x208005dc)                                                     */
/*      SPRC0 (0x208005dc)                                                      */
/*      SPRMCC (0x208005dc)                                                     */
/*      SPRUCC (0x208005dc)                                                     */
/* Register default value on SPRA0: 0x00800000                                  */
/* Register default value on SPRB0: 0x00A00000                                  */
/* Register default value on SPRHBM: 0x00A00000                                 */
/* Register default value on SPRC0: 0x00A00000                                  */
/* Register default value on SPRMCC: 0x00A00000                                 */
/* Register default value on SPRUCC: 0x00A00000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Miscellaneous Control and Status for IOSF Channel
*/


#define MISCCTRLSTS_CH3_IIO_VTD_REG 0x110205DC

#if defined(SPRA0_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vc1_read_bypass_write : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               0: Reads push writes within this channel[br] -1:
                               Reads are allowed to bypass blocked writes
                               within this channel
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 problematic_channel_for_lock_flows : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               This bit is set by BIOS when it knows that this
                               channel port is connected to a device that
                               creates Posted-Posted dependency on its In-Out
                               queues. BIOS writers must read the 'Ordering
                               Chapter' of MS2IOSF HAS to get a complete list
                               of devices that are considered to have this
                               dependency.[br] Briefly, this bit may be set on
                               a link if:[br] This channel is connected to an
                               NTB port.[br] This channel is connected to a
                               buggy Intel NIC device: one of
                               zoar/Oplin/Hartwell or any other PCIe device
                               that has a Posted-Posted dependency.[br] MS2IOSF
                               lock flows depend on the setting of this bit to
                               treat this port in a special way during the
                               flows. Note that if BIOS is setting up the lock
                               flow to be in the 'UPI compatible' mode (refer
                               to UBOX HAS for details), then this bit must be
                               set to 0.
                            */
    UINT32 rsvd_7 : 4;

                            /* Bits[10:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 do_not_block_during_lock : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if the channel
                               should NOT be blocked (1 = do not block).
                            */
    UINT32 enable_isoch : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /* The channel is enabled as an Isoch channel */
    UINT32 no_channel_throttle_in_quiesce : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               During Quiesce, this channel would not throttle
                               if this bit is set.
                            */
    UINT32 allow_one_np_os : 1;

                            /* Bits[14:14], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 dis_hdr_storage : 1;

                            /* Bits[15:15], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_16 : 5;

                            /* Bits[20:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 zero_ob_tc : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MISCCTRLSTS_CH3_IIO_VTD_SPRA0_STRUCT;
#endif /* (SPRA0_HOST) */

#if defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vc1_read_bypass_write : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               0: Reads push writes within this channel[br] -1:
                               Reads are allowed to bypass blocked writes
                               within this channel
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 problematic_channel_for_lock_flows : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               This bit is set by BIOS when it knows that this
                               channel port is connected to a device that
                               creates Posted-Posted dependency on its In-Out
                               queues. BIOS writers must read the 'Ordering
                               Chapter' of MS2IOSF HAS to get a complete list
                               of devices that are considered to have this
                               dependency.[br] Briefly, this bit may be set on
                               a link if:[br] This channel is connected to an
                               NTB port.[br] This channel is connected to a
                               buggy Intel NIC device: one of
                               zoar/Oplin/Hartwell or any other PCIe device
                               that has a Posted-Posted dependency.[br] MS2IOSF
                               lock flows depend on the setting of this bit to
                               treat this port in a special way during the
                               flows. Note that if BIOS is setting up the lock
                               flow to be in the 'UPI compatible' mode (refer
                               to UBOX HAS for details), then this bit must be
                               set to 0.
                            */
    UINT32 rsvd_7 : 4;

                            /* Bits[10:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 do_not_block_during_lock : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if the channel
                               should NOT be blocked (1 = do not block).
                            */
    UINT32 enable_isoch : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /* The channel is enabled as an Isoch channel */
    UINT32 no_channel_throttle_in_quiesce : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               During Quiesce, this channel would not throttle
                               if this bit is set.
                            */
    UINT32 allow_one_np_os : 1;

                            /* Bits[14:14], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 dis_hdr_storage : 1;

                            /* Bits[15:15], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_16 : 5;

                            /* Bits[20:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 zero_ob_tc : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000001*/

                            /*
                               Zero out the TC field for outbound requests (P
                               and NP only)
                            */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 block_non_posted_only_during_lock : 1;

                            /* Bits[24:24], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if for the channel
                               only Non-Posteds should be blocked
                            */
    UINT32 rsvd_25 : 7;

                            /* Bits[31:25], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MISCCTRLSTS_CH3_IIO_VTD_SPRB0_SPRHBM_SPRC0_SPRMCC_SPRUCC_STRUCT;
#endif /* (SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vc1_read_bypass_write : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               0: Reads push writes within this channel[br] -1:
                               Reads are allowed to bypass blocked writes
                               within this channel
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 problematic_channel_for_lock_flows : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               This bit is set by BIOS when it knows that this
                               channel port is connected to a device that
                               creates Posted-Posted dependency on its In-Out
                               queues. BIOS writers must read the 'Ordering
                               Chapter' of MS2IOSF HAS to get a complete list
                               of devices that are considered to have this
                               dependency.[br] Briefly, this bit may be set on
                               a link if:[br] This channel is connected to an
                               NTB port.[br] This channel is connected to a
                               buggy Intel NIC device: one of
                               zoar/Oplin/Hartwell or any other PCIe device
                               that has a Posted-Posted dependency.[br] MS2IOSF
                               lock flows depend on the setting of this bit to
                               treat this port in a special way during the
                               flows. Note that if BIOS is setting up the lock
                               flow to be in the 'UPI compatible' mode (refer
                               to UBOX HAS for details), then this bit must be
                               set to 0.
                            */
    UINT32 rsvd_7 : 4;

                            /* Bits[10:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 do_not_block_during_lock : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if the channel
                               should NOT be blocked (1 = do not block).
                            */
    UINT32 enable_isoch : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /* The channel is enabled as an Isoch channel */
    UINT32 no_channel_throttle_in_quiesce : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               During Quiesce, this channel would not throttle
                               if this bit is set.
                            */
    UINT32 allow_one_np_os : 1;

                            /* Bits[14:14], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 dis_hdr_storage : 1;

                            /* Bits[15:15], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_16 : 5;

                            /* Bits[20:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 zero_ob_tc : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MISCCTRLSTS_CH3_IIO_VTD_STRUCT;

/* PERFCTRLSTS_CH4_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x208005e0)                                                      */
/*      SPRB0 (0x208005e0)                                                      */
/*      SPRHBM (0x208005e0)                                                     */
/*      SPRC0 (0x208005e0)                                                      */
/*      SPRMCC (0x208005e0)                                                     */
/*      SPRUCC (0x208005e0)                                                     */
/* Register default value on SPRA0: 0x00020091                                  */
/* Register default value on SPRB0: 0x00020091                                  */
/* Register default value on SPRHBM: 0x00020091                                 */
/* Register default value on SPRC0: 0x00020091                                  */
/* Register default value on SPRMCC: 0x00020091                                 */
/* Register default value on SPRUCC: 0x00020091                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Performance Control and Status for IOSF Channel
*/


#define PERFCTRLSTS_CH4_IIO_VTD_REG 0x110205E0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 read_stream_policy : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000001*/

                            /* Read Stream Policy */
    UINT32 read_passing_read_disable : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               NOT IMPLEMENTED. MS2IOSF does not support
                               reordering of read requests within a channel,
                               but may do so in a future implementation.
                            */
    UINT32 rsvd : 1;

                            /* Bits[2:2], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 nosnoopopwren : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Enable No-Snoop on VC0 writes received on this
                               port[br] This applies to writes with the
                               following conditions:[br] NS=1 AND (TPH=0 OR
                               TPHDIS=1)[br] 1: Inbound writes to memory with
                               above conditions will be treated as non-coherent
                               (no snoops) writes - MS2IOSF will use the non-
                               allocating NS flow[br] 0: Inbound writes to
                               memory with above conditions will be treated as
                               allocating writes.[br] Notes:[br] - If TPH=1 and
                               TPHDIS=0 then NS is ignored and this bit is
                               ignored[br] - VC1/VCm writes are not controlled
                               by this bit since they are always non-snoop and
                               can be no other way.[br] - TPH and
                               ForceNoSnoopWrEn have higher precedence than
                               this bit
                            */
    UINT32 read_stream_interleave_size : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000001*/

                            /* Read Stream Interleave Size */
    UINT32 forcenosnoopwren : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Force No-Snoop on VC0 writes received on this
                               port[br] 1: All writes received on this port are
                               treated as though the NS bit is set and will use
                               the Non-Snoop non-allocating flow.[br] 0: Writes
                               will be treated as non-snoop only if the NS bit
                               is set and the NoSnoopWrEn bit is set.[br]
                               Notes:[br] - VC1/VCm traffic is not impacted by
                               this bit since all writes from VC1 and VCm are
                               always Non-Snoop[br] - This bit has precedence
                               over the NoSnoopWrEn field in this register[br]
                               - Forcing writes to be non-snoop with this bit
                               takes precedence over TPH
                            */
    UINT32 implicit_nosnoop : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               1: Issue CLFlush for every remote socket
                               cacheline if TH=0 or Prioritize_TPH = 0[br] 0:
                               do not force CLFlush for these writes[br] Note:
                               This bit should not be set at the same time as
                               Implicit_TPH (Implicit_NoSnoop gets priority)
                            */
    UINT32 use_allocating_flow_wr : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               Force all Snooping writes from this port will
                               use the Allocating Flow[br] 1: All Snooping
                               writes received on this port use the allocating
                               flow[br] 0: All Snooping Writes will use the
                               Non-Allocating Flow[br] Notes:[br] - VC1/VCm
                               traffic is not impacted by this bit since all
                               writes from VC1 and VCm are always Non-Snoop
                            */
    UINT32 rsvd_8 : 2;

                            /* Bits[9:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 partial_cohrd_op : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/
    UINT32 rsvd_11 : 1;

                            /* Bits[11:11], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 disable_ro : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Disables Relaxed Ordering for this Channel. If
                               set, all writes are treated as though RO=0.
                            */
    UINT32 force_ro : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Forces Relaxed Ordering for this Channel. If
                               set, all writes are treated as though RO=1,
                               except MSIs.
                            */
    UINT32 rsvd_14 : 2;

                            /* Bits[15:14], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 disable_tph : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               TLP Processing Hint Disable[br] When set, writes
                               or reads with TPH=1, will be treated as if
                               TPH=0. Refer to the Transaction Flow chapter for
                               details about the flows for the different cases
                               of TPH.
                            */
    UINT32 prioritize_tph : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000001*/

                            /*
                               If TH bit is set on a cacheline belonging to the
                               remote socket:[br] 1: the writeback phase uses
                               WbPushMtoI[br] 0: the writeback will use
                               CLCleanse
                            */
    UINT32 implicit_tph : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               1: all snooping writes are treated as though
                               TH=1[br] 0: snooping writes will use TH value
                               received
                            */
    UINT32 rsvd_19 : 13;

                            /* Bits[31:19], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} PERFCTRLSTS_CH4_IIO_VTD_STRUCT;

/* MISCCTRLSTS_CH4_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x208005e4)                                                      */
/*      SPRB0 (0x208005e4)                                                      */
/*      SPRHBM (0x208005e4)                                                     */
/*      SPRC0 (0x208005e4)                                                      */
/*      SPRMCC (0x208005e4)                                                     */
/*      SPRUCC (0x208005e4)                                                     */
/* Register default value on SPRA0: 0x00800000                                  */
/* Register default value on SPRB0: 0x00A00000                                  */
/* Register default value on SPRHBM: 0x00A00000                                 */
/* Register default value on SPRC0: 0x00A00000                                  */
/* Register default value on SPRMCC: 0x00A00000                                 */
/* Register default value on SPRUCC: 0x00A00000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Miscellaneous Control and Status for IOSF Channel
*/


#define MISCCTRLSTS_CH4_IIO_VTD_REG 0x110205E4

#if defined(SPRA0_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vc1_read_bypass_write : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               0: Reads push writes within this channel[br] -1:
                               Reads are allowed to bypass blocked writes
                               within this channel
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 problematic_channel_for_lock_flows : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               This bit is set by BIOS when it knows that this
                               channel port is connected to a device that
                               creates Posted-Posted dependency on its In-Out
                               queues. BIOS writers must read the 'Ordering
                               Chapter' of MS2IOSF HAS to get a complete list
                               of devices that are considered to have this
                               dependency.[br] Briefly, this bit may be set on
                               a link if:[br] This channel is connected to an
                               NTB port.[br] This channel is connected to a
                               buggy Intel NIC device: one of
                               zoar/Oplin/Hartwell or any other PCIe device
                               that has a Posted-Posted dependency.[br] MS2IOSF
                               lock flows depend on the setting of this bit to
                               treat this port in a special way during the
                               flows. Note that if BIOS is setting up the lock
                               flow to be in the 'UPI compatible' mode (refer
                               to UBOX HAS for details), then this bit must be
                               set to 0.
                            */
    UINT32 rsvd_7 : 4;

                            /* Bits[10:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 do_not_block_during_lock : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if the channel
                               should NOT be blocked (1 = do not block).
                            */
    UINT32 enable_isoch : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /* The channel is enabled as an Isoch channel */
    UINT32 no_channel_throttle_in_quiesce : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               During Quiesce, this channel would not throttle
                               if this bit is set.
                            */
    UINT32 allow_one_np_os : 1;

                            /* Bits[14:14], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 dis_hdr_storage : 1;

                            /* Bits[15:15], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_16 : 5;

                            /* Bits[20:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 zero_ob_tc : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MISCCTRLSTS_CH4_IIO_VTD_SPRA0_STRUCT;
#endif /* (SPRA0_HOST) */

#if defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vc1_read_bypass_write : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               0: Reads push writes within this channel[br] -1:
                               Reads are allowed to bypass blocked writes
                               within this channel
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 problematic_channel_for_lock_flows : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               This bit is set by BIOS when it knows that this
                               channel port is connected to a device that
                               creates Posted-Posted dependency on its In-Out
                               queues. BIOS writers must read the 'Ordering
                               Chapter' of MS2IOSF HAS to get a complete list
                               of devices that are considered to have this
                               dependency.[br] Briefly, this bit may be set on
                               a link if:[br] This channel is connected to an
                               NTB port.[br] This channel is connected to a
                               buggy Intel NIC device: one of
                               zoar/Oplin/Hartwell or any other PCIe device
                               that has a Posted-Posted dependency.[br] MS2IOSF
                               lock flows depend on the setting of this bit to
                               treat this port in a special way during the
                               flows. Note that if BIOS is setting up the lock
                               flow to be in the 'UPI compatible' mode (refer
                               to UBOX HAS for details), then this bit must be
                               set to 0.
                            */
    UINT32 rsvd_7 : 4;

                            /* Bits[10:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 do_not_block_during_lock : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if the channel
                               should NOT be blocked (1 = do not block).
                            */
    UINT32 enable_isoch : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /* The channel is enabled as an Isoch channel */
    UINT32 no_channel_throttle_in_quiesce : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               During Quiesce, this channel would not throttle
                               if this bit is set.
                            */
    UINT32 allow_one_np_os : 1;

                            /* Bits[14:14], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 dis_hdr_storage : 1;

                            /* Bits[15:15], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_16 : 5;

                            /* Bits[20:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 zero_ob_tc : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000001*/

                            /*
                               Zero out the TC field for outbound requests (P
                               and NP only)
                            */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 block_non_posted_only_during_lock : 1;

                            /* Bits[24:24], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if for the channel
                               only Non-Posteds should be blocked
                            */
    UINT32 rsvd_25 : 7;

                            /* Bits[31:25], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MISCCTRLSTS_CH4_IIO_VTD_SPRB0_SPRHBM_SPRC0_SPRMCC_SPRUCC_STRUCT;
#endif /* (SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vc1_read_bypass_write : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               0: Reads push writes within this channel[br] -1:
                               Reads are allowed to bypass blocked writes
                               within this channel
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 problematic_channel_for_lock_flows : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               This bit is set by BIOS when it knows that this
                               channel port is connected to a device that
                               creates Posted-Posted dependency on its In-Out
                               queues. BIOS writers must read the 'Ordering
                               Chapter' of MS2IOSF HAS to get a complete list
                               of devices that are considered to have this
                               dependency.[br] Briefly, this bit may be set on
                               a link if:[br] This channel is connected to an
                               NTB port.[br] This channel is connected to a
                               buggy Intel NIC device: one of
                               zoar/Oplin/Hartwell or any other PCIe device
                               that has a Posted-Posted dependency.[br] MS2IOSF
                               lock flows depend on the setting of this bit to
                               treat this port in a special way during the
                               flows. Note that if BIOS is setting up the lock
                               flow to be in the 'UPI compatible' mode (refer
                               to UBOX HAS for details), then this bit must be
                               set to 0.
                            */
    UINT32 rsvd_7 : 4;

                            /* Bits[10:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 do_not_block_during_lock : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if the channel
                               should NOT be blocked (1 = do not block).
                            */
    UINT32 enable_isoch : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /* The channel is enabled as an Isoch channel */
    UINT32 no_channel_throttle_in_quiesce : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               During Quiesce, this channel would not throttle
                               if this bit is set.
                            */
    UINT32 allow_one_np_os : 1;

                            /* Bits[14:14], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 dis_hdr_storage : 1;

                            /* Bits[15:15], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_16 : 5;

                            /* Bits[20:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 zero_ob_tc : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MISCCTRLSTS_CH4_IIO_VTD_STRUCT;

/* PERFCTRLSTS_CH5_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x208005e8)                                                      */
/*      SPRB0 (0x208005e8)                                                      */
/*      SPRHBM (0x208005e8)                                                     */
/*      SPRC0 (0x208005e8)                                                      */
/*      SPRMCC (0x208005e8)                                                     */
/*      SPRUCC (0x208005e8)                                                     */
/* Register default value on SPRA0: 0x00020091                                  */
/* Register default value on SPRB0: 0x00020091                                  */
/* Register default value on SPRHBM: 0x00020091                                 */
/* Register default value on SPRC0: 0x00020091                                  */
/* Register default value on SPRMCC: 0x00020091                                 */
/* Register default value on SPRUCC: 0x00020091                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Performance Control and Status for IOSF Channel
*/


#define PERFCTRLSTS_CH5_IIO_VTD_REG 0x110205E8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 read_stream_policy : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000001*/

                            /* Read Stream Policy */
    UINT32 read_passing_read_disable : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               NOT IMPLEMENTED. MS2IOSF does not support
                               reordering of read requests within a channel,
                               but may do so in a future implementation.
                            */
    UINT32 rsvd : 1;

                            /* Bits[2:2], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 nosnoopopwren : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Enable No-Snoop on VC0 writes received on this
                               port[br] This applies to writes with the
                               following conditions:[br] NS=1 AND (TPH=0 OR
                               TPHDIS=1)[br] 1: Inbound writes to memory with
                               above conditions will be treated as non-coherent
                               (no snoops) writes - MS2IOSF will use the non-
                               allocating NS flow[br] 0: Inbound writes to
                               memory with above conditions will be treated as
                               allocating writes.[br] Notes:[br] - If TPH=1 and
                               TPHDIS=0 then NS is ignored and this bit is
                               ignored[br] - VC1/VCm writes are not controlled
                               by this bit since they are always non-snoop and
                               can be no other way.[br] - TPH and
                               ForceNoSnoopWrEn have higher precedence than
                               this bit
                            */
    UINT32 read_stream_interleave_size : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000001*/

                            /* Read Stream Interleave Size */
    UINT32 forcenosnoopwren : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Force No-Snoop on VC0 writes received on this
                               port[br] 1: All writes received on this port are
                               treated as though the NS bit is set and will use
                               the Non-Snoop non-allocating flow.[br] 0: Writes
                               will be treated as non-snoop only if the NS bit
                               is set and the NoSnoopWrEn bit is set.[br]
                               Notes:[br] - VC1/VCm traffic is not impacted by
                               this bit since all writes from VC1 and VCm are
                               always Non-Snoop[br] - This bit has precedence
                               over the NoSnoopWrEn field in this register[br]
                               - Forcing writes to be non-snoop with this bit
                               takes precedence over TPH
                            */
    UINT32 implicit_nosnoop : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               1: Issue CLFlush for every remote socket
                               cacheline if TH=0 or Prioritize_TPH = 0[br] 0:
                               do not force CLFlush for these writes[br] Note:
                               This bit should not be set at the same time as
                               Implicit_TPH (Implicit_NoSnoop gets priority)
                            */
    UINT32 use_allocating_flow_wr : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               Force all Snooping writes from this port will
                               use the Allocating Flow[br] 1: All Snooping
                               writes received on this port use the allocating
                               flow[br] 0: All Snooping Writes will use the
                               Non-Allocating Flow[br] Notes:[br] - VC1/VCm
                               traffic is not impacted by this bit since all
                               writes from VC1 and VCm are always Non-Snoop
                            */
    UINT32 rsvd_8 : 2;

                            /* Bits[9:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 partial_cohrd_op : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/
    UINT32 rsvd_11 : 1;

                            /* Bits[11:11], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 disable_ro : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Disables Relaxed Ordering for this Channel. If
                               set, all writes are treated as though RO=0.
                            */
    UINT32 force_ro : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Forces Relaxed Ordering for this Channel. If
                               set, all writes are treated as though RO=1,
                               except MSIs.
                            */
    UINT32 rsvd_14 : 2;

                            /* Bits[15:14], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 disable_tph : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               TLP Processing Hint Disable[br] When set, writes
                               or reads with TPH=1, will be treated as if
                               TPH=0. Refer to the Transaction Flow chapter for
                               details about the flows for the different cases
                               of TPH.
                            */
    UINT32 prioritize_tph : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000001*/

                            /*
                               If TH bit is set on a cacheline belonging to the
                               remote socket:[br] 1: the writeback phase uses
                               WbPushMtoI[br] 0: the writeback will use
                               CLCleanse
                            */
    UINT32 implicit_tph : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               1: all snooping writes are treated as though
                               TH=1[br] 0: snooping writes will use TH value
                               received
                            */
    UINT32 rsvd_19 : 13;

                            /* Bits[31:19], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} PERFCTRLSTS_CH5_IIO_VTD_STRUCT;

/* MISCCTRLSTS_CH5_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x208005ec)                                                      */
/*      SPRB0 (0x208005ec)                                                      */
/*      SPRHBM (0x208005ec)                                                     */
/*      SPRC0 (0x208005ec)                                                      */
/*      SPRMCC (0x208005ec)                                                     */
/*      SPRUCC (0x208005ec)                                                     */
/* Register default value on SPRA0: 0x00800000                                  */
/* Register default value on SPRB0: 0x00A00000                                  */
/* Register default value on SPRHBM: 0x00A00000                                 */
/* Register default value on SPRC0: 0x00A00000                                  */
/* Register default value on SPRMCC: 0x00A00000                                 */
/* Register default value on SPRUCC: 0x00A00000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Miscellaneous Control and Status for IOSF Channel
*/


#define MISCCTRLSTS_CH5_IIO_VTD_REG 0x110205EC

#if defined(SPRA0_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vc1_read_bypass_write : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               0: Reads push writes within this channel[br] -1:
                               Reads are allowed to bypass blocked writes
                               within this channel
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 problematic_channel_for_lock_flows : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               This bit is set by BIOS when it knows that this
                               channel port is connected to a device that
                               creates Posted-Posted dependency on its In-Out
                               queues. BIOS writers must read the 'Ordering
                               Chapter' of MS2IOSF HAS to get a complete list
                               of devices that are considered to have this
                               dependency.[br] Briefly, this bit may be set on
                               a link if:[br] This channel is connected to an
                               NTB port.[br] This channel is connected to a
                               buggy Intel NIC device: one of
                               zoar/Oplin/Hartwell or any other PCIe device
                               that has a Posted-Posted dependency.[br] MS2IOSF
                               lock flows depend on the setting of this bit to
                               treat this port in a special way during the
                               flows. Note that if BIOS is setting up the lock
                               flow to be in the 'UPI compatible' mode (refer
                               to UBOX HAS for details), then this bit must be
                               set to 0.
                            */
    UINT32 rsvd_7 : 4;

                            /* Bits[10:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 do_not_block_during_lock : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if the channel
                               should NOT be blocked (1 = do not block).
                            */
    UINT32 enable_isoch : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /* The channel is enabled as an Isoch channel */
    UINT32 no_channel_throttle_in_quiesce : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               During Quiesce, this channel would not throttle
                               if this bit is set.
                            */
    UINT32 allow_one_np_os : 1;

                            /* Bits[14:14], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 dis_hdr_storage : 1;

                            /* Bits[15:15], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_16 : 5;

                            /* Bits[20:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 zero_ob_tc : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MISCCTRLSTS_CH5_IIO_VTD_SPRA0_STRUCT;
#endif /* (SPRA0_HOST) */

#if defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vc1_read_bypass_write : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               0: Reads push writes within this channel[br] -1:
                               Reads are allowed to bypass blocked writes
                               within this channel
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 problematic_channel_for_lock_flows : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               This bit is set by BIOS when it knows that this
                               channel port is connected to a device that
                               creates Posted-Posted dependency on its In-Out
                               queues. BIOS writers must read the 'Ordering
                               Chapter' of MS2IOSF HAS to get a complete list
                               of devices that are considered to have this
                               dependency.[br] Briefly, this bit may be set on
                               a link if:[br] This channel is connected to an
                               NTB port.[br] This channel is connected to a
                               buggy Intel NIC device: one of
                               zoar/Oplin/Hartwell or any other PCIe device
                               that has a Posted-Posted dependency.[br] MS2IOSF
                               lock flows depend on the setting of this bit to
                               treat this port in a special way during the
                               flows. Note that if BIOS is setting up the lock
                               flow to be in the 'UPI compatible' mode (refer
                               to UBOX HAS for details), then this bit must be
                               set to 0.
                            */
    UINT32 rsvd_7 : 4;

                            /* Bits[10:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 do_not_block_during_lock : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if the channel
                               should NOT be blocked (1 = do not block).
                            */
    UINT32 enable_isoch : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /* The channel is enabled as an Isoch channel */
    UINT32 no_channel_throttle_in_quiesce : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               During Quiesce, this channel would not throttle
                               if this bit is set.
                            */
    UINT32 allow_one_np_os : 1;

                            /* Bits[14:14], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 dis_hdr_storage : 1;

                            /* Bits[15:15], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_16 : 5;

                            /* Bits[20:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 zero_ob_tc : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000001*/

                            /*
                               Zero out the TC field for outbound requests (P
                               and NP only)
                            */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 block_non_posted_only_during_lock : 1;

                            /* Bits[24:24], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if for the channel
                               only Non-Posteds should be blocked
                            */
    UINT32 rsvd_25 : 7;

                            /* Bits[31:25], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MISCCTRLSTS_CH5_IIO_VTD_SPRB0_SPRHBM_SPRC0_SPRMCC_SPRUCC_STRUCT;
#endif /* (SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vc1_read_bypass_write : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               0: Reads push writes within this channel[br] -1:
                               Reads are allowed to bypass blocked writes
                               within this channel
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 problematic_channel_for_lock_flows : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               This bit is set by BIOS when it knows that this
                               channel port is connected to a device that
                               creates Posted-Posted dependency on its In-Out
                               queues. BIOS writers must read the 'Ordering
                               Chapter' of MS2IOSF HAS to get a complete list
                               of devices that are considered to have this
                               dependency.[br] Briefly, this bit may be set on
                               a link if:[br] This channel is connected to an
                               NTB port.[br] This channel is connected to a
                               buggy Intel NIC device: one of
                               zoar/Oplin/Hartwell or any other PCIe device
                               that has a Posted-Posted dependency.[br] MS2IOSF
                               lock flows depend on the setting of this bit to
                               treat this port in a special way during the
                               flows. Note that if BIOS is setting up the lock
                               flow to be in the 'UPI compatible' mode (refer
                               to UBOX HAS for details), then this bit must be
                               set to 0.
                            */
    UINT32 rsvd_7 : 4;

                            /* Bits[10:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 do_not_block_during_lock : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if the channel
                               should NOT be blocked (1 = do not block).
                            */
    UINT32 enable_isoch : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /* The channel is enabled as an Isoch channel */
    UINT32 no_channel_throttle_in_quiesce : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               During Quiesce, this channel would not throttle
                               if this bit is set.
                            */
    UINT32 allow_one_np_os : 1;

                            /* Bits[14:14], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 dis_hdr_storage : 1;

                            /* Bits[15:15], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_16 : 5;

                            /* Bits[20:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 zero_ob_tc : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MISCCTRLSTS_CH5_IIO_VTD_STRUCT;

/* PERFCTRLSTS_CH6_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x208005f0)                                                      */
/*      SPRB0 (0x208005f0)                                                      */
/*      SPRHBM (0x208005f0)                                                     */
/*      SPRC0 (0x208005f0)                                                      */
/*      SPRMCC (0x208005f0)                                                     */
/*      SPRUCC (0x208005f0)                                                     */
/* Register default value on SPRA0: 0x00020091                                  */
/* Register default value on SPRB0: 0x00020091                                  */
/* Register default value on SPRHBM: 0x00020091                                 */
/* Register default value on SPRC0: 0x00020091                                  */
/* Register default value on SPRMCC: 0x00020091                                 */
/* Register default value on SPRUCC: 0x00020091                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Performance Control and Status for IOSF Channel
*/


#define PERFCTRLSTS_CH6_IIO_VTD_REG 0x110205F0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 read_stream_policy : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000001*/

                            /* Read Stream Policy */
    UINT32 read_passing_read_disable : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               NOT IMPLEMENTED. MS2IOSF does not support
                               reordering of read requests within a channel,
                               but may do so in a future implementation.
                            */
    UINT32 rsvd : 1;

                            /* Bits[2:2], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 nosnoopopwren : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Enable No-Snoop on VC0 writes received on this
                               port[br] This applies to writes with the
                               following conditions:[br] NS=1 AND (TPH=0 OR
                               TPHDIS=1)[br] 1: Inbound writes to memory with
                               above conditions will be treated as non-coherent
                               (no snoops) writes - MS2IOSF will use the non-
                               allocating NS flow[br] 0: Inbound writes to
                               memory with above conditions will be treated as
                               allocating writes.[br] Notes:[br] - If TPH=1 and
                               TPHDIS=0 then NS is ignored and this bit is
                               ignored[br] - VC1/VCm writes are not controlled
                               by this bit since they are always non-snoop and
                               can be no other way.[br] - TPH and
                               ForceNoSnoopWrEn have higher precedence than
                               this bit
                            */
    UINT32 read_stream_interleave_size : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000001*/

                            /* Read Stream Interleave Size */
    UINT32 forcenosnoopwren : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Force No-Snoop on VC0 writes received on this
                               port[br] 1: All writes received on this port are
                               treated as though the NS bit is set and will use
                               the Non-Snoop non-allocating flow.[br] 0: Writes
                               will be treated as non-snoop only if the NS bit
                               is set and the NoSnoopWrEn bit is set.[br]
                               Notes:[br] - VC1/VCm traffic is not impacted by
                               this bit since all writes from VC1 and VCm are
                               always Non-Snoop[br] - This bit has precedence
                               over the NoSnoopWrEn field in this register[br]
                               - Forcing writes to be non-snoop with this bit
                               takes precedence over TPH
                            */
    UINT32 implicit_nosnoop : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               1: Issue CLFlush for every remote socket
                               cacheline if TH=0 or Prioritize_TPH = 0[br] 0:
                               do not force CLFlush for these writes[br] Note:
                               This bit should not be set at the same time as
                               Implicit_TPH (Implicit_NoSnoop gets priority)
                            */
    UINT32 use_allocating_flow_wr : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               Force all Snooping writes from this port will
                               use the Allocating Flow[br] 1: All Snooping
                               writes received on this port use the allocating
                               flow[br] 0: All Snooping Writes will use the
                               Non-Allocating Flow[br] Notes:[br] - VC1/VCm
                               traffic is not impacted by this bit since all
                               writes from VC1 and VCm are always Non-Snoop
                            */
    UINT32 rsvd_8 : 2;

                            /* Bits[9:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 partial_cohrd_op : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/
    UINT32 rsvd_11 : 1;

                            /* Bits[11:11], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 disable_ro : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Disables Relaxed Ordering for this Channel. If
                               set, all writes are treated as though RO=0.
                            */
    UINT32 force_ro : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Forces Relaxed Ordering for this Channel. If
                               set, all writes are treated as though RO=1,
                               except MSIs.
                            */
    UINT32 rsvd_14 : 2;

                            /* Bits[15:14], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 disable_tph : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               TLP Processing Hint Disable[br] When set, writes
                               or reads with TPH=1, will be treated as if
                               TPH=0. Refer to the Transaction Flow chapter for
                               details about the flows for the different cases
                               of TPH.
                            */
    UINT32 prioritize_tph : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000001*/

                            /*
                               If TH bit is set on a cacheline belonging to the
                               remote socket:[br] 1: the writeback phase uses
                               WbPushMtoI[br] 0: the writeback will use
                               CLCleanse
                            */
    UINT32 implicit_tph : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               1: all snooping writes are treated as though
                               TH=1[br] 0: snooping writes will use TH value
                               received
                            */
    UINT32 rsvd_19 : 13;

                            /* Bits[31:19], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} PERFCTRLSTS_CH6_IIO_VTD_STRUCT;

/* MISCCTRLSTS_CH6_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x208005f4)                                                      */
/*      SPRB0 (0x208005f4)                                                      */
/*      SPRHBM (0x208005f4)                                                     */
/*      SPRC0 (0x208005f4)                                                      */
/*      SPRMCC (0x208005f4)                                                     */
/*      SPRUCC (0x208005f4)                                                     */
/* Register default value on SPRA0: 0x00800000                                  */
/* Register default value on SPRB0: 0x00A00000                                  */
/* Register default value on SPRHBM: 0x00A00000                                 */
/* Register default value on SPRC0: 0x00A00000                                  */
/* Register default value on SPRMCC: 0x00A00000                                 */
/* Register default value on SPRUCC: 0x00A00000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Miscellaneous Control and Status for IOSF Channel
*/


#define MISCCTRLSTS_CH6_IIO_VTD_REG 0x110205F4

#if defined(SPRA0_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vc1_read_bypass_write : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               0: Reads push writes within this channel[br] -1:
                               Reads are allowed to bypass blocked writes
                               within this channel
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 problematic_channel_for_lock_flows : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               This bit is set by BIOS when it knows that this
                               channel port is connected to a device that
                               creates Posted-Posted dependency on its In-Out
                               queues. BIOS writers must read the 'Ordering
                               Chapter' of MS2IOSF HAS to get a complete list
                               of devices that are considered to have this
                               dependency.[br] Briefly, this bit may be set on
                               a link if:[br] This channel is connected to an
                               NTB port.[br] This channel is connected to a
                               buggy Intel NIC device: one of
                               zoar/Oplin/Hartwell or any other PCIe device
                               that has a Posted-Posted dependency.[br] MS2IOSF
                               lock flows depend on the setting of this bit to
                               treat this port in a special way during the
                               flows. Note that if BIOS is setting up the lock
                               flow to be in the 'UPI compatible' mode (refer
                               to UBOX HAS for details), then this bit must be
                               set to 0.
                            */
    UINT32 rsvd_7 : 4;

                            /* Bits[10:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 do_not_block_during_lock : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if the channel
                               should NOT be blocked (1 = do not block).
                            */
    UINT32 enable_isoch : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /* The channel is enabled as an Isoch channel */
    UINT32 no_channel_throttle_in_quiesce : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               During Quiesce, this channel would not throttle
                               if this bit is set.
                            */
    UINT32 allow_one_np_os : 1;

                            /* Bits[14:14], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 dis_hdr_storage : 1;

                            /* Bits[15:15], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_16 : 5;

                            /* Bits[20:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 zero_ob_tc : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MISCCTRLSTS_CH6_IIO_VTD_SPRA0_STRUCT;
#endif /* (SPRA0_HOST) */

#if defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vc1_read_bypass_write : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               0: Reads push writes within this channel[br] -1:
                               Reads are allowed to bypass blocked writes
                               within this channel
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 problematic_channel_for_lock_flows : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               This bit is set by BIOS when it knows that this
                               channel port is connected to a device that
                               creates Posted-Posted dependency on its In-Out
                               queues. BIOS writers must read the 'Ordering
                               Chapter' of MS2IOSF HAS to get a complete list
                               of devices that are considered to have this
                               dependency.[br] Briefly, this bit may be set on
                               a link if:[br] This channel is connected to an
                               NTB port.[br] This channel is connected to a
                               buggy Intel NIC device: one of
                               zoar/Oplin/Hartwell or any other PCIe device
                               that has a Posted-Posted dependency.[br] MS2IOSF
                               lock flows depend on the setting of this bit to
                               treat this port in a special way during the
                               flows. Note that if BIOS is setting up the lock
                               flow to be in the 'UPI compatible' mode (refer
                               to UBOX HAS for details), then this bit must be
                               set to 0.
                            */
    UINT32 rsvd_7 : 4;

                            /* Bits[10:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 do_not_block_during_lock : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if the channel
                               should NOT be blocked (1 = do not block).
                            */
    UINT32 enable_isoch : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /* The channel is enabled as an Isoch channel */
    UINT32 no_channel_throttle_in_quiesce : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               During Quiesce, this channel would not throttle
                               if this bit is set.
                            */
    UINT32 allow_one_np_os : 1;

                            /* Bits[14:14], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 dis_hdr_storage : 1;

                            /* Bits[15:15], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_16 : 5;

                            /* Bits[20:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 zero_ob_tc : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000001*/

                            /*
                               Zero out the TC field for outbound requests (P
                               and NP only)
                            */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 block_non_posted_only_during_lock : 1;

                            /* Bits[24:24], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if for the channel
                               only Non-Posteds should be blocked
                            */
    UINT32 rsvd_25 : 7;

                            /* Bits[31:25], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MISCCTRLSTS_CH6_IIO_VTD_SPRB0_SPRHBM_SPRC0_SPRMCC_SPRUCC_STRUCT;
#endif /* (SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vc1_read_bypass_write : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               0: Reads push writes within this channel[br] -1:
                               Reads are allowed to bypass blocked writes
                               within this channel
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 problematic_channel_for_lock_flows : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               This bit is set by BIOS when it knows that this
                               channel port is connected to a device that
                               creates Posted-Posted dependency on its In-Out
                               queues. BIOS writers must read the 'Ordering
                               Chapter' of MS2IOSF HAS to get a complete list
                               of devices that are considered to have this
                               dependency.[br] Briefly, this bit may be set on
                               a link if:[br] This channel is connected to an
                               NTB port.[br] This channel is connected to a
                               buggy Intel NIC device: one of
                               zoar/Oplin/Hartwell or any other PCIe device
                               that has a Posted-Posted dependency.[br] MS2IOSF
                               lock flows depend on the setting of this bit to
                               treat this port in a special way during the
                               flows. Note that if BIOS is setting up the lock
                               flow to be in the 'UPI compatible' mode (refer
                               to UBOX HAS for details), then this bit must be
                               set to 0.
                            */
    UINT32 rsvd_7 : 4;

                            /* Bits[10:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 do_not_block_during_lock : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if the channel
                               should NOT be blocked (1 = do not block).
                            */
    UINT32 enable_isoch : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /* The channel is enabled as an Isoch channel */
    UINT32 no_channel_throttle_in_quiesce : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               During Quiesce, this channel would not throttle
                               if this bit is set.
                            */
    UINT32 allow_one_np_os : 1;

                            /* Bits[14:14], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 dis_hdr_storage : 1;

                            /* Bits[15:15], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_16 : 5;

                            /* Bits[20:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 zero_ob_tc : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MISCCTRLSTS_CH6_IIO_VTD_STRUCT;

/* PERFCTRLSTS_CH7_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x208005f8)                                                      */
/*      SPRB0 (0x208005f8)                                                      */
/*      SPRHBM (0x208005f8)                                                     */
/*      SPRC0 (0x208005f8)                                                      */
/*      SPRMCC (0x208005f8)                                                     */
/*      SPRUCC (0x208005f8)                                                     */
/* Register default value on SPRA0: 0x00020091                                  */
/* Register default value on SPRB0: 0x00020091                                  */
/* Register default value on SPRHBM: 0x00020091                                 */
/* Register default value on SPRC0: 0x00020091                                  */
/* Register default value on SPRMCC: 0x00020091                                 */
/* Register default value on SPRUCC: 0x00020091                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Performance Control and Status for IOSF Channel
*/


#define PERFCTRLSTS_CH7_IIO_VTD_REG 0x110205F8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 read_stream_policy : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000001*/

                            /* Read Stream Policy */
    UINT32 read_passing_read_disable : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               NOT IMPLEMENTED. MS2IOSF does not support
                               reordering of read requests within a channel,
                               but may do so in a future implementation.
                            */
    UINT32 rsvd : 1;

                            /* Bits[2:2], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 nosnoopopwren : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Enable No-Snoop on VC0 writes received on this
                               port[br] This applies to writes with the
                               following conditions:[br] NS=1 AND (TPH=0 OR
                               TPHDIS=1)[br] 1: Inbound writes to memory with
                               above conditions will be treated as non-coherent
                               (no snoops) writes - MS2IOSF will use the non-
                               allocating NS flow[br] 0: Inbound writes to
                               memory with above conditions will be treated as
                               allocating writes.[br] Notes:[br] - If TPH=1 and
                               TPHDIS=0 then NS is ignored and this bit is
                               ignored[br] - VC1/VCm writes are not controlled
                               by this bit since they are always non-snoop and
                               can be no other way.[br] - TPH and
                               ForceNoSnoopWrEn have higher precedence than
                               this bit
                            */
    UINT32 read_stream_interleave_size : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000001*/

                            /* Read Stream Interleave Size */
    UINT32 forcenosnoopwren : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Force No-Snoop on VC0 writes received on this
                               port[br] 1: All writes received on this port are
                               treated as though the NS bit is set and will use
                               the Non-Snoop non-allocating flow.[br] 0: Writes
                               will be treated as non-snoop only if the NS bit
                               is set and the NoSnoopWrEn bit is set.[br]
                               Notes:[br] - VC1/VCm traffic is not impacted by
                               this bit since all writes from VC1 and VCm are
                               always Non-Snoop[br] - This bit has precedence
                               over the NoSnoopWrEn field in this register[br]
                               - Forcing writes to be non-snoop with this bit
                               takes precedence over TPH
                            */
    UINT32 implicit_nosnoop : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               1: Issue CLFlush for every remote socket
                               cacheline if TH=0 or Prioritize_TPH = 0[br] 0:
                               do not force CLFlush for these writes[br] Note:
                               This bit should not be set at the same time as
                               Implicit_TPH (Implicit_NoSnoop gets priority)
                            */
    UINT32 use_allocating_flow_wr : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               Force all Snooping writes from this port will
                               use the Allocating Flow[br] 1: All Snooping
                               writes received on this port use the allocating
                               flow[br] 0: All Snooping Writes will use the
                               Non-Allocating Flow[br] Notes:[br] - VC1/VCm
                               traffic is not impacted by this bit since all
                               writes from VC1 and VCm are always Non-Snoop
                            */
    UINT32 rsvd_8 : 2;

                            /* Bits[9:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 partial_cohrd_op : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/
    UINT32 rsvd_11 : 1;

                            /* Bits[11:11], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 disable_ro : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Disables Relaxed Ordering for this Channel. If
                               set, all writes are treated as though RO=0.
                            */
    UINT32 force_ro : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Forces Relaxed Ordering for this Channel. If
                               set, all writes are treated as though RO=1,
                               except MSIs.
                            */
    UINT32 rsvd_14 : 2;

                            /* Bits[15:14], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 disable_tph : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               TLP Processing Hint Disable[br] When set, writes
                               or reads with TPH=1, will be treated as if
                               TPH=0. Refer to the Transaction Flow chapter for
                               details about the flows for the different cases
                               of TPH.
                            */
    UINT32 prioritize_tph : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000001*/

                            /*
                               If TH bit is set on a cacheline belonging to the
                               remote socket:[br] 1: the writeback phase uses
                               WbPushMtoI[br] 0: the writeback will use
                               CLCleanse
                            */
    UINT32 implicit_tph : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               1: all snooping writes are treated as though
                               TH=1[br] 0: snooping writes will use TH value
                               received
                            */
    UINT32 rsvd_19 : 13;

                            /* Bits[31:19], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} PERFCTRLSTS_CH7_IIO_VTD_STRUCT;

/* MISCCTRLSTS_CH7_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x208005fc)                                                      */
/*      SPRB0 (0x208005fc)                                                      */
/*      SPRHBM (0x208005fc)                                                     */
/*      SPRC0 (0x208005fc)                                                      */
/*      SPRMCC (0x208005fc)                                                     */
/*      SPRUCC (0x208005fc)                                                     */
/* Register default value on SPRA0: 0x00800000                                  */
/* Register default value on SPRB0: 0x00A00000                                  */
/* Register default value on SPRHBM: 0x00A00000                                 */
/* Register default value on SPRC0: 0x00A00000                                  */
/* Register default value on SPRMCC: 0x00A00000                                 */
/* Register default value on SPRUCC: 0x00A00000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Miscellaneous Control and Status for IOSF Channel
*/


#define MISCCTRLSTS_CH7_IIO_VTD_REG 0x110205FC

#if defined(SPRA0_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vc1_read_bypass_write : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               0: Reads push writes within this channel[br] -1:
                               Reads are allowed to bypass blocked writes
                               within this channel
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 problematic_channel_for_lock_flows : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               This bit is set by BIOS when it knows that this
                               channel port is connected to a device that
                               creates Posted-Posted dependency on its In-Out
                               queues. BIOS writers must read the 'Ordering
                               Chapter' of MS2IOSF HAS to get a complete list
                               of devices that are considered to have this
                               dependency.[br] Briefly, this bit may be set on
                               a link if:[br] This channel is connected to an
                               NTB port.[br] This channel is connected to a
                               buggy Intel NIC device: one of
                               zoar/Oplin/Hartwell or any other PCIe device
                               that has a Posted-Posted dependency.[br] MS2IOSF
                               lock flows depend on the setting of this bit to
                               treat this port in a special way during the
                               flows. Note that if BIOS is setting up the lock
                               flow to be in the 'UPI compatible' mode (refer
                               to UBOX HAS for details), then this bit must be
                               set to 0.
                            */
    UINT32 rsvd_7 : 4;

                            /* Bits[10:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 do_not_block_during_lock : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if the channel
                               should NOT be blocked (1 = do not block).
                            */
    UINT32 enable_isoch : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /* The channel is enabled as an Isoch channel */
    UINT32 no_channel_throttle_in_quiesce : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               During Quiesce, this channel would not throttle
                               if this bit is set.
                            */
    UINT32 allow_one_np_os : 1;

                            /* Bits[14:14], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 dis_hdr_storage : 1;

                            /* Bits[15:15], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_16 : 5;

                            /* Bits[20:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 zero_ob_tc : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MISCCTRLSTS_CH7_IIO_VTD_SPRA0_STRUCT;
#endif /* (SPRA0_HOST) */

#if defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vc1_read_bypass_write : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               0: Reads push writes within this channel[br] -1:
                               Reads are allowed to bypass blocked writes
                               within this channel
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 problematic_channel_for_lock_flows : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               This bit is set by BIOS when it knows that this
                               channel port is connected to a device that
                               creates Posted-Posted dependency on its In-Out
                               queues. BIOS writers must read the 'Ordering
                               Chapter' of MS2IOSF HAS to get a complete list
                               of devices that are considered to have this
                               dependency.[br] Briefly, this bit may be set on
                               a link if:[br] This channel is connected to an
                               NTB port.[br] This channel is connected to a
                               buggy Intel NIC device: one of
                               zoar/Oplin/Hartwell or any other PCIe device
                               that has a Posted-Posted dependency.[br] MS2IOSF
                               lock flows depend on the setting of this bit to
                               treat this port in a special way during the
                               flows. Note that if BIOS is setting up the lock
                               flow to be in the 'UPI compatible' mode (refer
                               to UBOX HAS for details), then this bit must be
                               set to 0.
                            */
    UINT32 rsvd_7 : 4;

                            /* Bits[10:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 do_not_block_during_lock : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if the channel
                               should NOT be blocked (1 = do not block).
                            */
    UINT32 enable_isoch : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /* The channel is enabled as an Isoch channel */
    UINT32 no_channel_throttle_in_quiesce : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               During Quiesce, this channel would not throttle
                               if this bit is set.
                            */
    UINT32 allow_one_np_os : 1;

                            /* Bits[14:14], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 dis_hdr_storage : 1;

                            /* Bits[15:15], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_16 : 5;

                            /* Bits[20:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 zero_ob_tc : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000001*/

                            /*
                               Zero out the TC field for outbound requests (P
                               and NP only)
                            */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 block_non_posted_only_during_lock : 1;

                            /* Bits[24:24], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if for the channel
                               only Non-Posteds should be blocked
                            */
    UINT32 rsvd_25 : 7;

                            /* Bits[31:25], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MISCCTRLSTS_CH7_IIO_VTD_SPRB0_SPRHBM_SPRC0_SPRMCC_SPRUCC_STRUCT;
#endif /* (SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vc1_read_bypass_write : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               0: Reads push writes within this channel[br] -1:
                               Reads are allowed to bypass blocked writes
                               within this channel
                            */
    UINT32 rsvd_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 problematic_channel_for_lock_flows : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               This bit is set by BIOS when it knows that this
                               channel port is connected to a device that
                               creates Posted-Posted dependency on its In-Out
                               queues. BIOS writers must read the 'Ordering
                               Chapter' of MS2IOSF HAS to get a complete list
                               of devices that are considered to have this
                               dependency.[br] Briefly, this bit may be set on
                               a link if:[br] This channel is connected to an
                               NTB port.[br] This channel is connected to a
                               buggy Intel NIC device: one of
                               zoar/Oplin/Hartwell or any other PCIe device
                               that has a Posted-Posted dependency.[br] MS2IOSF
                               lock flows depend on the setting of this bit to
                               treat this port in a special way during the
                               flows. Note that if BIOS is setting up the lock
                               flow to be in the 'UPI compatible' mode (refer
                               to UBOX HAS for details), then this bit must be
                               set to 0.
                            */
    UINT32 rsvd_7 : 4;

                            /* Bits[10:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 do_not_block_during_lock : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               During mesh lock flow, once lock is established,
                               MS2IOSF normally blocks all channels inbound and
                               outbound. This bit indicates if the channel
                               should NOT be blocked (1 = do not block).
                            */
    UINT32 enable_isoch : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /* The channel is enabled as an Isoch channel */
    UINT32 no_channel_throttle_in_quiesce : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               During Quiesce, this channel would not throttle
                               if this bit is set.
                            */
    UINT32 allow_one_np_os : 1;

                            /* Bits[14:14], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 dis_hdr_storage : 1;

                            /* Bits[15:15], Access Type=RW/P, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_16 : 5;

                            /* Bits[20:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 zero_ob_tc : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /* NOT IMPLEMENTED. DO NOT USE. */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd_24 : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} MISCCTRLSTS_CH7_IIO_VTD_STRUCT;

/* IMRGLOBAL_BM_CP_N0_IIO_VTD_REG supported on:                                 */
/*      SPRA0 (0x20800600)                                                      */
/*      SPRB0 (0x20800600)                                                      */
/*      SPRHBM (0x20800600)                                                     */
/*      SPRC0 (0x20800600)                                                      */
/*      SPRMCC (0x20800600)                                                     */
/*      SPRUCC (0x20800600)                                                     */
/* Register default value on SPRA0: 0x01000208                                  */
/* Register default value on SPRB0: 0x01000208                                  */
/* Register default value on SPRHBM: 0x01000208                                 */
/* Register default value on SPRC0: 0x01000208                                  */
/* Register default value on SPRMCC: 0x01000208                                 */
/* Register default value on SPRUCC: 0x01000208                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRB0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRHBM Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRC0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRMCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRUCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* This register configures the write access to RAC, WAC and CP registers for IMRGLOBAL_BM security policy group.
*/


#define IMRGLOBAL_BM_CP_N0_IIO_VTD_REG 0x11020600

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imrglobal_bm_ctrl_pol : 32;

                            /* Bits[31:0], Access Type=RW, default=0x01000208*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to IMRGLOBAL_BM WAC, RAC
                               and CP registers, based on the value from each
                               agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} IMRGLOBAL_BM_CP_N0_IIO_VTD_STRUCT;

/* IMRGLOBAL_BM_CP_N1_IIO_VTD_REG supported on:                                 */
/*      SPRA0 (0x20800604)                                                      */
/*      SPRB0 (0x20800604)                                                      */
/*      SPRHBM (0x20800604)                                                     */
/*      SPRC0 (0x20800604)                                                      */
/*      SPRMCC (0x20800604)                                                     */
/*      SPRUCC (0x20800604)                                                     */
/* Register default value on SPRA0: 0x00000400                                  */
/* Register default value on SPRB0: 0x00000400                                  */
/* Register default value on SPRHBM: 0x00000400                                 */
/* Register default value on SPRC0: 0x00000400                                  */
/* Register default value on SPRMCC: 0x00000400                                 */
/* Register default value on SPRUCC: 0x00000400                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRB0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRHBM Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRC0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRMCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRUCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* This register configures the write access to RAC, WAC and CP registers for IMRGLOBAL_BM security policy group.
*/


#define IMRGLOBAL_BM_CP_N1_IIO_VTD_REG 0x11020604

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imrglobal_bm_ctrl_pol : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000400*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to IMRGLOBAL_BM WAC, RAC
                               and CP registers, based on the value from each
                               agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} IMRGLOBAL_BM_CP_N1_IIO_VTD_STRUCT;

/* IMRGLOBAL_BM_WAC_N0_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x20800608)                                                      */
/*      SPRB0 (0x20800608)                                                      */
/*      SPRHBM (0x20800608)                                                     */
/*      SPRC0 (0x20800608)                                                      */
/*      SPRMCC (0x20800608)                                                     */
/*      SPRUCC (0x20800608)                                                     */
/* Register default value on SPRA0: 0x0100021A                                  */
/* Register default value on SPRB0: 0x0100021A                                  */
/* Register default value on SPRHBM: 0x0100021A                                 */
/* Register default value on SPRC0: 0x0100021A                                  */
/* Register default value on SPRMCC: 0x0100021A                                 */
/* Register default value on SPRUCC: 0x0100021A                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRB0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRHBM Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRC0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRMCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRUCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* This register configures the write access for registers in IMRGLOBAL_BM security policy group.
*/


#define IMRGLOBAL_BM_WAC_N0_IIO_VTD_REG 0x11020608

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imrglobal_bm_sai_pol : 32;

                            /* Bits[31:0], Access Type=RW, default=0x0100021A*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in
                               IMRGLOBAL_BM security policy group, based on the
                               value from each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} IMRGLOBAL_BM_WAC_N0_IIO_VTD_STRUCT;

/* IMRGLOBAL_BM_WAC_N1_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x2080060c)                                                      */
/*      SPRB0 (0x2080060c)                                                      */
/*      SPRHBM (0x2080060c)                                                     */
/*      SPRC0 (0x2080060c)                                                      */
/*      SPRMCC (0x2080060c)                                                     */
/*      SPRUCC (0x2080060c)                                                     */
/* Register default value on SPRA0: 0x00000400                                  */
/* Register default value on SPRB0: 0x00000400                                  */
/* Register default value on SPRHBM: 0x00000400                                 */
/* Register default value on SPRC0: 0x00000400                                  */
/* Register default value on SPRMCC: 0x00000400                                 */
/* Register default value on SPRUCC: 0x00000400                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRB0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRHBM Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRC0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRMCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRUCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* This register configures the write access for registers in IMRGLOBAL_BM security policy group.
*/


#define IMRGLOBAL_BM_WAC_N1_IIO_VTD_REG 0x1102060C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imrglobal_bm_sai_pol : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000400*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in
                               IMRGLOBAL_BM security policy group, based on the
                               value from each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} IMRGLOBAL_BM_WAC_N1_IIO_VTD_STRUCT;

/* IMRGLOBAL_AC_RS0_N0_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x20800610)                                                      */
/*      SPRB0 (0x20800610)                                                      */
/*      SPRHBM (0x20800610)                                                     */
/*      SPRC0 (0x20800610)                                                      */
/*      SPRMCC (0x20800610)                                                     */
/*      SPRUCC (0x20800610)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRB0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRHBM Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRC0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRMCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRUCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* IMR Asset Classification for RS0
*/


#define IMRGLOBAL_AC_RS0_N0_IIO_VTD_REG 0x11020610

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr_rs0_en : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /*
                               RS Asset Classification bit for IMRs 0-4. IO
                               subsystem transactions from RS0 that hit an
                               enabled IMR address range will be allowed access
                               only when both of the following conditions are
                               met:[br] a) Request SAI is in the legal
                               permitted list as specified in the IMRs RAC/WAC
                               policy registers and b) IMR_AC_RS0 bit
                               corresponding to the IMR is set to 1. IO
                               subsystem originated RS0 transactions targeting
                               DRAM that do not hit any enabled IMR or special
                               protected regions will always be allowed access.
                            */
    UINT32 rsvd : 27;

                            /* Bits[31:5], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} IMRGLOBAL_AC_RS0_N0_IIO_VTD_STRUCT;

/* IMRGLOBAL_AC_RS0_N1_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x20800614)                                                      */
/*      SPRB0 (0x20800614)                                                      */
/*      SPRHBM (0x20800614)                                                     */
/*      SPRC0 (0x20800614)                                                      */
/*      SPRMCC (0x20800614)                                                     */
/*      SPRUCC (0x20800614)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRB0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRHBM Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRC0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRMCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRUCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* IMR Asset Classification for RS0
*/


#define IMRGLOBAL_AC_RS0_N1_IIO_VTD_REG 0x11020614

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 32;

                            /* Bits[31:0], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} IMRGLOBAL_AC_RS0_N1_IIO_VTD_STRUCT;

/* IMRGLOBAL_CP_N0_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x20800618)                                                      */
/*      SPRB0 (0x20800618)                                                      */
/*      SPRHBM (0x20800618)                                                     */
/*      SPRC0 (0x20800618)                                                      */
/*      SPRMCC (0x20800618)                                                     */
/*      SPRUCC (0x20800618)                                                     */
/* Register default value on SPRA0: 0x01000218                                  */
/* Register default value on SPRB0: 0x01000218                                  */
/* Register default value on SPRHBM: 0x01000218                                 */
/* Register default value on SPRC0: 0x01000218                                  */
/* Register default value on SPRMCC: 0x01000218                                 */
/* Register default value on SPRUCC: 0x01000218                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMR0                                             */
/* SPRB0 Security PolicyGroup: IMR0                                             */
/* SPRHBM Security PolicyGroup: IMR0                                            */
/* SPRC0 Security PolicyGroup: IMR0                                             */
/* SPRMCC Security PolicyGroup: IMR0                                            */
/* SPRUCC Security PolicyGroup: IMR0                                            */
/* This register configures the write access to RAC, WAC and CP registers for all IMR security policy groups.
*/


#define IMRGLOBAL_CP_N0_IIO_VTD_REG 0x11020618

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr_ctrl_pol : 32;

                            /* Bits[31:0], Access Type=RW, default=0x01000218*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to IMR WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} IMRGLOBAL_CP_N0_IIO_VTD_STRUCT;

/* IMRGLOBAL_CP_N1_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x2080061c)                                                      */
/*      SPRB0 (0x2080061c)                                                      */
/*      SPRHBM (0x2080061c)                                                     */
/*      SPRC0 (0x2080061c)                                                      */
/*      SPRMCC (0x2080061c)                                                     */
/*      SPRUCC (0x2080061c)                                                     */
/* Register default value on SPRA0: 0x00000400                                  */
/* Register default value on SPRB0: 0x00000400                                  */
/* Register default value on SPRHBM: 0x00000400                                 */
/* Register default value on SPRC0: 0x00000400                                  */
/* Register default value on SPRMCC: 0x00000400                                 */
/* Register default value on SPRUCC: 0x00000400                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMR0                                             */
/* SPRB0 Security PolicyGroup: IMR0                                             */
/* SPRHBM Security PolicyGroup: IMR0                                            */
/* SPRC0 Security PolicyGroup: IMR0                                             */
/* SPRMCC Security PolicyGroup: IMR0                                            */
/* SPRUCC Security PolicyGroup: IMR0                                            */
/* This register configures the write access to RAC, WAC and CP registers for all IMR security policy groups.
*/


#define IMRGLOBAL_CP_N1_IIO_VTD_REG 0x1102061C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr_ctrl_pol : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000400*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to IMR WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} IMRGLOBAL_CP_N1_IIO_VTD_STRUCT;

/* IMR0BASE_N0_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x20800620)                                                      */
/*      SPRB0 (0x20800620)                                                      */
/*      SPRHBM (0x20800620)                                                     */
/*      SPRC0 (0x20800620)                                                      */
/*      SPRMCC (0x20800620)                                                     */
/*      SPRUCC (0x20800620)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRB0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRHBM Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRC0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRMCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRUCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* This register, along with IMR0MASK, IMR0RAC, and IMR0WAC, defines an isolated region of memory[br]
that can be masked to prohibit certain system agents from accessing it. When an IOSF agent sends a[br]
request to MS2IOSF, an IMR may optionally prevent that transaction from changing the state of[br]
memory or from getting correct data in response to the operation, if the request's SAI field does not[br]
match the policy. The IMR's policy is configured by the IMR0RAC and IMR0WAC registers.
*/


#define IMR0BASE_N0_IIO_VTD_REG 0x11020620

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr_base : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies bits 51:12 of the start address of the
                               IMR. IMR size must be a strict power of two, at
                               least 4KB, and naturally aligned to the size.
                               These bits are compared with the result of the
                               IMRnMASK[39:0] applied to bits 51:12 of the
                               incoming address, to determine if an access
                               falls within the IMR
                            */

  } Bits;
  UINT32 Data;

} IMR0BASE_N0_IIO_VTD_STRUCT;

/* IMR0BASE_N1_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x20800624)                                                      */
/*      SPRB0 (0x20800624)                                                      */
/*      SPRHBM (0x20800624)                                                     */
/*      SPRC0 (0x20800624)                                                      */
/*      SPRMCC (0x20800624)                                                     */
/*      SPRUCC (0x20800624)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRB0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRHBM Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRC0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRMCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRUCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* This register, along with IMR0MASK, IMR0RAC, and IMR0WAC, defines an isolated region of memory[br]
that can be masked to prohibit certain system agents from accessing it. When an IOSF agent sends a[br]
request to MS2IOSF, an IMR may optionally prevent that transaction from changing the state of[br]
memory or from getting correct data in response to the operation, if the request's SAI field does not[br]
match the policy. The IMR's policy is configured by the IMR0RAC and IMR0WAC registers.
*/


#define IMR0BASE_N1_IIO_VTD_REG 0x11020624

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr_base : 8;

                            /* Bits[7:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies bits 51:12 of the start address of the
                               IMR. IMR size must be a strict power of two, at
                               least 4KB, and naturally aligned to the size.
                               These bits are compared with the result of the
                               IMRnMASK[39:0] applied to bits 51:12 of the
                               incoming address, to determine if an access
                               falls within the IMR
                            */
    UINT32 rsvd : 23;

                            /* Bits[30:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 imr_en : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* Enables access checking for the IMR */

  } Bits;
  UINT32 Data;

} IMR0BASE_N1_IIO_VTD_STRUCT;

/* IMR0MASK_N0_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x20800628)                                                      */
/*      SPRB0 (0x20800628)                                                      */
/*      SPRHBM (0x20800628)                                                     */
/*      SPRC0 (0x20800628)                                                      */
/*      SPRMCC (0x20800628)                                                     */
/*      SPRUCC (0x20800628)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRB0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRHBM Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRC0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRMCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRUCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* Isolated Memory Range Mask
*/


#define IMR0MASK_N0_IIO_VTD_REG 0x11020628

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr_mask : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               These bits are ANDed with bits 51:12 of the
                               incoming address to determine if the combined
                               result matches the IMRnBASE[39:0] value. A match
                               indicates that the incoming address falls within
                               the IMR.
                            */

  } Bits;
  UINT32 Data;

} IMR0MASK_N0_IIO_VTD_STRUCT;

/* IMR0MASK_N1_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x2080062c)                                                      */
/*      SPRB0 (0x2080062c)                                                      */
/*      SPRHBM (0x2080062c)                                                     */
/*      SPRC0 (0x2080062c)                                                      */
/*      SPRMCC (0x2080062c)                                                     */
/*      SPRUCC (0x2080062c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRB0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRHBM Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRC0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRMCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRUCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* Isolated Memory Range Mask
*/


#define IMR0MASK_N1_IIO_VTD_REG 0x1102062C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr_mask : 8;

                            /* Bits[7:0], Access Type=RW, default=0x00000000*/

                            /*
                               These bits are ANDed with bits 51:12 of the
                               incoming address to determine if the combined
                               result matches the IMRnBASE[39:0] value. A match
                               indicates that the incoming address falls within
                               the IMR.
                            */
    UINT32 rsvd : 24;

                            /* Bits[31:8], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} IMR0MASK_N1_IIO_VTD_STRUCT;

/* IMR0RAC_N0_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x20800630)                                                      */
/*      SPRB0 (0x20800630)                                                      */
/*      SPRHBM (0x20800630)                                                     */
/*      SPRC0 (0x20800630)                                                      */
/*      SPRMCC (0x20800630)                                                     */
/*      SPRUCC (0x20800630)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMR0                                             */
/* SPRB0 Security PolicyGroup: IMR0                                             */
/* SPRHBM Security PolicyGroup: IMR0                                            */
/* SPRC0 Security PolicyGroup: IMR0                                             */
/* SPRMCC Security PolicyGroup: IMR0                                            */
/* SPRUCC Security PolicyGroup: IMR0                                            */
/* This register configures the read access for registers in IMR0 security policy group.
*/


#define IMR0RAC_N0_IIO_VTD_REG 0x11020630

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr0_sai_pol : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in IMR0
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} IMR0RAC_N0_IIO_VTD_STRUCT;

/* IMR0RAC_N1_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x20800634)                                                      */
/*      SPRB0 (0x20800634)                                                      */
/*      SPRHBM (0x20800634)                                                     */
/*      SPRC0 (0x20800634)                                                      */
/*      SPRMCC (0x20800634)                                                     */
/*      SPRUCC (0x20800634)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMR0                                             */
/* SPRB0 Security PolicyGroup: IMR0                                             */
/* SPRHBM Security PolicyGroup: IMR0                                            */
/* SPRC0 Security PolicyGroup: IMR0                                             */
/* SPRMCC Security PolicyGroup: IMR0                                            */
/* SPRUCC Security PolicyGroup: IMR0                                            */
/* This register configures the read access for registers in IMR0 security policy group.
*/


#define IMR0RAC_N1_IIO_VTD_REG 0x11020634

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr0_sai_pol : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in IMR0
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} IMR0RAC_N1_IIO_VTD_STRUCT;

/* IMR0WAC_N0_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x20800638)                                                      */
/*      SPRB0 (0x20800638)                                                      */
/*      SPRHBM (0x20800638)                                                     */
/*      SPRC0 (0x20800638)                                                      */
/*      SPRMCC (0x20800638)                                                     */
/*      SPRUCC (0x20800638)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMR0                                             */
/* SPRB0 Security PolicyGroup: IMR0                                             */
/* SPRHBM Security PolicyGroup: IMR0                                            */
/* SPRC0 Security PolicyGroup: IMR0                                             */
/* SPRMCC Security PolicyGroup: IMR0                                            */
/* SPRUCC Security PolicyGroup: IMR0                                            */
/* This register configures the write access for registers in IMR0 security policy group.
*/


#define IMR0WAC_N0_IIO_VTD_REG 0x11020638

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr0_sai_pol : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in IMR0
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} IMR0WAC_N0_IIO_VTD_STRUCT;

/* IMR0WAC_N1_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x2080063c)                                                      */
/*      SPRB0 (0x2080063c)                                                      */
/*      SPRHBM (0x2080063c)                                                     */
/*      SPRC0 (0x2080063c)                                                      */
/*      SPRMCC (0x2080063c)                                                     */
/*      SPRUCC (0x2080063c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMR0                                             */
/* SPRB0 Security PolicyGroup: IMR0                                             */
/* SPRHBM Security PolicyGroup: IMR0                                            */
/* SPRC0 Security PolicyGroup: IMR0                                             */
/* SPRMCC Security PolicyGroup: IMR0                                            */
/* SPRUCC Security PolicyGroup: IMR0                                            */
/* This register configures the write access for registers in IMR0 security policy group.
*/


#define IMR0WAC_N1_IIO_VTD_REG 0x1102063C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr0_sai_pol : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in IMR0
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} IMR0WAC_N1_IIO_VTD_STRUCT;

/* IMR1BASE_N0_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x20800640)                                                      */
/*      SPRB0 (0x20800640)                                                      */
/*      SPRHBM (0x20800640)                                                     */
/*      SPRC0 (0x20800640)                                                      */
/*      SPRMCC (0x20800640)                                                     */
/*      SPRUCC (0x20800640)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRB0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRHBM Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRC0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRMCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRUCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* This register, along with IMR1MASK, IMR1RAC, and IMR1WAC, defines an isolated region of memory[br]
that can be masked to prohibit certain system agents from accessing it. When an IOSF agent sends a[br]
request to MS2IOSF, an IMR may optionally prevent that transaction from changing the state of[br]
memory or from getting correct data in response to the operation, if the request's SAI field does not[br]
match the policy. The IMR's policy is configured by the IMR1RAC and IMR1WAC registers.
*/


#define IMR1BASE_N0_IIO_VTD_REG 0x11020640

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr_base : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies bits 51:12 of the start address of the
                               IMR. IMR size must be a strict power of two, at
                               least 4KB, and naturally aligned to the size.
                               These bits are compared with the result of the
                               IMRnMASK[39:0] applied to bits 51:12 of the
                               incoming address, to determine if an access
                               falls within the IMR
                            */

  } Bits;
  UINT32 Data;

} IMR1BASE_N0_IIO_VTD_STRUCT;

/* IMR1BASE_N1_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x20800644)                                                      */
/*      SPRB0 (0x20800644)                                                      */
/*      SPRHBM (0x20800644)                                                     */
/*      SPRC0 (0x20800644)                                                      */
/*      SPRMCC (0x20800644)                                                     */
/*      SPRUCC (0x20800644)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRB0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRHBM Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRC0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRMCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRUCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* This register, along with IMR1MASK, IMR1RAC, and IMR1WAC, defines an isolated region of memory[br]
that can be masked to prohibit certain system agents from accessing it. When an IOSF agent sends a[br]
request to MS2IOSF, an IMR may optionally prevent that transaction from changing the state of[br]
memory or from getting correct data in response to the operation, if the request's SAI field does not[br]
match the policy. The IMR's policy is configured by the IMR1RAC and IMR1WAC registers.
*/


#define IMR1BASE_N1_IIO_VTD_REG 0x11020644

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr_base : 8;

                            /* Bits[7:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies bits 51:12 of the start address of the
                               IMR. IMR size must be a strict power of two, at
                               least 4KB, and naturally aligned to the size.
                               These bits are compared with the result of the
                               IMRnMASK[39:0] applied to bits 51:12 of the
                               incoming address, to determine if an access
                               falls within the IMR
                            */
    UINT32 rsvd : 23;

                            /* Bits[30:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 imr_en : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* Enables access checking for the IMR */

  } Bits;
  UINT32 Data;

} IMR1BASE_N1_IIO_VTD_STRUCT;

/* IMR1MASK_N0_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x20800648)                                                      */
/*      SPRB0 (0x20800648)                                                      */
/*      SPRHBM (0x20800648)                                                     */
/*      SPRC0 (0x20800648)                                                      */
/*      SPRMCC (0x20800648)                                                     */
/*      SPRUCC (0x20800648)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRB0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRHBM Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRC0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRMCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRUCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* Isolated Memory Range Mask
*/


#define IMR1MASK_N0_IIO_VTD_REG 0x11020648

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr_mask : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               These bits are ANDed with bits 51:12 of the
                               incoming address to determine if the combined
                               result matches the IMRnBASE[39:0] value. A match
                               indicates that the incoming address falls within
                               the IMR.
                            */

  } Bits;
  UINT32 Data;

} IMR1MASK_N0_IIO_VTD_STRUCT;

/* IMR1MASK_N1_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x2080064c)                                                      */
/*      SPRB0 (0x2080064c)                                                      */
/*      SPRHBM (0x2080064c)                                                     */
/*      SPRC0 (0x2080064c)                                                      */
/*      SPRMCC (0x2080064c)                                                     */
/*      SPRUCC (0x2080064c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRB0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRHBM Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRC0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRMCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRUCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* Isolated Memory Range Mask
*/


#define IMR1MASK_N1_IIO_VTD_REG 0x1102064C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr_mask : 8;

                            /* Bits[7:0], Access Type=RW, default=0x00000000*/

                            /*
                               These bits are ANDed with bits 51:12 of the
                               incoming address to determine if the combined
                               result matches the IMRnBASE[39:0] value. A match
                               indicates that the incoming address falls within
                               the IMR.
                            */
    UINT32 rsvd : 24;

                            /* Bits[31:8], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} IMR1MASK_N1_IIO_VTD_STRUCT;

/* IMR1RAC_N0_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x20800650)                                                      */
/*      SPRB0 (0x20800650)                                                      */
/*      SPRHBM (0x20800650)                                                     */
/*      SPRC0 (0x20800650)                                                      */
/*      SPRMCC (0x20800650)                                                     */
/*      SPRUCC (0x20800650)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMR1                                             */
/* SPRB0 Security PolicyGroup: IMR1                                             */
/* SPRHBM Security PolicyGroup: IMR1                                            */
/* SPRC0 Security PolicyGroup: IMR1                                             */
/* SPRMCC Security PolicyGroup: IMR1                                            */
/* SPRUCC Security PolicyGroup: IMR1                                            */
/* This register configures the read access for registers in IMR1 security policy group.
*/


#define IMR1RAC_N0_IIO_VTD_REG 0x11020650

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr1_sai_pol : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in IMR1
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} IMR1RAC_N0_IIO_VTD_STRUCT;

/* IMR1RAC_N1_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x20800654)                                                      */
/*      SPRB0 (0x20800654)                                                      */
/*      SPRHBM (0x20800654)                                                     */
/*      SPRC0 (0x20800654)                                                      */
/*      SPRMCC (0x20800654)                                                     */
/*      SPRUCC (0x20800654)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMR1                                             */
/* SPRB0 Security PolicyGroup: IMR1                                             */
/* SPRHBM Security PolicyGroup: IMR1                                            */
/* SPRC0 Security PolicyGroup: IMR1                                             */
/* SPRMCC Security PolicyGroup: IMR1                                            */
/* SPRUCC Security PolicyGroup: IMR1                                            */
/* This register configures the read access for registers in IMR1 security policy group.
*/


#define IMR1RAC_N1_IIO_VTD_REG 0x11020654

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr1_sai_pol : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in IMR1
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} IMR1RAC_N1_IIO_VTD_STRUCT;

/* IMR1WAC_N0_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x20800658)                                                      */
/*      SPRB0 (0x20800658)                                                      */
/*      SPRHBM (0x20800658)                                                     */
/*      SPRC0 (0x20800658)                                                      */
/*      SPRMCC (0x20800658)                                                     */
/*      SPRUCC (0x20800658)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMR1                                             */
/* SPRB0 Security PolicyGroup: IMR1                                             */
/* SPRHBM Security PolicyGroup: IMR1                                            */
/* SPRC0 Security PolicyGroup: IMR1                                             */
/* SPRMCC Security PolicyGroup: IMR1                                            */
/* SPRUCC Security PolicyGroup: IMR1                                            */
/* This register configures the write access for registers in IMR1 security policy group.
*/


#define IMR1WAC_N0_IIO_VTD_REG 0x11020658

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr1_sai_pol : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in IMR1
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} IMR1WAC_N0_IIO_VTD_STRUCT;

/* IMR1WAC_N1_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x2080065c)                                                      */
/*      SPRB0 (0x2080065c)                                                      */
/*      SPRHBM (0x2080065c)                                                     */
/*      SPRC0 (0x2080065c)                                                      */
/*      SPRMCC (0x2080065c)                                                     */
/*      SPRUCC (0x2080065c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMR1                                             */
/* SPRB0 Security PolicyGroup: IMR1                                             */
/* SPRHBM Security PolicyGroup: IMR1                                            */
/* SPRC0 Security PolicyGroup: IMR1                                             */
/* SPRMCC Security PolicyGroup: IMR1                                            */
/* SPRUCC Security PolicyGroup: IMR1                                            */
/* This register configures the write access for registers in IMR1 security policy group.
*/


#define IMR1WAC_N1_IIO_VTD_REG 0x1102065C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr1_sai_pol : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in IMR1
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} IMR1WAC_N1_IIO_VTD_STRUCT;

/* IMR2BASE_N0_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x20800660)                                                      */
/*      SPRB0 (0x20800660)                                                      */
/*      SPRHBM (0x20800660)                                                     */
/*      SPRC0 (0x20800660)                                                      */
/*      SPRMCC (0x20800660)                                                     */
/*      SPRUCC (0x20800660)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRB0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRHBM Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRC0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRMCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRUCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* This register, along with IMR2MASK, IMR2RAC, and IMR2WAC, defines an isolated region of memory[br]
that can be masked to prohibit certain system agents from accessing it. When an IOSF agent sends a[br]
request to MS2IOSF, an IMR may optionally prevent that transaction from changing the state of[br]
memory or from getting correct data in response to the operation, if the request's SAI field does not[br]
match the policy. The IMR's policy is configured by the IMR2RAC and IMR2WAC registers.
*/


#define IMR2BASE_N0_IIO_VTD_REG 0x11020660

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr_base : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies bits 51:12 of the start address of the
                               IMR. IMR size must be a strict power of two, at
                               least 4KB, and naturally aligned to the size.
                               These bits are compared with the result of the
                               IMRnMASK[39:0] applied to bits 51:12 of the
                               incoming address, to determine if an access
                               falls within the IMR
                            */

  } Bits;
  UINT32 Data;

} IMR2BASE_N0_IIO_VTD_STRUCT;

/* IMR2BASE_N1_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x20800664)                                                      */
/*      SPRB0 (0x20800664)                                                      */
/*      SPRHBM (0x20800664)                                                     */
/*      SPRC0 (0x20800664)                                                      */
/*      SPRMCC (0x20800664)                                                     */
/*      SPRUCC (0x20800664)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRB0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRHBM Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRC0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRMCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRUCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* This register, along with IMR2MASK, IMR2RAC, and IMR2WAC, defines an isolated region of memory[br]
that can be masked to prohibit certain system agents from accessing it. When an IOSF agent sends a[br]
request to MS2IOSF, an IMR may optionally prevent that transaction from changing the state of[br]
memory or from getting correct data in response to the operation, if the request's SAI field does not[br]
match the policy. The IMR's policy is configured by the IMR2RAC and IMR2WAC registers.
*/


#define IMR2BASE_N1_IIO_VTD_REG 0x11020664

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr_base : 8;

                            /* Bits[7:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies bits 51:12 of the start address of the
                               IMR. IMR size must be a strict power of two, at
                               least 4KB, and naturally aligned to the size.
                               These bits are compared with the result of the
                               IMRnMASK[39:0] applied to bits 51:12 of the
                               incoming address, to determine if an access
                               falls within the IMR
                            */
    UINT32 rsvd : 23;

                            /* Bits[30:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 imr_en : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* Enables access checking for the IMR */

  } Bits;
  UINT32 Data;

} IMR2BASE_N1_IIO_VTD_STRUCT;

/* IMR2MASK_N0_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x20800668)                                                      */
/*      SPRB0 (0x20800668)                                                      */
/*      SPRHBM (0x20800668)                                                     */
/*      SPRC0 (0x20800668)                                                      */
/*      SPRMCC (0x20800668)                                                     */
/*      SPRUCC (0x20800668)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRB0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRHBM Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRC0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRMCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRUCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* Isolated Memory Range Mask
*/


#define IMR2MASK_N0_IIO_VTD_REG 0x11020668

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr_mask : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               These bits are ANDed with bits 51:12 of the
                               incoming address to determine if the combined
                               result matches the IMRnBASE[39:0] value. A match
                               indicates that the incoming address falls within
                               the IMR.
                            */

  } Bits;
  UINT32 Data;

} IMR2MASK_N0_IIO_VTD_STRUCT;

/* IMR2MASK_N1_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x2080066c)                                                      */
/*      SPRB0 (0x2080066c)                                                      */
/*      SPRHBM (0x2080066c)                                                     */
/*      SPRC0 (0x2080066c)                                                      */
/*      SPRMCC (0x2080066c)                                                     */
/*      SPRUCC (0x2080066c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRB0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRHBM Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRC0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRMCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRUCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* Isolated Memory Range Mask
*/


#define IMR2MASK_N1_IIO_VTD_REG 0x1102066C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr_mask : 8;

                            /* Bits[7:0], Access Type=RW, default=0x00000000*/

                            /*
                               These bits are ANDed with bits 51:12 of the
                               incoming address to determine if the combined
                               result matches the IMRnBASE[39:0] value. A match
                               indicates that the incoming address falls within
                               the IMR.
                            */
    UINT32 rsvd : 24;

                            /* Bits[31:8], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} IMR2MASK_N1_IIO_VTD_STRUCT;

/* IMR2RAC_N0_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x20800670)                                                      */
/*      SPRB0 (0x20800670)                                                      */
/*      SPRHBM (0x20800670)                                                     */
/*      SPRC0 (0x20800670)                                                      */
/*      SPRMCC (0x20800670)                                                     */
/*      SPRUCC (0x20800670)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMR2                                             */
/* SPRB0 Security PolicyGroup: IMR2                                             */
/* SPRHBM Security PolicyGroup: IMR2                                            */
/* SPRC0 Security PolicyGroup: IMR2                                             */
/* SPRMCC Security PolicyGroup: IMR2                                            */
/* SPRUCC Security PolicyGroup: IMR2                                            */
/* This register configures the read access for registers in IMR2 security policy group.
*/


#define IMR2RAC_N0_IIO_VTD_REG 0x11020670

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr2_sai_pol : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in IMR2
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} IMR2RAC_N0_IIO_VTD_STRUCT;

/* IMR2RAC_N1_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x20800674)                                                      */
/*      SPRB0 (0x20800674)                                                      */
/*      SPRHBM (0x20800674)                                                     */
/*      SPRC0 (0x20800674)                                                      */
/*      SPRMCC (0x20800674)                                                     */
/*      SPRUCC (0x20800674)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMR2                                             */
/* SPRB0 Security PolicyGroup: IMR2                                             */
/* SPRHBM Security PolicyGroup: IMR2                                            */
/* SPRC0 Security PolicyGroup: IMR2                                             */
/* SPRMCC Security PolicyGroup: IMR2                                            */
/* SPRUCC Security PolicyGroup: IMR2                                            */
/* This register configures the read access for registers in IMR2 security policy group.
*/


#define IMR2RAC_N1_IIO_VTD_REG 0x11020674

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr2_sai_pol : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in IMR2
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} IMR2RAC_N1_IIO_VTD_STRUCT;

/* IMR2WAC_N0_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x20800678)                                                      */
/*      SPRB0 (0x20800678)                                                      */
/*      SPRHBM (0x20800678)                                                     */
/*      SPRC0 (0x20800678)                                                      */
/*      SPRMCC (0x20800678)                                                     */
/*      SPRUCC (0x20800678)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMR2                                             */
/* SPRB0 Security PolicyGroup: IMR2                                             */
/* SPRHBM Security PolicyGroup: IMR2                                            */
/* SPRC0 Security PolicyGroup: IMR2                                             */
/* SPRMCC Security PolicyGroup: IMR2                                            */
/* SPRUCC Security PolicyGroup: IMR2                                            */
/* This register configures the write access for registers in IMR2 security policy group.
*/


#define IMR2WAC_N0_IIO_VTD_REG 0x11020678

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr2_sai_pol : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in IMR2
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} IMR2WAC_N0_IIO_VTD_STRUCT;

/* IMR2WAC_N1_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x2080067c)                                                      */
/*      SPRB0 (0x2080067c)                                                      */
/*      SPRHBM (0x2080067c)                                                     */
/*      SPRC0 (0x2080067c)                                                      */
/*      SPRMCC (0x2080067c)                                                     */
/*      SPRUCC (0x2080067c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMR2                                             */
/* SPRB0 Security PolicyGroup: IMR2                                             */
/* SPRHBM Security PolicyGroup: IMR2                                            */
/* SPRC0 Security PolicyGroup: IMR2                                             */
/* SPRMCC Security PolicyGroup: IMR2                                            */
/* SPRUCC Security PolicyGroup: IMR2                                            */
/* This register configures the write access for registers in IMR2 security policy group.
*/


#define IMR2WAC_N1_IIO_VTD_REG 0x1102067C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr2_sai_pol : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in IMR2
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} IMR2WAC_N1_IIO_VTD_STRUCT;

/* IMR3BASE_N0_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x20800680)                                                      */
/*      SPRB0 (0x20800680)                                                      */
/*      SPRHBM (0x20800680)                                                     */
/*      SPRC0 (0x20800680)                                                      */
/*      SPRMCC (0x20800680)                                                     */
/*      SPRUCC (0x20800680)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRB0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRHBM Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRC0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRMCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRUCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* This register, along with IMR3MASK, IMR3RAC, and IMR3WAC, defines an isolated region of memory[br]
that can be masked to prohibit certain system agents from accessing it. When an IOSF agent sends a[br]
request to MS2IOSF, an IMR may optionally prevent that transaction from changing the state of[br]
memory or from getting correct data in response to the operation, if the request's SAI field does not[br]
match the policy. The IMR's policy is configured by the IMR3RAC and IMR3WAC registers.
*/


#define IMR3BASE_N0_IIO_VTD_REG 0x11020680

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr_base : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies bits 51:12 of the start address of the
                               IMR. IMR size must be a strict power of two, at
                               least 4KB, and naturally aligned to the size.
                               These bits are compared with the result of the
                               IMRnMASK[39:0] applied to bits 51:12 of the
                               incoming address, to determine if an access
                               falls within the IMR
                            */

  } Bits;
  UINT32 Data;

} IMR3BASE_N0_IIO_VTD_STRUCT;

/* IMR3BASE_N1_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x20800684)                                                      */
/*      SPRB0 (0x20800684)                                                      */
/*      SPRHBM (0x20800684)                                                     */
/*      SPRC0 (0x20800684)                                                      */
/*      SPRMCC (0x20800684)                                                     */
/*      SPRUCC (0x20800684)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRB0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRHBM Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRC0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRMCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRUCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* This register, along with IMR3MASK, IMR3RAC, and IMR3WAC, defines an isolated region of memory[br]
that can be masked to prohibit certain system agents from accessing it. When an IOSF agent sends a[br]
request to MS2IOSF, an IMR may optionally prevent that transaction from changing the state of[br]
memory or from getting correct data in response to the operation, if the request's SAI field does not[br]
match the policy. The IMR's policy is configured by the IMR3RAC and IMR3WAC registers.
*/


#define IMR3BASE_N1_IIO_VTD_REG 0x11020684

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr_base : 8;

                            /* Bits[7:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies bits 51:12 of the start address of the
                               IMR. IMR size must be a strict power of two, at
                               least 4KB, and naturally aligned to the size.
                               These bits are compared with the result of the
                               IMRnMASK[39:0] applied to bits 51:12 of the
                               incoming address, to determine if an access
                               falls within the IMR
                            */
    UINT32 rsvd : 23;

                            /* Bits[30:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 imr_en : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* Enables access checking for the IMR */

  } Bits;
  UINT32 Data;

} IMR3BASE_N1_IIO_VTD_STRUCT;

/* IMR3MASK_N0_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x20800688)                                                      */
/*      SPRB0 (0x20800688)                                                      */
/*      SPRHBM (0x20800688)                                                     */
/*      SPRC0 (0x20800688)                                                      */
/*      SPRMCC (0x20800688)                                                     */
/*      SPRUCC (0x20800688)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRB0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRHBM Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRC0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRMCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRUCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* Isolated Memory Range Mask
*/


#define IMR3MASK_N0_IIO_VTD_REG 0x11020688

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr_mask : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               These bits are ANDed with bits 51:12 of the
                               incoming address to determine if the combined
                               result matches the IMRnBASE[39:0] value. A match
                               indicates that the incoming address falls within
                               the IMR.
                            */

  } Bits;
  UINT32 Data;

} IMR3MASK_N0_IIO_VTD_STRUCT;

/* IMR3MASK_N1_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x2080068c)                                                      */
/*      SPRB0 (0x2080068c)                                                      */
/*      SPRHBM (0x2080068c)                                                     */
/*      SPRC0 (0x2080068c)                                                      */
/*      SPRMCC (0x2080068c)                                                     */
/*      SPRUCC (0x2080068c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRB0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRHBM Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRC0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRMCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRUCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* Isolated Memory Range Mask
*/


#define IMR3MASK_N1_IIO_VTD_REG 0x1102068C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr_mask : 8;

                            /* Bits[7:0], Access Type=RW, default=0x00000000*/

                            /*
                               These bits are ANDed with bits 51:12 of the
                               incoming address to determine if the combined
                               result matches the IMRnBASE[39:0] value. A match
                               indicates that the incoming address falls within
                               the IMR.
                            */
    UINT32 rsvd : 24;

                            /* Bits[31:8], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} IMR3MASK_N1_IIO_VTD_STRUCT;

/* IMR3RAC_N0_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x20800690)                                                      */
/*      SPRB0 (0x20800690)                                                      */
/*      SPRHBM (0x20800690)                                                     */
/*      SPRC0 (0x20800690)                                                      */
/*      SPRMCC (0x20800690)                                                     */
/*      SPRUCC (0x20800690)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMR3                                             */
/* SPRB0 Security PolicyGroup: IMR3                                             */
/* SPRHBM Security PolicyGroup: IMR3                                            */
/* SPRC0 Security PolicyGroup: IMR3                                             */
/* SPRMCC Security PolicyGroup: IMR3                                            */
/* SPRUCC Security PolicyGroup: IMR3                                            */
/* This register configures the read access for registers in IMR3 security policy group.
*/


#define IMR3RAC_N0_IIO_VTD_REG 0x11020690

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr3_sai_pol : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in IMR3
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} IMR3RAC_N0_IIO_VTD_STRUCT;

/* IMR3RAC_N1_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x20800694)                                                      */
/*      SPRB0 (0x20800694)                                                      */
/*      SPRHBM (0x20800694)                                                     */
/*      SPRC0 (0x20800694)                                                      */
/*      SPRMCC (0x20800694)                                                     */
/*      SPRUCC (0x20800694)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMR3                                             */
/* SPRB0 Security PolicyGroup: IMR3                                             */
/* SPRHBM Security PolicyGroup: IMR3                                            */
/* SPRC0 Security PolicyGroup: IMR3                                             */
/* SPRMCC Security PolicyGroup: IMR3                                            */
/* SPRUCC Security PolicyGroup: IMR3                                            */
/* This register configures the read access for registers in IMR3 security policy group.
*/


#define IMR3RAC_N1_IIO_VTD_REG 0x11020694

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr3_sai_pol : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in IMR3
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} IMR3RAC_N1_IIO_VTD_STRUCT;

/* IMR3WAC_N0_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x20800698)                                                      */
/*      SPRB0 (0x20800698)                                                      */
/*      SPRHBM (0x20800698)                                                     */
/*      SPRC0 (0x20800698)                                                      */
/*      SPRMCC (0x20800698)                                                     */
/*      SPRUCC (0x20800698)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMR3                                             */
/* SPRB0 Security PolicyGroup: IMR3                                             */
/* SPRHBM Security PolicyGroup: IMR3                                            */
/* SPRC0 Security PolicyGroup: IMR3                                             */
/* SPRMCC Security PolicyGroup: IMR3                                            */
/* SPRUCC Security PolicyGroup: IMR3                                            */
/* This register configures the write access for registers in IMR3 security policy group.
*/


#define IMR3WAC_N0_IIO_VTD_REG 0x11020698

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr3_sai_pol : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in IMR3
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} IMR3WAC_N0_IIO_VTD_STRUCT;

/* IMR3WAC_N1_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x2080069c)                                                      */
/*      SPRB0 (0x2080069c)                                                      */
/*      SPRHBM (0x2080069c)                                                     */
/*      SPRC0 (0x2080069c)                                                      */
/*      SPRMCC (0x2080069c)                                                     */
/*      SPRUCC (0x2080069c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMR3                                             */
/* SPRB0 Security PolicyGroup: IMR3                                             */
/* SPRHBM Security PolicyGroup: IMR3                                            */
/* SPRC0 Security PolicyGroup: IMR3                                             */
/* SPRMCC Security PolicyGroup: IMR3                                            */
/* SPRUCC Security PolicyGroup: IMR3                                            */
/* This register configures the write access for registers in IMR3 security policy group.
*/


#define IMR3WAC_N1_IIO_VTD_REG 0x1102069C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr3_sai_pol : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in IMR3
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} IMR3WAC_N1_IIO_VTD_STRUCT;

/* IMR4BASE_N0_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x208006a0)                                                      */
/*      SPRB0 (0x208006a0)                                                      */
/*      SPRHBM (0x208006a0)                                                     */
/*      SPRC0 (0x208006a0)                                                      */
/*      SPRMCC (0x208006a0)                                                     */
/*      SPRUCC (0x208006a0)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRB0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRHBM Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRC0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRMCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRUCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* This register, along with IMR4MASK, IMR4RAC, and IMR4WAC, defines an isolated region of memory[br]
that can be masked to prohibit certain system agents from accessing it. When an IOSF agent sends a[br]
request to MS2IOSF, an IMR may optionally prevent that transaction from changing the state of[br]
memory or from getting correct data in response to the operation, if the request's SAI field does not[br]
match the policy. The IMR's policy is configured by the IMR4RAC and IMR4WAC registers.
*/


#define IMR4BASE_N0_IIO_VTD_REG 0x110206A0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr_base : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies bits 51:12 of the start address of the
                               IMR. IMR size must be a strict power of two, at
                               least 4KB, and naturally aligned to the size.
                               These bits are compared with the result of the
                               IMRnMASK[39:0] applied to bits 51:12 of the
                               incoming address, to determine if an access
                               falls within the IMR
                            */

  } Bits;
  UINT32 Data;

} IMR4BASE_N0_IIO_VTD_STRUCT;

/* IMR4BASE_N1_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x208006a4)                                                      */
/*      SPRB0 (0x208006a4)                                                      */
/*      SPRHBM (0x208006a4)                                                     */
/*      SPRC0 (0x208006a4)                                                      */
/*      SPRMCC (0x208006a4)                                                     */
/*      SPRUCC (0x208006a4)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRB0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRHBM Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRC0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRMCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRUCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* This register, along with IMR4MASK, IMR4RAC, and IMR4WAC, defines an isolated region of memory[br]
that can be masked to prohibit certain system agents from accessing it. When an IOSF agent sends a[br]
request to MS2IOSF, an IMR may optionally prevent that transaction from changing the state of[br]
memory or from getting correct data in response to the operation, if the request's SAI field does not[br]
match the policy. The IMR's policy is configured by the IMR4RAC and IMR4WAC registers.
*/


#define IMR4BASE_N1_IIO_VTD_REG 0x110206A4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr_base : 8;

                            /* Bits[7:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies bits 51:12 of the start address of the
                               IMR. IMR size must be a strict power of two, at
                               least 4KB, and naturally aligned to the size.
                               These bits are compared with the result of the
                               IMRnMASK[39:0] applied to bits 51:12 of the
                               incoming address, to determine if an access
                               falls within the IMR
                            */
    UINT32 rsvd : 23;

                            /* Bits[30:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 imr_en : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* Enables access checking for the IMR */

  } Bits;
  UINT32 Data;

} IMR4BASE_N1_IIO_VTD_STRUCT;

/* IMR4MASK_N0_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x208006a8)                                                      */
/*      SPRB0 (0x208006a8)                                                      */
/*      SPRHBM (0x208006a8)                                                     */
/*      SPRC0 (0x208006a8)                                                      */
/*      SPRMCC (0x208006a8)                                                     */
/*      SPRUCC (0x208006a8)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRB0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRHBM Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRC0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRMCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRUCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* Isolated Memory Range Mask
*/


#define IMR4MASK_N0_IIO_VTD_REG 0x110206A8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr_mask : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               These bits are ANDed with bits 51:12 of the
                               incoming address to determine if the combined
                               result matches the IMRnBASE[39:0] value. A match
                               indicates that the incoming address falls within
                               the IMR.
                            */

  } Bits;
  UINT32 Data;

} IMR4MASK_N0_IIO_VTD_STRUCT;

/* IMR4MASK_N1_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x208006ac)                                                      */
/*      SPRB0 (0x208006ac)                                                      */
/*      SPRHBM (0x208006ac)                                                     */
/*      SPRC0 (0x208006ac)                                                      */
/*      SPRMCC (0x208006ac)                                                     */
/*      SPRUCC (0x208006ac)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRB0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRHBM Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRC0 Security PolicyGroup: IMRGLOBAL_BM                                     */
/* SPRMCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* SPRUCC Security PolicyGroup: IMRGLOBAL_BM                                    */
/* Isolated Memory Range Mask
*/


#define IMR4MASK_N1_IIO_VTD_REG 0x110206AC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr_mask : 8;

                            /* Bits[7:0], Access Type=RW, default=0x00000000*/

                            /*
                               These bits are ANDed with bits 51:12 of the
                               incoming address to determine if the combined
                               result matches the IMRnBASE[39:0] value. A match
                               indicates that the incoming address falls within
                               the IMR.
                            */
    UINT32 rsvd : 24;

                            /* Bits[31:8], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} IMR4MASK_N1_IIO_VTD_STRUCT;

/* IMR4RAC_N0_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x208006b0)                                                      */
/*      SPRB0 (0x208006b0)                                                      */
/*      SPRHBM (0x208006b0)                                                     */
/*      SPRC0 (0x208006b0)                                                      */
/*      SPRMCC (0x208006b0)                                                     */
/*      SPRUCC (0x208006b0)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMR4                                             */
/* SPRB0 Security PolicyGroup: IMR4                                             */
/* SPRHBM Security PolicyGroup: IMR4                                            */
/* SPRC0 Security PolicyGroup: IMR4                                             */
/* SPRMCC Security PolicyGroup: IMR4                                            */
/* SPRUCC Security PolicyGroup: IMR4                                            */
/* This register configures the read access for registers in IMR4 security policy group.
*/


#define IMR4RAC_N0_IIO_VTD_REG 0x110206B0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr4_sai_pol : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in IMR4
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} IMR4RAC_N0_IIO_VTD_STRUCT;

/* IMR4RAC_N1_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x208006b4)                                                      */
/*      SPRB0 (0x208006b4)                                                      */
/*      SPRHBM (0x208006b4)                                                     */
/*      SPRC0 (0x208006b4)                                                      */
/*      SPRMCC (0x208006b4)                                                     */
/*      SPRUCC (0x208006b4)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMR4                                             */
/* SPRB0 Security PolicyGroup: IMR4                                             */
/* SPRHBM Security PolicyGroup: IMR4                                            */
/* SPRC0 Security PolicyGroup: IMR4                                             */
/* SPRMCC Security PolicyGroup: IMR4                                            */
/* SPRUCC Security PolicyGroup: IMR4                                            */
/* This register configures the read access for registers in IMR4 security policy group.
*/


#define IMR4RAC_N1_IIO_VTD_REG 0x110206B4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr4_sai_pol : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in IMR4
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} IMR4RAC_N1_IIO_VTD_STRUCT;

/* IMR4WAC_N0_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x208006b8)                                                      */
/*      SPRB0 (0x208006b8)                                                      */
/*      SPRHBM (0x208006b8)                                                     */
/*      SPRC0 (0x208006b8)                                                      */
/*      SPRMCC (0x208006b8)                                                     */
/*      SPRUCC (0x208006b8)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMR4                                             */
/* SPRB0 Security PolicyGroup: IMR4                                             */
/* SPRHBM Security PolicyGroup: IMR4                                            */
/* SPRC0 Security PolicyGroup: IMR4                                             */
/* SPRMCC Security PolicyGroup: IMR4                                            */
/* SPRUCC Security PolicyGroup: IMR4                                            */
/* This register configures the write access for registers in IMR4 security policy group.
*/


#define IMR4WAC_N0_IIO_VTD_REG 0x110206B8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr4_sai_pol : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in IMR4
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} IMR4WAC_N0_IIO_VTD_STRUCT;

/* IMR4WAC_N1_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x208006bc)                                                      */
/*      SPRB0 (0x208006bc)                                                      */
/*      SPRHBM (0x208006bc)                                                     */
/*      SPRC0 (0x208006bc)                                                      */
/*      SPRMCC (0x208006bc)                                                     */
/*      SPRUCC (0x208006bc)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: IMR4                                             */
/* SPRB0 Security PolicyGroup: IMR4                                             */
/* SPRHBM Security PolicyGroup: IMR4                                            */
/* SPRC0 Security PolicyGroup: IMR4                                             */
/* SPRMCC Security PolicyGroup: IMR4                                            */
/* SPRUCC Security PolicyGroup: IMR4                                            */
/* This register configures the write access for registers in IMR4 security policy group.
*/


#define IMR4WAC_N1_IIO_VTD_REG 0x110206BC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 imr4_sai_pol : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in IMR4
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} IMR4WAC_N1_IIO_VTD_STRUCT;

/* DFX_PG_CP_N0_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x208006c8)                                                      */
/*      SPRB0 (0x208006c8)                                                      */
/*      SPRHBM (0x208006c8)                                                     */
/*      SPRC0 (0x208006c8)                                                      */
/*      SPRMCC (0x208006c8)                                                     */
/*      SPRUCC (0x208006c8)                                                     */
/* Register default value on SPRA0: 0x01000218                                  */
/* Register default value on SPRB0: 0x01000218                                  */
/* Register default value on SPRHBM: 0x01000218                                 */
/* Register default value on SPRC0: 0x01000218                                  */
/* Register default value on SPRMCC: 0x01000218                                 */
/* Register default value on SPRUCC: 0x01000218                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: DFX                                              */
/* SPRB0 Security PolicyGroup: DFX                                              */
/* SPRHBM Security PolicyGroup: DFX                                             */
/* SPRC0 Security PolicyGroup: DFX                                              */
/* SPRMCC Security PolicyGroup: DFX                                             */
/* SPRUCC Security PolicyGroup: DFX                                             */
/* This register configures the write access to RAC, WAC and CP registers for DFX security policy group.
*/


#define DFX_PG_CP_N0_IIO_VTD_REG 0x110206C8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 dfx_ctrl_pol_0 : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_1 : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_2 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_3 : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to DFX WAC, RAC
                               and CP registers, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_4 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_5 : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_6 : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_7 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_8 : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_9 : 1;

                            /* Bits[9:9], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to DFX WAC, RAC
                               and CP registers, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_10 : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_11 : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_12 : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_13 : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_14 : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_15 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_16 : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_17 : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_18 : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_19 : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_20 : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_21 : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_22 : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_23 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_24 : 1;

                            /* Bits[24:24], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to DFX WAC, RAC
                               and CP registers, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_25 : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_26 : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_27 : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_28 : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_29 : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_30 : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_31 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} DFX_PG_CP_N0_IIO_VTD_STRUCT;

/* DFX_PG_CP_N1_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x208006cc)                                                      */
/*      SPRB0 (0x208006cc)                                                      */
/*      SPRHBM (0x208006cc)                                                     */
/*      SPRC0 (0x208006cc)                                                      */
/*      SPRMCC (0x208006cc)                                                     */
/*      SPRUCC (0x208006cc)                                                     */
/* Register default value on SPRA0: 0x00000400                                  */
/* Register default value on SPRB0: 0x00000400                                  */
/* Register default value on SPRHBM: 0x00000400                                 */
/* Register default value on SPRC0: 0x00000400                                  */
/* Register default value on SPRMCC: 0x00000400                                 */
/* Register default value on SPRUCC: 0x00000400                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: DFX                                              */
/* SPRB0 Security PolicyGroup: DFX                                              */
/* SPRHBM Security PolicyGroup: DFX                                             */
/* SPRC0 Security PolicyGroup: DFX                                              */
/* SPRMCC Security PolicyGroup: DFX                                             */
/* SPRUCC Security PolicyGroup: DFX                                             */
/* This register configures the write access to RAC, WAC and CP registers for DFX security policy group.
*/


#define DFX_PG_CP_N1_IIO_VTD_REG 0x110206CC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 dfx_ctrl_pol_32 : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_33 : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_34 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_35 : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_36 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_37 : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_38 : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_39 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_40 : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_41 : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_42 : 1;

                            /* Bits[10:10], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to DFX WAC, RAC
                               and CP registers, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_43 : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_44 : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_45 : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_46 : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_47 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_48 : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_49 : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_50 : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_51 : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_52 : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_53 : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_54 : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_55 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_56 : 1;

                            /* Bits[24:24], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_57 : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_58 : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_59 : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_60 : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_61 : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_62 : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 dfx_ctrl_pol_63 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to DFX WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} DFX_PG_CP_N1_IIO_VTD_STRUCT;

/* DFX_PG_RAC_N0_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x208006d0)                                                      */
/*      SPRB0 (0x208006d0)                                                      */
/*      SPRHBM (0x208006d0)                                                     */
/*      SPRC0 (0x208006d0)                                                      */
/*      SPRMCC (0x208006d0)                                                     */
/*      SPRUCC (0x208006d0)                                                     */
/* Register default value on SPRA0: 0x0100020A                                  */
/* Register default value on SPRB0: 0x0100020A                                  */
/* Register default value on SPRHBM: 0x0100020A                                 */
/* Register default value on SPRC0: 0x0100020A                                  */
/* Register default value on SPRMCC: 0x0100020A                                 */
/* Register default value on SPRUCC: 0x0100020A                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: DFX                                              */
/* SPRB0 Security PolicyGroup: DFX                                              */
/* SPRHBM Security PolicyGroup: DFX                                             */
/* SPRC0 Security PolicyGroup: DFX                                              */
/* SPRMCC Security PolicyGroup: DFX                                             */
/* SPRUCC Security PolicyGroup: DFX                                             */
/* This register configures the read access for registers in DFX security policy group.
*/


#define DFX_PG_RAC_N0_IIO_VTD_REG 0x110206D0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 dfx_sai_pol_0 : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_1 : 1;

                            /* Bits[1:1], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed read access to registers in
                               DFX security policy group, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_2 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_3 : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed read access to registers in
                               DFX security policy group, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_4 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_5 : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_6 : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_7 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_8 : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_9 : 1;

                            /* Bits[9:9], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed read access to registers in
                               DFX security policy group, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_10 : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_11 : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_12 : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_13 : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_14 : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_15 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_16 : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_17 : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_18 : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_19 : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_20 : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_21 : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_22 : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_23 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_24 : 1;

                            /* Bits[24:24], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed read access to registers in
                               DFX security policy group, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_25 : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_26 : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_27 : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_28 : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_29 : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_30 : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_31 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} DFX_PG_RAC_N0_IIO_VTD_STRUCT;

/* DFX_PG_RAC_N1_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x208006d4)                                                      */
/*      SPRB0 (0x208006d4)                                                      */
/*      SPRHBM (0x208006d4)                                                     */
/*      SPRC0 (0x208006d4)                                                      */
/*      SPRMCC (0x208006d4)                                                     */
/*      SPRUCC (0x208006d4)                                                     */
/* Register default value on SPRA0: 0x20000500                                  */
/* Register default value on SPRB0: 0x20000500                                  */
/* Register default value on SPRHBM: 0x20000500                                 */
/* Register default value on SPRC0: 0x20000500                                  */
/* Register default value on SPRMCC: 0x20000500                                 */
/* Register default value on SPRUCC: 0x20000500                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: DFX                                              */
/* SPRB0 Security PolicyGroup: DFX                                              */
/* SPRHBM Security PolicyGroup: DFX                                             */
/* SPRC0 Security PolicyGroup: DFX                                              */
/* SPRMCC Security PolicyGroup: DFX                                             */
/* SPRUCC Security PolicyGroup: DFX                                             */
/* This register configures the read access for registers in DFX security policy group.
*/


#define DFX_PG_RAC_N1_IIO_VTD_REG 0x110206D4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 dfx_sai_pol_32 : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_33 : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_34 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_35 : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_36 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_37 : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_38 : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_39 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_40 : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_41 : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_42 : 1;

                            /* Bits[10:10], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed read access to registers in
                               DFX security policy group, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_43 : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_44 : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_45 : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_46 : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_47 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_48 : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_49 : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_50 : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_51 : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_52 : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_53 : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_54 : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_55 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_56 : 1;

                            /* Bits[24:24], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_57 : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_58 : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_59 : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_60 : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_61 : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_62 : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_63 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in DFX security
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} DFX_PG_RAC_N1_IIO_VTD_STRUCT;

/* DFX_PG_WAC_N0_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x208006d8)                                                      */
/*      SPRB0 (0x208006d8)                                                      */
/*      SPRHBM (0x208006d8)                                                     */
/*      SPRC0 (0x208006d8)                                                      */
/*      SPRMCC (0x208006d8)                                                     */
/*      SPRUCC (0x208006d8)                                                     */
/* Register default value on SPRA0: 0x0100020A                                  */
/* Register default value on SPRB0: 0x0100020A                                  */
/* Register default value on SPRHBM: 0x0100020A                                 */
/* Register default value on SPRC0: 0x0100020A                                  */
/* Register default value on SPRMCC: 0x0100020A                                 */
/* Register default value on SPRUCC: 0x0100020A                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: DFX                                              */
/* SPRB0 Security PolicyGroup: DFX                                              */
/* SPRHBM Security PolicyGroup: DFX                                             */
/* SPRC0 Security PolicyGroup: DFX                                              */
/* SPRMCC Security PolicyGroup: DFX                                             */
/* SPRUCC Security PolicyGroup: DFX                                             */
/* This register configures the write access for registers in DFX security policy group.
*/


#define DFX_PG_WAC_N0_IIO_VTD_REG 0x110206D8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 dfx_sai_pol_0 : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_1 : 1;

                            /* Bits[1:1], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to registers in
                               DFX security policy group, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_2 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_3 : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to registers in
                               DFX security policy group, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_4 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_5 : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_6 : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_7 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_8 : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_9 : 1;

                            /* Bits[9:9], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to registers in
                               DFX security policy group, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_10 : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_11 : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_12 : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_13 : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_14 : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_15 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_16 : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_17 : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_18 : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_19 : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_20 : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_21 : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_22 : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_23 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_24 : 1;

                            /* Bits[24:24], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to registers in
                               DFX security policy group, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_25 : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_26 : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_27 : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_28 : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_29 : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_30 : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_31 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} DFX_PG_WAC_N0_IIO_VTD_STRUCT;

/* DFX_PG_WAC_N1_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x208006dc)                                                      */
/*      SPRB0 (0x208006dc)                                                      */
/*      SPRHBM (0x208006dc)                                                     */
/*      SPRC0 (0x208006dc)                                                      */
/*      SPRMCC (0x208006dc)                                                     */
/*      SPRUCC (0x208006dc)                                                     */
/* Register default value on SPRA0: 0x20000400                                  */
/* Register default value on SPRB0: 0x20000400                                  */
/* Register default value on SPRHBM: 0x20000400                                 */
/* Register default value on SPRC0: 0x20000400                                  */
/* Register default value on SPRMCC: 0x20000400                                 */
/* Register default value on SPRUCC: 0x20000400                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: DFX                                              */
/* SPRB0 Security PolicyGroup: DFX                                              */
/* SPRHBM Security PolicyGroup: DFX                                             */
/* SPRC0 Security PolicyGroup: DFX                                              */
/* SPRMCC Security PolicyGroup: DFX                                             */
/* SPRUCC Security PolicyGroup: DFX                                             */
/* This register configures the write access for registers in DFX security policy group.
*/


#define DFX_PG_WAC_N1_IIO_VTD_REG 0x110206DC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 dfx_sai_pol_32 : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_33 : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_34 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_35 : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_36 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_37 : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_38 : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_39 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_40 : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_41 : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_42 : 1;

                            /* Bits[10:10], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to registers in
                               DFX security policy group, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_43 : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_44 : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_45 : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_46 : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_47 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_48 : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_49 : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_50 : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_51 : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_52 : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_53 : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_54 : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_55 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_56 : 1;

                            /* Bits[24:24], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_57 : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_58 : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_59 : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_60 : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_61 : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_62 : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 dfx_sai_pol_63 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in DFX
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} DFX_PG_WAC_N1_IIO_VTD_STRUCT;

#if defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
/* B2BCRDTOKCHK_ITC_HDR_PIPE_0_N0_IIO_VTD_REG supported on:                     */
/*      SPRB0 (0x208006e0)                                                      */
/*      SPRHBM (0x208006e0)                                                     */
/*      SPRC0 (0x208006e0)                                                      */
/*      SPRMCC (0x208006e0)                                                     */
/*      SPRUCC (0x208006e0)                                                     */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRB0 BDF: 8_0_0                                       */
/* SPRB0 Security PolicyGroup: DFX                                              */
/* SPRHBM Security PolicyGroup: DFX                                             */
/* SPRC0 Security PolicyGroup: DFX                                              */
/* SPRMCC Security PolicyGroup: DFX                                             */
/* SPRUCC Security PolicyGroup: DFX                                             */
/* Controls for blocking itc hdr pipe depending upon B2B credit OK check
*/


#define B2BCRDTOKCHK_ITC_HDR_PIPE_0_N0_IIO_VTD_REG 0x110206E0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 memisochnormcrdb2bthr : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000000*/

                            /* Threshold for MemIsoch for NormHdr Crdt in B2B */
    UINT32 memisochnormcrdb2bthrchk_enable : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Enable for Threshold check for MemIsoch for
                               NormHdr Crdt in B2B
                            */
    UINT32 memnonisochnormcrdb2bthr : 8;

                            /* Bits[11:4], Access Type=RW, default=0x00000000*/

                            /* Threshold for Non-Isoch for NormHdr Crdt in B2B */
    UINT32 memnonisochnormcrdb2bthrchk_enable : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Enable for Threshold check for Non-Isoch for
                               NormHdr Crdt in B2B
                            */
    UINT32 normhdrcrdb2bthr : 6;

                            /* Bits[18:13], Access Type=RW, default=0x00000000*/

                            /* Threshold for Norm Hdr pipeline Crdt in B2B */
    UINT32 normhdrcrdb2bthrchk_enable : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000000*/

                            /*
                               Enable for Threshold check for orm Hdr Piepline
                               Crdt in B2B
                            */
    UINT32 normpfb2bcrdthrchk_enable : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000000*/

                            /*
                               Master Enable for Threshold check for Norm
                               Prefetch B2B Credit
                            */
    UINT32 normskidbufcrdb2bthr : 9;

                            /* Bits[29:21], Access Type=RW, default=0x00000000*/

                            /*
                               Threshold for Norm Hdr pipeline B2B SkidBuffer
                               Credit
                            */
    UINT32 normskidbufcrdb2bthrchk_enable : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               Enable for threshold of Norm Hdr pipeline B2B
                               SkidBuffer Credit check
                            */
    UINT32 normdatacrdb2bthr : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* Threshold for Norm Hdr pipeline B2B Data Credit */

  } Bits;
  UINT32 Data;

} B2BCRDTOKCHK_ITC_HDR_PIPE_0_N0_IIO_VTD_STRUCT;
#endif /* (SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

#if defined(SPRB0_HOST) || defined(SPRHBM_HOST)
/* B2BCRDTOKCHK_ITC_HDR_PIPE_0_N1_IIO_VTD_REG supported on:                     */
/*      SPRB0 (0x208006e4)                                                      */
/*      SPRHBM (0x208006e4)                                                     */
/*      SPRC0 (0x208006e4)                                                      */
/*      SPRMCC (0x208006e4)                                                     */
/*      SPRUCC (0x208006e4)                                                     */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRB0 BDF: 8_0_0                                       */
/* SPRB0 Security PolicyGroup: DFX                                              */
/* SPRHBM Security PolicyGroup: DFX                                             */
/* SPRC0 Security PolicyGroup: DFX                                              */
/* SPRMCC Security PolicyGroup: DFX                                             */
/* SPRUCC Security PolicyGroup: DFX                                             */
/* Controls for blocking itc hdr pipe depending upon B2B credit OK check
*/


#define B2BCRDTOKCHK_ITC_HDR_PIPE_0_N1_IIO_VTD_REG 0x110206E4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 normdatacrdb2bthr : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /* Threshold for Norm Hdr pipeline B2B Data Credit */
    UINT32 normdatacrdb2bthrchk_enable : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Enable for threshold of Norm Hdr pipeline B2B
                               Data Credit check
                            */
    UINT32 normncp2pbcrdb2bthr : 5;

                            /* Bits[10:6], Access Type=RW, default=0x00000000*/

                            /*
                               Threshold for Norm Hdr pipeline B2B NCP2PB
                               Credit
                            */
    UINT32 normncp2pbcrdb2bthrchk_enable : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Enable for Threshold check of Norm Hdr pipeline
                               B2B NCP2PB Credit
                            */
    UINT32 normcmpb2bcrdthrchk_enable : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Master Enable for Threshold check for Norm
                               Completion B2B Credit
                            */
    UINT32 fastb2bcrdthrchk_enable : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Master Enable for Threshold check for FastPath
                               B2B Credit
                            */
    UINT32 fastb2bdatacrdthrchk_enable : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000000*/

                            /*
                               Enable for Threshold check for FastPath B2B Data
                               Credit
                            */
    UINT32 fastb2bdatacrdthr : 6;

                            /* Bits[20:15], Access Type=RW, default=0x00000000*/

                            /* Threshold for FastPath B2B data credit */
    UINT32 fastb2bncp2pbcrdthrchk_enable : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /*
                               Enable for Threshold check for FastPath B2B
                               NCP2PB Credit
                            */
    UINT32 fastb2bncp2pbcrdthr : 5;

                            /* Bits[26:22], Access Type=RW, default=0x00000000*/

                            /* Threshold for FastPath B2B NCP2PB credit */
    UINT32 rsvd : 5;

                            /* Bits[31:27], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} B2BCRDTOKCHK_ITC_HDR_PIPE_0_N1_IIO_VTD_SPRB0_SPRHBM_STRUCT;
#endif /* (SPRB0_HOST) || defined(SPRHBM_HOST) */

#if defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
/* B2BCRDTOKCHK_ITC_HDR_PIPE_0_N1_IIO_VTD_REG supported on:                     */
/*      SPRB0 (0x208006e4)                                                      */
/*      SPRHBM (0x208006e4)                                                     */
/*      SPRC0 (0x208006e4)                                                      */
/*      SPRMCC (0x208006e4)                                                     */
/*      SPRUCC (0x208006e4)                                                     */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRB0 BDF: 8_0_0                                       */
/* SPRB0 Security PolicyGroup: DFX                                              */
/* SPRHBM Security PolicyGroup: DFX                                             */
/* SPRC0 Security PolicyGroup: DFX                                              */
/* SPRMCC Security PolicyGroup: DFX                                             */
/* SPRUCC Security PolicyGroup: DFX                                             */
/* Controls for blocking itc hdr pipe depending upon B2B credit OK check
*/


#define B2BCRDTOKCHK_ITC_HDR_PIPE_0_N1_IIO_VTD_REG 0x110206E4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 normdatacrdb2bthr : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /* Threshold for Norm Hdr pipeline B2B Data Credit */
    UINT32 normdatacrdb2bthrchk_enable : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Enable for threshold of Norm Hdr pipeline B2B
                               Data Credit check
                            */
    UINT32 normncp2pbcrdb2bthr : 5;

                            /* Bits[10:6], Access Type=RW, default=0x00000000*/

                            /*
                               Threshold for Norm Hdr pipeline B2B NCP2PB
                               Credit
                            */
    UINT32 normncp2pbcrdb2bthrchk_enable : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Enable for Threshold check of Norm Hdr pipeline
                               B2B NCP2PB Credit
                            */
    UINT32 normcmpb2bcrdthrchk_enable : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Master Enable for Threshold check for Norm
                               Completion B2B Credit
                            */
    UINT32 fastb2bcrdthrchk_enable : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Master Enable for Threshold check for FastPath
                               B2B Credit
                            */
    UINT32 fastb2bdatacrdthrchk_enable : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000000*/

                            /*
                               Enable for Threshold check for FastPath B2B Data
                               Credit
                            */
    UINT32 fastb2bdatacrdthr : 6;

                            /* Bits[20:15], Access Type=RW, default=0x00000000*/

                            /* Threshold for FastPath B2B data credit */
    UINT32 fastb2bncp2pbcrdthrchk_enable : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /*
                               Enable for Threshold check for FastPath B2B
                               NCP2PB Credit
                            */
    UINT32 fastb2bncp2pbcrdthr : 5;

                            /* Bits[26:22], Access Type=RW, default=0x00000000*/

                            /* Threshold for FastPath B2B NCP2PB credit */
    UINT32 csrnpcredselect : 2;

                            /* Bits[28:27], Access Type=RW, default=0x00000000*/

                            /*
                               0 - DDRT Rd credits 1 - RdBypass Credits 2 -
                               Ncp2ps Credits
                            */
    UINT32 csrnormcredselect : 2;

                            /* Bits[30:29], Access Type=RW, default=0x00000000*/

                            /*
                               0 - DDRT Wr credits 1 - PiWbq Credits 2 -
                               PrhPend Credits
                            */
    UINT32 csrarbblockcredchksurv : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /*
                               Csr to enable Arb Block based on credit check
                               survivability
                            */

  } Bits;
  UINT32 Data;

} B2BCRDTOKCHK_ITC_HDR_PIPE_0_N1_IIO_VTD_SPRC0_SPRMCC_SPRUCC_STRUCT;
#endif /* (SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

#if defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
/* B2BCRDTOKCHK_ITC_HDR_PIPE_0_N1_IIO_VTD_REG supported on:                     */
/*      SPRB0 (0x208006e4)                                                      */
/*      SPRHBM (0x208006e4)                                                     */
/*      SPRC0 (0x208006e4)                                                      */
/*      SPRMCC (0x208006e4)                                                     */
/*      SPRUCC (0x208006e4)                                                     */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRB0 BDF: 8_0_0                                       */
/* SPRB0 Security PolicyGroup: DFX                                              */
/* SPRHBM Security PolicyGroup: DFX                                             */
/* SPRC0 Security PolicyGroup: DFX                                              */
/* SPRMCC Security PolicyGroup: DFX                                             */
/* SPRUCC Security PolicyGroup: DFX                                             */
/* Controls for blocking itc hdr pipe depending upon B2B credit OK check
*/


#define B2BCRDTOKCHK_ITC_HDR_PIPE_0_N1_IIO_VTD_REG 0x110206E4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 normdatacrdb2bthr : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /* Threshold for Norm Hdr pipeline B2B Data Credit */
    UINT32 normdatacrdb2bthrchk_enable : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Enable for threshold of Norm Hdr pipeline B2B
                               Data Credit check
                            */
    UINT32 normncp2pbcrdb2bthr : 5;

                            /* Bits[10:6], Access Type=RW, default=0x00000000*/

                            /*
                               Threshold for Norm Hdr pipeline B2B NCP2PB
                               Credit
                            */
    UINT32 normncp2pbcrdb2bthrchk_enable : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Enable for Threshold check of Norm Hdr pipeline
                               B2B NCP2PB Credit
                            */
    UINT32 normcmpb2bcrdthrchk_enable : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Master Enable for Threshold check for Norm
                               Completion B2B Credit
                            */
    UINT32 fastb2bcrdthrchk_enable : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Master Enable for Threshold check for FastPath
                               B2B Credit
                            */
    UINT32 fastb2bdatacrdthrchk_enable : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000000*/

                            /*
                               Enable for Threshold check for FastPath B2B Data
                               Credit
                            */
    UINT32 fastb2bdatacrdthr : 6;

                            /* Bits[20:15], Access Type=RW, default=0x00000000*/

                            /* Threshold for FastPath B2B data credit */
    UINT32 fastb2bncp2pbcrdthrchk_enable : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /*
                               Enable for Threshold check for FastPath B2B
                               NCP2PB Credit
                            */
    UINT32 fastb2bncp2pbcrdthr : 5;

                            /* Bits[26:22], Access Type=RW, default=0x00000000*/

                            /* Threshold for FastPath B2B NCP2PB credit */
    UINT32 rsvd : 5;

                            /* Bits[31:27], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} B2BCRDTOKCHK_ITC_HDR_PIPE_0_N1_IIO_VTD_STRUCT;
#endif /* (SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

#if defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
/* B2BCRDTOKCHK_ITC_HDR_PIPE_1_N0_IIO_VTD_REG supported on:                     */
/*      SPRB0 (0x208006e8)                                                      */
/*      SPRHBM (0x208006e8)                                                     */
/*      SPRC0 (0x208006e8)                                                      */
/*      SPRMCC (0x208006e8)                                                     */
/*      SPRUCC (0x208006e8)                                                     */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRB0 BDF: 8_0_0                                       */
/* SPRB0 Security PolicyGroup: DFX                                              */
/* SPRHBM Security PolicyGroup: DFX                                             */
/* SPRC0 Security PolicyGroup: DFX                                              */
/* SPRMCC Security PolicyGroup: DFX                                             */
/* SPRUCC Security PolicyGroup: DFX                                             */
/* Controls for blocking itc hdr pipe depending upon B2B credit OK check
*/


#define B2BCRDTOKCHK_ITC_HDR_PIPE_1_N0_IIO_VTD_REG 0x110206E8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 fastb2bsbufcrdthrchk_enable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               Enable for Threshold check for FastPath B2B Skid
                               Buffer Credit
                            */
    UINT32 fastb2bsbufcrdthr : 9;

                            /* Bits[9:1], Access Type=RW, default=0x00000000*/

                            /* Threshold for FastPath B2B Skid Buffer credit */
    UINT32 npb2bcrdthrchk_enable : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /*
                               Master Enable for Threshold check for Non-posted
                               B2B Credit
                            */
    UINT32 npb2bisochcrdthrchk_enable : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Enable for Threshold check for Non-posted B2B
                               Isoch Credit
                            */
    UINT32 npb2bisochcrdthr : 3;

                            /* Bits[14:12], Access Type=RW, default=0x00000000*/

                            /*
                               Threshold for Non-posted Hdr Pipe B2B Isoch
                               Credit
                            */
    UINT32 npb2bnonisochcrdthrchk_enable : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /*
                               Enable for Threshold check for Non-posted B2B
                               Non-Isoch Credit
                            */
    UINT32 npb2bnonisochcrdthr : 8;

                            /* Bits[23:16], Access Type=RW, default=0x00000000*/

                            /*
                               Threshold for Non-posted Hdr Pipe B2B Non-Isoch
                               Credit
                            */
    UINT32 npb2bhdrcrdthrchk_enable : 1;

                            /* Bits[24:24], Access Type=RW, default=0x00000000*/

                            /*
                               Enable for Threshold check for Non-posted B2B
                               Header Credit
                            */
    UINT32 npb2bhdrcrdthr : 6;

                            /* Bits[30:25], Access Type=RW, default=0x00000000*/

                            /*
                               Threshold for Non-posted Hdr Pipe B2B Header
                               Credit
                            */
    UINT32 npb2bsbufcrdthrchk_enable : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /*
                               Enable for Threshold check for Non-posted B2B
                               Skid Buffer Credit
                            */

  } Bits;
  UINT32 Data;

} B2BCRDTOKCHK_ITC_HDR_PIPE_1_N0_IIO_VTD_STRUCT;
#endif /* (SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

#if defined(SPRB0_HOST) || defined(SPRHBM_HOST)
/* B2BCRDTOKCHK_ITC_HDR_PIPE_1_N1_IIO_VTD_REG supported on:                     */
/*      SPRB0 (0x208006ec)                                                      */
/*      SPRHBM (0x208006ec)                                                     */
/*      SPRC0 (0x208006ec)                                                      */
/*      SPRMCC (0x208006ec)                                                     */
/*      SPRUCC (0x208006ec)                                                     */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRB0 BDF: 8_0_0                                       */
/* SPRB0 Security PolicyGroup: DFX                                              */
/* SPRHBM Security PolicyGroup: DFX                                             */
/* SPRC0 Security PolicyGroup: DFX                                              */
/* SPRMCC Security PolicyGroup: DFX                                             */
/* SPRUCC Security PolicyGroup: DFX                                             */
/* Controls for blocking itc hdr pipe depending upon B2B credit OK check
*/


#define B2BCRDTOKCHK_ITC_HDR_PIPE_1_N1_IIO_VTD_REG 0x110206EC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 npb2bsbufcrdthr : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Threshold for Non-posted Hdr Pipe B2B Skid
                               Buffer Credit
                            */
    UINT32 csrb2bcrdokblock : 3;

                            /* Bits[11:9], Access Type=RW, default=0x00000000*/

                            /*
                               0 - Disabled[br] 1 - Always enabled[br] 2 -
                               Enable based on response function 0[br] 3 -
                               Enable based on response function 1[br] 4 -
                               Enable based on response function 2 5 - Enable
                               WatchDog Mode
                            */
    UINT32 rsvd : 20;

                            /* Bits[31:12], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} B2BCRDTOKCHK_ITC_HDR_PIPE_1_N1_IIO_VTD_SPRB0_SPRHBM_STRUCT;
#endif /* (SPRB0_HOST) || defined(SPRHBM_HOST) */

#if defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
/* B2BCRDTOKCHK_ITC_HDR_PIPE_1_N1_IIO_VTD_REG supported on:                     */
/*      SPRB0 (0x208006ec)                                                      */
/*      SPRHBM (0x208006ec)                                                     */
/*      SPRC0 (0x208006ec)                                                      */
/*      SPRMCC (0x208006ec)                                                     */
/*      SPRUCC (0x208006ec)                                                     */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRB0 BDF: 8_0_0                                       */
/* SPRB0 Security PolicyGroup: DFX                                              */
/* SPRHBM Security PolicyGroup: DFX                                             */
/* SPRC0 Security PolicyGroup: DFX                                              */
/* SPRMCC Security PolicyGroup: DFX                                             */
/* SPRUCC Security PolicyGroup: DFX                                             */
/* Controls for blocking itc hdr pipe depending upon B2B credit OK check
*/


#define B2BCRDTOKCHK_ITC_HDR_PIPE_1_N1_IIO_VTD_REG 0x110206EC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 npb2bsbufcrdthr : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Threshold for Non-posted Hdr Pipe B2B Skid
                               Buffer Credit
                            */
    UINT32 csrb2bcrdokblock : 3;

                            /* Bits[11:9], Access Type=RW, default=0x00000000*/

                            /*
                               0 - Disabled[br] 1 - Always enabled[br] 2 -
                               Enable based on response function 0[br] 3 -
                               Enable based on response function 1[br] 4 -
                               Enable based on response function 2
                            */
    UINT32 npmuxcrdb2bthr : 9;

                            /* Bits[20:12], Access Type=RW, default=0x00000000*/

                            /*
                               B2B Credit Threshold for either ddrt_rd/
                               rdbypass/Ncp2ps credits depending on
                               CsrNpCredSelect (mux select)
                            */
    UINT32 normmuxcrdb2bthr : 9;

                            /* Bits[29:21], Access Type=RW, default=0x00000000*/

                            /*
                               B2B Credit Threshold for either ddrt_rd/
                               rdbypass/Ncp2ps credits depending on
                               CsrNpCredSelect (mux select)
                            */
    UINT32 rsvd : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} B2BCRDTOKCHK_ITC_HDR_PIPE_1_N1_IIO_VTD_SPRC0_SPRMCC_SPRUCC_STRUCT;
#endif /* (SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

#if defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
/* B2BCRDTOKCHK_ITC_HDR_PIPE_1_N1_IIO_VTD_REG supported on:                     */
/*      SPRB0 (0x208006ec)                                                      */
/*      SPRHBM (0x208006ec)                                                     */
/*      SPRC0 (0x208006ec)                                                      */
/*      SPRMCC (0x208006ec)                                                     */
/*      SPRUCC (0x208006ec)                                                     */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRB0 BDF: 8_0_0                                       */
/* SPRB0 Security PolicyGroup: DFX                                              */
/* SPRHBM Security PolicyGroup: DFX                                             */
/* SPRC0 Security PolicyGroup: DFX                                              */
/* SPRMCC Security PolicyGroup: DFX                                             */
/* SPRUCC Security PolicyGroup: DFX                                             */
/* Controls for blocking itc hdr pipe depending upon B2B credit OK check
*/


#define B2BCRDTOKCHK_ITC_HDR_PIPE_1_N1_IIO_VTD_REG 0x110206EC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 npb2bsbufcrdthr : 9;

                            /* Bits[8:0], Access Type=RW, default=0x00000000*/

                            /*
                               Threshold for Non-posted Hdr Pipe B2B Skid
                               Buffer Credit
                            */
    UINT32 csrb2bcrdokblock : 3;

                            /* Bits[11:9], Access Type=RW, default=0x00000000*/

                            /*
                               0 - Disabled[br] 1 - Always enabled[br] 2 -
                               Enable based on response function 0[br] 3 -
                               Enable based on response function 1[br] 4 -
                               Enable based on response function 2 5 - Enable
                               WatchDog Mode
                            */
    UINT32 rsvd : 20;

                            /* Bits[31:12], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} B2BCRDTOKCHK_ITC_HDR_PIPE_1_N1_IIO_VTD_STRUCT;
#endif /* (SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */




















/* LB_MCHECK_W_PG_CP_N0_IIO_VTD_REG supported on:                               */
/*      SPRA0 (0x20800760)                                                      */
/*      SPRB0 (0x20800760)                                                      */
/*      SPRHBM (0x20800760)                                                     */
/*      SPRC0 (0x20800760)                                                      */
/*      SPRMCC (0x20800760)                                                     */
/*      SPRUCC (0x20800760)                                                     */
/* Register default value on SPRA0: 0x01000218                                  */
/* Register default value on SPRB0: 0x01000218                                  */
/* Register default value on SPRHBM: 0x01000218                                 */
/* Register default value on SPRC0: 0x01000218                                  */
/* Register default value on SPRMCC: 0x01000218                                 */
/* Register default value on SPRUCC: 0x01000218                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* This register configures the write access to RAC, WAC and CP registers for LB_MCHECK_W security policy group. This policy group is expected to be used for registers that had LB attribute in prior art and need to be checked by MCHECK. BIOS is in the policy group for this register (BOOT and SMM). Bits corresponding to trusted sources (pcode, ucode, Intel Dfx) are made read-only in the CP/RAC/WAC to prevent BIOS from accidentally/maliciously removing access to the trusted sources
*/


#define LB_MCHECK_W_PG_CP_N0_IIO_VTD_REG 0x11020760

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 lb_mcheck_w_ctrl_pol_0 : 1;

                            /* Bits[0:0], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_1 : 1;

                            /* Bits[1:1], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_2 : 1;

                            /* Bits[2:2], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_3 : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_4 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to LB_MCHECK_W WAC, RAC and
                               CP registers, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_6 : 1;

                            /* Bits[6:6], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_7 : 1;

                            /* Bits[7:7], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_8 : 1;

                            /* Bits[8:8], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_9 : 1;

                            /* Bits[9:9], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_10 : 1;

                            /* Bits[10:10], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_11 : 1;

                            /* Bits[11:11], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_12 : 1;

                            /* Bits[12:12], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_13 : 1;

                            /* Bits[13:13], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_14 : 1;

                            /* Bits[14:14], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_15 : 1;

                            /* Bits[15:15], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_16 : 1;

                            /* Bits[16:16], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_17 : 1;

                            /* Bits[17:17], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_18 : 1;

                            /* Bits[18:18], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_19 : 1;

                            /* Bits[19:19], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_20 : 1;

                            /* Bits[20:20], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_21 : 1;

                            /* Bits[21:21], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_24 : 1;

                            /* Bits[24:24], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_25 : 1;

                            /* Bits[25:25], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_26 : 1;

                            /* Bits[26:26], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_27 : 1;

                            /* Bits[27:27], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_28 : 1;

                            /* Bits[28:28], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_29 : 1;

                            /* Bits[29:29], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_30 : 1;

                            /* Bits[30:30], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_31 : 1;

                            /* Bits[31:31], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} LB_MCHECK_W_PG_CP_N0_IIO_VTD_STRUCT;

/* LB_MCHECK_W_PG_CP_N1_IIO_VTD_REG supported on:                               */
/*      SPRA0 (0x20800764)                                                      */
/*      SPRB0 (0x20800764)                                                      */
/*      SPRHBM (0x20800764)                                                     */
/*      SPRC0 (0x20800764)                                                      */
/*      SPRMCC (0x20800764)                                                     */
/*      SPRUCC (0x20800764)                                                     */
/* Register default value on SPRA0: 0x00000400                                  */
/* Register default value on SPRB0: 0x00000400                                  */
/* Register default value on SPRHBM: 0x00000400                                 */
/* Register default value on SPRC0: 0x00000400                                  */
/* Register default value on SPRMCC: 0x00000400                                 */
/* Register default value on SPRUCC: 0x00000400                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* This register configures the write access to RAC, WAC and CP registers for LB_MCHECK_W security policy group. This policy group is expected to be used for registers that had LB attribute in prior art and need to be checked by MCHECK. BIOS is in the policy group for this register (BOOT and SMM). Bits corresponding to trusted sources (pcode, ucode, Intel Dfx) are made read-only in the CP/RAC/WAC to prevent BIOS from accidentally/maliciously removing access to the trusted sources
*/


#define LB_MCHECK_W_PG_CP_N1_IIO_VTD_REG 0x11020764

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 lb_mcheck_w_ctrl_pol_32 : 1;

                            /* Bits[0:0], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_33 : 1;

                            /* Bits[1:1], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_34 : 1;

                            /* Bits[2:2], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_35 : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_36 : 1;

                            /* Bits[4:4], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_37 : 1;

                            /* Bits[5:5], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_38 : 1;

                            /* Bits[6:6], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_39 : 1;

                            /* Bits[7:7], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_40 : 1;

                            /* Bits[8:8], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_41 : 1;

                            /* Bits[9:9], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_42 : 1;

                            /* Bits[10:10], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_43 : 1;

                            /* Bits[11:11], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_44 : 1;

                            /* Bits[12:12], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_45 : 1;

                            /* Bits[13:13], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_46 : 1;

                            /* Bits[14:14], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_47 : 1;

                            /* Bits[15:15], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_48 : 1;

                            /* Bits[16:16], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_49 : 1;

                            /* Bits[17:17], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_50 : 1;

                            /* Bits[18:18], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_51 : 1;

                            /* Bits[19:19], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_52 : 1;

                            /* Bits[20:20], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_53 : 1;

                            /* Bits[21:21], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_54 : 1;

                            /* Bits[22:22], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_55 : 1;

                            /* Bits[23:23], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_56 : 1;

                            /* Bits[24:24], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_57 : 1;

                            /* Bits[25:25], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_58 : 1;

                            /* Bits[26:26], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_59 : 1;

                            /* Bits[27:27], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_60 : 1;

                            /* Bits[28:28], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_61 : 1;

                            /* Bits[29:29], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_62 : 1;

                            /* Bits[30:30], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_ctrl_pol_63 : 1;

                            /* Bits[31:31], Access Type=RO, default=0x00000000*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to LB_MCHECK_W
                               WAC, RAC and CP registers, based on the value
                               from each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} LB_MCHECK_W_PG_CP_N1_IIO_VTD_STRUCT;

/* LB_MCHECK_W_PG_RAC_N0_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800768)                                                      */
/*      SPRB0 (0x20800768)                                                      */
/*      SPRHBM (0x20800768)                                                     */
/*      SPRC0 (0x20800768)                                                      */
/*      SPRMCC (0x20800768)                                                     */
/*      SPRUCC (0x20800768)                                                     */
/* Register default value on SPRA0: 0xFFFFFFFF                                  */
/* Register default value on SPRB0: 0xFFFFFFFF                                  */
/* Register default value on SPRHBM: 0xFFFFFFFF                                 */
/* Register default value on SPRC0: 0xFFFFFFFF                                  */
/* Register default value on SPRMCC: 0xFFFFFFFF                                 */
/* Register default value on SPRUCC: 0xFFFFFFFF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* This register configures the read access to registers in LB_MCHECK_W security policy group. As indicated by the _W in the policy name, the read access for this particular policy includes ALL supported SAI mnemonics. That is, read access is permitted to all IPs for registers in this group. SAI bits corresponding to pcode/ucode/Intel Dfx are read only to prevent BIOS from removing access for them.
*/


#define LB_MCHECK_W_PG_RAC_N0_IIO_VTD_REG 0x11020768

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 lb_mcheck_w_sai_pol_0 : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_1 : 1;

                            /* Bits[1:1], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed read access to registers in
                               LB_MCHECK_W policy group, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_2 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_3 : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed read access to registers in
                               LB_MCHECK_W policy group, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_4 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_5 : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_6 : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_7 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_8 : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_9 : 1;

                            /* Bits[9:9], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed read access to registers in
                               LB_MCHECK_W policy group, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_10 : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_11 : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_12 : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_13 : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_14 : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_15 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_16 : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_17 : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_18 : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_19 : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_20 : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_21 : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_22 : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_23 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_24 : 1;

                            /* Bits[24:24], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed read access to registers in
                               LB_MCHECK_W policy group, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_25 : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_26 : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_27 : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_28 : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_29 : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_30 : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_31 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} LB_MCHECK_W_PG_RAC_N0_IIO_VTD_STRUCT;

/* LB_MCHECK_W_PG_RAC_N1_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x2080076c)                                                      */
/*      SPRB0 (0x2080076c)                                                      */
/*      SPRHBM (0x2080076c)                                                     */
/*      SPRC0 (0x2080076c)                                                      */
/*      SPRMCC (0x2080076c)                                                     */
/*      SPRUCC (0x2080076c)                                                     */
/* Register default value on SPRA0: 0xFFFFFFFF                                  */
/* Register default value on SPRB0: 0xFFFFFFFF                                  */
/* Register default value on SPRHBM: 0xFFFFFFFF                                 */
/* Register default value on SPRC0: 0xFFFFFFFF                                  */
/* Register default value on SPRMCC: 0xFFFFFFFF                                 */
/* Register default value on SPRUCC: 0xFFFFFFFF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* This register configures the read access to registers in LB_MCHECK_W security policy group. As indicated by the _W in the policy name, the read access for this particular policy includes ALL supported SAI mnemonics. That is, read access is permitted to all IPs for registers in this group. SAI bits corresponding to pcode/ucode/Intel Dfx are read only to prevent BIOS from removing access for them.
*/


#define LB_MCHECK_W_PG_RAC_N1_IIO_VTD_REG 0x1102076C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 lb_mcheck_w_sai_pol_32 : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_33 : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_34 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_35 : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_36 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_37 : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_38 : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_39 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_40 : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_41 : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_42 : 1;

                            /* Bits[10:10], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed read access to registers in
                               LB_MCHECK_W policy group, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_43 : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_44 : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_45 : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_46 : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_47 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_48 : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_49 : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_50 : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_51 : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_52 : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_53 : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_54 : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_55 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_56 : 1;

                            /* Bits[24:24], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_57 : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_58 : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_59 : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_60 : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_61 : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_62 : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_63 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} LB_MCHECK_W_PG_RAC_N1_IIO_VTD_STRUCT;

/* LB_MCHECK_W_PG_WAC_N0_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800770)                                                      */
/*      SPRB0 (0x20800770)                                                      */
/*      SPRHBM (0x20800770)                                                     */
/*      SPRC0 (0x20800770)                                                      */
/*      SPRMCC (0x20800770)                                                     */
/*      SPRUCC (0x20800770)                                                     */
/* Register default value on SPRA0: 0x0100021E                                  */
/* Register default value on SPRB0: 0x0100021E                                  */
/* Register default value on SPRHBM: 0x0100021E                                 */
/* Register default value on SPRC0: 0x0100021E                                  */
/* Register default value on SPRMCC: 0x0100021E                                 */
/* Register default value on SPRUCC: 0x0100021E                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* This register configures the write access to registers in LB_MCHECK_W security policy group. SAI bits corresponding to pcode/ucode/Intel Dfx are read only to prevent BIOS from removing access for them.
*/


#define LB_MCHECK_W_PG_WAC_N0_IIO_VTD_REG 0x11020770

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 lb_mcheck_w_sai_pol_0 : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_1 : 1;

                            /* Bits[1:1], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to registers in
                               LB_MCHECK_W policy group, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_2 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_3 : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to registers in
                               LB_MCHECK_W policy group, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_4 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_5 : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_6 : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_7 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_8 : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_9 : 1;

                            /* Bits[9:9], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to registers in
                               LB_MCHECK_W policy group, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_10 : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_11 : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_12 : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_13 : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_14 : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_15 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_16 : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_17 : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_18 : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_19 : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_20 : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_21 : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_22 : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_23 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_24 : 1;

                            /* Bits[24:24], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to registers in
                               LB_MCHECK_W policy group, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_25 : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_26 : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_27 : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_28 : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_29 : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_30 : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_31 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} LB_MCHECK_W_PG_WAC_N0_IIO_VTD_STRUCT;

/* LB_MCHECK_W_PG_WAC_N1_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800774)                                                      */
/*      SPRB0 (0x20800774)                                                      */
/*      SPRHBM (0x20800774)                                                     */
/*      SPRC0 (0x20800774)                                                      */
/*      SPRMCC (0x20800774)                                                     */
/*      SPRUCC (0x20800774)                                                     */
/* Register default value on SPRA0: 0x20000400                                  */
/* Register default value on SPRB0: 0x20000400                                  */
/* Register default value on SPRHBM: 0x20000400                                 */
/* Register default value on SPRC0: 0x20000400                                  */
/* Register default value on SPRMCC: 0x20000400                                 */
/* Register default value on SPRUCC: 0x20000400                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* This register configures the write access to registers in LB_MCHECK_W security policy group. SAI bits corresponding to pcode/ucode/Intel Dfx are read only to prevent BIOS from removing access for them.
*/


#define LB_MCHECK_W_PG_WAC_N1_IIO_VTD_REG 0x11020774

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 lb_mcheck_w_sai_pol_32 : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_33 : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_34 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_35 : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_36 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_37 : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_38 : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_39 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_40 : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_41 : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_42 : 1;

                            /* Bits[10:10], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to registers in
                               LB_MCHECK_W policy group, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_43 : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_44 : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_45 : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_46 : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_47 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_48 : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_49 : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_50 : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_51 : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_52 : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_53 : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_54 : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_55 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_56 : 1;

                            /* Bits[24:24], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_57 : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_58 : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_59 : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_60 : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_61 : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_62 : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 lb_mcheck_w_sai_pol_63 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in LB_MCHECK_W
                               policy group, based on the value from each
                               agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} LB_MCHECK_W_PG_WAC_N1_IIO_VTD_STRUCT;

/* OS_W_PG_CP_N0_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x20800780)                                                      */
/*      SPRB0 (0x20800780)                                                      */
/*      SPRHBM (0x20800780)                                                     */
/*      SPRC0 (0x20800780)                                                      */
/*      SPRMCC (0x20800780)                                                     */
/*      SPRUCC (0x20800780)                                                     */
/* Register default value on SPRA0: 0x01000218                                  */
/* Register default value on SPRB0: 0x01000218                                  */
/* Register default value on SPRHBM: 0x01000218                                 */
/* Register default value on SPRC0: 0x01000218                                  */
/* Register default value on SPRMCC: 0x01000218                                 */
/* Register default value on SPRUCC: 0x01000218                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register configures the write access to RAC, WAC and CP registers for OS_W security policy group. This policy group covers registers set by OS, so all IA agents are allowed access in the WAC
*/


#define OS_W_PG_CP_N0_IIO_VTD_REG 0x11020780

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 os_w_ctrl_pol_0 : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_1 : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_2 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_3 : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to OS_W WAC, RAC
                               and CP registers, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_4 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_5 : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_6 : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_7 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_8 : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_9 : 1;

                            /* Bits[9:9], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to OS_W WAC, RAC
                               and CP registers, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_10 : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_11 : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_12 : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_13 : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_14 : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_15 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_16 : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_17 : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_18 : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_19 : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_20 : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_21 : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_22 : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_23 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_24 : 1;

                            /* Bits[24:24], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to OS_W WAC, RAC
                               and CP registers, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_25 : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_26 : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_27 : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_28 : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_29 : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_30 : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_31 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} OS_W_PG_CP_N0_IIO_VTD_STRUCT;

/* OS_W_PG_CP_N1_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x20800784)                                                      */
/*      SPRB0 (0x20800784)                                                      */
/*      SPRHBM (0x20800784)                                                     */
/*      SPRC0 (0x20800784)                                                      */
/*      SPRMCC (0x20800784)                                                     */
/*      SPRUCC (0x20800784)                                                     */
/* Register default value on SPRA0: 0x00000400                                  */
/* Register default value on SPRB0: 0x00000400                                  */
/* Register default value on SPRHBM: 0x00000400                                 */
/* Register default value on SPRC0: 0x00000400                                  */
/* Register default value on SPRMCC: 0x00000400                                 */
/* Register default value on SPRUCC: 0x00000400                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register configures the write access to RAC, WAC and CP registers for OS_W security policy group. This policy group covers registers set by OS, so all IA agents are allowed access in the WAC
*/


#define OS_W_PG_CP_N1_IIO_VTD_REG 0x11020784

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 os_w_ctrl_pol_32 : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_33 : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_34 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_35 : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_36 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_37 : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_38 : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_39 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_40 : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_41 : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_42 : 1;

                            /* Bits[10:10], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to OS_W WAC, RAC
                               and CP registers, based on the value from each
                               agent's 6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_43 : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_44 : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_45 : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_46 : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_47 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_48 : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_49 : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_50 : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_51 : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_52 : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_53 : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_54 : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_55 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_56 : 1;

                            /* Bits[24:24], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_57 : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_58 : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_59 : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_60 : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_61 : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_62 : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */
    UINT32 os_w_ctrl_pol_63 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to OS_W WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} OS_W_PG_CP_N1_IIO_VTD_STRUCT;

/* OS_W_PG_RAC_N0_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x20800788)                                                      */
/*      SPRB0 (0x20800788)                                                      */
/*      SPRHBM (0x20800788)                                                     */
/*      SPRC0 (0x20800788)                                                      */
/*      SPRMCC (0x20800788)                                                     */
/*      SPRUCC (0x20800788)                                                     */
/* Register default value on SPRA0: 0xFFFFFFFF                                  */
/* Register default value on SPRB0: 0xFFFFFFFF                                  */
/* Register default value on SPRHBM: 0xFFFFFFFF                                 */
/* Register default value on SPRC0: 0xFFFFFFFF                                  */
/* Register default value on SPRMCC: 0xFFFFFFFF                                 */
/* Register default value on SPRUCC: 0xFFFFFFFF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register configures the read access for registers in OS_W security policy group.
*/


#define OS_W_PG_RAC_N0_IIO_VTD_REG 0x11020788

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 os_w_sai_pol_0 : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_1 : 1;

                            /* Bits[1:1], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed read access to registers in
                               OS_W security policy group, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_2 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_3 : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed read access to registers in
                               OS_W security policy group, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_4 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_5 : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_6 : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_7 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_8 : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_9 : 1;

                            /* Bits[9:9], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed read access to registers in
                               OS_W security policy group, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_10 : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_11 : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_12 : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_13 : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_14 : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_15 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_16 : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_17 : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_18 : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_19 : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_20 : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_21 : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_22 : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_23 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_24 : 1;

                            /* Bits[24:24], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed read access to registers in
                               OS_W security policy group, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_25 : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_26 : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_27 : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_28 : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_29 : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_30 : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_31 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} OS_W_PG_RAC_N0_IIO_VTD_STRUCT;

/* OS_W_PG_RAC_N1_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x2080078c)                                                      */
/*      SPRB0 (0x2080078c)                                                      */
/*      SPRHBM (0x2080078c)                                                     */
/*      SPRC0 (0x2080078c)                                                      */
/*      SPRMCC (0x2080078c)                                                     */
/*      SPRUCC (0x2080078c)                                                     */
/* Register default value on SPRA0: 0xFFFFFFFF                                  */
/* Register default value on SPRB0: 0xFFFFFFFF                                  */
/* Register default value on SPRHBM: 0xFFFFFFFF                                 */
/* Register default value on SPRC0: 0xFFFFFFFF                                  */
/* Register default value on SPRMCC: 0xFFFFFFFF                                 */
/* Register default value on SPRUCC: 0xFFFFFFFF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register configures the read access for registers in OS_W security policy group.
*/


#define OS_W_PG_RAC_N1_IIO_VTD_REG 0x1102078C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 os_w_sai_pol_32 : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_33 : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_34 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_35 : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_36 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_37 : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_38 : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_39 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_40 : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_41 : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_42 : 1;

                            /* Bits[10:10], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed read access to registers in
                               OS_W security policy group, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_43 : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_44 : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_45 : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_46 : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_47 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_48 : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_49 : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_50 : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_51 : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_52 : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_53 : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_54 : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_55 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_56 : 1;

                            /* Bits[24:24], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_57 : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_58 : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_59 : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_60 : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_61 : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_62 : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_63 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} OS_W_PG_RAC_N1_IIO_VTD_STRUCT;

/* OS_W_PG_WAC_N0_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x20800790)                                                      */
/*      SPRB0 (0x20800790)                                                      */
/*      SPRHBM (0x20800790)                                                     */
/*      SPRC0 (0x20800790)                                                      */
/*      SPRMCC (0x20800790)                                                     */
/*      SPRUCC (0x20800790)                                                     */
/* Register default value on SPRA0: 0x0300021F                                  */
/* Register default value on SPRB0: 0x0300021F                                  */
/* Register default value on SPRHBM: 0x0300021F                                 */
/* Register default value on SPRC0: 0x0300021F                                  */
/* Register default value on SPRMCC: 0x0300021F                                 */
/* Register default value on SPRUCC: 0x0300021F                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register configures the write access for registers in OS_W security policy group.
*/


#define OS_W_PG_WAC_N0_IIO_VTD_REG 0x11020790

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 os_w_sai_pol_0 : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_1 : 1;

                            /* Bits[1:1], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to registers in
                               OS_W security policy group, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_2 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_3 : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to registers in
                               OS_W security policy group, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_4 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_5 : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_6 : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_7 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_8 : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_9 : 1;

                            /* Bits[9:9], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to registers in
                               OS_W security policy group, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_10 : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_11 : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_12 : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_13 : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_14 : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_15 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_16 : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_17 : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_18 : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_19 : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_20 : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_21 : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_22 : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_23 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_24 : 1;

                            /* Bits[24:24], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to registers in
                               OS_W security policy group, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_25 : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_26 : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_27 : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_28 : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_29 : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_30 : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_31 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} OS_W_PG_WAC_N0_IIO_VTD_STRUCT;

/* OS_W_PG_WAC_N1_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x20800794)                                                      */
/*      SPRB0 (0x20800794)                                                      */
/*      SPRHBM (0x20800794)                                                     */
/*      SPRC0 (0x20800794)                                                      */
/*      SPRMCC (0x20800794)                                                     */
/*      SPRUCC (0x20800794)                                                     */
/* Register default value on SPRA0: 0x20000C00                                  */
/* Register default value on SPRB0: 0x20000C00                                  */
/* Register default value on SPRHBM: 0x20000C00                                 */
/* Register default value on SPRC0: 0x20000C00                                  */
/* Register default value on SPRMCC: 0x20000C00                                 */
/* Register default value on SPRUCC: 0x20000C00                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register configures the write access for registers in OS_W security policy group.
*/


#define OS_W_PG_WAC_N1_IIO_VTD_REG 0x11020794

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 os_w_sai_pol_32 : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_33 : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_34 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_35 : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_36 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_37 : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_38 : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_39 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_40 : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_41 : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_42 : 1;

                            /* Bits[10:10], Access Type=RO, default=0x00000001*/

                            /*
                               Read-only bit-vector used to determine which
                               agents are allowed write access to registers in
                               OS_W security policy group, based on the value
                               from each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_43 : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_44 : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_45 : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_46 : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_47 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_48 : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_49 : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_50 : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_51 : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_52 : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_53 : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_54 : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_55 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_56 : 1;

                            /* Bits[24:24], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_57 : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_58 : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_59 : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_60 : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_61 : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000001*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_62 : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */
    UINT32 os_w_sai_pol_63 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in OS_W
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} OS_W_PG_WAC_N1_IIO_VTD_STRUCT;

/* TSEG_PG_CP_N0_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x208007a0)                                                      */
/*      SPRB0 (0x208007a0)                                                      */
/*      SPRHBM (0x208007a0)                                                     */
/*      SPRC0 (0x208007a0)                                                      */
/*      SPRMCC (0x208007a0)                                                     */
/*      SPRUCC (0x208007a0)                                                     */
/* Register default value on SPRA0: 0x01000218                                  */
/* Register default value on SPRB0: 0x01000218                                  */
/* Register default value on SPRHBM: 0x01000218                                 */
/* Register default value on SPRC0: 0x01000218                                  */
/* Register default value on SPRMCC: 0x01000218                                 */
/* Register default value on SPRUCC: 0x01000218                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: TSEG                                             */
/* SPRB0 Security PolicyGroup: TSEG                                             */
/* SPRHBM Security PolicyGroup: TSEG                                            */
/* SPRC0 Security PolicyGroup: TSEG                                             */
/* SPRMCC Security PolicyGroup: TSEG                                            */
/* SPRUCC Security PolicyGroup: TSEG                                            */
/* This register configures the write access to RAC, WAC and CP registers for TSEG security policy group.
*/


#define TSEG_PG_CP_N0_IIO_VTD_REG 0x110207A0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 tseg_ctrl_pol : 32;

                            /* Bits[31:0], Access Type=RW, default=0x01000218*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to TSEG WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} TSEG_PG_CP_N0_IIO_VTD_STRUCT;

/* TSEG_PG_CP_N1_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x208007a4)                                                      */
/*      SPRB0 (0x208007a4)                                                      */
/*      SPRHBM (0x208007a4)                                                     */
/*      SPRC0 (0x208007a4)                                                      */
/*      SPRMCC (0x208007a4)                                                     */
/*      SPRUCC (0x208007a4)                                                     */
/* Register default value on SPRA0: 0x00000400                                  */
/* Register default value on SPRB0: 0x00000400                                  */
/* Register default value on SPRHBM: 0x00000400                                 */
/* Register default value on SPRC0: 0x00000400                                  */
/* Register default value on SPRMCC: 0x00000400                                 */
/* Register default value on SPRUCC: 0x00000400                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: TSEG                                             */
/* SPRB0 Security PolicyGroup: TSEG                                             */
/* SPRHBM Security PolicyGroup: TSEG                                            */
/* SPRC0 Security PolicyGroup: TSEG                                             */
/* SPRMCC Security PolicyGroup: TSEG                                            */
/* SPRUCC Security PolicyGroup: TSEG                                            */
/* This register configures the write access to RAC, WAC and CP registers for TSEG security policy group.
*/


#define TSEG_PG_CP_N1_IIO_VTD_REG 0x110207A4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 tseg_ctrl_pol : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000400*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to TSEG WAC, RAC and CP
                               registers, based on the value from each agent's
                               6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} TSEG_PG_CP_N1_IIO_VTD_STRUCT;

/* TSEG_PG_RAC_N0_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x208007a8)                                                      */
/*      SPRB0 (0x208007a8)                                                      */
/*      SPRHBM (0x208007a8)                                                     */
/*      SPRC0 (0x208007a8)                                                      */
/*      SPRMCC (0x208007a8)                                                     */
/*      SPRUCC (0x208007a8)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: TSEG                                             */
/* SPRB0 Security PolicyGroup: TSEG                                             */
/* SPRHBM Security PolicyGroup: TSEG                                            */
/* SPRC0 Security PolicyGroup: TSEG                                             */
/* SPRMCC Security PolicyGroup: TSEG                                            */
/* SPRUCC Security PolicyGroup: TSEG                                            */
/* This register configures the read access for registers in TSEG security policy group.
*/


#define TSEG_PG_RAC_N0_IIO_VTD_REG 0x110207A8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 tseg_sai_pol : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in TSEG
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} TSEG_PG_RAC_N0_IIO_VTD_STRUCT;

/* TSEG_PG_RAC_N1_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x208007ac)                                                      */
/*      SPRB0 (0x208007ac)                                                      */
/*      SPRHBM (0x208007ac)                                                     */
/*      SPRC0 (0x208007ac)                                                      */
/*      SPRMCC (0x208007ac)                                                     */
/*      SPRUCC (0x208007ac)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: TSEG                                             */
/* SPRB0 Security PolicyGroup: TSEG                                             */
/* SPRHBM Security PolicyGroup: TSEG                                            */
/* SPRC0 Security PolicyGroup: TSEG                                             */
/* SPRMCC Security PolicyGroup: TSEG                                            */
/* SPRUCC Security PolicyGroup: TSEG                                            */
/* This register configures the read access for registers in TSEG security policy group.
*/


#define TSEG_PG_RAC_N1_IIO_VTD_REG 0x110207AC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 tseg_sai_pol : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed read access to registers in TSEG
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} TSEG_PG_RAC_N1_IIO_VTD_STRUCT;

/* TSEG_PG_WAC_N0_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x208007b0)                                                      */
/*      SPRB0 (0x208007b0)                                                      */
/*      SPRHBM (0x208007b0)                                                     */
/*      SPRC0 (0x208007b0)                                                      */
/*      SPRMCC (0x208007b0)                                                     */
/*      SPRUCC (0x208007b0)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: TSEG                                             */
/* SPRB0 Security PolicyGroup: TSEG                                             */
/* SPRHBM Security PolicyGroup: TSEG                                            */
/* SPRC0 Security PolicyGroup: TSEG                                             */
/* SPRMCC Security PolicyGroup: TSEG                                            */
/* SPRUCC Security PolicyGroup: TSEG                                            */
/* This register configures the write access for registers in TSEG security policy group.
*/


#define TSEG_PG_WAC_N0_IIO_VTD_REG 0x110207B0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 tseg_sai_pol : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in TSEG
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} TSEG_PG_WAC_N0_IIO_VTD_STRUCT;

/* TSEG_PG_WAC_N1_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x208007b4)                                                      */
/*      SPRB0 (0x208007b4)                                                      */
/*      SPRHBM (0x208007b4)                                                     */
/*      SPRC0 (0x208007b4)                                                      */
/*      SPRMCC (0x208007b4)                                                     */
/*      SPRUCC (0x208007b4)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: TSEG                                             */
/* SPRB0 Security PolicyGroup: TSEG                                             */
/* SPRHBM Security PolicyGroup: TSEG                                            */
/* SPRC0 Security PolicyGroup: TSEG                                             */
/* SPRMCC Security PolicyGroup: TSEG                                            */
/* SPRUCC Security PolicyGroup: TSEG                                            */
/* This register configures the write access for registers in TSEG security policy group.
*/


#define TSEG_PG_WAC_N1_IIO_VTD_REG 0x110207B4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 tseg_sai_pol : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               Bit-vector used to determine which agents are
                               allowed write access to registers in TSEG
                               security policy group, based on the value from
                               each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} TSEG_PG_WAC_N1_IIO_VTD_STRUCT;






/* BANK0_BANKCTRL_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x800800)                                                        */
/*      SPRB0 (0x800800)                                                        */
/*      SPRHBM (0x800800)                                                       */
/*      SPRC0 (0x800800)                                                        */
/*      SPRMCC (0x800800)                                                       */
/*      SPRUCC (0x800800)                                                       */
/* Register default value on SPRA0: 0x00000081                                  */
/* Register default value on SPRB0: 0x00000081                                  */
/* Register default value on SPRHBM: 0x00000081                                 */
/* Register default value on SPRC0: 0x00000081                                  */
/* Register default value on SPRMCC: 0x00000081                                 */
/* Register default value on SPRUCC: 0x00000081                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the source decode logic associated with an arbitrary type 1 IOSF agent (i.e. PCI bridge)
*/


#define BANK0_BANKCTRL_IIO_VTD_REG 0x11000800

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 banktype : 2;

                            /* Bits[1:0], Access Type=RO, default=0x00000001*/

                            /*
                               Specifies the type of Bank Decoder. Valid values
                               are:[br] 00b: Type 0 Bank - 16 Bytes[br] 01b:
                               Type 1 Bank - 64 Bytes[br] 10b: reserved[br]
                               11b: Subtractive Decode Bank - 8 Bytes
                            */
    UINT8 force_config_type0 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               If this bit is set, MS2IOSF sends any
                               configuration request that matches this bank as
                               type 0. Enables support for SR-IOV RCIEP.
                            */
    UINT8 bank_decode_enable : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               1b: The bank decoders are enabled.[br] 0b: The
                               bank decoders are disabled.
                            */
    UINT8 shadow_enable : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               1b: Outbound configuration requests that target
                               the Device/Function specified by this bank on
                               the RootBus will be snarfed to the shadow copy
                               of decode registers.[br] 0b: Outbound
                               configuration requests will not be snarfed. BIOS
                               must program the decode registers to allow this
                               bank to decode to the bank's specified target.
                            */
    UINT8 mc_bank_decode_enable : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               1b: The Multicast bank decoders are enabled.[br]
                               0b: The Multicast bank decoders are disabled.
                            */
    UINT8 mc_shadow_enable : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               1b: Outbound configuration requests that target
                               the Multicast registers of the Device/Function
                               specified by this bank on the RootBus will be
                               snarfed to the shadow copy of decode
                               registers.[br] 0b: Outbound configuration
                               requests to the Multicast registers of the
                               Device/Function will not be snarfed. BIOS must
                               program the decode registers to allow this bank
                               to decode to the bank's specified target.
                            */
    UINT8 function_mask : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               When set, causes the DevFunc.Function field to
                               become ignored. Any configuration request that
                               matches the DevFunc.Device field with any
                               function value will be a match for this decoder
                               bank.
                            */

  } Bits;
  UINT8 Data;

} BANK0_BANKCTRL_IIO_VTD_STRUCT;

/* BANK0_DEVFUNC_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x800801)                                                        */
/*      SPRB0 (0x800801)                                                        */
/*      SPRHBM (0x800801)                                                       */
/*      SPRC0 (0x800801)                                                        */
/*      SPRMCC (0x800801)                                                       */
/*      SPRUCC (0x800801)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* PCI Device and Function number of the IOSF agent being shadowed
*/


#define BANK0_DEVFUNC_IIO_VTD_REG 0x11000801

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 func : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target Function Number on the
                               RootBus that this bank decodes for.
                            */
    UINT8 device : 5;

                            /* Bits[7:3], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target Device Number on the
                               RootBus that this bank decodes for.
                            */

  } Bits;
  UINT8 Data;

} BANK0_DEVFUNC_IIO_VTD_STRUCT;

/* BANK0_DESTID_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x10800802)                                                      */
/*      SPRB0 (0x10800802)                                                      */
/*      SPRHBM (0x10800802)                                                     */
/*      SPRC0 (0x10800802)                                                      */
/*      SPRMCC (0x10800802)                                                     */
/*      SPRUCC (0x10800802)                                                     */
/* Register default value on SPRA0: 0x00002188                                  */
/* Register default value on SPRB0: 0x00002188                                  */
/* Register default value on SPRHBM: 0x00002188                                 */
/* Register default value on SPRC0: 0x00002188                                  */
/* Register default value on SPRMCC: 0x00002188                                 */
/* Register default value on SPRUCC: 0x00002188                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* The lower 14 bits of this register comprise the PSF-required source decode information that MS2IOSF provides on the tdest_id signal when presenting the request to PSF (note exception for MS2IOSF_Port).
*/


#define BANK0_DESTID_IIO_VTD_REG 0x11010802

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 psf_channel : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies which IOSF channel to send requests
                               that hit this bank decoder ranges. This field is
                               used for IOSF Channel and also as part of the
                               IOSF Destination ID.
                            */
    UINT16 psf_port : 3;

                            /* Bits[5:3], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF port to send requests that
                               hit this bank decoder ranges.
                            */
    UINT16 ms2iosf_port : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the MS2IOSF port (left = 0, right = 1)
                               where to send requests that hit this bank
                               decoder. The logic should mask this bit to zero
                               before sending the 14-bit PSF source decode
                               header out. Technically, this is the top bit of
                               the PSF port ID, but MS2IOSF is using it for
                               internal purposes.
                            */
    UINT16 psf_port_group : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF port group to send requests
                               that hit this bank decoder ranges.
                            */
    UINT16 psf_id : 4;

                            /* Bits[11:8], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF to send requests that hit
                               this bank decoder ranges.
                            */
    UINT16 psf_decode_mode : 2;

                            /* Bits[13:12], Access Type=RW, default=0x00000002*/

                            /*
                               Specifies the PSF Destination ID decode mode
                               being used.[br] 00b: Fabric Decode[br] 01b:
                               Implicit Decode[br] 10b: Source Decode to
                               PSF_ID:Port_Group:Port:Channel[br] 11b: Source
                               Decode to PSF_ID, use Fabric Decode from there
                               onward (StF)
                            */
    UINT16 ms2iosf_channel : 2;

                            /* Bits[15:14], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies to which IOSF channel to send requests
                               that hit this bank decoder. Note the difference
                               between this channel ID and the channel ID
                               provided in the source decode header below. The
                               former specifies the channel ID on the MS2IOSF
                               interface itself whereas the latter specifies
                               the channel ID on the PSF interface to the
                               endpoint. MS2IOSF has four channels for each of
                               its two ports.
                            */

  } Bits;
  UINT16 Data;

} BANK0_DESTID_IIO_VTD_STRUCT;

/* BANK0_DEVCON_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x10800804)                                                      */
/*      SPRB0 (0x10800804)                                                      */
/*      SPRHBM (0x10800804)                                                     */
/*      SPRC0 (0x10800804)                                                      */
/*      SPRMCC (0x10800804)                                                     */
/*      SPRUCC (0x10800804)                                                     */
/* Register default value on SPRA0: 0x000000E0                                  */
/* Register default value on SPRB0: 0x000000E0                                  */
/* Register default value on SPRHBM: 0x000000E0                                 */
/* Register default value on SPRC0: 0x000000E0                                  */
/* Register default value on SPRMCC: 0x000000E0                                 */
/* Register default value on SPRUCC: 0x000000E0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Shadowed PCI Express Device Control
*/


#define BANK0_DEVCON_IIO_VTD_REG 0x11010804

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 rsvd : 5;

                            /* Bits[4:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 max_payload_size : 3;

                            /* Bits[7:5], Access Type=RW, default=0x00000007*/

                            /*
                               Max_Payload_Size[br] Indicates the largest
                               packet size supported by the target decoded by
                               this bank. [br] Defined encodings for this field
                               are:[br] 000b 128 bytes max payload size[br]
                               001b 256 bytes max payload size[br] 010b 512
                               bytes max payload size[br] 011b 1024 bytes max
                               payload size[br] 100b 2048 bytes max payload
                               size[br] 101b 4096 bytes max payload size[br]
                               110b Reserved[br] 111b 64 address aligned bytes
                               max payload size[br]
                            */
    UINT16 rsvd_8 : 7;

                            /* Bits[14:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 initiate_flr : 1;

                            /* Bits[15:15], Access Type=RO, default=0x00000000*/

                            /*
                               [br] Initiate Function Level Reset. A write of
                               '1' to the DEVCON[15] field of the device this
                               bank shadows, will cause all shadow-enabled
                               registers for this bank to reset. DEVCON[15]
                               maps to this field. This bit self-clears.[br]
                            */

  } Bits;
  UINT16 Data;

} BANK0_DEVCON_IIO_VTD_STRUCT;

/* BANK0_DEVCON_OFFSET_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x800807)                                                        */
/*      SPRB0 (0x800807)                                                        */
/*      SPRHBM (0x800807)                                                       */
/*      SPRC0 (0x800807)                                                        */
/*      SPRMCC (0x800807)                                                       */
/*      SPRUCC (0x800807)                                                       */
/* Register default value on SPRA0: 0x00000048                                  */
/* Register default value on SPRB0: 0x00000048                                  */
/* Register default value on SPRHBM: 0x00000048                                 */
/* Register default value on SPRC0: 0x00000048                                  */
/* Register default value on SPRMCC: 0x00000048                                 */
/* Register default value on SPRUCC: 0x00000048                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Offset of the PCI Express Device Control Register in the IOSF agent's configuration header
*/


#define BANK0_DEVCON_OFFSET_IIO_VTD_REG 0x11000807

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 devcon_shadowen : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               If this bit and DevCon_Master are set, MS2IOSF
                               shadows writes to the offset programmed above
                               into its copy of the device control register.
                               BIOS must clear this bit for devices that do not
                               have a device control register. If shadowing is
                               disabled for this bank, this bit has no effect.
                            */
    UINT8 devcon_master : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Indicates whether or not this shadow copy is the
                               master copy. For devices that use multiple bank
                               decoders, SW is required to enable one of them
                               as a master. HW shadowing only updates the
                               master copy. Likewise, HW only uses the master
                               copy as input to other logic such as completion
                               combining. For devices that use only one bank
                               decoder, SW is required to set this bit.
                            */
    UINT8 devcon_offset : 6;

                            /* Bits[7:2], Access Type=RW, default=0x00000012*/

                            /*
                               Configuration space register offset for the
                               Device control register. This is a DWord offset
                               (left-shift this value by two to get byte
                               offset). Note that although this points to the
                               lowest order byte of the register, only the
                               upper byte of the register is captured by this
                               bank, which is at this offset + 1h.
                            */

  } Bits;
  UINT8 Data;

} BANK0_DEVCON_OFFSET_IIO_VTD_STRUCT;

/* BANK0_PCICMD_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x10800808)                                                      */
/*      SPRB0 (0x10800808)                                                      */
/*      SPRHBM (0x10800808)                                                     */
/*      SPRC0 (0x10800808)                                                      */
/*      SPRMCC (0x10800808)                                                     */
/*      SPRUCC (0x10800808)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK0_PCICMD_IIO_VTD_REG 0x11010808

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 iose : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               I/O Space Enable (for outbound bank decode)[br]
                               1: Enables bank IOBAS/IOLIM I/O range[br] 0:
                               Disables bank IOBAS/IOLIM I/O range
                            */
    UINT16 mse : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Memory Space Enable (for outbound bank
                               decode)[br] 1: Enables bank MBAS/MLIM and
                               PBAS/PLIM memory ranges[br] 0: Disables bank
                               MBAS/MLIM and PBAS/PLIM memory ranges
                            */
    UINT16 bme : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /* Bme */
    UINT16 sce : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000000*/

                            /* Sce */
    UINT16 mwie : 1;

                            /* Bits[4:4], Access Type=RO, default=0x00000000*/

                            /* Mwie */
    UINT16 vga_palette_snoop_enable : 1;

                            /* Bits[5:5], Access Type=RO, default=0x00000000*/

                            /* Vga Palette Snoop Enable */
    UINT16 perre : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /* Perre */
    UINT16 idsel_stepping_wait_cycle_control : 1;

                            /* Bits[7:7], Access Type=RO, default=0x00000000*/

                            /* Idsel Stepping Wait Cycle Control */
    UINT16 serre : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /* Serre */
    UINT16 fast_back_to_back_enable : 1;

                            /* Bits[9:9], Access Type=RO, default=0x00000000*/

                            /* Fast Back To Back Enable */
    UINT16 rsvd : 6;

                            /* Bits[15:10], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT16 Data;

} BANK0_PCICMD_IIO_VTD_STRUCT;

/* BANK0_SECBUS_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x80080d)                                                        */
/*      SPRB0 (0x80080d)                                                        */
/*      SPRHBM (0x80080d)                                                       */
/*      SPRC0 (0x80080d)                                                        */
/*      SPRMCC (0x80080d)                                                       */
/*      SPRUCC (0x80080d)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK0_SECBUS_IIO_VTD_REG 0x1100080D

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 sbn : 8;

                            /* Bits[7:0], Access Type=RW, default=0x00000000*/

                            /* First bus of a bus range below a PCI Bridge */

  } Bits;
  UINT8 Data;

} BANK0_SECBUS_IIO_VTD_STRUCT;

/* BANK0_SUBBUS_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x80080e)                                                        */
/*      SPRB0 (0x80080e)                                                        */
/*      SPRHBM (0x80080e)                                                       */
/*      SPRC0 (0x80080e)                                                        */
/*      SPRMCC (0x80080e)                                                       */
/*      SPRUCC (0x80080e)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK0_SUBBUS_IIO_VTD_REG 0x1100080E

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 subordinate_bus_number : 8;

                            /* Bits[7:0], Access Type=RW, default=0x00000000*/

                            /* Last bus of a bus range below a PCI Bridge */

  } Bits;
  UINT8 Data;

} BANK0_SUBBUS_IIO_VTD_STRUCT;

/* BANK0_IOBAS_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x800810)                                                        */
/*      SPRB0 (0x800810)                                                        */
/*      SPRHBM (0x800810)                                                       */
/*      SPRC0 (0x800810)                                                        */
/*      SPRMCC (0x800810)                                                       */
/*      SPRUCC (0x800810)                                                       */
/* Register default value on SPRA0: 0x000000F0                                  */
/* Register default value on SPRB0: 0x000000F0                                  */
/* Register default value on SPRHBM: 0x000000F0                                 */
/* Register default value on SPRC0: 0x000000F0                                  */
/* Register default value on SPRMCC: 0x000000F0                                 */
/* Register default value on SPRUCC: 0x000000F0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK0_IOBAS_IIO_VTD_REG 0x11000810

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 i_o_address_capability : 2;

                            /* Bits[1:0], Access Type=RO, default=0x00000000*/

                            /* MS2IOSF supports only 16 bit addressing */
    UINT8 more_i_o_base_address : 2;

                            /* Bits[3:2], Access Type=RW/L, default=0x00000000*/

                            /*
                               When EN1K is set in the IIOMISCCTRL register,
                               these bits become RW and allow for 1K
                               granularity of I/O addressing, otherwise these
                               are RO.[br] Lock: !IIOMISCCTRL.EN1K
                            */
    UINT8 i_o_base_address : 4;

                            /* Bits[7:4], Access Type=RW, default=0x0000000F*/

                            /*
                               Corresponds to A[15:12] of the I/O base address
                               of the PCI Express port. See also the IOLIM
                               register description.
                            */

  } Bits;
  UINT8 Data;

} BANK0_IOBAS_IIO_VTD_STRUCT;

/* BANK0_IOLIM_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x800811)                                                        */
/*      SPRB0 (0x800811)                                                        */
/*      SPRHBM (0x800811)                                                       */
/*      SPRC0 (0x800811)                                                        */
/*      SPRMCC (0x800811)                                                       */
/*      SPRUCC (0x800811)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK0_IOLIM_IIO_VTD_REG 0x11000811

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 i_o_address_limit_capability : 2;

                            /* Bits[1:0], Access Type=RO, default=0x00000000*/

                            /* MS2IOSF supports only 16 bit addressing */
    UINT8 more_i_o_address_limit : 2;

                            /* Bits[3:2], Access Type=RW/L, default=0x00000000*/

                            /*
                               When EN1K is set in the IIOMISCCTRL register,
                               these bits become RW and allow for 1K
                               granularity of I/O addressing, otherwise these
                               are RO.[br] Lock: !IIOMISCCTRL.EN1K
                            */
    UINT8 i_o_address_limit : 4;

                            /* Bits[7:4], Access Type=RW, default=0x00000000*/

                            /*
                               Corresponds to A[15:12] of the I/O limit address
                               of the PCI Express port.The I/O Base and I/O
                               Limit registers define an address range that is
                               used by the PCI Express port to determine when
                               to forward I/O transactions from one interface
                               to the other using the following formula:[br]
                               IO_BASE <= A[15:12] <=IO_LIMIT[br] The bottom of
                               the defined I/O address range will be aligned to
                               a 4KB boundary (1KB if EN1K bit is set. Refer to
                               the IIOMISCCTRL register for definition of EN1K
                               bit) while the top of the region specified by
                               IO_LIMIT will be one less than a 4 KB (1KB if
                               EN1K bit is set) multiple.[br] Notes:[br] -
                               Setting the I/O limit less than I/O base
                               disables the I/O range altogether.[br] - General
                               the I/O base and limit registers won't be
                               programmed by software without clearing the IOSE
                               bit first.
                            */

  } Bits;
  UINT8 Data;

} BANK0_IOLIM_IIO_VTD_STRUCT;

/* BANK0_MBAS_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x10800814)                                                      */
/*      SPRB0 (0x10800814)                                                      */
/*      SPRHBM (0x10800814)                                                     */
/*      SPRC0 (0x10800814)                                                      */
/*      SPRMCC (0x10800814)                                                     */
/*      SPRUCC (0x10800814)                                                     */
/* Register default value on SPRA0: 0x0000FFF0                                  */
/* Register default value on SPRB0: 0x0000FFF0                                  */
/* Register default value on SPRHBM: 0x0000FFF0                                 */
/* Register default value on SPRC0: 0x0000FFF0                                  */
/* Register default value on SPRMCC: 0x0000FFF0                                 */
/* Register default value on SPRUCC: 0x0000FFF0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK0_MBAS_IIO_VTD_REG 0x11010814

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 memory_base_address : 12;

                            /* Bits[15:4], Access Type=RW, default=0x00000FFF*/

                            /*
                               Corresponds to A[31:20] of the 32 bit memory
                               window's base address of the PCI Express port.
                               See also the MLIM register description.
                            */

  } Bits;
  UINT16 Data;

} BANK0_MBAS_IIO_VTD_STRUCT;

/* BANK0_MLIM_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x10800816)                                                      */
/*      SPRB0 (0x10800816)                                                      */
/*      SPRHBM (0x10800816)                                                     */
/*      SPRC0 (0x10800816)                                                      */
/*      SPRMCC (0x10800816)                                                     */
/*      SPRUCC (0x10800816)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK0_MLIM_IIO_VTD_REG 0x11010816

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 memory_limit_address : 12;

                            /* Bits[15:4], Access Type=RW, default=0x00000000*/

                            /*
                               Corresponds to A[31:20] of the 32 bit memory
                               window's limit address that corresponds to the
                               upper limit of the range of memory accesses that
                               will be passed by the PCI Express bridge.The
                               Memory Base and Memory Limit registers define a
                               memory mapped I/O non-prefetchable address range
                               (32-bit addresses) and the MS2IOSF directs
                               accesses in this range to the PCI Express port
                               based on the following formula:[br] MEMORY_BASE
                               <= A[31:20] <= MEMORY_LIMIT[br] The upper 12
                               bits of both the Memory Base and Memory Limit
                               registers are read/write and corresponds to the
                               upper 12 address bits, A[31:20] of 32-bit
                               addresses. Thus, the bottom of the defined
                               memory address range will be aligned to a 1 MB
                               boundary and the top of the defined memory
                               address range will be one less than a 1 MB
                               boundary. Refer to Chapter 5, 'Address Map,'
                               (IOH Platform Architecture Specification) for
                               further details on decoding.[br] Notes:[br] -
                               Setting the memory limit less than memory base
                               disables the 32-bit memory range altogether.[br]
                               - Note that in general the memory base and limit
                               registers won't be programmed by software
                               without clearing the MSE bit first.
                            */

  } Bits;
  UINT16 Data;

} BANK0_MLIM_IIO_VTD_STRUCT;

/* BANK0_PBAS_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x10800818)                                                      */
/*      SPRB0 (0x10800818)                                                      */
/*      SPRHBM (0x10800818)                                                     */
/*      SPRC0 (0x10800818)                                                      */
/*      SPRMCC (0x10800818)                                                     */
/*      SPRUCC (0x10800818)                                                     */
/* Register default value on SPRA0: 0x0000FFF1                                  */
/* Register default value on SPRB0: 0x0000FFF1                                  */
/* Register default value on SPRHBM: 0x0000FFF1                                 */
/* Register default value on SPRC0: 0x0000FFF1                                  */
/* Register default value on SPRMCC: 0x0000FFF1                                 */
/* Register default value on SPRUCC: 0x0000FFF1                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK0_PBAS_IIO_VTD_REG 0x11010818

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 prefetchable_memory_base_address_capability : 4;

                            /* Bits[3:0], Access Type=RO, default=0x00000001*/

                            /*
                               MS2IOSF sets this bit to 01h to indicate 64bit
                               capability.
                            */
    UINT16 prefetchable_memory_base_address : 12;

                            /* Bits[15:4], Access Type=RW, default=0x00000FFF*/

                            /*
                               Corresponds to A[31:20] of the prefetchable
                               memory address range's base address of the PCI
                               Express port. See also the PLIMU register
                               description.
                            */

  } Bits;
  UINT16 Data;

} BANK0_PBAS_IIO_VTD_STRUCT;

/* BANK0_PLIM_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x1080081a)                                                      */
/*      SPRB0 (0x1080081a)                                                      */
/*      SPRHBM (0x1080081a)                                                     */
/*      SPRC0 (0x1080081a)                                                      */
/*      SPRMCC (0x1080081a)                                                     */
/*      SPRUCC (0x1080081a)                                                     */
/* Register default value on SPRA0: 0x00000001                                  */
/* Register default value on SPRB0: 0x00000001                                  */
/* Register default value on SPRHBM: 0x00000001                                 */
/* Register default value on SPRC0: 0x00000001                                  */
/* Register default value on SPRMCC: 0x00000001                                 */
/* Register default value on SPRUCC: 0x00000001                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK0_PLIM_IIO_VTD_REG 0x1101081A

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 prefetchable_memory_limit_address_capability : 4;

                            /* Bits[3:0], Access Type=RO, default=0x00000001*/

                            /*
                               Indicates the addressing capability of the
                               prefetchable range.[br] 0h: 32-bit[br] 1h:
                               64-bit[br] All other values: reserved
                            */
    UINT16 prefetchable_memory_limit_address : 12;

                            /* Bits[15:4], Access Type=RW, default=0x00000000*/

                            /*
                               Corresponds to A[31:20] of the prefetchable
                               memory address range's limit address of the PCI
                               Express port. See also the PLIMU register
                               description.
                            */

  } Bits;
  UINT16 Data;

} BANK0_PLIM_IIO_VTD_STRUCT;

/* BANK0_PBASU_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x2080081c)                                                      */
/*      SPRB0 (0x2080081c)                                                      */
/*      SPRHBM (0x2080081c)                                                     */
/*      SPRC0 (0x2080081c)                                                      */
/*      SPRMCC (0x2080081c)                                                     */
/*      SPRUCC (0x2080081c)                                                     */
/* Register default value on SPRA0: 0xFFFFFFFF                                  */
/* Register default value on SPRB0: 0xFFFFFFFF                                  */
/* Register default value on SPRHBM: 0xFFFFFFFF                                 */
/* Register default value on SPRC0: 0xFFFFFFFF                                  */
/* Register default value on SPRMCC: 0xFFFFFFFF                                 */
/* Register default value on SPRUCC: 0xFFFFFFFF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK0_PBASU_IIO_VTD_REG 0x1102081C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 prefetchable_upper_32_bit_memory_base_address : 32;

                            /* Bits[31:0], Access Type=RW, default=0xFFFFFFFF*/

                            /*
                               Corresponds to A[63:32] of the prefetchable
                               memory address range's base address of the PCI
                               Express port. See also the PLIMU register
                               description.
                            */

  } Bits;
  UINT32 Data;

} BANK0_PBASU_IIO_VTD_STRUCT;

/* BANK0_PLIMU_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x20800820)                                                      */
/*      SPRB0 (0x20800820)                                                      */
/*      SPRHBM (0x20800820)                                                     */
/*      SPRC0 (0x20800820)                                                      */
/*      SPRMCC (0x20800820)                                                     */
/*      SPRUCC (0x20800820)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK0_PLIMU_IIO_VTD_REG 0x11020820

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 prefetchable_upper_32_bit_memory_limit_address : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               Corresponds to A[63:32] of the prefetchable
                               memory address range's limit address of the PCI
                               Express port.The Prefetchable Memory Base and
                               Memory Limit registers define a memory mapped
                               I/O prefetchable address range (64-bit
                               addresses) which is used by the PCI Express
                               bridge to determine when to forward memory
                               transactions based on the following formula:[br]
                               PREFETCH_MEMORY_BASE_UPPER::
                               PREFETCH_MEMORY_BASE <= A[63:20] <= PREFETCH_MEM
                               ORY_LIMIT_UPPER::PREFETCH_MEMORY_LIMIT[br] The
                               upper 12 bits of both the Prefetchable Memory
                               Base and Memory Limit registers are read/write
                               and corresponds to the upper 12 address bits,
                               A[31:20] of 32-bit addresses. The bottom of the
                               defined memory address range will be aligned to
                               a 1 MB boundary and the top of the defined
                               memory address range will be one less than a 1
                               MB boundary.[br] The bottom 4 bits of both the
                               Prefetchable Memory Base and Prefetchable Memory
                               Limit registers are read-only, contain the same
                               value, and encode whether or not the bridge
                               supports 64-bit addresses.[br] If these four
                               bits have the value 0h, then the bridge supports
                               only 32 bit addresses.[br] If these four bits
                               have the value 1h, then the bridge supports
                               64-bit addresses and the Prefetchable Base Upper
                               32 Bits and Prefetchable Limit Upper 32 Bits
                               registers hold the rest of the 64-bit
                               prefetchable base and limit addresses
                               respectively.[br] Setting the prefetchable
                               memory limit less than prefetchable memory base
                               disables the 64-bit prefetchable memory range
                               altogether.[br] Notes:[br] - In general the
                               memory base and limit registers won't be
                               programmed by software without clearing the MSE
                               bit first.
                            */

  } Bits;
  UINT32 Data;

} BANK0_PLIMU_IIO_VTD_STRUCT;

/* BANK0_BCTRL_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x10800826)                                                      */
/*      SPRB0 (0x10800826)                                                      */
/*      SPRHBM (0x10800826)                                                     */
/*      SPRC0 (0x10800826)                                                      */
/*      SPRMCC (0x10800826)                                                     */
/*      SPRUCC (0x10800826)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK0_BCTRL_IIO_VTD_REG 0x11010826

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 perre : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Perre */
    UINT16 serre : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /* Serre */
    UINT16 isaen : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               ISA Enable[br] Modifies the response by the root
                               port to an I/O access issued by the core that
                               target ISA I/O addresses. This applies only to
                               I/O addresses that are enabled by the IOBASE and
                               IOLIM registers.[br] 1: The root port will not
                               forward to PCI Express any I/O transactions
                               addressing the last 768 bytes in each 1KB block
                               even if the addresses are within the range
                               defined by the IOBASE and IOLIM registers.[br]
                               0: All addresses defined by the IOBASE and IOLIM
                               for core issued I/O transactions will be mapped
                               to PCI Express.
                            */
    UINT16 vgaen : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               VGA Enable[br] Controls the routing of CPU
                               initiated transactions targeting VGA compatible
                               I/O and memory address ranges. This bit must
                               only be set for one p2p port in the entire
                               system.[br] Notes:[br] - When Device 3 Function
                               0 is in NTB mode, then the Device 3 Function 0
                               versoin of this bit must be left at default
                               value. VGA compatible devices are not supported
                               on the secondary side of the NTB.
                            */
    UINT16 vga16b : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               VGA 16-bit decode[br] This bit enables the
                               virtual PCI-to-PCI bridge to provide 16-bit
                               decoding of VGA I/O address precluding the
                               decoding of alias addresses every 1 KB.[br] 0:
                               execute 10-bit address decodes on VGA I/O
                               accesses.[br] 1: execute 16-bit address decodes
                               on VGA I/O accesses.[br] Notes:[br] - This bit
                               only has meaning if bit 3 of this register is
                               also set to 1, enabling VGA I/O decoding and
                               forwarding by the bridge.[br] - Refer to PCI-PCI
                               Bridge Specification Revision 1.2 for further
                               details of this bit behavior.
                            */
    UINT16 rsvd : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 sbr : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               1: Setting this bit triggers a hot reset on the
                               link for the corresponding PCI Express port and
                               the PCI Express hierarchy domain subordinate to
                               the port. This sends the LTSSM into the Training
                               (or Link) Control Reset state, which necessarily
                               implies a reset to the downstream device and all
                               subordinate devices. The transaction layer
                               corresponding to port will be emptied by virtue
                               of the link going down when this bit is set.
                               This means that in the outbound direction, all
                               posted transactions are dropped and non-posted
                               transactions are sent a UR response. In the
                               inbound direction, completions for inbound NP
                               requests are dropped when they arrive. Inbound
                               posted writes are retired normally.Note also
                               that a secondary bus reset will not reset the
                               virtual PCI-to-PCI bridge configuration
                               registers of the targeted PCI Express port.[br]
                               0: No reset happens on the PCI Express port.
                            */
    UINT16 rsvd_7 : 9;

                            /* Bits[15:7], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT16 Data;

} BANK0_BCTRL_IIO_VTD_STRUCT;

/* BANK0_BANKCTRL2_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x10800828)                                                      */
/*      SPRB0 (0x10800828)                                                      */
/*      SPRHBM (0x10800828)                                                     */
/*      SPRC0 (0x10800828)                                                      */
/*      SPRMCC (0x10800828)                                                     */
/*      SPRUCC (0x10800828)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the decode logic associated with an arbitrary type 1 IOSF agent (i.e. PCI bridge)
*/


#define BANK0_BANKCTRL2_IIO_VTD_REG 0x11010828

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 devfunc_mask : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               When set, indicates to HW that the contents of
                               devfunc register for the bank are invalid, and
                               should not be used. Since this field is relevant
                               only for type1 bank, setting it essentially
                               ensures that only type1 cfg traffic will be
                               routed based on the secondary and subordinate
                               bus range programmed within this bank.
                            */
    UINT16 rsvd : 15;

                            /* Bits[15:1], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT16 Data;

} BANK0_BANKCTRL2_IIO_VTD_STRUCT;

/* BANK0_MCAST_CTRL_IIO_VTD_REG supported on:                                   */
/*      SPRA0 (0x1080082e)                                                      */
/*      SPRB0 (0x1080082e)                                                      */
/*      SPRHBM (0x1080082e)                                                     */
/*      SPRC0 (0x1080082e)                                                      */
/*      SPRMCC (0x1080082e)                                                     */
/*      SPRUCC (0x1080082e)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the Dualcast Control Register (Dualcast is a specialized version of PCIe Multicast used in conjunction with the Non-Transparent Bridge). The fields in this register mirror the fields in the PCIe spec-defined Multicast Control Register (see section 7.21.3 of the PCIe 3.0 spec).
*/


#define BANK0_MCAST_CTRL_IIO_VTD_REG 0x1101082E

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 mc_num_group : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000000*/

                            /*
                               This field only supports and implements bits
                               [3:0]. Bits [5:4] are not supported.
                            */
    UINT16 rsvd_mc_ctrl_14_6 : 9;

                            /* Bits[14:6], Access Type=RO, default=0x00000000*/

                            /* Rsvd Mc Ctrl 14 6 */
    UINT16 mc_enable : 1;

                            /* Bits[15:15], Access Type=RW/L, default=0x00000000*/

                            /* Mc Enable */

  } Bits;
  UINT16 Data;

} BANK0_MCAST_CTRL_IIO_VTD_STRUCT;

/* BANK0_MCAST_BASE_N0_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x20800830)                                                      */
/*      SPRB0 (0x20800830)                                                      */
/*      SPRHBM (0x20800830)                                                     */
/*      SPRC0 (0x20800830)                                                      */
/*      SPRMCC (0x20800830)                                                     */
/*      SPRUCC (0x20800830)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the Dualcast Base Address Register (Dualcast is a specialized version of PCIe Multicast used in conjunction with the Non-Transparent Bridge). The fields in this register mirror the fields in the PCIe spec-defined MC_Base_Address Register (see section 7.21.4 of the PCIe 3.0 spec).
*/


#define BANK0_MCAST_BASE_N0_IIO_VTD_REG 0x11020830

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mc_index_position : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000000*/

                            /* Mc Index Position */
    UINT32 rsvd_mc_base_11_6 : 6;

                            /* Bits[11:6], Access Type=RO, default=0x00000000*/

                            /* Rsvd Mc Base 11 6 */
    UINT32 mc_base_address : 20;

                            /* Bits[31:12], Access Type=RW, default=0x00000000*/

                            /* Mc Base Address */

  } Bits;
  UINT32 Data;

} BANK0_MCAST_BASE_N0_IIO_VTD_STRUCT;

/* BANK0_MCAST_BASE_N1_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x20800834)                                                      */
/*      SPRB0 (0x20800834)                                                      */
/*      SPRHBM (0x20800834)                                                     */
/*      SPRC0 (0x20800834)                                                      */
/*      SPRMCC (0x20800834)                                                     */
/*      SPRUCC (0x20800834)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the Dualcast Base Address Register (Dualcast is a specialized version of PCIe Multicast used in conjunction with the Non-Transparent Bridge). The fields in this register mirror the fields in the PCIe spec-defined MC_Base_Address Register (see section 7.21.4 of the PCIe 3.0 spec).
*/


#define BANK0_MCAST_BASE_N1_IIO_VTD_REG 0x11020834

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mc_base_address : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /* Mc Base Address */

  } Bits;
  UINT32 Data;

} BANK0_MCAST_BASE_N1_IIO_VTD_STRUCT;

/* BANK0_MCAST_RCV_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x10800838)                                                      */
/*      SPRB0 (0x10800838)                                                      */
/*      SPRHBM (0x10800838)                                                     */
/*      SPRC0 (0x10800838)                                                      */
/*      SPRMCC (0x10800838)                                                     */
/*      SPRUCC (0x10800838)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the Dualcast Receive Register (Dualcast is a specialized version of PCIe Multicast used in conjunction with the Non-Transparent Bridge). The fields in this register mirror the fields in the PCIe spec-defined MC_Receive Register (see section 7.21.5 of the PCIe 3.0 spec).
*/


#define BANK0_MCAST_RCV_IIO_VTD_REG 0x11010838

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 mc_rcv : 16;

                            /* Bits[15:0], Access Type=RW, default=0x00000000*/

                            /* Mc Rcv */

  } Bits;
  UINT16 Data;

} BANK0_MCAST_RCV_IIO_VTD_STRUCT;

/* BANK0_PMCSR_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x2080083c)                                                      */
/*      SPRB0 (0x2080083c)                                                      */
/*      SPRHBM (0x2080083c)                                                     */
/*      SPRC0 (0x2080083c)                                                      */
/*      SPRMCC (0x2080083c)                                                     */
/*      SPRUCC (0x2080083c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the PCIe Power Management Capability Register in the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK0_PMCSR_IIO_VTD_REG 0x1102083C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 power_state : 2;

                            /* Bits[1:0], Access Type=RW, default=0x00000000*/

                            /*
                               This 2-bit field is used to determine the
                               current power state of the function and to set a
                               new power state as well.[br] 00: D0[br] 01:
                               D1[br] 10: D2[br] 11: D3_hot[br] All devices
                               will respond to only Type 0 configuration
                               transactions (targeting the device's
                               configuration space itself) when in D3hot state
                               (root port will not forward Type 1/0
                               transactions to the downstream link) and will
                               not respond to memory/IO transactions (i.e.
                               D3hot state is equivalent to MSE/IOSE bits being
                               clear) as target and will not generate any
                               memory/IO/configuration transactions as
                               initiator on the primary bus (messages are still
                               allowed to pass through).[br] WARNING: MS2IOSF
                               hardware does NOT block any requests targeting
                               the device when the device is not in D0. The
                               IOSF device must be robust enough to handle
                               requests in non-D0 power states. In addition,
                               software should not rely on the accuracy of this
                               shadow register, but instead read the actual
                               PMCSR of the device.
                            */
    UINT32 rsvd : 30;

                            /* Bits[31:2], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} BANK0_PMCSR_IIO_VTD_STRUCT;

/* BANK1_BANKCTRL_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x800840)                                                        */
/*      SPRB0 (0x800840)                                                        */
/*      SPRHBM (0x800840)                                                       */
/*      SPRC0 (0x800840)                                                        */
/*      SPRMCC (0x800840)                                                       */
/*      SPRUCC (0x800840)                                                       */
/* Register default value on SPRA0: 0x00000081                                  */
/* Register default value on SPRB0: 0x00000081                                  */
/* Register default value on SPRHBM: 0x00000081                                 */
/* Register default value on SPRC0: 0x00000081                                  */
/* Register default value on SPRMCC: 0x00000081                                 */
/* Register default value on SPRUCC: 0x00000081                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the source decode logic associated with an arbitrary type 1 IOSF agent (i.e. PCI bridge)
*/


#define BANK1_BANKCTRL_IIO_VTD_REG 0x11000840

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 banktype : 2;

                            /* Bits[1:0], Access Type=RO, default=0x00000001*/

                            /*
                               Specifies the type of Bank Decoder. Valid values
                               are:[br] 00b: Type 0 Bank - 16 Bytes[br] 01b:
                               Type 1 Bank - 64 Bytes[br] 10b: reserved[br]
                               11b: Subtractive Decode Bank - 8 Bytes
                            */
    UINT8 force_config_type0 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               If this bit is set, MS2IOSF sends any
                               configuration request that matches this bank as
                               type 0. Enables support for SR-IOV RCIEP.
                            */
    UINT8 bank_decode_enable : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               1b: The bank decoders are enabled.[br] 0b: The
                               bank decoders are disabled.
                            */
    UINT8 shadow_enable : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               1b: Outbound configuration requests that target
                               the Device/Function specified by this bank on
                               the RootBus will be snarfed to the shadow copy
                               of decode registers.[br] 0b: Outbound
                               configuration requests will not be snarfed. BIOS
                               must program the decode registers to allow this
                               bank to decode to the bank's specified target.
                            */
    UINT8 mc_bank_decode_enable : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               1b: The Multicast bank decoders are enabled.[br]
                               0b: The Multicast bank decoders are disabled.
                            */
    UINT8 mc_shadow_enable : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               1b: Outbound configuration requests that target
                               the Multicast registers of the Device/Function
                               specified by this bank on the RootBus will be
                               snarfed to the shadow copy of decode
                               registers.[br] 0b: Outbound configuration
                               requests to the Multicast registers of the
                               Device/Function will not be snarfed. BIOS must
                               program the decode registers to allow this bank
                               to decode to the bank's specified target.
                            */
    UINT8 function_mask : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               When set, causes the DevFunc.Function field to
                               become ignored. Any configuration request that
                               matches the DevFunc.Device field with any
                               function value will be a match for this decoder
                               bank.
                            */

  } Bits;
  UINT8 Data;

} BANK1_BANKCTRL_IIO_VTD_STRUCT;

/* BANK1_DEVFUNC_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x800841)                                                        */
/*      SPRB0 (0x800841)                                                        */
/*      SPRHBM (0x800841)                                                       */
/*      SPRC0 (0x800841)                                                        */
/*      SPRMCC (0x800841)                                                       */
/*      SPRUCC (0x800841)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* PCI Device and Function number of the IOSF agent being shadowed
*/


#define BANK1_DEVFUNC_IIO_VTD_REG 0x11000841

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 func : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target Function Number on the
                               RootBus that this bank decodes for.
                            */
    UINT8 device : 5;

                            /* Bits[7:3], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target Device Number on the
                               RootBus that this bank decodes for.
                            */

  } Bits;
  UINT8 Data;

} BANK1_DEVFUNC_IIO_VTD_STRUCT;

/* BANK1_DESTID_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x10800842)                                                      */
/*      SPRB0 (0x10800842)                                                      */
/*      SPRHBM (0x10800842)                                                     */
/*      SPRC0 (0x10800842)                                                      */
/*      SPRMCC (0x10800842)                                                     */
/*      SPRUCC (0x10800842)                                                     */
/* Register default value on SPRA0: 0x00002188                                  */
/* Register default value on SPRB0: 0x00002188                                  */
/* Register default value on SPRHBM: 0x00002188                                 */
/* Register default value on SPRC0: 0x00002188                                  */
/* Register default value on SPRMCC: 0x00002188                                 */
/* Register default value on SPRUCC: 0x00002188                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* The lower 14 bits of this register comprise the PSF-required source decode information that MS2IOSF provides on the tdest_id signal when presenting the request to PSF (note exception for MS2IOSF_Port).
*/


#define BANK1_DESTID_IIO_VTD_REG 0x11010842

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 psf_channel : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies which IOSF channel to send requests
                               that hit this bank decoder ranges. This field is
                               used for IOSF Channel and also as part of the
                               IOSF Destination ID.
                            */
    UINT16 psf_port : 3;

                            /* Bits[5:3], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF port to send requests that
                               hit this bank decoder ranges.
                            */
    UINT16 ms2iosf_port : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the MS2IOSF port (left = 0, right = 1)
                               where to send requests that hit this bank
                               decoder. The logic should mask this bit to zero
                               before sending the 14-bit PSF source decode
                               header out. Technically, this is the top bit of
                               the PSF port ID, but MS2IOSF is using it for
                               internal purposes.
                            */
    UINT16 psf_port_group : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF port group to send requests
                               that hit this bank decoder ranges.
                            */
    UINT16 psf_id : 4;

                            /* Bits[11:8], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF to send requests that hit
                               this bank decoder ranges.
                            */
    UINT16 psf_decode_mode : 2;

                            /* Bits[13:12], Access Type=RW, default=0x00000002*/

                            /*
                               Specifies the PSF Destination ID decode mode
                               being used.[br] 00b: Fabric Decode[br] 01b:
                               Implicit Decode[br] 10b: Source Decode to
                               PSF_ID:Port_Group:Port:Channel[br] 11b: Source
                               Decode to PSF_ID, use Fabric Decode from there
                               onward (StF)
                            */
    UINT16 ms2iosf_channel : 2;

                            /* Bits[15:14], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies to which IOSF channel to send requests
                               that hit this bank decoder. Note the difference
                               between this channel ID and the channel ID
                               provided in the source decode header below. The
                               former specifies the channel ID on the MS2IOSF
                               interface itself whereas the latter specifies
                               the channel ID on the PSF interface to the
                               endpoint. MS2IOSF has four channels for each of
                               its two ports.
                            */

  } Bits;
  UINT16 Data;

} BANK1_DESTID_IIO_VTD_STRUCT;

/* BANK1_DEVCON_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x10800844)                                                      */
/*      SPRB0 (0x10800844)                                                      */
/*      SPRHBM (0x10800844)                                                     */
/*      SPRC0 (0x10800844)                                                      */
/*      SPRMCC (0x10800844)                                                     */
/*      SPRUCC (0x10800844)                                                     */
/* Register default value on SPRA0: 0x000000E0                                  */
/* Register default value on SPRB0: 0x000000E0                                  */
/* Register default value on SPRHBM: 0x000000E0                                 */
/* Register default value on SPRC0: 0x000000E0                                  */
/* Register default value on SPRMCC: 0x000000E0                                 */
/* Register default value on SPRUCC: 0x000000E0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Shadowed PCI Express Device Control
*/


#define BANK1_DEVCON_IIO_VTD_REG 0x11010844

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 rsvd : 5;

                            /* Bits[4:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 max_payload_size : 3;

                            /* Bits[7:5], Access Type=RW, default=0x00000007*/

                            /*
                               Max_Payload_Size[br] Indicates the largest
                               packet size supported by the target decoded by
                               this bank. [br] Defined encodings for this field
                               are:[br] 000b 128 bytes max payload size[br]
                               001b 256 bytes max payload size[br] 010b 512
                               bytes max payload size[br] 011b 1024 bytes max
                               payload size[br] 100b 2048 bytes max payload
                               size[br] 101b 4096 bytes max payload size[br]
                               110b Reserved[br] 111b 64 address aligned bytes
                               max payload size[br]
                            */
    UINT16 rsvd_8 : 7;

                            /* Bits[14:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 initiate_flr : 1;

                            /* Bits[15:15], Access Type=RO, default=0x00000000*/

                            /*
                               [br] Initiate Function Level Reset. A write of
                               '1' to the DEVCON[15] field of the device this
                               bank shadows, will cause all shadow-enabled
                               registers for this bank to reset. DEVCON[15]
                               maps to this field. This bit self-clears.[br]
                            */

  } Bits;
  UINT16 Data;

} BANK1_DEVCON_IIO_VTD_STRUCT;

/* BANK1_DEVCON_OFFSET_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x800847)                                                        */
/*      SPRB0 (0x800847)                                                        */
/*      SPRHBM (0x800847)                                                       */
/*      SPRC0 (0x800847)                                                        */
/*      SPRMCC (0x800847)                                                       */
/*      SPRUCC (0x800847)                                                       */
/* Register default value on SPRA0: 0x00000048                                  */
/* Register default value on SPRB0: 0x00000048                                  */
/* Register default value on SPRHBM: 0x00000048                                 */
/* Register default value on SPRC0: 0x00000048                                  */
/* Register default value on SPRMCC: 0x00000048                                 */
/* Register default value on SPRUCC: 0x00000048                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Offset of the PCI Express Device Control Register in the IOSF agent's configuration header
*/


#define BANK1_DEVCON_OFFSET_IIO_VTD_REG 0x11000847

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 devcon_shadowen : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               If this bit and DevCon_Master are set, MS2IOSF
                               shadows writes to the offset programmed above
                               into its copy of the device control register.
                               BIOS must clear this bit for devices that do not
                               have a device control register. If shadowing is
                               disabled for this bank, this bit has no effect.
                            */
    UINT8 devcon_master : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Indicates whether or not this shadow copy is the
                               master copy. For devices that use multiple bank
                               decoders, SW is required to enable one of them
                               as a master. HW shadowing only updates the
                               master copy. Likewise, HW only uses the master
                               copy as input to other logic such as completion
                               combining. For devices that use only one bank
                               decoder, SW is required to set this bit.
                            */
    UINT8 devcon_offset : 6;

                            /* Bits[7:2], Access Type=RW, default=0x00000012*/

                            /*
                               Configuration space register offset for the
                               Device control register. This is a DWord offset
                               (left-shift this value by two to get byte
                               offset). Note that although this points to the
                               lowest order byte of the register, only the
                               upper byte of the register is captured by this
                               bank, which is at this offset + 1h.
                            */

  } Bits;
  UINT8 Data;

} BANK1_DEVCON_OFFSET_IIO_VTD_STRUCT;

/* BANK1_PCICMD_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x10800848)                                                      */
/*      SPRB0 (0x10800848)                                                      */
/*      SPRHBM (0x10800848)                                                     */
/*      SPRC0 (0x10800848)                                                      */
/*      SPRMCC (0x10800848)                                                     */
/*      SPRUCC (0x10800848)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK1_PCICMD_IIO_VTD_REG 0x11010848

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 iose : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               I/O Space Enable (for outbound bank decode)[br]
                               1: Enables bank IOBAS/IOLIM I/O range[br] 0:
                               Disables bank IOBAS/IOLIM I/O range
                            */
    UINT16 mse : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Memory Space Enable (for outbound bank
                               decode)[br] 1: Enables bank MBAS/MLIM and
                               PBAS/PLIM memory ranges[br] 0: Disables bank
                               MBAS/MLIM and PBAS/PLIM memory ranges
                            */
    UINT16 bme : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /* Bme */
    UINT16 sce : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000000*/

                            /* Sce */
    UINT16 mwie : 1;

                            /* Bits[4:4], Access Type=RO, default=0x00000000*/

                            /* Mwie */
    UINT16 vga_palette_snoop_enable : 1;

                            /* Bits[5:5], Access Type=RO, default=0x00000000*/

                            /* Vga Palette Snoop Enable */
    UINT16 perre : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /* Perre */
    UINT16 idsel_stepping_wait_cycle_control : 1;

                            /* Bits[7:7], Access Type=RO, default=0x00000000*/

                            /* Idsel Stepping Wait Cycle Control */
    UINT16 serre : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /* Serre */
    UINT16 fast_back_to_back_enable : 1;

                            /* Bits[9:9], Access Type=RO, default=0x00000000*/

                            /* Fast Back To Back Enable */
    UINT16 rsvd : 6;

                            /* Bits[15:10], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT16 Data;

} BANK1_PCICMD_IIO_VTD_STRUCT;

/* BANK1_SECBUS_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x80084d)                                                        */
/*      SPRB0 (0x80084d)                                                        */
/*      SPRHBM (0x80084d)                                                       */
/*      SPRC0 (0x80084d)                                                        */
/*      SPRMCC (0x80084d)                                                       */
/*      SPRUCC (0x80084d)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK1_SECBUS_IIO_VTD_REG 0x1100084D

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 sbn : 8;

                            /* Bits[7:0], Access Type=RW, default=0x00000000*/

                            /* First bus of a bus range below a PCI Bridge */

  } Bits;
  UINT8 Data;

} BANK1_SECBUS_IIO_VTD_STRUCT;

/* BANK1_SUBBUS_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x80084e)                                                        */
/*      SPRB0 (0x80084e)                                                        */
/*      SPRHBM (0x80084e)                                                       */
/*      SPRC0 (0x80084e)                                                        */
/*      SPRMCC (0x80084e)                                                       */
/*      SPRUCC (0x80084e)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK1_SUBBUS_IIO_VTD_REG 0x1100084E

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 subordinate_bus_number : 8;

                            /* Bits[7:0], Access Type=RW, default=0x00000000*/

                            /* Last bus of a bus range below a PCI Bridge */

  } Bits;
  UINT8 Data;

} BANK1_SUBBUS_IIO_VTD_STRUCT;

/* BANK1_IOBAS_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x800850)                                                        */
/*      SPRB0 (0x800850)                                                        */
/*      SPRHBM (0x800850)                                                       */
/*      SPRC0 (0x800850)                                                        */
/*      SPRMCC (0x800850)                                                       */
/*      SPRUCC (0x800850)                                                       */
/* Register default value on SPRA0: 0x000000F0                                  */
/* Register default value on SPRB0: 0x000000F0                                  */
/* Register default value on SPRHBM: 0x000000F0                                 */
/* Register default value on SPRC0: 0x000000F0                                  */
/* Register default value on SPRMCC: 0x000000F0                                 */
/* Register default value on SPRUCC: 0x000000F0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK1_IOBAS_IIO_VTD_REG 0x11000850

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 i_o_address_capability : 2;

                            /* Bits[1:0], Access Type=RO, default=0x00000000*/

                            /* MS2IOSF supports only 16 bit addressing */
    UINT8 more_i_o_base_address : 2;

                            /* Bits[3:2], Access Type=RW/L, default=0x00000000*/

                            /*
                               When EN1K is set in the IIOMISCCTRL register,
                               these bits become RW and allow for 1K
                               granularity of I/O addressing, otherwise these
                               are RO.[br] Lock: !IIOMISCCTRL.EN1K
                            */
    UINT8 i_o_base_address : 4;

                            /* Bits[7:4], Access Type=RW, default=0x0000000F*/

                            /*
                               Corresponds to A[15:12] of the I/O base address
                               of the PCI Express port. See also the IOLIM
                               register description.
                            */

  } Bits;
  UINT8 Data;

} BANK1_IOBAS_IIO_VTD_STRUCT;

/* BANK1_IOLIM_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x800851)                                                        */
/*      SPRB0 (0x800851)                                                        */
/*      SPRHBM (0x800851)                                                       */
/*      SPRC0 (0x800851)                                                        */
/*      SPRMCC (0x800851)                                                       */
/*      SPRUCC (0x800851)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK1_IOLIM_IIO_VTD_REG 0x11000851

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 i_o_address_limit_capability : 2;

                            /* Bits[1:0], Access Type=RO, default=0x00000000*/

                            /* MS2IOSF supports only 16 bit addressing */
    UINT8 more_i_o_address_limit : 2;

                            /* Bits[3:2], Access Type=RW/L, default=0x00000000*/

                            /*
                               When EN1K is set in the IIOMISCCTRL register,
                               these bits become RW and allow for 1K
                               granularity of I/O addressing, otherwise these
                               are RO.[br] Lock: !IIOMISCCTRL.EN1K
                            */
    UINT8 i_o_address_limit : 4;

                            /* Bits[7:4], Access Type=RW, default=0x00000000*/

                            /*
                               Corresponds to A[15:12] of the I/O limit address
                               of the PCI Express port.The I/O Base and I/O
                               Limit registers define an address range that is
                               used by the PCI Express port to determine when
                               to forward I/O transactions from one interface
                               to the other using the following formula:[br]
                               IO_BASE <= A[15:12] <=IO_LIMIT[br] The bottom of
                               the defined I/O address range will be aligned to
                               a 4KB boundary (1KB if EN1K bit is set. Refer to
                               the IIOMISCCTRL register for definition of EN1K
                               bit) while the top of the region specified by
                               IO_LIMIT will be one less than a 4 KB (1KB if
                               EN1K bit is set) multiple.[br] Notes:[br] -
                               Setting the I/O limit less than I/O base
                               disables the I/O range altogether.[br] - General
                               the I/O base and limit registers won't be
                               programmed by software without clearing the IOSE
                               bit first.
                            */

  } Bits;
  UINT8 Data;

} BANK1_IOLIM_IIO_VTD_STRUCT;

/* BANK1_MBAS_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x10800854)                                                      */
/*      SPRB0 (0x10800854)                                                      */
/*      SPRHBM (0x10800854)                                                     */
/*      SPRC0 (0x10800854)                                                      */
/*      SPRMCC (0x10800854)                                                     */
/*      SPRUCC (0x10800854)                                                     */
/* Register default value on SPRA0: 0x0000FFF0                                  */
/* Register default value on SPRB0: 0x0000FFF0                                  */
/* Register default value on SPRHBM: 0x0000FFF0                                 */
/* Register default value on SPRC0: 0x0000FFF0                                  */
/* Register default value on SPRMCC: 0x0000FFF0                                 */
/* Register default value on SPRUCC: 0x0000FFF0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK1_MBAS_IIO_VTD_REG 0x11010854

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 memory_base_address : 12;

                            /* Bits[15:4], Access Type=RW, default=0x00000FFF*/

                            /*
                               Corresponds to A[31:20] of the 32 bit memory
                               window's base address of the PCI Express port.
                               See also the MLIM register description.
                            */

  } Bits;
  UINT16 Data;

} BANK1_MBAS_IIO_VTD_STRUCT;

/* BANK1_MLIM_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x10800856)                                                      */
/*      SPRB0 (0x10800856)                                                      */
/*      SPRHBM (0x10800856)                                                     */
/*      SPRC0 (0x10800856)                                                      */
/*      SPRMCC (0x10800856)                                                     */
/*      SPRUCC (0x10800856)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK1_MLIM_IIO_VTD_REG 0x11010856

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 memory_limit_address : 12;

                            /* Bits[15:4], Access Type=RW, default=0x00000000*/

                            /*
                               Corresponds to A[31:20] of the 32 bit memory
                               window's limit address that corresponds to the
                               upper limit of the range of memory accesses that
                               will be passed by the PCI Express bridge.The
                               Memory Base and Memory Limit registers define a
                               memory mapped I/O non-prefetchable address range
                               (32-bit addresses) and the MS2IOSF directs
                               accesses in this range to the PCI Express port
                               based on the following formula:[br] MEMORY_BASE
                               <= A[31:20] <= MEMORY_LIMIT[br] The upper 12
                               bits of both the Memory Base and Memory Limit
                               registers are read/write and corresponds to the
                               upper 12 address bits, A[31:20] of 32-bit
                               addresses. Thus, the bottom of the defined
                               memory address range will be aligned to a 1 MB
                               boundary and the top of the defined memory
                               address range will be one less than a 1 MB
                               boundary. Refer to Chapter 5, 'Address Map,'
                               (IOH Platform Architecture Specification) for
                               further details on decoding.[br] Notes:[br] -
                               Setting the memory limit less than memory base
                               disables the 32-bit memory range altogether.[br]
                               - Note that in general the memory base and limit
                               registers won't be programmed by software
                               without clearing the MSE bit first.
                            */

  } Bits;
  UINT16 Data;

} BANK1_MLIM_IIO_VTD_STRUCT;

/* BANK1_PBAS_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x10800858)                                                      */
/*      SPRB0 (0x10800858)                                                      */
/*      SPRHBM (0x10800858)                                                     */
/*      SPRC0 (0x10800858)                                                      */
/*      SPRMCC (0x10800858)                                                     */
/*      SPRUCC (0x10800858)                                                     */
/* Register default value on SPRA0: 0x0000FFF1                                  */
/* Register default value on SPRB0: 0x0000FFF1                                  */
/* Register default value on SPRHBM: 0x0000FFF1                                 */
/* Register default value on SPRC0: 0x0000FFF1                                  */
/* Register default value on SPRMCC: 0x0000FFF1                                 */
/* Register default value on SPRUCC: 0x0000FFF1                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK1_PBAS_IIO_VTD_REG 0x11010858

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 prefetchable_memory_base_address_capability : 4;

                            /* Bits[3:0], Access Type=RO, default=0x00000001*/

                            /*
                               MS2IOSF sets this bit to 01h to indicate 64bit
                               capability.
                            */
    UINT16 prefetchable_memory_base_address : 12;

                            /* Bits[15:4], Access Type=RW, default=0x00000FFF*/

                            /*
                               Corresponds to A[31:20] of the prefetchable
                               memory address range's base address of the PCI
                               Express port. See also the PLIMU register
                               description.
                            */

  } Bits;
  UINT16 Data;

} BANK1_PBAS_IIO_VTD_STRUCT;

/* BANK1_PLIM_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x1080085a)                                                      */
/*      SPRB0 (0x1080085a)                                                      */
/*      SPRHBM (0x1080085a)                                                     */
/*      SPRC0 (0x1080085a)                                                      */
/*      SPRMCC (0x1080085a)                                                     */
/*      SPRUCC (0x1080085a)                                                     */
/* Register default value on SPRA0: 0x00000001                                  */
/* Register default value on SPRB0: 0x00000001                                  */
/* Register default value on SPRHBM: 0x00000001                                 */
/* Register default value on SPRC0: 0x00000001                                  */
/* Register default value on SPRMCC: 0x00000001                                 */
/* Register default value on SPRUCC: 0x00000001                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK1_PLIM_IIO_VTD_REG 0x1101085A

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 prefetchable_memory_limit_address_capability : 4;

                            /* Bits[3:0], Access Type=RO, default=0x00000001*/

                            /*
                               Indicates the addressing capability of the
                               prefetchable range.[br] 0h: 32-bit[br] 1h:
                               64-bit[br] All other values: reserved
                            */
    UINT16 prefetchable_memory_limit_address : 12;

                            /* Bits[15:4], Access Type=RW, default=0x00000000*/

                            /*
                               Corresponds to A[31:20] of the prefetchable
                               memory address range's limit address of the PCI
                               Express port. See also the PLIMU register
                               description.
                            */

  } Bits;
  UINT16 Data;

} BANK1_PLIM_IIO_VTD_STRUCT;

/* BANK1_PBASU_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x2080085c)                                                      */
/*      SPRB0 (0x2080085c)                                                      */
/*      SPRHBM (0x2080085c)                                                     */
/*      SPRC0 (0x2080085c)                                                      */
/*      SPRMCC (0x2080085c)                                                     */
/*      SPRUCC (0x2080085c)                                                     */
/* Register default value on SPRA0: 0xFFFFFFFF                                  */
/* Register default value on SPRB0: 0xFFFFFFFF                                  */
/* Register default value on SPRHBM: 0xFFFFFFFF                                 */
/* Register default value on SPRC0: 0xFFFFFFFF                                  */
/* Register default value on SPRMCC: 0xFFFFFFFF                                 */
/* Register default value on SPRUCC: 0xFFFFFFFF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK1_PBASU_IIO_VTD_REG 0x1102085C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 prefetchable_upper_32_bit_memory_base_address : 32;

                            /* Bits[31:0], Access Type=RW, default=0xFFFFFFFF*/

                            /*
                               Corresponds to A[63:32] of the prefetchable
                               memory address range's base address of the PCI
                               Express port. See also the PLIMU register
                               description.
                            */

  } Bits;
  UINT32 Data;

} BANK1_PBASU_IIO_VTD_STRUCT;

/* BANK1_PLIMU_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x20800860)                                                      */
/*      SPRB0 (0x20800860)                                                      */
/*      SPRHBM (0x20800860)                                                     */
/*      SPRC0 (0x20800860)                                                      */
/*      SPRMCC (0x20800860)                                                     */
/*      SPRUCC (0x20800860)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK1_PLIMU_IIO_VTD_REG 0x11020860

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 prefetchable_upper_32_bit_memory_limit_address : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               Corresponds to A[63:32] of the prefetchable
                               memory address range's limit address of the PCI
                               Express port.The Prefetchable Memory Base and
                               Memory Limit registers define a memory mapped
                               I/O prefetchable address range (64-bit
                               addresses) which is used by the PCI Express
                               bridge to determine when to forward memory
                               transactions based on the following formula:[br]
                               PREFETCH_MEMORY_BASE_UPPER::
                               PREFETCH_MEMORY_BASE <= A[63:20] <= PREFETCH_MEM
                               ORY_LIMIT_UPPER::PREFETCH_MEMORY_LIMIT[br] The
                               upper 12 bits of both the Prefetchable Memory
                               Base and Memory Limit registers are read/write
                               and corresponds to the upper 12 address bits,
                               A[31:20] of 32-bit addresses. The bottom of the
                               defined memory address range will be aligned to
                               a 1 MB boundary and the top of the defined
                               memory address range will be one less than a 1
                               MB boundary.[br] The bottom 4 bits of both the
                               Prefetchable Memory Base and Prefetchable Memory
                               Limit registers are read-only, contain the same
                               value, and encode whether or not the bridge
                               supports 64-bit addresses.[br] If these four
                               bits have the value 0h, then the bridge supports
                               only 32 bit addresses.[br] If these four bits
                               have the value 1h, then the bridge supports
                               64-bit addresses and the Prefetchable Base Upper
                               32 Bits and Prefetchable Limit Upper 32 Bits
                               registers hold the rest of the 64-bit
                               prefetchable base and limit addresses
                               respectively.[br] Setting the prefetchable
                               memory limit less than prefetchable memory base
                               disables the 64-bit prefetchable memory range
                               altogether.[br] Notes:[br] - In general the
                               memory base and limit registers won't be
                               programmed by software without clearing the MSE
                               bit first.
                            */

  } Bits;
  UINT32 Data;

} BANK1_PLIMU_IIO_VTD_STRUCT;

/* BANK1_BCTRL_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x10800866)                                                      */
/*      SPRB0 (0x10800866)                                                      */
/*      SPRHBM (0x10800866)                                                     */
/*      SPRC0 (0x10800866)                                                      */
/*      SPRMCC (0x10800866)                                                     */
/*      SPRUCC (0x10800866)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK1_BCTRL_IIO_VTD_REG 0x11010866

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 perre : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Perre */
    UINT16 serre : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /* Serre */
    UINT16 isaen : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               ISA Enable[br] Modifies the response by the root
                               port to an I/O access issued by the core that
                               target ISA I/O addresses. This applies only to
                               I/O addresses that are enabled by the IOBASE and
                               IOLIM registers.[br] 1: The root port will not
                               forward to PCI Express any I/O transactions
                               addressing the last 768 bytes in each 1KB block
                               even if the addresses are within the range
                               defined by the IOBASE and IOLIM registers.[br]
                               0: All addresses defined by the IOBASE and IOLIM
                               for core issued I/O transactions will be mapped
                               to PCI Express.
                            */
    UINT16 vgaen : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               VGA Enable[br] Controls the routing of CPU
                               initiated transactions targeting VGA compatible
                               I/O and memory address ranges. This bit must
                               only be set for one p2p port in the entire
                               system.[br] Notes:[br] - When Device 3 Function
                               0 is in NTB mode, then the Device 3 Function 0
                               versoin of this bit must be left at default
                               value. VGA compatible devices are not supported
                               on the secondary side of the NTB.
                            */
    UINT16 vga16b : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               VGA 16-bit decode[br] This bit enables the
                               virtual PCI-to-PCI bridge to provide 16-bit
                               decoding of VGA I/O address precluding the
                               decoding of alias addresses every 1 KB.[br] 0:
                               execute 10-bit address decodes on VGA I/O
                               accesses.[br] 1: execute 16-bit address decodes
                               on VGA I/O accesses.[br] Notes:[br] - This bit
                               only has meaning if bit 3 of this register is
                               also set to 1, enabling VGA I/O decoding and
                               forwarding by the bridge.[br] - Refer to PCI-PCI
                               Bridge Specification Revision 1.2 for further
                               details of this bit behavior.
                            */
    UINT16 rsvd : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 sbr : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               1: Setting this bit triggers a hot reset on the
                               link for the corresponding PCI Express port and
                               the PCI Express hierarchy domain subordinate to
                               the port. This sends the LTSSM into the Training
                               (or Link) Control Reset state, which necessarily
                               implies a reset to the downstream device and all
                               subordinate devices. The transaction layer
                               corresponding to port will be emptied by virtue
                               of the link going down when this bit is set.
                               This means that in the outbound direction, all
                               posted transactions are dropped and non-posted
                               transactions are sent a UR response. In the
                               inbound direction, completions for inbound NP
                               requests are dropped when they arrive. Inbound
                               posted writes are retired normally.Note also
                               that a secondary bus reset will not reset the
                               virtual PCI-to-PCI bridge configuration
                               registers of the targeted PCI Express port.[br]
                               0: No reset happens on the PCI Express port.
                            */
    UINT16 rsvd_7 : 9;

                            /* Bits[15:7], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT16 Data;

} BANK1_BCTRL_IIO_VTD_STRUCT;

/* BANK1_BANKCTRL2_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x10800868)                                                      */
/*      SPRB0 (0x10800868)                                                      */
/*      SPRHBM (0x10800868)                                                     */
/*      SPRC0 (0x10800868)                                                      */
/*      SPRMCC (0x10800868)                                                     */
/*      SPRUCC (0x10800868)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the decode logic associated with an arbitrary type 1 IOSF agent (i.e. PCI bridge)
*/


#define BANK1_BANKCTRL2_IIO_VTD_REG 0x11010868

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 devfunc_mask : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               When set, indicates to HW that the contents of
                               devfunc register for the bank are invalid, and
                               should not be used. Since this field is relevant
                               only for type1 bank, setting it essentially
                               ensures that only type1 cfg traffic will be
                               routed based on the secondary and subordinate
                               bus range programmed within this bank.
                            */
    UINT16 rsvd : 15;

                            /* Bits[15:1], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT16 Data;

} BANK1_BANKCTRL2_IIO_VTD_STRUCT;

/* BANK1_MCAST_CTRL_IIO_VTD_REG supported on:                                   */
/*      SPRA0 (0x1080086e)                                                      */
/*      SPRB0 (0x1080086e)                                                      */
/*      SPRHBM (0x1080086e)                                                     */
/*      SPRC0 (0x1080086e)                                                      */
/*      SPRMCC (0x1080086e)                                                     */
/*      SPRUCC (0x1080086e)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the Dualcast Control Register (Dualcast is a specialized version of PCIe Multicast used in conjunction with the Non-Transparent Bridge). The fields in this register mirror the fields in the PCIe spec-defined Multicast Control Register (see section 7.21.3 of the PCIe 3.0 spec).
*/


#define BANK1_MCAST_CTRL_IIO_VTD_REG 0x1101086E

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 mc_num_group : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000000*/

                            /*
                               This field only supports and implements bits
                               [3:0]. Bits [5:4] are not supported.
                            */
    UINT16 rsvd_mc_ctrl_14_6 : 9;

                            /* Bits[14:6], Access Type=RO, default=0x00000000*/

                            /* Rsvd Mc Ctrl 14 6 */
    UINT16 mc_enable : 1;

                            /* Bits[15:15], Access Type=RW/L, default=0x00000000*/

                            /* Mc Enable */

  } Bits;
  UINT16 Data;

} BANK1_MCAST_CTRL_IIO_VTD_STRUCT;

/* BANK1_MCAST_BASE_N0_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x20800870)                                                      */
/*      SPRB0 (0x20800870)                                                      */
/*      SPRHBM (0x20800870)                                                     */
/*      SPRC0 (0x20800870)                                                      */
/*      SPRMCC (0x20800870)                                                     */
/*      SPRUCC (0x20800870)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the Dualcast Base Address Register (Dualcast is a specialized version of PCIe Multicast used in conjunction with the Non-Transparent Bridge). The fields in this register mirror the fields in the PCIe spec-defined MC_Base_Address Register (see section 7.21.4 of the PCIe 3.0 spec).
*/


#define BANK1_MCAST_BASE_N0_IIO_VTD_REG 0x11020870

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mc_index_position : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000000*/

                            /* Mc Index Position */
    UINT32 rsvd_mc_base_11_6 : 6;

                            /* Bits[11:6], Access Type=RO, default=0x00000000*/

                            /* Rsvd Mc Base 11 6 */
    UINT32 mc_base_address : 20;

                            /* Bits[31:12], Access Type=RW, default=0x00000000*/

                            /* Mc Base Address */

  } Bits;
  UINT32 Data;

} BANK1_MCAST_BASE_N0_IIO_VTD_STRUCT;

/* BANK1_MCAST_BASE_N1_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x20800874)                                                      */
/*      SPRB0 (0x20800874)                                                      */
/*      SPRHBM (0x20800874)                                                     */
/*      SPRC0 (0x20800874)                                                      */
/*      SPRMCC (0x20800874)                                                     */
/*      SPRUCC (0x20800874)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the Dualcast Base Address Register (Dualcast is a specialized version of PCIe Multicast used in conjunction with the Non-Transparent Bridge). The fields in this register mirror the fields in the PCIe spec-defined MC_Base_Address Register (see section 7.21.4 of the PCIe 3.0 spec).
*/


#define BANK1_MCAST_BASE_N1_IIO_VTD_REG 0x11020874

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mc_base_address : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /* Mc Base Address */

  } Bits;
  UINT32 Data;

} BANK1_MCAST_BASE_N1_IIO_VTD_STRUCT;

/* BANK1_MCAST_RCV_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x10800878)                                                      */
/*      SPRB0 (0x10800878)                                                      */
/*      SPRHBM (0x10800878)                                                     */
/*      SPRC0 (0x10800878)                                                      */
/*      SPRMCC (0x10800878)                                                     */
/*      SPRUCC (0x10800878)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the Dualcast Receive Register (Dualcast is a specialized version of PCIe Multicast used in conjunction with the Non-Transparent Bridge). The fields in this register mirror the fields in the PCIe spec-defined MC_Receive Register (see section 7.21.5 of the PCIe 3.0 spec).
*/


#define BANK1_MCAST_RCV_IIO_VTD_REG 0x11010878

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 mc_rcv : 16;

                            /* Bits[15:0], Access Type=RW, default=0x00000000*/

                            /* Mc Rcv */

  } Bits;
  UINT16 Data;

} BANK1_MCAST_RCV_IIO_VTD_STRUCT;

/* BANK1_PMCSR_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x2080087c)                                                      */
/*      SPRB0 (0x2080087c)                                                      */
/*      SPRHBM (0x2080087c)                                                     */
/*      SPRC0 (0x2080087c)                                                      */
/*      SPRMCC (0x2080087c)                                                     */
/*      SPRUCC (0x2080087c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the PCIe Power Management Capability Register in the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK1_PMCSR_IIO_VTD_REG 0x1102087C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 power_state : 2;

                            /* Bits[1:0], Access Type=RW, default=0x00000000*/

                            /*
                               This 2-bit field is used to determine the
                               current power state of the function and to set a
                               new power state as well.[br] 00: D0[br] 01:
                               D1[br] 10: D2[br] 11: D3_hot[br] All devices
                               will respond to only Type 0 configuration
                               transactions (targeting the device's
                               configuration space itself) when in D3hot state
                               (root port will not forward Type 1/0
                               transactions to the downstream link) and will
                               not respond to memory/IO transactions (i.e.
                               D3hot state is equivalent to MSE/IOSE bits being
                               clear) as target and will not generate any
                               memory/IO/configuration transactions as
                               initiator on the primary bus (messages are still
                               allowed to pass through).[br] WARNING: MS2IOSF
                               hardware does NOT block any requests targeting
                               the device when the device is not in D0. The
                               IOSF device must be robust enough to handle
                               requests in non-D0 power states. In addition,
                               software should not rely on the accuracy of this
                               shadow register, but instead read the actual
                               PMCSR of the device.
                            */
    UINT32 rsvd : 30;

                            /* Bits[31:2], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} BANK1_PMCSR_IIO_VTD_STRUCT;

/* BANK2_BANKCTRL_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x800880)                                                        */
/*      SPRB0 (0x800880)                                                        */
/*      SPRHBM (0x800880)                                                       */
/*      SPRC0 (0x800880)                                                        */
/*      SPRMCC (0x800880)                                                       */
/*      SPRUCC (0x800880)                                                       */
/* Register default value on SPRA0: 0x00000081                                  */
/* Register default value on SPRB0: 0x00000081                                  */
/* Register default value on SPRHBM: 0x00000081                                 */
/* Register default value on SPRC0: 0x00000081                                  */
/* Register default value on SPRMCC: 0x00000081                                 */
/* Register default value on SPRUCC: 0x00000081                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the source decode logic associated with an arbitrary type 1 IOSF agent (i.e. PCI bridge)
*/


#define BANK2_BANKCTRL_IIO_VTD_REG 0x11000880

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 banktype : 2;

                            /* Bits[1:0], Access Type=RO, default=0x00000001*/

                            /*
                               Specifies the type of Bank Decoder. Valid values
                               are:[br] 00b: Type 0 Bank - 16 Bytes[br] 01b:
                               Type 1 Bank - 64 Bytes[br] 10b: reserved[br]
                               11b: Subtractive Decode Bank - 8 Bytes
                            */
    UINT8 force_config_type0 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               If this bit is set, MS2IOSF sends any
                               configuration request that matches this bank as
                               type 0. Enables support for SR-IOV RCIEP.
                            */
    UINT8 bank_decode_enable : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               1b: The bank decoders are enabled.[br] 0b: The
                               bank decoders are disabled.
                            */
    UINT8 shadow_enable : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               1b: Outbound configuration requests that target
                               the Device/Function specified by this bank on
                               the RootBus will be snarfed to the shadow copy
                               of decode registers.[br] 0b: Outbound
                               configuration requests will not be snarfed. BIOS
                               must program the decode registers to allow this
                               bank to decode to the bank's specified target.
                            */
    UINT8 mc_bank_decode_enable : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               1b: The Multicast bank decoders are enabled.[br]
                               0b: The Multicast bank decoders are disabled.
                            */
    UINT8 mc_shadow_enable : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               1b: Outbound configuration requests that target
                               the Multicast registers of the Device/Function
                               specified by this bank on the RootBus will be
                               snarfed to the shadow copy of decode
                               registers.[br] 0b: Outbound configuration
                               requests to the Multicast registers of the
                               Device/Function will not be snarfed. BIOS must
                               program the decode registers to allow this bank
                               to decode to the bank's specified target.
                            */
    UINT8 function_mask : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               When set, causes the DevFunc.Function field to
                               become ignored. Any configuration request that
                               matches the DevFunc.Device field with any
                               function value will be a match for this decoder
                               bank.
                            */

  } Bits;
  UINT8 Data;

} BANK2_BANKCTRL_IIO_VTD_STRUCT;

/* BANK2_DEVFUNC_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x800881)                                                        */
/*      SPRB0 (0x800881)                                                        */
/*      SPRHBM (0x800881)                                                       */
/*      SPRC0 (0x800881)                                                        */
/*      SPRMCC (0x800881)                                                       */
/*      SPRUCC (0x800881)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* PCI Device and Function number of the IOSF agent being shadowed
*/


#define BANK2_DEVFUNC_IIO_VTD_REG 0x11000881

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 func : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target Function Number on the
                               RootBus that this bank decodes for.
                            */
    UINT8 device : 5;

                            /* Bits[7:3], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target Device Number on the
                               RootBus that this bank decodes for.
                            */

  } Bits;
  UINT8 Data;

} BANK2_DEVFUNC_IIO_VTD_STRUCT;

/* BANK2_DESTID_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x10800882)                                                      */
/*      SPRB0 (0x10800882)                                                      */
/*      SPRHBM (0x10800882)                                                     */
/*      SPRC0 (0x10800882)                                                      */
/*      SPRMCC (0x10800882)                                                     */
/*      SPRUCC (0x10800882)                                                     */
/* Register default value on SPRA0: 0x00002188                                  */
/* Register default value on SPRB0: 0x00002188                                  */
/* Register default value on SPRHBM: 0x00002188                                 */
/* Register default value on SPRC0: 0x00002188                                  */
/* Register default value on SPRMCC: 0x00002188                                 */
/* Register default value on SPRUCC: 0x00002188                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* The lower 14 bits of this register comprise the PSF-required source decode information that MS2IOSF provides on the tdest_id signal when presenting the request to PSF (note exception for MS2IOSF_Port).
*/


#define BANK2_DESTID_IIO_VTD_REG 0x11010882

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 psf_channel : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies which IOSF channel to send requests
                               that hit this bank decoder ranges. This field is
                               used for IOSF Channel and also as part of the
                               IOSF Destination ID.
                            */
    UINT16 psf_port : 3;

                            /* Bits[5:3], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF port to send requests that
                               hit this bank decoder ranges.
                            */
    UINT16 ms2iosf_port : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the MS2IOSF port (left = 0, right = 1)
                               where to send requests that hit this bank
                               decoder. The logic should mask this bit to zero
                               before sending the 14-bit PSF source decode
                               header out. Technically, this is the top bit of
                               the PSF port ID, but MS2IOSF is using it for
                               internal purposes.
                            */
    UINT16 psf_port_group : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF port group to send requests
                               that hit this bank decoder ranges.
                            */
    UINT16 psf_id : 4;

                            /* Bits[11:8], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF to send requests that hit
                               this bank decoder ranges.
                            */
    UINT16 psf_decode_mode : 2;

                            /* Bits[13:12], Access Type=RW, default=0x00000002*/

                            /*
                               Specifies the PSF Destination ID decode mode
                               being used.[br] 00b: Fabric Decode[br] 01b:
                               Implicit Decode[br] 10b: Source Decode to
                               PSF_ID:Port_Group:Port:Channel[br] 11b: Source
                               Decode to PSF_ID, use Fabric Decode from there
                               onward (StF)
                            */
    UINT16 ms2iosf_channel : 2;

                            /* Bits[15:14], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies to which IOSF channel to send requests
                               that hit this bank decoder. Note the difference
                               between this channel ID and the channel ID
                               provided in the source decode header below. The
                               former specifies the channel ID on the MS2IOSF
                               interface itself whereas the latter specifies
                               the channel ID on the PSF interface to the
                               endpoint. MS2IOSF has four channels for each of
                               its two ports.
                            */

  } Bits;
  UINT16 Data;

} BANK2_DESTID_IIO_VTD_STRUCT;

/* BANK2_DEVCON_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x10800884)                                                      */
/*      SPRB0 (0x10800884)                                                      */
/*      SPRHBM (0x10800884)                                                     */
/*      SPRC0 (0x10800884)                                                      */
/*      SPRMCC (0x10800884)                                                     */
/*      SPRUCC (0x10800884)                                                     */
/* Register default value on SPRA0: 0x000000E0                                  */
/* Register default value on SPRB0: 0x000000E0                                  */
/* Register default value on SPRHBM: 0x000000E0                                 */
/* Register default value on SPRC0: 0x000000E0                                  */
/* Register default value on SPRMCC: 0x000000E0                                 */
/* Register default value on SPRUCC: 0x000000E0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Shadowed PCI Express Device Control
*/


#define BANK2_DEVCON_IIO_VTD_REG 0x11010884

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 rsvd : 5;

                            /* Bits[4:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 max_payload_size : 3;

                            /* Bits[7:5], Access Type=RW, default=0x00000007*/

                            /*
                               Max_Payload_Size[br] Indicates the largest
                               packet size supported by the target decoded by
                               this bank. [br] Defined encodings for this field
                               are:[br] 000b 128 bytes max payload size[br]
                               001b 256 bytes max payload size[br] 010b 512
                               bytes max payload size[br] 011b 1024 bytes max
                               payload size[br] 100b 2048 bytes max payload
                               size[br] 101b 4096 bytes max payload size[br]
                               110b Reserved[br] 111b 64 address aligned bytes
                               max payload size[br]
                            */
    UINT16 rsvd_8 : 7;

                            /* Bits[14:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 initiate_flr : 1;

                            /* Bits[15:15], Access Type=RO, default=0x00000000*/

                            /*
                               [br] Initiate Function Level Reset. A write of
                               '1' to the DEVCON[15] field of the device this
                               bank shadows, will cause all shadow-enabled
                               registers for this bank to reset. DEVCON[15]
                               maps to this field. This bit self-clears.[br]
                            */

  } Bits;
  UINT16 Data;

} BANK2_DEVCON_IIO_VTD_STRUCT;

/* BANK2_DEVCON_OFFSET_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x800887)                                                        */
/*      SPRB0 (0x800887)                                                        */
/*      SPRHBM (0x800887)                                                       */
/*      SPRC0 (0x800887)                                                        */
/*      SPRMCC (0x800887)                                                       */
/*      SPRUCC (0x800887)                                                       */
/* Register default value on SPRA0: 0x00000048                                  */
/* Register default value on SPRB0: 0x00000048                                  */
/* Register default value on SPRHBM: 0x00000048                                 */
/* Register default value on SPRC0: 0x00000048                                  */
/* Register default value on SPRMCC: 0x00000048                                 */
/* Register default value on SPRUCC: 0x00000048                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Offset of the PCI Express Device Control Register in the IOSF agent's configuration header
*/


#define BANK2_DEVCON_OFFSET_IIO_VTD_REG 0x11000887

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 devcon_shadowen : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               If this bit and DevCon_Master are set, MS2IOSF
                               shadows writes to the offset programmed above
                               into its copy of the device control register.
                               BIOS must clear this bit for devices that do not
                               have a device control register. If shadowing is
                               disabled for this bank, this bit has no effect.
                            */
    UINT8 devcon_master : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Indicates whether or not this shadow copy is the
                               master copy. For devices that use multiple bank
                               decoders, SW is required to enable one of them
                               as a master. HW shadowing only updates the
                               master copy. Likewise, HW only uses the master
                               copy as input to other logic such as completion
                               combining. For devices that use only one bank
                               decoder, SW is required to set this bit.
                            */
    UINT8 devcon_offset : 6;

                            /* Bits[7:2], Access Type=RW, default=0x00000012*/

                            /*
                               Configuration space register offset for the
                               Device control register. This is a DWord offset
                               (left-shift this value by two to get byte
                               offset). Note that although this points to the
                               lowest order byte of the register, only the
                               upper byte of the register is captured by this
                               bank, which is at this offset + 1h.
                            */

  } Bits;
  UINT8 Data;

} BANK2_DEVCON_OFFSET_IIO_VTD_STRUCT;

/* BANK2_PCICMD_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x10800888)                                                      */
/*      SPRB0 (0x10800888)                                                      */
/*      SPRHBM (0x10800888)                                                     */
/*      SPRC0 (0x10800888)                                                      */
/*      SPRMCC (0x10800888)                                                     */
/*      SPRUCC (0x10800888)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK2_PCICMD_IIO_VTD_REG 0x11010888

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 iose : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               I/O Space Enable (for outbound bank decode)[br]
                               1: Enables bank IOBAS/IOLIM I/O range[br] 0:
                               Disables bank IOBAS/IOLIM I/O range
                            */
    UINT16 mse : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Memory Space Enable (for outbound bank
                               decode)[br] 1: Enables bank MBAS/MLIM and
                               PBAS/PLIM memory ranges[br] 0: Disables bank
                               MBAS/MLIM and PBAS/PLIM memory ranges
                            */
    UINT16 bme : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /* Bme */
    UINT16 sce : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000000*/

                            /* Sce */
    UINT16 mwie : 1;

                            /* Bits[4:4], Access Type=RO, default=0x00000000*/

                            /* Mwie */
    UINT16 vga_palette_snoop_enable : 1;

                            /* Bits[5:5], Access Type=RO, default=0x00000000*/

                            /* Vga Palette Snoop Enable */
    UINT16 perre : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /* Perre */
    UINT16 idsel_stepping_wait_cycle_control : 1;

                            /* Bits[7:7], Access Type=RO, default=0x00000000*/

                            /* Idsel Stepping Wait Cycle Control */
    UINT16 serre : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /* Serre */
    UINT16 fast_back_to_back_enable : 1;

                            /* Bits[9:9], Access Type=RO, default=0x00000000*/

                            /* Fast Back To Back Enable */
    UINT16 rsvd : 6;

                            /* Bits[15:10], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT16 Data;

} BANK2_PCICMD_IIO_VTD_STRUCT;

/* BANK2_SECBUS_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x80088d)                                                        */
/*      SPRB0 (0x80088d)                                                        */
/*      SPRHBM (0x80088d)                                                       */
/*      SPRC0 (0x80088d)                                                        */
/*      SPRMCC (0x80088d)                                                       */
/*      SPRUCC (0x80088d)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK2_SECBUS_IIO_VTD_REG 0x1100088D

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 sbn : 8;

                            /* Bits[7:0], Access Type=RW, default=0x00000000*/

                            /* First bus of a bus range below a PCI Bridge */

  } Bits;
  UINT8 Data;

} BANK2_SECBUS_IIO_VTD_STRUCT;

/* BANK2_SUBBUS_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x80088e)                                                        */
/*      SPRB0 (0x80088e)                                                        */
/*      SPRHBM (0x80088e)                                                       */
/*      SPRC0 (0x80088e)                                                        */
/*      SPRMCC (0x80088e)                                                       */
/*      SPRUCC (0x80088e)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK2_SUBBUS_IIO_VTD_REG 0x1100088E

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 subordinate_bus_number : 8;

                            /* Bits[7:0], Access Type=RW, default=0x00000000*/

                            /* Last bus of a bus range below a PCI Bridge */

  } Bits;
  UINT8 Data;

} BANK2_SUBBUS_IIO_VTD_STRUCT;

/* BANK2_IOBAS_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x800890)                                                        */
/*      SPRB0 (0x800890)                                                        */
/*      SPRHBM (0x800890)                                                       */
/*      SPRC0 (0x800890)                                                        */
/*      SPRMCC (0x800890)                                                       */
/*      SPRUCC (0x800890)                                                       */
/* Register default value on SPRA0: 0x000000F0                                  */
/* Register default value on SPRB0: 0x000000F0                                  */
/* Register default value on SPRHBM: 0x000000F0                                 */
/* Register default value on SPRC0: 0x000000F0                                  */
/* Register default value on SPRMCC: 0x000000F0                                 */
/* Register default value on SPRUCC: 0x000000F0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK2_IOBAS_IIO_VTD_REG 0x11000890

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 i_o_address_capability : 2;

                            /* Bits[1:0], Access Type=RO, default=0x00000000*/

                            /* MS2IOSF supports only 16 bit addressing */
    UINT8 more_i_o_base_address : 2;

                            /* Bits[3:2], Access Type=RW/L, default=0x00000000*/

                            /*
                               When EN1K is set in the IIOMISCCTRL register,
                               these bits become RW and allow for 1K
                               granularity of I/O addressing, otherwise these
                               are RO.[br] Lock: !IIOMISCCTRL.EN1K
                            */
    UINT8 i_o_base_address : 4;

                            /* Bits[7:4], Access Type=RW, default=0x0000000F*/

                            /*
                               Corresponds to A[15:12] of the I/O base address
                               of the PCI Express port. See also the IOLIM
                               register description.
                            */

  } Bits;
  UINT8 Data;

} BANK2_IOBAS_IIO_VTD_STRUCT;

/* BANK2_IOLIM_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x800891)                                                        */
/*      SPRB0 (0x800891)                                                        */
/*      SPRHBM (0x800891)                                                       */
/*      SPRC0 (0x800891)                                                        */
/*      SPRMCC (0x800891)                                                       */
/*      SPRUCC (0x800891)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK2_IOLIM_IIO_VTD_REG 0x11000891

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 i_o_address_limit_capability : 2;

                            /* Bits[1:0], Access Type=RO, default=0x00000000*/

                            /* MS2IOSF supports only 16 bit addressing */
    UINT8 more_i_o_address_limit : 2;

                            /* Bits[3:2], Access Type=RW/L, default=0x00000000*/

                            /*
                               When EN1K is set in the IIOMISCCTRL register,
                               these bits become RW and allow for 1K
                               granularity of I/O addressing, otherwise these
                               are RO.[br] Lock: !IIOMISCCTRL.EN1K
                            */
    UINT8 i_o_address_limit : 4;

                            /* Bits[7:4], Access Type=RW, default=0x00000000*/

                            /*
                               Corresponds to A[15:12] of the I/O limit address
                               of the PCI Express port.The I/O Base and I/O
                               Limit registers define an address range that is
                               used by the PCI Express port to determine when
                               to forward I/O transactions from one interface
                               to the other using the following formula:[br]
                               IO_BASE <= A[15:12] <=IO_LIMIT[br] The bottom of
                               the defined I/O address range will be aligned to
                               a 4KB boundary (1KB if EN1K bit is set. Refer to
                               the IIOMISCCTRL register for definition of EN1K
                               bit) while the top of the region specified by
                               IO_LIMIT will be one less than a 4 KB (1KB if
                               EN1K bit is set) multiple.[br] Notes:[br] -
                               Setting the I/O limit less than I/O base
                               disables the I/O range altogether.[br] - General
                               the I/O base and limit registers won't be
                               programmed by software without clearing the IOSE
                               bit first.
                            */

  } Bits;
  UINT8 Data;

} BANK2_IOLIM_IIO_VTD_STRUCT;

/* BANK2_MBAS_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x10800894)                                                      */
/*      SPRB0 (0x10800894)                                                      */
/*      SPRHBM (0x10800894)                                                     */
/*      SPRC0 (0x10800894)                                                      */
/*      SPRMCC (0x10800894)                                                     */
/*      SPRUCC (0x10800894)                                                     */
/* Register default value on SPRA0: 0x0000FFF0                                  */
/* Register default value on SPRB0: 0x0000FFF0                                  */
/* Register default value on SPRHBM: 0x0000FFF0                                 */
/* Register default value on SPRC0: 0x0000FFF0                                  */
/* Register default value on SPRMCC: 0x0000FFF0                                 */
/* Register default value on SPRUCC: 0x0000FFF0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK2_MBAS_IIO_VTD_REG 0x11010894

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 memory_base_address : 12;

                            /* Bits[15:4], Access Type=RW, default=0x00000FFF*/

                            /*
                               Corresponds to A[31:20] of the 32 bit memory
                               window's base address of the PCI Express port.
                               See also the MLIM register description.
                            */

  } Bits;
  UINT16 Data;

} BANK2_MBAS_IIO_VTD_STRUCT;

/* BANK2_MLIM_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x10800896)                                                      */
/*      SPRB0 (0x10800896)                                                      */
/*      SPRHBM (0x10800896)                                                     */
/*      SPRC0 (0x10800896)                                                      */
/*      SPRMCC (0x10800896)                                                     */
/*      SPRUCC (0x10800896)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK2_MLIM_IIO_VTD_REG 0x11010896

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 memory_limit_address : 12;

                            /* Bits[15:4], Access Type=RW, default=0x00000000*/

                            /*
                               Corresponds to A[31:20] of the 32 bit memory
                               window's limit address that corresponds to the
                               upper limit of the range of memory accesses that
                               will be passed by the PCI Express bridge.The
                               Memory Base and Memory Limit registers define a
                               memory mapped I/O non-prefetchable address range
                               (32-bit addresses) and the MS2IOSF directs
                               accesses in this range to the PCI Express port
                               based on the following formula:[br] MEMORY_BASE
                               <= A[31:20] <= MEMORY_LIMIT[br] The upper 12
                               bits of both the Memory Base and Memory Limit
                               registers are read/write and corresponds to the
                               upper 12 address bits, A[31:20] of 32-bit
                               addresses. Thus, the bottom of the defined
                               memory address range will be aligned to a 1 MB
                               boundary and the top of the defined memory
                               address range will be one less than a 1 MB
                               boundary. Refer to Chapter 5, 'Address Map,'
                               (IOH Platform Architecture Specification) for
                               further details on decoding.[br] Notes:[br] -
                               Setting the memory limit less than memory base
                               disables the 32-bit memory range altogether.[br]
                               - Note that in general the memory base and limit
                               registers won't be programmed by software
                               without clearing the MSE bit first.
                            */

  } Bits;
  UINT16 Data;

} BANK2_MLIM_IIO_VTD_STRUCT;

/* BANK2_PBAS_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x10800898)                                                      */
/*      SPRB0 (0x10800898)                                                      */
/*      SPRHBM (0x10800898)                                                     */
/*      SPRC0 (0x10800898)                                                      */
/*      SPRMCC (0x10800898)                                                     */
/*      SPRUCC (0x10800898)                                                     */
/* Register default value on SPRA0: 0x0000FFF1                                  */
/* Register default value on SPRB0: 0x0000FFF1                                  */
/* Register default value on SPRHBM: 0x0000FFF1                                 */
/* Register default value on SPRC0: 0x0000FFF1                                  */
/* Register default value on SPRMCC: 0x0000FFF1                                 */
/* Register default value on SPRUCC: 0x0000FFF1                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK2_PBAS_IIO_VTD_REG 0x11010898

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 prefetchable_memory_base_address_capability : 4;

                            /* Bits[3:0], Access Type=RO, default=0x00000001*/

                            /*
                               MS2IOSF sets this bit to 01h to indicate 64bit
                               capability.
                            */
    UINT16 prefetchable_memory_base_address : 12;

                            /* Bits[15:4], Access Type=RW, default=0x00000FFF*/

                            /*
                               Corresponds to A[31:20] of the prefetchable
                               memory address range's base address of the PCI
                               Express port. See also the PLIMU register
                               description.
                            */

  } Bits;
  UINT16 Data;

} BANK2_PBAS_IIO_VTD_STRUCT;

/* BANK2_PLIM_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x1080089a)                                                      */
/*      SPRB0 (0x1080089a)                                                      */
/*      SPRHBM (0x1080089a)                                                     */
/*      SPRC0 (0x1080089a)                                                      */
/*      SPRMCC (0x1080089a)                                                     */
/*      SPRUCC (0x1080089a)                                                     */
/* Register default value on SPRA0: 0x00000001                                  */
/* Register default value on SPRB0: 0x00000001                                  */
/* Register default value on SPRHBM: 0x00000001                                 */
/* Register default value on SPRC0: 0x00000001                                  */
/* Register default value on SPRMCC: 0x00000001                                 */
/* Register default value on SPRUCC: 0x00000001                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK2_PLIM_IIO_VTD_REG 0x1101089A

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 prefetchable_memory_limit_address_capability : 4;

                            /* Bits[3:0], Access Type=RO, default=0x00000001*/

                            /*
                               Indicates the addressing capability of the
                               prefetchable range.[br] 0h: 32-bit[br] 1h:
                               64-bit[br] All other values: reserved
                            */
    UINT16 prefetchable_memory_limit_address : 12;

                            /* Bits[15:4], Access Type=RW, default=0x00000000*/

                            /*
                               Corresponds to A[31:20] of the prefetchable
                               memory address range's limit address of the PCI
                               Express port. See also the PLIMU register
                               description.
                            */

  } Bits;
  UINT16 Data;

} BANK2_PLIM_IIO_VTD_STRUCT;

/* BANK2_PBASU_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x2080089c)                                                      */
/*      SPRB0 (0x2080089c)                                                      */
/*      SPRHBM (0x2080089c)                                                     */
/*      SPRC0 (0x2080089c)                                                      */
/*      SPRMCC (0x2080089c)                                                     */
/*      SPRUCC (0x2080089c)                                                     */
/* Register default value on SPRA0: 0xFFFFFFFF                                  */
/* Register default value on SPRB0: 0xFFFFFFFF                                  */
/* Register default value on SPRHBM: 0xFFFFFFFF                                 */
/* Register default value on SPRC0: 0xFFFFFFFF                                  */
/* Register default value on SPRMCC: 0xFFFFFFFF                                 */
/* Register default value on SPRUCC: 0xFFFFFFFF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK2_PBASU_IIO_VTD_REG 0x1102089C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 prefetchable_upper_32_bit_memory_base_address : 32;

                            /* Bits[31:0], Access Type=RW, default=0xFFFFFFFF*/

                            /*
                               Corresponds to A[63:32] of the prefetchable
                               memory address range's base address of the PCI
                               Express port. See also the PLIMU register
                               description.
                            */

  } Bits;
  UINT32 Data;

} BANK2_PBASU_IIO_VTD_STRUCT;

/* BANK2_PLIMU_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x208008a0)                                                      */
/*      SPRB0 (0x208008a0)                                                      */
/*      SPRHBM (0x208008a0)                                                     */
/*      SPRC0 (0x208008a0)                                                      */
/*      SPRMCC (0x208008a0)                                                     */
/*      SPRUCC (0x208008a0)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK2_PLIMU_IIO_VTD_REG 0x110208A0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 prefetchable_upper_32_bit_memory_limit_address : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               Corresponds to A[63:32] of the prefetchable
                               memory address range's limit address of the PCI
                               Express port.The Prefetchable Memory Base and
                               Memory Limit registers define a memory mapped
                               I/O prefetchable address range (64-bit
                               addresses) which is used by the PCI Express
                               bridge to determine when to forward memory
                               transactions based on the following formula:[br]
                               PREFETCH_MEMORY_BASE_UPPER::
                               PREFETCH_MEMORY_BASE <= A[63:20] <= PREFETCH_MEM
                               ORY_LIMIT_UPPER::PREFETCH_MEMORY_LIMIT[br] The
                               upper 12 bits of both the Prefetchable Memory
                               Base and Memory Limit registers are read/write
                               and corresponds to the upper 12 address bits,
                               A[31:20] of 32-bit addresses. The bottom of the
                               defined memory address range will be aligned to
                               a 1 MB boundary and the top of the defined
                               memory address range will be one less than a 1
                               MB boundary.[br] The bottom 4 bits of both the
                               Prefetchable Memory Base and Prefetchable Memory
                               Limit registers are read-only, contain the same
                               value, and encode whether or not the bridge
                               supports 64-bit addresses.[br] If these four
                               bits have the value 0h, then the bridge supports
                               only 32 bit addresses.[br] If these four bits
                               have the value 1h, then the bridge supports
                               64-bit addresses and the Prefetchable Base Upper
                               32 Bits and Prefetchable Limit Upper 32 Bits
                               registers hold the rest of the 64-bit
                               prefetchable base and limit addresses
                               respectively.[br] Setting the prefetchable
                               memory limit less than prefetchable memory base
                               disables the 64-bit prefetchable memory range
                               altogether.[br] Notes:[br] - In general the
                               memory base and limit registers won't be
                               programmed by software without clearing the MSE
                               bit first.
                            */

  } Bits;
  UINT32 Data;

} BANK2_PLIMU_IIO_VTD_STRUCT;

/* BANK2_BCTRL_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x108008a6)                                                      */
/*      SPRB0 (0x108008a6)                                                      */
/*      SPRHBM (0x108008a6)                                                     */
/*      SPRC0 (0x108008a6)                                                      */
/*      SPRMCC (0x108008a6)                                                     */
/*      SPRUCC (0x108008a6)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK2_BCTRL_IIO_VTD_REG 0x110108A6

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 perre : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Perre */
    UINT16 serre : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /* Serre */
    UINT16 isaen : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               ISA Enable[br] Modifies the response by the root
                               port to an I/O access issued by the core that
                               target ISA I/O addresses. This applies only to
                               I/O addresses that are enabled by the IOBASE and
                               IOLIM registers.[br] 1: The root port will not
                               forward to PCI Express any I/O transactions
                               addressing the last 768 bytes in each 1KB block
                               even if the addresses are within the range
                               defined by the IOBASE and IOLIM registers.[br]
                               0: All addresses defined by the IOBASE and IOLIM
                               for core issued I/O transactions will be mapped
                               to PCI Express.
                            */
    UINT16 vgaen : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               VGA Enable[br] Controls the routing of CPU
                               initiated transactions targeting VGA compatible
                               I/O and memory address ranges. This bit must
                               only be set for one p2p port in the entire
                               system.[br] Notes:[br] - When Device 3 Function
                               0 is in NTB mode, then the Device 3 Function 0
                               versoin of this bit must be left at default
                               value. VGA compatible devices are not supported
                               on the secondary side of the NTB.
                            */
    UINT16 vga16b : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               VGA 16-bit decode[br] This bit enables the
                               virtual PCI-to-PCI bridge to provide 16-bit
                               decoding of VGA I/O address precluding the
                               decoding of alias addresses every 1 KB.[br] 0:
                               execute 10-bit address decodes on VGA I/O
                               accesses.[br] 1: execute 16-bit address decodes
                               on VGA I/O accesses.[br] Notes:[br] - This bit
                               only has meaning if bit 3 of this register is
                               also set to 1, enabling VGA I/O decoding and
                               forwarding by the bridge.[br] - Refer to PCI-PCI
                               Bridge Specification Revision 1.2 for further
                               details of this bit behavior.
                            */
    UINT16 rsvd : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 sbr : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               1: Setting this bit triggers a hot reset on the
                               link for the corresponding PCI Express port and
                               the PCI Express hierarchy domain subordinate to
                               the port. This sends the LTSSM into the Training
                               (or Link) Control Reset state, which necessarily
                               implies a reset to the downstream device and all
                               subordinate devices. The transaction layer
                               corresponding to port will be emptied by virtue
                               of the link going down when this bit is set.
                               This means that in the outbound direction, all
                               posted transactions are dropped and non-posted
                               transactions are sent a UR response. In the
                               inbound direction, completions for inbound NP
                               requests are dropped when they arrive. Inbound
                               posted writes are retired normally.Note also
                               that a secondary bus reset will not reset the
                               virtual PCI-to-PCI bridge configuration
                               registers of the targeted PCI Express port.[br]
                               0: No reset happens on the PCI Express port.
                            */
    UINT16 rsvd_7 : 9;

                            /* Bits[15:7], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT16 Data;

} BANK2_BCTRL_IIO_VTD_STRUCT;

/* BANK2_BANKCTRL2_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x108008a8)                                                      */
/*      SPRB0 (0x108008a8)                                                      */
/*      SPRHBM (0x108008a8)                                                     */
/*      SPRC0 (0x108008a8)                                                      */
/*      SPRMCC (0x108008a8)                                                     */
/*      SPRUCC (0x108008a8)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the decode logic associated with an arbitrary type 1 IOSF agent (i.e. PCI bridge)
*/


#define BANK2_BANKCTRL2_IIO_VTD_REG 0x110108A8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 devfunc_mask : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               When set, indicates to HW that the contents of
                               devfunc register for the bank are invalid, and
                               should not be used. Since this field is relevant
                               only for type1 bank, setting it essentially
                               ensures that only type1 cfg traffic will be
                               routed based on the secondary and subordinate
                               bus range programmed within this bank.
                            */
    UINT16 rsvd : 15;

                            /* Bits[15:1], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT16 Data;

} BANK2_BANKCTRL2_IIO_VTD_STRUCT;

/* BANK2_MCAST_CTRL_IIO_VTD_REG supported on:                                   */
/*      SPRA0 (0x108008ae)                                                      */
/*      SPRB0 (0x108008ae)                                                      */
/*      SPRHBM (0x108008ae)                                                     */
/*      SPRC0 (0x108008ae)                                                      */
/*      SPRMCC (0x108008ae)                                                     */
/*      SPRUCC (0x108008ae)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the Dualcast Control Register (Dualcast is a specialized version of PCIe Multicast used in conjunction with the Non-Transparent Bridge). The fields in this register mirror the fields in the PCIe spec-defined Multicast Control Register (see section 7.21.3 of the PCIe 3.0 spec).
*/


#define BANK2_MCAST_CTRL_IIO_VTD_REG 0x110108AE

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 mc_num_group : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000000*/

                            /*
                               This field only supports and implements bits
                               [3:0]. Bits [5:4] are not supported.
                            */
    UINT16 rsvd_mc_ctrl_14_6 : 9;

                            /* Bits[14:6], Access Type=RO, default=0x00000000*/

                            /* Rsvd Mc Ctrl 14 6 */
    UINT16 mc_enable : 1;

                            /* Bits[15:15], Access Type=RW/L, default=0x00000000*/

                            /* Mc Enable */

  } Bits;
  UINT16 Data;

} BANK2_MCAST_CTRL_IIO_VTD_STRUCT;

/* BANK2_MCAST_BASE_N0_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x208008b0)                                                      */
/*      SPRB0 (0x208008b0)                                                      */
/*      SPRHBM (0x208008b0)                                                     */
/*      SPRC0 (0x208008b0)                                                      */
/*      SPRMCC (0x208008b0)                                                     */
/*      SPRUCC (0x208008b0)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the Dualcast Base Address Register (Dualcast is a specialized version of PCIe Multicast used in conjunction with the Non-Transparent Bridge). The fields in this register mirror the fields in the PCIe spec-defined MC_Base_Address Register (see section 7.21.4 of the PCIe 3.0 spec).
*/


#define BANK2_MCAST_BASE_N0_IIO_VTD_REG 0x110208B0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mc_index_position : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000000*/

                            /* Mc Index Position */
    UINT32 rsvd_mc_base_11_6 : 6;

                            /* Bits[11:6], Access Type=RO, default=0x00000000*/

                            /* Rsvd Mc Base 11 6 */
    UINT32 mc_base_address : 20;

                            /* Bits[31:12], Access Type=RW, default=0x00000000*/

                            /* Mc Base Address */

  } Bits;
  UINT32 Data;

} BANK2_MCAST_BASE_N0_IIO_VTD_STRUCT;

/* BANK2_MCAST_BASE_N1_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x208008b4)                                                      */
/*      SPRB0 (0x208008b4)                                                      */
/*      SPRHBM (0x208008b4)                                                     */
/*      SPRC0 (0x208008b4)                                                      */
/*      SPRMCC (0x208008b4)                                                     */
/*      SPRUCC (0x208008b4)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the Dualcast Base Address Register (Dualcast is a specialized version of PCIe Multicast used in conjunction with the Non-Transparent Bridge). The fields in this register mirror the fields in the PCIe spec-defined MC_Base_Address Register (see section 7.21.4 of the PCIe 3.0 spec).
*/


#define BANK2_MCAST_BASE_N1_IIO_VTD_REG 0x110208B4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mc_base_address : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /* Mc Base Address */

  } Bits;
  UINT32 Data;

} BANK2_MCAST_BASE_N1_IIO_VTD_STRUCT;

/* BANK2_MCAST_RCV_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x108008b8)                                                      */
/*      SPRB0 (0x108008b8)                                                      */
/*      SPRHBM (0x108008b8)                                                     */
/*      SPRC0 (0x108008b8)                                                      */
/*      SPRMCC (0x108008b8)                                                     */
/*      SPRUCC (0x108008b8)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the Dualcast Receive Register (Dualcast is a specialized version of PCIe Multicast used in conjunction with the Non-Transparent Bridge). The fields in this register mirror the fields in the PCIe spec-defined MC_Receive Register (see section 7.21.5 of the PCIe 3.0 spec).
*/


#define BANK2_MCAST_RCV_IIO_VTD_REG 0x110108B8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 mc_rcv : 16;

                            /* Bits[15:0], Access Type=RW, default=0x00000000*/

                            /* Mc Rcv */

  } Bits;
  UINT16 Data;

} BANK2_MCAST_RCV_IIO_VTD_STRUCT;

/* BANK2_PMCSR_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x208008bc)                                                      */
/*      SPRB0 (0x208008bc)                                                      */
/*      SPRHBM (0x208008bc)                                                     */
/*      SPRC0 (0x208008bc)                                                      */
/*      SPRMCC (0x208008bc)                                                     */
/*      SPRUCC (0x208008bc)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the PCIe Power Management Capability Register in the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK2_PMCSR_IIO_VTD_REG 0x110208BC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 power_state : 2;

                            /* Bits[1:0], Access Type=RW, default=0x00000000*/

                            /*
                               This 2-bit field is used to determine the
                               current power state of the function and to set a
                               new power state as well.[br] 00: D0[br] 01:
                               D1[br] 10: D2[br] 11: D3_hot[br] All devices
                               will respond to only Type 0 configuration
                               transactions (targeting the device's
                               configuration space itself) when in D3hot state
                               (root port will not forward Type 1/0
                               transactions to the downstream link) and will
                               not respond to memory/IO transactions (i.e.
                               D3hot state is equivalent to MSE/IOSE bits being
                               clear) as target and will not generate any
                               memory/IO/configuration transactions as
                               initiator on the primary bus (messages are still
                               allowed to pass through).[br] WARNING: MS2IOSF
                               hardware does NOT block any requests targeting
                               the device when the device is not in D0. The
                               IOSF device must be robust enough to handle
                               requests in non-D0 power states. In addition,
                               software should not rely on the accuracy of this
                               shadow register, but instead read the actual
                               PMCSR of the device.
                            */
    UINT32 rsvd : 30;

                            /* Bits[31:2], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} BANK2_PMCSR_IIO_VTD_STRUCT;

/* BANK3_BANKCTRL_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x8008c0)                                                        */
/*      SPRB0 (0x8008c0)                                                        */
/*      SPRHBM (0x8008c0)                                                       */
/*      SPRC0 (0x8008c0)                                                        */
/*      SPRMCC (0x8008c0)                                                       */
/*      SPRUCC (0x8008c0)                                                       */
/* Register default value on SPRA0: 0x00000081                                  */
/* Register default value on SPRB0: 0x00000081                                  */
/* Register default value on SPRHBM: 0x00000081                                 */
/* Register default value on SPRC0: 0x00000081                                  */
/* Register default value on SPRMCC: 0x00000081                                 */
/* Register default value on SPRUCC: 0x00000081                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the source decode logic associated with an arbitrary type 1 IOSF agent (i.e. PCI bridge)
*/


#define BANK3_BANKCTRL_IIO_VTD_REG 0x110008C0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 banktype : 2;

                            /* Bits[1:0], Access Type=RO, default=0x00000001*/

                            /*
                               Specifies the type of Bank Decoder. Valid values
                               are:[br] 00b: Type 0 Bank - 16 Bytes[br] 01b:
                               Type 1 Bank - 64 Bytes[br] 10b: reserved[br]
                               11b: Subtractive Decode Bank - 8 Bytes
                            */
    UINT8 force_config_type0 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               If this bit is set, MS2IOSF sends any
                               configuration request that matches this bank as
                               type 0. Enables support for SR-IOV RCIEP.
                            */
    UINT8 bank_decode_enable : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               1b: The bank decoders are enabled.[br] 0b: The
                               bank decoders are disabled.
                            */
    UINT8 shadow_enable : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               1b: Outbound configuration requests that target
                               the Device/Function specified by this bank on
                               the RootBus will be snarfed to the shadow copy
                               of decode registers.[br] 0b: Outbound
                               configuration requests will not be snarfed. BIOS
                               must program the decode registers to allow this
                               bank to decode to the bank's specified target.
                            */
    UINT8 mc_bank_decode_enable : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               1b: The Multicast bank decoders are enabled.[br]
                               0b: The Multicast bank decoders are disabled.
                            */
    UINT8 mc_shadow_enable : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               1b: Outbound configuration requests that target
                               the Multicast registers of the Device/Function
                               specified by this bank on the RootBus will be
                               snarfed to the shadow copy of decode
                               registers.[br] 0b: Outbound configuration
                               requests to the Multicast registers of the
                               Device/Function will not be snarfed. BIOS must
                               program the decode registers to allow this bank
                               to decode to the bank's specified target.
                            */
    UINT8 function_mask : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               When set, causes the DevFunc.Function field to
                               become ignored. Any configuration request that
                               matches the DevFunc.Device field with any
                               function value will be a match for this decoder
                               bank.
                            */

  } Bits;
  UINT8 Data;

} BANK3_BANKCTRL_IIO_VTD_STRUCT;

/* BANK3_DEVFUNC_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x8008c1)                                                        */
/*      SPRB0 (0x8008c1)                                                        */
/*      SPRHBM (0x8008c1)                                                       */
/*      SPRC0 (0x8008c1)                                                        */
/*      SPRMCC (0x8008c1)                                                       */
/*      SPRUCC (0x8008c1)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* PCI Device and Function number of the IOSF agent being shadowed
*/


#define BANK3_DEVFUNC_IIO_VTD_REG 0x110008C1

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 func : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target Function Number on the
                               RootBus that this bank decodes for.
                            */
    UINT8 device : 5;

                            /* Bits[7:3], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target Device Number on the
                               RootBus that this bank decodes for.
                            */

  } Bits;
  UINT8 Data;

} BANK3_DEVFUNC_IIO_VTD_STRUCT;

/* BANK3_DESTID_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x108008c2)                                                      */
/*      SPRB0 (0x108008c2)                                                      */
/*      SPRHBM (0x108008c2)                                                     */
/*      SPRC0 (0x108008c2)                                                      */
/*      SPRMCC (0x108008c2)                                                     */
/*      SPRUCC (0x108008c2)                                                     */
/* Register default value on SPRA0: 0x00002188                                  */
/* Register default value on SPRB0: 0x00002188                                  */
/* Register default value on SPRHBM: 0x00002188                                 */
/* Register default value on SPRC0: 0x00002188                                  */
/* Register default value on SPRMCC: 0x00002188                                 */
/* Register default value on SPRUCC: 0x00002188                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* The lower 14 bits of this register comprise the PSF-required source decode information that MS2IOSF provides on the tdest_id signal when presenting the request to PSF (note exception for MS2IOSF_Port).
*/


#define BANK3_DESTID_IIO_VTD_REG 0x110108C2

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 psf_channel : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies which IOSF channel to send requests
                               that hit this bank decoder ranges. This field is
                               used for IOSF Channel and also as part of the
                               IOSF Destination ID.
                            */
    UINT16 psf_port : 3;

                            /* Bits[5:3], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF port to send requests that
                               hit this bank decoder ranges.
                            */
    UINT16 ms2iosf_port : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the MS2IOSF port (left = 0, right = 1)
                               where to send requests that hit this bank
                               decoder. The logic should mask this bit to zero
                               before sending the 14-bit PSF source decode
                               header out. Technically, this is the top bit of
                               the PSF port ID, but MS2IOSF is using it for
                               internal purposes.
                            */
    UINT16 psf_port_group : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF port group to send requests
                               that hit this bank decoder ranges.
                            */
    UINT16 psf_id : 4;

                            /* Bits[11:8], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF to send requests that hit
                               this bank decoder ranges.
                            */
    UINT16 psf_decode_mode : 2;

                            /* Bits[13:12], Access Type=RW, default=0x00000002*/

                            /*
                               Specifies the PSF Destination ID decode mode
                               being used.[br] 00b: Fabric Decode[br] 01b:
                               Implicit Decode[br] 10b: Source Decode to
                               PSF_ID:Port_Group:Port:Channel[br] 11b: Source
                               Decode to PSF_ID, use Fabric Decode from there
                               onward (StF)
                            */
    UINT16 ms2iosf_channel : 2;

                            /* Bits[15:14], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies to which IOSF channel to send requests
                               that hit this bank decoder. Note the difference
                               between this channel ID and the channel ID
                               provided in the source decode header below. The
                               former specifies the channel ID on the MS2IOSF
                               interface itself whereas the latter specifies
                               the channel ID on the PSF interface to the
                               endpoint. MS2IOSF has four channels for each of
                               its two ports.
                            */

  } Bits;
  UINT16 Data;

} BANK3_DESTID_IIO_VTD_STRUCT;

/* BANK3_DEVCON_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x108008c4)                                                      */
/*      SPRB0 (0x108008c4)                                                      */
/*      SPRHBM (0x108008c4)                                                     */
/*      SPRC0 (0x108008c4)                                                      */
/*      SPRMCC (0x108008c4)                                                     */
/*      SPRUCC (0x108008c4)                                                     */
/* Register default value on SPRA0: 0x000000E0                                  */
/* Register default value on SPRB0: 0x000000E0                                  */
/* Register default value on SPRHBM: 0x000000E0                                 */
/* Register default value on SPRC0: 0x000000E0                                  */
/* Register default value on SPRMCC: 0x000000E0                                 */
/* Register default value on SPRUCC: 0x000000E0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Shadowed PCI Express Device Control
*/


#define BANK3_DEVCON_IIO_VTD_REG 0x110108C4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 rsvd : 5;

                            /* Bits[4:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 max_payload_size : 3;

                            /* Bits[7:5], Access Type=RW, default=0x00000007*/

                            /*
                               Max_Payload_Size[br] Indicates the largest
                               packet size supported by the target decoded by
                               this bank. [br] Defined encodings for this field
                               are:[br] 000b 128 bytes max payload size[br]
                               001b 256 bytes max payload size[br] 010b 512
                               bytes max payload size[br] 011b 1024 bytes max
                               payload size[br] 100b 2048 bytes max payload
                               size[br] 101b 4096 bytes max payload size[br]
                               110b Reserved[br] 111b 64 address aligned bytes
                               max payload size[br]
                            */
    UINT16 rsvd_8 : 7;

                            /* Bits[14:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 initiate_flr : 1;

                            /* Bits[15:15], Access Type=RO, default=0x00000000*/

                            /*
                               [br] Initiate Function Level Reset. A write of
                               '1' to the DEVCON[15] field of the device this
                               bank shadows, will cause all shadow-enabled
                               registers for this bank to reset. DEVCON[15]
                               maps to this field. This bit self-clears.[br]
                            */

  } Bits;
  UINT16 Data;

} BANK3_DEVCON_IIO_VTD_STRUCT;

/* BANK3_DEVCON_OFFSET_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x8008c7)                                                        */
/*      SPRB0 (0x8008c7)                                                        */
/*      SPRHBM (0x8008c7)                                                       */
/*      SPRC0 (0x8008c7)                                                        */
/*      SPRMCC (0x8008c7)                                                       */
/*      SPRUCC (0x8008c7)                                                       */
/* Register default value on SPRA0: 0x00000048                                  */
/* Register default value on SPRB0: 0x00000048                                  */
/* Register default value on SPRHBM: 0x00000048                                 */
/* Register default value on SPRC0: 0x00000048                                  */
/* Register default value on SPRMCC: 0x00000048                                 */
/* Register default value on SPRUCC: 0x00000048                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Offset of the PCI Express Device Control Register in the IOSF agent's configuration header
*/


#define BANK3_DEVCON_OFFSET_IIO_VTD_REG 0x110008C7

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 devcon_shadowen : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               If this bit and DevCon_Master are set, MS2IOSF
                               shadows writes to the offset programmed above
                               into its copy of the device control register.
                               BIOS must clear this bit for devices that do not
                               have a device control register. If shadowing is
                               disabled for this bank, this bit has no effect.
                            */
    UINT8 devcon_master : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Indicates whether or not this shadow copy is the
                               master copy. For devices that use multiple bank
                               decoders, SW is required to enable one of them
                               as a master. HW shadowing only updates the
                               master copy. Likewise, HW only uses the master
                               copy as input to other logic such as completion
                               combining. For devices that use only one bank
                               decoder, SW is required to set this bit.
                            */
    UINT8 devcon_offset : 6;

                            /* Bits[7:2], Access Type=RW, default=0x00000012*/

                            /*
                               Configuration space register offset for the
                               Device control register. This is a DWord offset
                               (left-shift this value by two to get byte
                               offset). Note that although this points to the
                               lowest order byte of the register, only the
                               upper byte of the register is captured by this
                               bank, which is at this offset + 1h.
                            */

  } Bits;
  UINT8 Data;

} BANK3_DEVCON_OFFSET_IIO_VTD_STRUCT;

/* BANK3_PCICMD_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x108008c8)                                                      */
/*      SPRB0 (0x108008c8)                                                      */
/*      SPRHBM (0x108008c8)                                                     */
/*      SPRC0 (0x108008c8)                                                      */
/*      SPRMCC (0x108008c8)                                                     */
/*      SPRUCC (0x108008c8)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK3_PCICMD_IIO_VTD_REG 0x110108C8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 iose : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               I/O Space Enable (for outbound bank decode)[br]
                               1: Enables bank IOBAS/IOLIM I/O range[br] 0:
                               Disables bank IOBAS/IOLIM I/O range
                            */
    UINT16 mse : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Memory Space Enable (for outbound bank
                               decode)[br] 1: Enables bank MBAS/MLIM and
                               PBAS/PLIM memory ranges[br] 0: Disables bank
                               MBAS/MLIM and PBAS/PLIM memory ranges
                            */
    UINT16 bme : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /* Bme */
    UINT16 sce : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000000*/

                            /* Sce */
    UINT16 mwie : 1;

                            /* Bits[4:4], Access Type=RO, default=0x00000000*/

                            /* Mwie */
    UINT16 vga_palette_snoop_enable : 1;

                            /* Bits[5:5], Access Type=RO, default=0x00000000*/

                            /* Vga Palette Snoop Enable */
    UINT16 perre : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /* Perre */
    UINT16 idsel_stepping_wait_cycle_control : 1;

                            /* Bits[7:7], Access Type=RO, default=0x00000000*/

                            /* Idsel Stepping Wait Cycle Control */
    UINT16 serre : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /* Serre */
    UINT16 fast_back_to_back_enable : 1;

                            /* Bits[9:9], Access Type=RO, default=0x00000000*/

                            /* Fast Back To Back Enable */
    UINT16 rsvd : 6;

                            /* Bits[15:10], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT16 Data;

} BANK3_PCICMD_IIO_VTD_STRUCT;

/* BANK3_SECBUS_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x8008cd)                                                        */
/*      SPRB0 (0x8008cd)                                                        */
/*      SPRHBM (0x8008cd)                                                       */
/*      SPRC0 (0x8008cd)                                                        */
/*      SPRMCC (0x8008cd)                                                       */
/*      SPRUCC (0x8008cd)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK3_SECBUS_IIO_VTD_REG 0x110008CD

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 sbn : 8;

                            /* Bits[7:0], Access Type=RW, default=0x00000000*/

                            /* First bus of a bus range below a PCI Bridge */

  } Bits;
  UINT8 Data;

} BANK3_SECBUS_IIO_VTD_STRUCT;

/* BANK3_SUBBUS_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x8008ce)                                                        */
/*      SPRB0 (0x8008ce)                                                        */
/*      SPRHBM (0x8008ce)                                                       */
/*      SPRC0 (0x8008ce)                                                        */
/*      SPRMCC (0x8008ce)                                                       */
/*      SPRUCC (0x8008ce)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK3_SUBBUS_IIO_VTD_REG 0x110008CE

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 subordinate_bus_number : 8;

                            /* Bits[7:0], Access Type=RW, default=0x00000000*/

                            /* Last bus of a bus range below a PCI Bridge */

  } Bits;
  UINT8 Data;

} BANK3_SUBBUS_IIO_VTD_STRUCT;

/* BANK3_IOBAS_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x8008d0)                                                        */
/*      SPRB0 (0x8008d0)                                                        */
/*      SPRHBM (0x8008d0)                                                       */
/*      SPRC0 (0x8008d0)                                                        */
/*      SPRMCC (0x8008d0)                                                       */
/*      SPRUCC (0x8008d0)                                                       */
/* Register default value on SPRA0: 0x000000F0                                  */
/* Register default value on SPRB0: 0x000000F0                                  */
/* Register default value on SPRHBM: 0x000000F0                                 */
/* Register default value on SPRC0: 0x000000F0                                  */
/* Register default value on SPRMCC: 0x000000F0                                 */
/* Register default value on SPRUCC: 0x000000F0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK3_IOBAS_IIO_VTD_REG 0x110008D0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 i_o_address_capability : 2;

                            /* Bits[1:0], Access Type=RO, default=0x00000000*/

                            /* MS2IOSF supports only 16 bit addressing */
    UINT8 more_i_o_base_address : 2;

                            /* Bits[3:2], Access Type=RW/L, default=0x00000000*/

                            /*
                               When EN1K is set in the IIOMISCCTRL register,
                               these bits become RW and allow for 1K
                               granularity of I/O addressing, otherwise these
                               are RO.[br] Lock: !IIOMISCCTRL.EN1K
                            */
    UINT8 i_o_base_address : 4;

                            /* Bits[7:4], Access Type=RW, default=0x0000000F*/

                            /*
                               Corresponds to A[15:12] of the I/O base address
                               of the PCI Express port. See also the IOLIM
                               register description.
                            */

  } Bits;
  UINT8 Data;

} BANK3_IOBAS_IIO_VTD_STRUCT;

/* BANK3_IOLIM_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x8008d1)                                                        */
/*      SPRB0 (0x8008d1)                                                        */
/*      SPRHBM (0x8008d1)                                                       */
/*      SPRC0 (0x8008d1)                                                        */
/*      SPRMCC (0x8008d1)                                                       */
/*      SPRUCC (0x8008d1)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK3_IOLIM_IIO_VTD_REG 0x110008D1

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 i_o_address_limit_capability : 2;

                            /* Bits[1:0], Access Type=RO, default=0x00000000*/

                            /* MS2IOSF supports only 16 bit addressing */
    UINT8 more_i_o_address_limit : 2;

                            /* Bits[3:2], Access Type=RW/L, default=0x00000000*/

                            /*
                               When EN1K is set in the IIOMISCCTRL register,
                               these bits become RW and allow for 1K
                               granularity of I/O addressing, otherwise these
                               are RO.[br] Lock: !IIOMISCCTRL.EN1K
                            */
    UINT8 i_o_address_limit : 4;

                            /* Bits[7:4], Access Type=RW, default=0x00000000*/

                            /*
                               Corresponds to A[15:12] of the I/O limit address
                               of the PCI Express port.The I/O Base and I/O
                               Limit registers define an address range that is
                               used by the PCI Express port to determine when
                               to forward I/O transactions from one interface
                               to the other using the following formula:[br]
                               IO_BASE <= A[15:12] <=IO_LIMIT[br] The bottom of
                               the defined I/O address range will be aligned to
                               a 4KB boundary (1KB if EN1K bit is set. Refer to
                               the IIOMISCCTRL register for definition of EN1K
                               bit) while the top of the region specified by
                               IO_LIMIT will be one less than a 4 KB (1KB if
                               EN1K bit is set) multiple.[br] Notes:[br] -
                               Setting the I/O limit less than I/O base
                               disables the I/O range altogether.[br] - General
                               the I/O base and limit registers won't be
                               programmed by software without clearing the IOSE
                               bit first.
                            */

  } Bits;
  UINT8 Data;

} BANK3_IOLIM_IIO_VTD_STRUCT;

/* BANK3_MBAS_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x108008d4)                                                      */
/*      SPRB0 (0x108008d4)                                                      */
/*      SPRHBM (0x108008d4)                                                     */
/*      SPRC0 (0x108008d4)                                                      */
/*      SPRMCC (0x108008d4)                                                     */
/*      SPRUCC (0x108008d4)                                                     */
/* Register default value on SPRA0: 0x0000FFF0                                  */
/* Register default value on SPRB0: 0x0000FFF0                                  */
/* Register default value on SPRHBM: 0x0000FFF0                                 */
/* Register default value on SPRC0: 0x0000FFF0                                  */
/* Register default value on SPRMCC: 0x0000FFF0                                 */
/* Register default value on SPRUCC: 0x0000FFF0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK3_MBAS_IIO_VTD_REG 0x110108D4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 memory_base_address : 12;

                            /* Bits[15:4], Access Type=RW, default=0x00000FFF*/

                            /*
                               Corresponds to A[31:20] of the 32 bit memory
                               window's base address of the PCI Express port.
                               See also the MLIM register description.
                            */

  } Bits;
  UINT16 Data;

} BANK3_MBAS_IIO_VTD_STRUCT;

/* BANK3_MLIM_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x108008d6)                                                      */
/*      SPRB0 (0x108008d6)                                                      */
/*      SPRHBM (0x108008d6)                                                     */
/*      SPRC0 (0x108008d6)                                                      */
/*      SPRMCC (0x108008d6)                                                     */
/*      SPRUCC (0x108008d6)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK3_MLIM_IIO_VTD_REG 0x110108D6

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 memory_limit_address : 12;

                            /* Bits[15:4], Access Type=RW, default=0x00000000*/

                            /*
                               Corresponds to A[31:20] of the 32 bit memory
                               window's limit address that corresponds to the
                               upper limit of the range of memory accesses that
                               will be passed by the PCI Express bridge.The
                               Memory Base and Memory Limit registers define a
                               memory mapped I/O non-prefetchable address range
                               (32-bit addresses) and the MS2IOSF directs
                               accesses in this range to the PCI Express port
                               based on the following formula:[br] MEMORY_BASE
                               <= A[31:20] <= MEMORY_LIMIT[br] The upper 12
                               bits of both the Memory Base and Memory Limit
                               registers are read/write and corresponds to the
                               upper 12 address bits, A[31:20] of 32-bit
                               addresses. Thus, the bottom of the defined
                               memory address range will be aligned to a 1 MB
                               boundary and the top of the defined memory
                               address range will be one less than a 1 MB
                               boundary. Refer to Chapter 5, 'Address Map,'
                               (IOH Platform Architecture Specification) for
                               further details on decoding.[br] Notes:[br] -
                               Setting the memory limit less than memory base
                               disables the 32-bit memory range altogether.[br]
                               - Note that in general the memory base and limit
                               registers won't be programmed by software
                               without clearing the MSE bit first.
                            */

  } Bits;
  UINT16 Data;

} BANK3_MLIM_IIO_VTD_STRUCT;

/* BANK3_PBAS_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x108008d8)                                                      */
/*      SPRB0 (0x108008d8)                                                      */
/*      SPRHBM (0x108008d8)                                                     */
/*      SPRC0 (0x108008d8)                                                      */
/*      SPRMCC (0x108008d8)                                                     */
/*      SPRUCC (0x108008d8)                                                     */
/* Register default value on SPRA0: 0x0000FFF1                                  */
/* Register default value on SPRB0: 0x0000FFF1                                  */
/* Register default value on SPRHBM: 0x0000FFF1                                 */
/* Register default value on SPRC0: 0x0000FFF1                                  */
/* Register default value on SPRMCC: 0x0000FFF1                                 */
/* Register default value on SPRUCC: 0x0000FFF1                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK3_PBAS_IIO_VTD_REG 0x110108D8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 prefetchable_memory_base_address_capability : 4;

                            /* Bits[3:0], Access Type=RO, default=0x00000001*/

                            /*
                               MS2IOSF sets this bit to 01h to indicate 64bit
                               capability.
                            */
    UINT16 prefetchable_memory_base_address : 12;

                            /* Bits[15:4], Access Type=RW, default=0x00000FFF*/

                            /*
                               Corresponds to A[31:20] of the prefetchable
                               memory address range's base address of the PCI
                               Express port. See also the PLIMU register
                               description.
                            */

  } Bits;
  UINT16 Data;

} BANK3_PBAS_IIO_VTD_STRUCT;

/* BANK3_PLIM_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x108008da)                                                      */
/*      SPRB0 (0x108008da)                                                      */
/*      SPRHBM (0x108008da)                                                     */
/*      SPRC0 (0x108008da)                                                      */
/*      SPRMCC (0x108008da)                                                     */
/*      SPRUCC (0x108008da)                                                     */
/* Register default value on SPRA0: 0x00000001                                  */
/* Register default value on SPRB0: 0x00000001                                  */
/* Register default value on SPRHBM: 0x00000001                                 */
/* Register default value on SPRC0: 0x00000001                                  */
/* Register default value on SPRMCC: 0x00000001                                 */
/* Register default value on SPRUCC: 0x00000001                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK3_PLIM_IIO_VTD_REG 0x110108DA

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 prefetchable_memory_limit_address_capability : 4;

                            /* Bits[3:0], Access Type=RO, default=0x00000001*/

                            /*
                               Indicates the addressing capability of the
                               prefetchable range.[br] 0h: 32-bit[br] 1h:
                               64-bit[br] All other values: reserved
                            */
    UINT16 prefetchable_memory_limit_address : 12;

                            /* Bits[15:4], Access Type=RW, default=0x00000000*/

                            /*
                               Corresponds to A[31:20] of the prefetchable
                               memory address range's limit address of the PCI
                               Express port. See also the PLIMU register
                               description.
                            */

  } Bits;
  UINT16 Data;

} BANK3_PLIM_IIO_VTD_STRUCT;

/* BANK3_PBASU_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x208008dc)                                                      */
/*      SPRB0 (0x208008dc)                                                      */
/*      SPRHBM (0x208008dc)                                                     */
/*      SPRC0 (0x208008dc)                                                      */
/*      SPRMCC (0x208008dc)                                                     */
/*      SPRUCC (0x208008dc)                                                     */
/* Register default value on SPRA0: 0xFFFFFFFF                                  */
/* Register default value on SPRB0: 0xFFFFFFFF                                  */
/* Register default value on SPRHBM: 0xFFFFFFFF                                 */
/* Register default value on SPRC0: 0xFFFFFFFF                                  */
/* Register default value on SPRMCC: 0xFFFFFFFF                                 */
/* Register default value on SPRUCC: 0xFFFFFFFF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK3_PBASU_IIO_VTD_REG 0x110208DC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 prefetchable_upper_32_bit_memory_base_address : 32;

                            /* Bits[31:0], Access Type=RW, default=0xFFFFFFFF*/

                            /*
                               Corresponds to A[63:32] of the prefetchable
                               memory address range's base address of the PCI
                               Express port. See also the PLIMU register
                               description.
                            */

  } Bits;
  UINT32 Data;

} BANK3_PBASU_IIO_VTD_STRUCT;

/* BANK3_PLIMU_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x208008e0)                                                      */
/*      SPRB0 (0x208008e0)                                                      */
/*      SPRHBM (0x208008e0)                                                     */
/*      SPRC0 (0x208008e0)                                                      */
/*      SPRMCC (0x208008e0)                                                     */
/*      SPRUCC (0x208008e0)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK3_PLIMU_IIO_VTD_REG 0x110208E0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 prefetchable_upper_32_bit_memory_limit_address : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               Corresponds to A[63:32] of the prefetchable
                               memory address range's limit address of the PCI
                               Express port.The Prefetchable Memory Base and
                               Memory Limit registers define a memory mapped
                               I/O prefetchable address range (64-bit
                               addresses) which is used by the PCI Express
                               bridge to determine when to forward memory
                               transactions based on the following formula:[br]
                               PREFETCH_MEMORY_BASE_UPPER::
                               PREFETCH_MEMORY_BASE <= A[63:20] <= PREFETCH_MEM
                               ORY_LIMIT_UPPER::PREFETCH_MEMORY_LIMIT[br] The
                               upper 12 bits of both the Prefetchable Memory
                               Base and Memory Limit registers are read/write
                               and corresponds to the upper 12 address bits,
                               A[31:20] of 32-bit addresses. The bottom of the
                               defined memory address range will be aligned to
                               a 1 MB boundary and the top of the defined
                               memory address range will be one less than a 1
                               MB boundary.[br] The bottom 4 bits of both the
                               Prefetchable Memory Base and Prefetchable Memory
                               Limit registers are read-only, contain the same
                               value, and encode whether or not the bridge
                               supports 64-bit addresses.[br] If these four
                               bits have the value 0h, then the bridge supports
                               only 32 bit addresses.[br] If these four bits
                               have the value 1h, then the bridge supports
                               64-bit addresses and the Prefetchable Base Upper
                               32 Bits and Prefetchable Limit Upper 32 Bits
                               registers hold the rest of the 64-bit
                               prefetchable base and limit addresses
                               respectively.[br] Setting the prefetchable
                               memory limit less than prefetchable memory base
                               disables the 64-bit prefetchable memory range
                               altogether.[br] Notes:[br] - In general the
                               memory base and limit registers won't be
                               programmed by software without clearing the MSE
                               bit first.
                            */

  } Bits;
  UINT32 Data;

} BANK3_PLIMU_IIO_VTD_STRUCT;

/* BANK3_BCTRL_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x108008e6)                                                      */
/*      SPRB0 (0x108008e6)                                                      */
/*      SPRHBM (0x108008e6)                                                     */
/*      SPRC0 (0x108008e6)                                                      */
/*      SPRMCC (0x108008e6)                                                     */
/*      SPRUCC (0x108008e6)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK3_BCTRL_IIO_VTD_REG 0x110108E6

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 perre : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Perre */
    UINT16 serre : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /* Serre */
    UINT16 isaen : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               ISA Enable[br] Modifies the response by the root
                               port to an I/O access issued by the core that
                               target ISA I/O addresses. This applies only to
                               I/O addresses that are enabled by the IOBASE and
                               IOLIM registers.[br] 1: The root port will not
                               forward to PCI Express any I/O transactions
                               addressing the last 768 bytes in each 1KB block
                               even if the addresses are within the range
                               defined by the IOBASE and IOLIM registers.[br]
                               0: All addresses defined by the IOBASE and IOLIM
                               for core issued I/O transactions will be mapped
                               to PCI Express.
                            */
    UINT16 vgaen : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               VGA Enable[br] Controls the routing of CPU
                               initiated transactions targeting VGA compatible
                               I/O and memory address ranges. This bit must
                               only be set for one p2p port in the entire
                               system.[br] Notes:[br] - When Device 3 Function
                               0 is in NTB mode, then the Device 3 Function 0
                               versoin of this bit must be left at default
                               value. VGA compatible devices are not supported
                               on the secondary side of the NTB.
                            */
    UINT16 vga16b : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               VGA 16-bit decode[br] This bit enables the
                               virtual PCI-to-PCI bridge to provide 16-bit
                               decoding of VGA I/O address precluding the
                               decoding of alias addresses every 1 KB.[br] 0:
                               execute 10-bit address decodes on VGA I/O
                               accesses.[br] 1: execute 16-bit address decodes
                               on VGA I/O accesses.[br] Notes:[br] - This bit
                               only has meaning if bit 3 of this register is
                               also set to 1, enabling VGA I/O decoding and
                               forwarding by the bridge.[br] - Refer to PCI-PCI
                               Bridge Specification Revision 1.2 for further
                               details of this bit behavior.
                            */
    UINT16 rsvd : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 sbr : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               1: Setting this bit triggers a hot reset on the
                               link for the corresponding PCI Express port and
                               the PCI Express hierarchy domain subordinate to
                               the port. This sends the LTSSM into the Training
                               (or Link) Control Reset state, which necessarily
                               implies a reset to the downstream device and all
                               subordinate devices. The transaction layer
                               corresponding to port will be emptied by virtue
                               of the link going down when this bit is set.
                               This means that in the outbound direction, all
                               posted transactions are dropped and non-posted
                               transactions are sent a UR response. In the
                               inbound direction, completions for inbound NP
                               requests are dropped when they arrive. Inbound
                               posted writes are retired normally.Note also
                               that a secondary bus reset will not reset the
                               virtual PCI-to-PCI bridge configuration
                               registers of the targeted PCI Express port.[br]
                               0: No reset happens on the PCI Express port.
                            */
    UINT16 rsvd_7 : 9;

                            /* Bits[15:7], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT16 Data;

} BANK3_BCTRL_IIO_VTD_STRUCT;

/* BANK3_BANKCTRL2_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x108008e8)                                                      */
/*      SPRB0 (0x108008e8)                                                      */
/*      SPRHBM (0x108008e8)                                                     */
/*      SPRC0 (0x108008e8)                                                      */
/*      SPRMCC (0x108008e8)                                                     */
/*      SPRUCC (0x108008e8)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the decode logic associated with an arbitrary type 1 IOSF agent (i.e. PCI bridge)
*/


#define BANK3_BANKCTRL2_IIO_VTD_REG 0x110108E8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 devfunc_mask : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               When set, indicates to HW that the contents of
                               devfunc register for the bank are invalid, and
                               should not be used. Since this field is relevant
                               only for type1 bank, setting it essentially
                               ensures that only type1 cfg traffic will be
                               routed based on the secondary and subordinate
                               bus range programmed within this bank.
                            */
    UINT16 rsvd : 15;

                            /* Bits[15:1], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT16 Data;

} BANK3_BANKCTRL2_IIO_VTD_STRUCT;

/* BANK3_MCAST_CTRL_IIO_VTD_REG supported on:                                   */
/*      SPRA0 (0x108008ee)                                                      */
/*      SPRB0 (0x108008ee)                                                      */
/*      SPRHBM (0x108008ee)                                                     */
/*      SPRC0 (0x108008ee)                                                      */
/*      SPRMCC (0x108008ee)                                                     */
/*      SPRUCC (0x108008ee)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the Dualcast Control Register (Dualcast is a specialized version of PCIe Multicast used in conjunction with the Non-Transparent Bridge). The fields in this register mirror the fields in the PCIe spec-defined Multicast Control Register (see section 7.21.3 of the PCIe 3.0 spec).
*/


#define BANK3_MCAST_CTRL_IIO_VTD_REG 0x110108EE

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 mc_num_group : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000000*/

                            /*
                               This field only supports and implements bits
                               [3:0]. Bits [5:4] are not supported.
                            */
    UINT16 rsvd_mc_ctrl_14_6 : 9;

                            /* Bits[14:6], Access Type=RO, default=0x00000000*/

                            /* Rsvd Mc Ctrl 14 6 */
    UINT16 mc_enable : 1;

                            /* Bits[15:15], Access Type=RW/L, default=0x00000000*/

                            /* Mc Enable */

  } Bits;
  UINT16 Data;

} BANK3_MCAST_CTRL_IIO_VTD_STRUCT;

/* BANK3_MCAST_BASE_N0_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x208008f0)                                                      */
/*      SPRB0 (0x208008f0)                                                      */
/*      SPRHBM (0x208008f0)                                                     */
/*      SPRC0 (0x208008f0)                                                      */
/*      SPRMCC (0x208008f0)                                                     */
/*      SPRUCC (0x208008f0)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the Dualcast Base Address Register (Dualcast is a specialized version of PCIe Multicast used in conjunction with the Non-Transparent Bridge). The fields in this register mirror the fields in the PCIe spec-defined MC_Base_Address Register (see section 7.21.4 of the PCIe 3.0 spec).
*/


#define BANK3_MCAST_BASE_N0_IIO_VTD_REG 0x110208F0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mc_index_position : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000000*/

                            /* Mc Index Position */
    UINT32 rsvd_mc_base_11_6 : 6;

                            /* Bits[11:6], Access Type=RO, default=0x00000000*/

                            /* Rsvd Mc Base 11 6 */
    UINT32 mc_base_address : 20;

                            /* Bits[31:12], Access Type=RW, default=0x00000000*/

                            /* Mc Base Address */

  } Bits;
  UINT32 Data;

} BANK3_MCAST_BASE_N0_IIO_VTD_STRUCT;

/* BANK3_MCAST_BASE_N1_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x208008f4)                                                      */
/*      SPRB0 (0x208008f4)                                                      */
/*      SPRHBM (0x208008f4)                                                     */
/*      SPRC0 (0x208008f4)                                                      */
/*      SPRMCC (0x208008f4)                                                     */
/*      SPRUCC (0x208008f4)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the Dualcast Base Address Register (Dualcast is a specialized version of PCIe Multicast used in conjunction with the Non-Transparent Bridge). The fields in this register mirror the fields in the PCIe spec-defined MC_Base_Address Register (see section 7.21.4 of the PCIe 3.0 spec).
*/


#define BANK3_MCAST_BASE_N1_IIO_VTD_REG 0x110208F4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mc_base_address : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /* Mc Base Address */

  } Bits;
  UINT32 Data;

} BANK3_MCAST_BASE_N1_IIO_VTD_STRUCT;

/* BANK3_MCAST_RCV_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x108008f8)                                                      */
/*      SPRB0 (0x108008f8)                                                      */
/*      SPRHBM (0x108008f8)                                                     */
/*      SPRC0 (0x108008f8)                                                      */
/*      SPRMCC (0x108008f8)                                                     */
/*      SPRUCC (0x108008f8)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the Dualcast Receive Register (Dualcast is a specialized version of PCIe Multicast used in conjunction with the Non-Transparent Bridge). The fields in this register mirror the fields in the PCIe spec-defined MC_Receive Register (see section 7.21.5 of the PCIe 3.0 spec).
*/


#define BANK3_MCAST_RCV_IIO_VTD_REG 0x110108F8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 mc_rcv : 16;

                            /* Bits[15:0], Access Type=RW, default=0x00000000*/

                            /* Mc Rcv */

  } Bits;
  UINT16 Data;

} BANK3_MCAST_RCV_IIO_VTD_STRUCT;

/* BANK3_PMCSR_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x208008fc)                                                      */
/*      SPRB0 (0x208008fc)                                                      */
/*      SPRHBM (0x208008fc)                                                     */
/*      SPRC0 (0x208008fc)                                                      */
/*      SPRMCC (0x208008fc)                                                     */
/*      SPRUCC (0x208008fc)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the PCIe Power Management Capability Register in the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK3_PMCSR_IIO_VTD_REG 0x110208FC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 power_state : 2;

                            /* Bits[1:0], Access Type=RW, default=0x00000000*/

                            /*
                               This 2-bit field is used to determine the
                               current power state of the function and to set a
                               new power state as well.[br] 00: D0[br] 01:
                               D1[br] 10: D2[br] 11: D3_hot[br] All devices
                               will respond to only Type 0 configuration
                               transactions (targeting the device's
                               configuration space itself) when in D3hot state
                               (root port will not forward Type 1/0
                               transactions to the downstream link) and will
                               not respond to memory/IO transactions (i.e.
                               D3hot state is equivalent to MSE/IOSE bits being
                               clear) as target and will not generate any
                               memory/IO/configuration transactions as
                               initiator on the primary bus (messages are still
                               allowed to pass through).[br] WARNING: MS2IOSF
                               hardware does NOT block any requests targeting
                               the device when the device is not in D0. The
                               IOSF device must be robust enough to handle
                               requests in non-D0 power states. In addition,
                               software should not rely on the accuracy of this
                               shadow register, but instead read the actual
                               PMCSR of the device.
                            */
    UINT32 rsvd : 30;

                            /* Bits[31:2], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} BANK3_PMCSR_IIO_VTD_STRUCT;

/* BANK4_BANKCTRL_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x800900)                                                        */
/*      SPRB0 (0x800900)                                                        */
/*      SPRHBM (0x800900)                                                       */
/*      SPRC0 (0x800900)                                                        */
/*      SPRMCC (0x800900)                                                       */
/*      SPRUCC (0x800900)                                                       */
/* Register default value on SPRA0: 0x00000081                                  */
/* Register default value on SPRB0: 0x00000081                                  */
/* Register default value on SPRHBM: 0x00000081                                 */
/* Register default value on SPRC0: 0x00000081                                  */
/* Register default value on SPRMCC: 0x00000081                                 */
/* Register default value on SPRUCC: 0x00000081                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the source decode logic associated with an arbitrary type 1 IOSF agent (i.e. PCI bridge)
*/


#define BANK4_BANKCTRL_IIO_VTD_REG 0x11000900

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 banktype : 2;

                            /* Bits[1:0], Access Type=RO, default=0x00000001*/

                            /*
                               Specifies the type of Bank Decoder. Valid values
                               are:[br] 00b: Type 0 Bank - 16 Bytes[br] 01b:
                               Type 1 Bank - 64 Bytes[br] 10b: reserved[br]
                               11b: Subtractive Decode Bank - 8 Bytes
                            */
    UINT8 force_config_type0 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               If this bit is set, MS2IOSF sends any
                               configuration request that matches this bank as
                               type 0. Enables support for SR-IOV RCIEP.
                            */
    UINT8 bank_decode_enable : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               1b: The bank decoders are enabled.[br] 0b: The
                               bank decoders are disabled.
                            */
    UINT8 shadow_enable : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               1b: Outbound configuration requests that target
                               the Device/Function specified by this bank on
                               the RootBus will be snarfed to the shadow copy
                               of decode registers.[br] 0b: Outbound
                               configuration requests will not be snarfed. BIOS
                               must program the decode registers to allow this
                               bank to decode to the bank's specified target.
                            */
    UINT8 mc_bank_decode_enable : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               1b: The Multicast bank decoders are enabled.[br]
                               0b: The Multicast bank decoders are disabled.
                            */
    UINT8 mc_shadow_enable : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               1b: Outbound configuration requests that target
                               the Multicast registers of the Device/Function
                               specified by this bank on the RootBus will be
                               snarfed to the shadow copy of decode
                               registers.[br] 0b: Outbound configuration
                               requests to the Multicast registers of the
                               Device/Function will not be snarfed. BIOS must
                               program the decode registers to allow this bank
                               to decode to the bank's specified target.
                            */
    UINT8 function_mask : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               When set, causes the DevFunc.Function field to
                               become ignored. Any configuration request that
                               matches the DevFunc.Device field with any
                               function value will be a match for this decoder
                               bank.
                            */

  } Bits;
  UINT8 Data;

} BANK4_BANKCTRL_IIO_VTD_STRUCT;

/* BANK4_DEVFUNC_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x800901)                                                        */
/*      SPRB0 (0x800901)                                                        */
/*      SPRHBM (0x800901)                                                       */
/*      SPRC0 (0x800901)                                                        */
/*      SPRMCC (0x800901)                                                       */
/*      SPRUCC (0x800901)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* PCI Device and Function number of the IOSF agent being shadowed
*/


#define BANK4_DEVFUNC_IIO_VTD_REG 0x11000901

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 func : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target Function Number on the
                               RootBus that this bank decodes for.
                            */
    UINT8 device : 5;

                            /* Bits[7:3], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target Device Number on the
                               RootBus that this bank decodes for.
                            */

  } Bits;
  UINT8 Data;

} BANK4_DEVFUNC_IIO_VTD_STRUCT;

/* BANK4_DESTID_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x10800902)                                                      */
/*      SPRB0 (0x10800902)                                                      */
/*      SPRHBM (0x10800902)                                                     */
/*      SPRC0 (0x10800902)                                                      */
/*      SPRMCC (0x10800902)                                                     */
/*      SPRUCC (0x10800902)                                                     */
/* Register default value on SPRA0: 0x00002188                                  */
/* Register default value on SPRB0: 0x00002188                                  */
/* Register default value on SPRHBM: 0x00002188                                 */
/* Register default value on SPRC0: 0x00002188                                  */
/* Register default value on SPRMCC: 0x00002188                                 */
/* Register default value on SPRUCC: 0x00002188                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* The lower 14 bits of this register comprise the PSF-required source decode information that MS2IOSF provides on the tdest_id signal when presenting the request to PSF (note exception for MS2IOSF_Port).
*/


#define BANK4_DESTID_IIO_VTD_REG 0x11010902

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 psf_channel : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies which IOSF channel to send requests
                               that hit this bank decoder ranges. This field is
                               used for IOSF Channel and also as part of the
                               IOSF Destination ID.
                            */
    UINT16 psf_port : 3;

                            /* Bits[5:3], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF port to send requests that
                               hit this bank decoder ranges.
                            */
    UINT16 ms2iosf_port : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the MS2IOSF port (left = 0, right = 1)
                               where to send requests that hit this bank
                               decoder. The logic should mask this bit to zero
                               before sending the 14-bit PSF source decode
                               header out. Technically, this is the top bit of
                               the PSF port ID, but MS2IOSF is using it for
                               internal purposes.
                            */
    UINT16 psf_port_group : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF port group to send requests
                               that hit this bank decoder ranges.
                            */
    UINT16 psf_id : 4;

                            /* Bits[11:8], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF to send requests that hit
                               this bank decoder ranges.
                            */
    UINT16 psf_decode_mode : 2;

                            /* Bits[13:12], Access Type=RW, default=0x00000002*/

                            /*
                               Specifies the PSF Destination ID decode mode
                               being used.[br] 00b: Fabric Decode[br] 01b:
                               Implicit Decode[br] 10b: Source Decode to
                               PSF_ID:Port_Group:Port:Channel[br] 11b: Source
                               Decode to PSF_ID, use Fabric Decode from there
                               onward (StF)
                            */
    UINT16 ms2iosf_channel : 2;

                            /* Bits[15:14], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies to which IOSF channel to send requests
                               that hit this bank decoder. Note the difference
                               between this channel ID and the channel ID
                               provided in the source decode header below. The
                               former specifies the channel ID on the MS2IOSF
                               interface itself whereas the latter specifies
                               the channel ID on the PSF interface to the
                               endpoint. MS2IOSF has four channels for each of
                               its two ports.
                            */

  } Bits;
  UINT16 Data;

} BANK4_DESTID_IIO_VTD_STRUCT;

/* BANK4_DEVCON_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x10800904)                                                      */
/*      SPRB0 (0x10800904)                                                      */
/*      SPRHBM (0x10800904)                                                     */
/*      SPRC0 (0x10800904)                                                      */
/*      SPRMCC (0x10800904)                                                     */
/*      SPRUCC (0x10800904)                                                     */
/* Register default value on SPRA0: 0x000000E0                                  */
/* Register default value on SPRB0: 0x000000E0                                  */
/* Register default value on SPRHBM: 0x000000E0                                 */
/* Register default value on SPRC0: 0x000000E0                                  */
/* Register default value on SPRMCC: 0x000000E0                                 */
/* Register default value on SPRUCC: 0x000000E0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Shadowed PCI Express Device Control
*/


#define BANK4_DEVCON_IIO_VTD_REG 0x11010904

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 rsvd : 5;

                            /* Bits[4:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 max_payload_size : 3;

                            /* Bits[7:5], Access Type=RW, default=0x00000007*/

                            /*
                               Max_Payload_Size[br] Indicates the largest
                               packet size supported by the target decoded by
                               this bank. [br] Defined encodings for this field
                               are:[br] 000b 128 bytes max payload size[br]
                               001b 256 bytes max payload size[br] 010b 512
                               bytes max payload size[br] 011b 1024 bytes max
                               payload size[br] 100b 2048 bytes max payload
                               size[br] 101b 4096 bytes max payload size[br]
                               110b Reserved[br] 111b 64 address aligned bytes
                               max payload size[br]
                            */
    UINT16 rsvd_8 : 7;

                            /* Bits[14:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 initiate_flr : 1;

                            /* Bits[15:15], Access Type=RO, default=0x00000000*/

                            /*
                               [br] Initiate Function Level Reset. A write of
                               '1' to the DEVCON[15] field of the device this
                               bank shadows, will cause all shadow-enabled
                               registers for this bank to reset. DEVCON[15]
                               maps to this field. This bit self-clears.[br]
                            */

  } Bits;
  UINT16 Data;

} BANK4_DEVCON_IIO_VTD_STRUCT;

/* BANK4_DEVCON_OFFSET_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x800907)                                                        */
/*      SPRB0 (0x800907)                                                        */
/*      SPRHBM (0x800907)                                                       */
/*      SPRC0 (0x800907)                                                        */
/*      SPRMCC (0x800907)                                                       */
/*      SPRUCC (0x800907)                                                       */
/* Register default value on SPRA0: 0x00000048                                  */
/* Register default value on SPRB0: 0x00000048                                  */
/* Register default value on SPRHBM: 0x00000048                                 */
/* Register default value on SPRC0: 0x00000048                                  */
/* Register default value on SPRMCC: 0x00000048                                 */
/* Register default value on SPRUCC: 0x00000048                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Offset of the PCI Express Device Control Register in the IOSF agent's configuration header
*/


#define BANK4_DEVCON_OFFSET_IIO_VTD_REG 0x11000907

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 devcon_shadowen : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               If this bit and DevCon_Master are set, MS2IOSF
                               shadows writes to the offset programmed above
                               into its copy of the device control register.
                               BIOS must clear this bit for devices that do not
                               have a device control register. If shadowing is
                               disabled for this bank, this bit has no effect.
                            */
    UINT8 devcon_master : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Indicates whether or not this shadow copy is the
                               master copy. For devices that use multiple bank
                               decoders, SW is required to enable one of them
                               as a master. HW shadowing only updates the
                               master copy. Likewise, HW only uses the master
                               copy as input to other logic such as completion
                               combining. For devices that use only one bank
                               decoder, SW is required to set this bit.
                            */
    UINT8 devcon_offset : 6;

                            /* Bits[7:2], Access Type=RW, default=0x00000012*/

                            /*
                               Configuration space register offset for the
                               Device control register. This is a DWord offset
                               (left-shift this value by two to get byte
                               offset). Note that although this points to the
                               lowest order byte of the register, only the
                               upper byte of the register is captured by this
                               bank, which is at this offset + 1h.
                            */

  } Bits;
  UINT8 Data;

} BANK4_DEVCON_OFFSET_IIO_VTD_STRUCT;

/* BANK4_PCICMD_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x10800908)                                                      */
/*      SPRB0 (0x10800908)                                                      */
/*      SPRHBM (0x10800908)                                                     */
/*      SPRC0 (0x10800908)                                                      */
/*      SPRMCC (0x10800908)                                                     */
/*      SPRUCC (0x10800908)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK4_PCICMD_IIO_VTD_REG 0x11010908

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 iose : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               I/O Space Enable (for outbound bank decode)[br]
                               1: Enables bank IOBAS/IOLIM I/O range[br] 0:
                               Disables bank IOBAS/IOLIM I/O range
                            */
    UINT16 mse : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Memory Space Enable (for outbound bank
                               decode)[br] 1: Enables bank MBAS/MLIM and
                               PBAS/PLIM memory ranges[br] 0: Disables bank
                               MBAS/MLIM and PBAS/PLIM memory ranges
                            */
    UINT16 bme : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /* Bme */
    UINT16 sce : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000000*/

                            /* Sce */
    UINT16 mwie : 1;

                            /* Bits[4:4], Access Type=RO, default=0x00000000*/

                            /* Mwie */
    UINT16 vga_palette_snoop_enable : 1;

                            /* Bits[5:5], Access Type=RO, default=0x00000000*/

                            /* Vga Palette Snoop Enable */
    UINT16 perre : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /* Perre */
    UINT16 idsel_stepping_wait_cycle_control : 1;

                            /* Bits[7:7], Access Type=RO, default=0x00000000*/

                            /* Idsel Stepping Wait Cycle Control */
    UINT16 serre : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /* Serre */
    UINT16 fast_back_to_back_enable : 1;

                            /* Bits[9:9], Access Type=RO, default=0x00000000*/

                            /* Fast Back To Back Enable */
    UINT16 rsvd : 6;

                            /* Bits[15:10], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT16 Data;

} BANK4_PCICMD_IIO_VTD_STRUCT;

/* BANK4_SECBUS_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x80090d)                                                        */
/*      SPRB0 (0x80090d)                                                        */
/*      SPRHBM (0x80090d)                                                       */
/*      SPRC0 (0x80090d)                                                        */
/*      SPRMCC (0x80090d)                                                       */
/*      SPRUCC (0x80090d)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK4_SECBUS_IIO_VTD_REG 0x1100090D

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 sbn : 8;

                            /* Bits[7:0], Access Type=RW, default=0x00000000*/

                            /* First bus of a bus range below a PCI Bridge */

  } Bits;
  UINT8 Data;

} BANK4_SECBUS_IIO_VTD_STRUCT;

/* BANK4_SUBBUS_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x80090e)                                                        */
/*      SPRB0 (0x80090e)                                                        */
/*      SPRHBM (0x80090e)                                                       */
/*      SPRC0 (0x80090e)                                                        */
/*      SPRMCC (0x80090e)                                                       */
/*      SPRUCC (0x80090e)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK4_SUBBUS_IIO_VTD_REG 0x1100090E

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 subordinate_bus_number : 8;

                            /* Bits[7:0], Access Type=RW, default=0x00000000*/

                            /* Last bus of a bus range below a PCI Bridge */

  } Bits;
  UINT8 Data;

} BANK4_SUBBUS_IIO_VTD_STRUCT;

/* BANK4_IOBAS_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x800910)                                                        */
/*      SPRB0 (0x800910)                                                        */
/*      SPRHBM (0x800910)                                                       */
/*      SPRC0 (0x800910)                                                        */
/*      SPRMCC (0x800910)                                                       */
/*      SPRUCC (0x800910)                                                       */
/* Register default value on SPRA0: 0x000000F0                                  */
/* Register default value on SPRB0: 0x000000F0                                  */
/* Register default value on SPRHBM: 0x000000F0                                 */
/* Register default value on SPRC0: 0x000000F0                                  */
/* Register default value on SPRMCC: 0x000000F0                                 */
/* Register default value on SPRUCC: 0x000000F0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK4_IOBAS_IIO_VTD_REG 0x11000910

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 i_o_address_capability : 2;

                            /* Bits[1:0], Access Type=RO, default=0x00000000*/

                            /* MS2IOSF supports only 16 bit addressing */
    UINT8 more_i_o_base_address : 2;

                            /* Bits[3:2], Access Type=RW/L, default=0x00000000*/

                            /*
                               When EN1K is set in the IIOMISCCTRL register,
                               these bits become RW and allow for 1K
                               granularity of I/O addressing, otherwise these
                               are RO.[br] Lock: !IIOMISCCTRL.EN1K
                            */
    UINT8 i_o_base_address : 4;

                            /* Bits[7:4], Access Type=RW, default=0x0000000F*/

                            /*
                               Corresponds to A[15:12] of the I/O base address
                               of the PCI Express port. See also the IOLIM
                               register description.
                            */

  } Bits;
  UINT8 Data;

} BANK4_IOBAS_IIO_VTD_STRUCT;

/* BANK4_IOLIM_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x800911)                                                        */
/*      SPRB0 (0x800911)                                                        */
/*      SPRHBM (0x800911)                                                       */
/*      SPRC0 (0x800911)                                                        */
/*      SPRMCC (0x800911)                                                       */
/*      SPRUCC (0x800911)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK4_IOLIM_IIO_VTD_REG 0x11000911

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 i_o_address_limit_capability : 2;

                            /* Bits[1:0], Access Type=RO, default=0x00000000*/

                            /* MS2IOSF supports only 16 bit addressing */
    UINT8 more_i_o_address_limit : 2;

                            /* Bits[3:2], Access Type=RW/L, default=0x00000000*/

                            /*
                               When EN1K is set in the IIOMISCCTRL register,
                               these bits become RW and allow for 1K
                               granularity of I/O addressing, otherwise these
                               are RO.[br] Lock: !IIOMISCCTRL.EN1K
                            */
    UINT8 i_o_address_limit : 4;

                            /* Bits[7:4], Access Type=RW, default=0x00000000*/

                            /*
                               Corresponds to A[15:12] of the I/O limit address
                               of the PCI Express port.The I/O Base and I/O
                               Limit registers define an address range that is
                               used by the PCI Express port to determine when
                               to forward I/O transactions from one interface
                               to the other using the following formula:[br]
                               IO_BASE <= A[15:12] <=IO_LIMIT[br] The bottom of
                               the defined I/O address range will be aligned to
                               a 4KB boundary (1KB if EN1K bit is set. Refer to
                               the IIOMISCCTRL register for definition of EN1K
                               bit) while the top of the region specified by
                               IO_LIMIT will be one less than a 4 KB (1KB if
                               EN1K bit is set) multiple.[br] Notes:[br] -
                               Setting the I/O limit less than I/O base
                               disables the I/O range altogether.[br] - General
                               the I/O base and limit registers won't be
                               programmed by software without clearing the IOSE
                               bit first.
                            */

  } Bits;
  UINT8 Data;

} BANK4_IOLIM_IIO_VTD_STRUCT;

/* BANK4_MBAS_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x10800914)                                                      */
/*      SPRB0 (0x10800914)                                                      */
/*      SPRHBM (0x10800914)                                                     */
/*      SPRC0 (0x10800914)                                                      */
/*      SPRMCC (0x10800914)                                                     */
/*      SPRUCC (0x10800914)                                                     */
/* Register default value on SPRA0: 0x0000FFF0                                  */
/* Register default value on SPRB0: 0x0000FFF0                                  */
/* Register default value on SPRHBM: 0x0000FFF0                                 */
/* Register default value on SPRC0: 0x0000FFF0                                  */
/* Register default value on SPRMCC: 0x0000FFF0                                 */
/* Register default value on SPRUCC: 0x0000FFF0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK4_MBAS_IIO_VTD_REG 0x11010914

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 memory_base_address : 12;

                            /* Bits[15:4], Access Type=RW, default=0x00000FFF*/

                            /*
                               Corresponds to A[31:20] of the 32 bit memory
                               window's base address of the PCI Express port.
                               See also the MLIM register description.
                            */

  } Bits;
  UINT16 Data;

} BANK4_MBAS_IIO_VTD_STRUCT;

/* BANK4_MLIM_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x10800916)                                                      */
/*      SPRB0 (0x10800916)                                                      */
/*      SPRHBM (0x10800916)                                                     */
/*      SPRC0 (0x10800916)                                                      */
/*      SPRMCC (0x10800916)                                                     */
/*      SPRUCC (0x10800916)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK4_MLIM_IIO_VTD_REG 0x11010916

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 memory_limit_address : 12;

                            /* Bits[15:4], Access Type=RW, default=0x00000000*/

                            /*
                               Corresponds to A[31:20] of the 32 bit memory
                               window's limit address that corresponds to the
                               upper limit of the range of memory accesses that
                               will be passed by the PCI Express bridge.The
                               Memory Base and Memory Limit registers define a
                               memory mapped I/O non-prefetchable address range
                               (32-bit addresses) and the MS2IOSF directs
                               accesses in this range to the PCI Express port
                               based on the following formula:[br] MEMORY_BASE
                               <= A[31:20] <= MEMORY_LIMIT[br] The upper 12
                               bits of both the Memory Base and Memory Limit
                               registers are read/write and corresponds to the
                               upper 12 address bits, A[31:20] of 32-bit
                               addresses. Thus, the bottom of the defined
                               memory address range will be aligned to a 1 MB
                               boundary and the top of the defined memory
                               address range will be one less than a 1 MB
                               boundary. Refer to Chapter 5, 'Address Map,'
                               (IOH Platform Architecture Specification) for
                               further details on decoding.[br] Notes:[br] -
                               Setting the memory limit less than memory base
                               disables the 32-bit memory range altogether.[br]
                               - Note that in general the memory base and limit
                               registers won't be programmed by software
                               without clearing the MSE bit first.
                            */

  } Bits;
  UINT16 Data;

} BANK4_MLIM_IIO_VTD_STRUCT;

/* BANK4_PBAS_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x10800918)                                                      */
/*      SPRB0 (0x10800918)                                                      */
/*      SPRHBM (0x10800918)                                                     */
/*      SPRC0 (0x10800918)                                                      */
/*      SPRMCC (0x10800918)                                                     */
/*      SPRUCC (0x10800918)                                                     */
/* Register default value on SPRA0: 0x0000FFF1                                  */
/* Register default value on SPRB0: 0x0000FFF1                                  */
/* Register default value on SPRHBM: 0x0000FFF1                                 */
/* Register default value on SPRC0: 0x0000FFF1                                  */
/* Register default value on SPRMCC: 0x0000FFF1                                 */
/* Register default value on SPRUCC: 0x0000FFF1                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK4_PBAS_IIO_VTD_REG 0x11010918

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 prefetchable_memory_base_address_capability : 4;

                            /* Bits[3:0], Access Type=RO, default=0x00000001*/

                            /*
                               MS2IOSF sets this bit to 01h to indicate 64bit
                               capability.
                            */
    UINT16 prefetchable_memory_base_address : 12;

                            /* Bits[15:4], Access Type=RW, default=0x00000FFF*/

                            /*
                               Corresponds to A[31:20] of the prefetchable
                               memory address range's base address of the PCI
                               Express port. See also the PLIMU register
                               description.
                            */

  } Bits;
  UINT16 Data;

} BANK4_PBAS_IIO_VTD_STRUCT;

/* BANK4_PLIM_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x1080091a)                                                      */
/*      SPRB0 (0x1080091a)                                                      */
/*      SPRHBM (0x1080091a)                                                     */
/*      SPRC0 (0x1080091a)                                                      */
/*      SPRMCC (0x1080091a)                                                     */
/*      SPRUCC (0x1080091a)                                                     */
/* Register default value on SPRA0: 0x00000001                                  */
/* Register default value on SPRB0: 0x00000001                                  */
/* Register default value on SPRHBM: 0x00000001                                 */
/* Register default value on SPRC0: 0x00000001                                  */
/* Register default value on SPRMCC: 0x00000001                                 */
/* Register default value on SPRUCC: 0x00000001                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK4_PLIM_IIO_VTD_REG 0x1101091A

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 prefetchable_memory_limit_address_capability : 4;

                            /* Bits[3:0], Access Type=RO, default=0x00000001*/

                            /*
                               Indicates the addressing capability of the
                               prefetchable range.[br] 0h: 32-bit[br] 1h:
                               64-bit[br] All other values: reserved
                            */
    UINT16 prefetchable_memory_limit_address : 12;

                            /* Bits[15:4], Access Type=RW, default=0x00000000*/

                            /*
                               Corresponds to A[31:20] of the prefetchable
                               memory address range's limit address of the PCI
                               Express port. See also the PLIMU register
                               description.
                            */

  } Bits;
  UINT16 Data;

} BANK4_PLIM_IIO_VTD_STRUCT;

/* BANK4_PBASU_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x2080091c)                                                      */
/*      SPRB0 (0x2080091c)                                                      */
/*      SPRHBM (0x2080091c)                                                     */
/*      SPRC0 (0x2080091c)                                                      */
/*      SPRMCC (0x2080091c)                                                     */
/*      SPRUCC (0x2080091c)                                                     */
/* Register default value on SPRA0: 0xFFFFFFFF                                  */
/* Register default value on SPRB0: 0xFFFFFFFF                                  */
/* Register default value on SPRHBM: 0xFFFFFFFF                                 */
/* Register default value on SPRC0: 0xFFFFFFFF                                  */
/* Register default value on SPRMCC: 0xFFFFFFFF                                 */
/* Register default value on SPRUCC: 0xFFFFFFFF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK4_PBASU_IIO_VTD_REG 0x1102091C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 prefetchable_upper_32_bit_memory_base_address : 32;

                            /* Bits[31:0], Access Type=RW, default=0xFFFFFFFF*/

                            /*
                               Corresponds to A[63:32] of the prefetchable
                               memory address range's base address of the PCI
                               Express port. See also the PLIMU register
                               description.
                            */

  } Bits;
  UINT32 Data;

} BANK4_PBASU_IIO_VTD_STRUCT;

/* BANK4_PLIMU_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x20800920)                                                      */
/*      SPRB0 (0x20800920)                                                      */
/*      SPRHBM (0x20800920)                                                     */
/*      SPRC0 (0x20800920)                                                      */
/*      SPRMCC (0x20800920)                                                     */
/*      SPRUCC (0x20800920)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK4_PLIMU_IIO_VTD_REG 0x11020920

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 prefetchable_upper_32_bit_memory_limit_address : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               Corresponds to A[63:32] of the prefetchable
                               memory address range's limit address of the PCI
                               Express port.The Prefetchable Memory Base and
                               Memory Limit registers define a memory mapped
                               I/O prefetchable address range (64-bit
                               addresses) which is used by the PCI Express
                               bridge to determine when to forward memory
                               transactions based on the following formula:[br]
                               PREFETCH_MEMORY_BASE_UPPER::
                               PREFETCH_MEMORY_BASE <= A[63:20] <= PREFETCH_MEM
                               ORY_LIMIT_UPPER::PREFETCH_MEMORY_LIMIT[br] The
                               upper 12 bits of both the Prefetchable Memory
                               Base and Memory Limit registers are read/write
                               and corresponds to the upper 12 address bits,
                               A[31:20] of 32-bit addresses. The bottom of the
                               defined memory address range will be aligned to
                               a 1 MB boundary and the top of the defined
                               memory address range will be one less than a 1
                               MB boundary.[br] The bottom 4 bits of both the
                               Prefetchable Memory Base and Prefetchable Memory
                               Limit registers are read-only, contain the same
                               value, and encode whether or not the bridge
                               supports 64-bit addresses.[br] If these four
                               bits have the value 0h, then the bridge supports
                               only 32 bit addresses.[br] If these four bits
                               have the value 1h, then the bridge supports
                               64-bit addresses and the Prefetchable Base Upper
                               32 Bits and Prefetchable Limit Upper 32 Bits
                               registers hold the rest of the 64-bit
                               prefetchable base and limit addresses
                               respectively.[br] Setting the prefetchable
                               memory limit less than prefetchable memory base
                               disables the 64-bit prefetchable memory range
                               altogether.[br] Notes:[br] - In general the
                               memory base and limit registers won't be
                               programmed by software without clearing the MSE
                               bit first.
                            */

  } Bits;
  UINT32 Data;

} BANK4_PLIMU_IIO_VTD_STRUCT;

/* BANK4_BCTRL_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x10800926)                                                      */
/*      SPRB0 (0x10800926)                                                      */
/*      SPRHBM (0x10800926)                                                     */
/*      SPRC0 (0x10800926)                                                      */
/*      SPRMCC (0x10800926)                                                     */
/*      SPRUCC (0x10800926)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK4_BCTRL_IIO_VTD_REG 0x11010926

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 perre : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Perre */
    UINT16 serre : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /* Serre */
    UINT16 isaen : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               ISA Enable[br] Modifies the response by the root
                               port to an I/O access issued by the core that
                               target ISA I/O addresses. This applies only to
                               I/O addresses that are enabled by the IOBASE and
                               IOLIM registers.[br] 1: The root port will not
                               forward to PCI Express any I/O transactions
                               addressing the last 768 bytes in each 1KB block
                               even if the addresses are within the range
                               defined by the IOBASE and IOLIM registers.[br]
                               0: All addresses defined by the IOBASE and IOLIM
                               for core issued I/O transactions will be mapped
                               to PCI Express.
                            */
    UINT16 vgaen : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               VGA Enable[br] Controls the routing of CPU
                               initiated transactions targeting VGA compatible
                               I/O and memory address ranges. This bit must
                               only be set for one p2p port in the entire
                               system.[br] Notes:[br] - When Device 3 Function
                               0 is in NTB mode, then the Device 3 Function 0
                               versoin of this bit must be left at default
                               value. VGA compatible devices are not supported
                               on the secondary side of the NTB.
                            */
    UINT16 vga16b : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               VGA 16-bit decode[br] This bit enables the
                               virtual PCI-to-PCI bridge to provide 16-bit
                               decoding of VGA I/O address precluding the
                               decoding of alias addresses every 1 KB.[br] 0:
                               execute 10-bit address decodes on VGA I/O
                               accesses.[br] 1: execute 16-bit address decodes
                               on VGA I/O accesses.[br] Notes:[br] - This bit
                               only has meaning if bit 3 of this register is
                               also set to 1, enabling VGA I/O decoding and
                               forwarding by the bridge.[br] - Refer to PCI-PCI
                               Bridge Specification Revision 1.2 for further
                               details of this bit behavior.
                            */
    UINT16 rsvd : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 sbr : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               1: Setting this bit triggers a hot reset on the
                               link for the corresponding PCI Express port and
                               the PCI Express hierarchy domain subordinate to
                               the port. This sends the LTSSM into the Training
                               (or Link) Control Reset state, which necessarily
                               implies a reset to the downstream device and all
                               subordinate devices. The transaction layer
                               corresponding to port will be emptied by virtue
                               of the link going down when this bit is set.
                               This means that in the outbound direction, all
                               posted transactions are dropped and non-posted
                               transactions are sent a UR response. In the
                               inbound direction, completions for inbound NP
                               requests are dropped when they arrive. Inbound
                               posted writes are retired normally.Note also
                               that a secondary bus reset will not reset the
                               virtual PCI-to-PCI bridge configuration
                               registers of the targeted PCI Express port.[br]
                               0: No reset happens on the PCI Express port.
                            */
    UINT16 rsvd_7 : 9;

                            /* Bits[15:7], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT16 Data;

} BANK4_BCTRL_IIO_VTD_STRUCT;

/* BANK4_BANKCTRL2_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x10800928)                                                      */
/*      SPRB0 (0x10800928)                                                      */
/*      SPRHBM (0x10800928)                                                     */
/*      SPRC0 (0x10800928)                                                      */
/*      SPRMCC (0x10800928)                                                     */
/*      SPRUCC (0x10800928)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the decode logic associated with an arbitrary type 1 IOSF agent (i.e. PCI bridge)
*/


#define BANK4_BANKCTRL2_IIO_VTD_REG 0x11010928

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 devfunc_mask : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               When set, indicates to HW that the contents of
                               devfunc register for the bank are invalid, and
                               should not be used. Since this field is relevant
                               only for type1 bank, setting it essentially
                               ensures that only type1 cfg traffic will be
                               routed based on the secondary and subordinate
                               bus range programmed within this bank.
                            */
    UINT16 rsvd : 15;

                            /* Bits[15:1], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT16 Data;

} BANK4_BANKCTRL2_IIO_VTD_STRUCT;

/* BANK4_MCAST_CTRL_IIO_VTD_REG supported on:                                   */
/*      SPRA0 (0x1080092e)                                                      */
/*      SPRB0 (0x1080092e)                                                      */
/*      SPRHBM (0x1080092e)                                                     */
/*      SPRC0 (0x1080092e)                                                      */
/*      SPRMCC (0x1080092e)                                                     */
/*      SPRUCC (0x1080092e)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the Dualcast Control Register (Dualcast is a specialized version of PCIe Multicast used in conjunction with the Non-Transparent Bridge). The fields in this register mirror the fields in the PCIe spec-defined Multicast Control Register (see section 7.21.3 of the PCIe 3.0 spec).
*/


#define BANK4_MCAST_CTRL_IIO_VTD_REG 0x1101092E

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 mc_num_group : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000000*/

                            /*
                               This field only supports and implements bits
                               [3:0]. Bits [5:4] are not supported.
                            */
    UINT16 rsvd_mc_ctrl_14_6 : 9;

                            /* Bits[14:6], Access Type=RO, default=0x00000000*/

                            /* Rsvd Mc Ctrl 14 6 */
    UINT16 mc_enable : 1;

                            /* Bits[15:15], Access Type=RW/L, default=0x00000000*/

                            /* Mc Enable */

  } Bits;
  UINT16 Data;

} BANK4_MCAST_CTRL_IIO_VTD_STRUCT;

/* BANK4_MCAST_BASE_N0_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x20800930)                                                      */
/*      SPRB0 (0x20800930)                                                      */
/*      SPRHBM (0x20800930)                                                     */
/*      SPRC0 (0x20800930)                                                      */
/*      SPRMCC (0x20800930)                                                     */
/*      SPRUCC (0x20800930)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the Dualcast Base Address Register (Dualcast is a specialized version of PCIe Multicast used in conjunction with the Non-Transparent Bridge). The fields in this register mirror the fields in the PCIe spec-defined MC_Base_Address Register (see section 7.21.4 of the PCIe 3.0 spec).
*/


#define BANK4_MCAST_BASE_N0_IIO_VTD_REG 0x11020930

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mc_index_position : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000000*/

                            /* Mc Index Position */
    UINT32 rsvd_mc_base_11_6 : 6;

                            /* Bits[11:6], Access Type=RO, default=0x00000000*/

                            /* Rsvd Mc Base 11 6 */
    UINT32 mc_base_address : 20;

                            /* Bits[31:12], Access Type=RW, default=0x00000000*/

                            /* Mc Base Address */

  } Bits;
  UINT32 Data;

} BANK4_MCAST_BASE_N0_IIO_VTD_STRUCT;

/* BANK4_MCAST_BASE_N1_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x20800934)                                                      */
/*      SPRB0 (0x20800934)                                                      */
/*      SPRHBM (0x20800934)                                                     */
/*      SPRC0 (0x20800934)                                                      */
/*      SPRMCC (0x20800934)                                                     */
/*      SPRUCC (0x20800934)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the Dualcast Base Address Register (Dualcast is a specialized version of PCIe Multicast used in conjunction with the Non-Transparent Bridge). The fields in this register mirror the fields in the PCIe spec-defined MC_Base_Address Register (see section 7.21.4 of the PCIe 3.0 spec).
*/


#define BANK4_MCAST_BASE_N1_IIO_VTD_REG 0x11020934

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mc_base_address : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /* Mc Base Address */

  } Bits;
  UINT32 Data;

} BANK4_MCAST_BASE_N1_IIO_VTD_STRUCT;

/* BANK4_MCAST_RCV_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x10800938)                                                      */
/*      SPRB0 (0x10800938)                                                      */
/*      SPRHBM (0x10800938)                                                     */
/*      SPRC0 (0x10800938)                                                      */
/*      SPRMCC (0x10800938)                                                     */
/*      SPRUCC (0x10800938)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the Dualcast Receive Register (Dualcast is a specialized version of PCIe Multicast used in conjunction with the Non-Transparent Bridge). The fields in this register mirror the fields in the PCIe spec-defined MC_Receive Register (see section 7.21.5 of the PCIe 3.0 spec).
*/


#define BANK4_MCAST_RCV_IIO_VTD_REG 0x11010938

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 mc_rcv : 16;

                            /* Bits[15:0], Access Type=RW, default=0x00000000*/

                            /* Mc Rcv */

  } Bits;
  UINT16 Data;

} BANK4_MCAST_RCV_IIO_VTD_STRUCT;

/* BANK4_PMCSR_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x2080093c)                                                      */
/*      SPRB0 (0x2080093c)                                                      */
/*      SPRHBM (0x2080093c)                                                     */
/*      SPRC0 (0x2080093c)                                                      */
/*      SPRMCC (0x2080093c)                                                     */
/*      SPRUCC (0x2080093c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the PCIe Power Management Capability Register in the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK4_PMCSR_IIO_VTD_REG 0x1102093C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 power_state : 2;

                            /* Bits[1:0], Access Type=RW, default=0x00000000*/

                            /*
                               This 2-bit field is used to determine the
                               current power state of the function and to set a
                               new power state as well.[br] 00: D0[br] 01:
                               D1[br] 10: D2[br] 11: D3_hot[br] All devices
                               will respond to only Type 0 configuration
                               transactions (targeting the device's
                               configuration space itself) when in D3hot state
                               (root port will not forward Type 1/0
                               transactions to the downstream link) and will
                               not respond to memory/IO transactions (i.e.
                               D3hot state is equivalent to MSE/IOSE bits being
                               clear) as target and will not generate any
                               memory/IO/configuration transactions as
                               initiator on the primary bus (messages are still
                               allowed to pass through).[br] WARNING: MS2IOSF
                               hardware does NOT block any requests targeting
                               the device when the device is not in D0. The
                               IOSF device must be robust enough to handle
                               requests in non-D0 power states. In addition,
                               software should not rely on the accuracy of this
                               shadow register, but instead read the actual
                               PMCSR of the device.
                            */
    UINT32 rsvd : 30;

                            /* Bits[31:2], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} BANK4_PMCSR_IIO_VTD_STRUCT;

/* BANK5_BANKCTRL_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x800940)                                                        */
/*      SPRB0 (0x800940)                                                        */
/*      SPRHBM (0x800940)                                                       */
/*      SPRC0 (0x800940)                                                        */
/*      SPRMCC (0x800940)                                                       */
/*      SPRUCC (0x800940)                                                       */
/* Register default value on SPRA0: 0x00000081                                  */
/* Register default value on SPRB0: 0x00000081                                  */
/* Register default value on SPRHBM: 0x00000081                                 */
/* Register default value on SPRC0: 0x00000081                                  */
/* Register default value on SPRMCC: 0x00000081                                 */
/* Register default value on SPRUCC: 0x00000081                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the source decode logic associated with an arbitrary type 1 IOSF agent (i.e. PCI bridge)
*/


#define BANK5_BANKCTRL_IIO_VTD_REG 0x11000940

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 banktype : 2;

                            /* Bits[1:0], Access Type=RO, default=0x00000001*/

                            /*
                               Specifies the type of Bank Decoder. Valid values
                               are:[br] 00b: Type 0 Bank - 16 Bytes[br] 01b:
                               Type 1 Bank - 64 Bytes[br] 10b: reserved[br]
                               11b: Subtractive Decode Bank - 8 Bytes
                            */
    UINT8 force_config_type0 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               If this bit is set, MS2IOSF sends any
                               configuration request that matches this bank as
                               type 0. Enables support for SR-IOV RCIEP.
                            */
    UINT8 bank_decode_enable : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               1b: The bank decoders are enabled.[br] 0b: The
                               bank decoders are disabled.
                            */
    UINT8 shadow_enable : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               1b: Outbound configuration requests that target
                               the Device/Function specified by this bank on
                               the RootBus will be snarfed to the shadow copy
                               of decode registers.[br] 0b: Outbound
                               configuration requests will not be snarfed. BIOS
                               must program the decode registers to allow this
                               bank to decode to the bank's specified target.
                            */
    UINT8 mc_bank_decode_enable : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               1b: The Multicast bank decoders are enabled.[br]
                               0b: The Multicast bank decoders are disabled.
                            */
    UINT8 mc_shadow_enable : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               1b: Outbound configuration requests that target
                               the Multicast registers of the Device/Function
                               specified by this bank on the RootBus will be
                               snarfed to the shadow copy of decode
                               registers.[br] 0b: Outbound configuration
                               requests to the Multicast registers of the
                               Device/Function will not be snarfed. BIOS must
                               program the decode registers to allow this bank
                               to decode to the bank's specified target.
                            */
    UINT8 function_mask : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               When set, causes the DevFunc.Function field to
                               become ignored. Any configuration request that
                               matches the DevFunc.Device field with any
                               function value will be a match for this decoder
                               bank.
                            */

  } Bits;
  UINT8 Data;

} BANK5_BANKCTRL_IIO_VTD_STRUCT;

/* BANK5_DEVFUNC_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x800941)                                                        */
/*      SPRB0 (0x800941)                                                        */
/*      SPRHBM (0x800941)                                                       */
/*      SPRC0 (0x800941)                                                        */
/*      SPRMCC (0x800941)                                                       */
/*      SPRUCC (0x800941)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* PCI Device and Function number of the IOSF agent being shadowed
*/


#define BANK5_DEVFUNC_IIO_VTD_REG 0x11000941

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 func : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target Function Number on the
                               RootBus that this bank decodes for.
                            */
    UINT8 device : 5;

                            /* Bits[7:3], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target Device Number on the
                               RootBus that this bank decodes for.
                            */

  } Bits;
  UINT8 Data;

} BANK5_DEVFUNC_IIO_VTD_STRUCT;

/* BANK5_DESTID_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x10800942)                                                      */
/*      SPRB0 (0x10800942)                                                      */
/*      SPRHBM (0x10800942)                                                     */
/*      SPRC0 (0x10800942)                                                      */
/*      SPRMCC (0x10800942)                                                     */
/*      SPRUCC (0x10800942)                                                     */
/* Register default value on SPRA0: 0x00002188                                  */
/* Register default value on SPRB0: 0x00002188                                  */
/* Register default value on SPRHBM: 0x00002188                                 */
/* Register default value on SPRC0: 0x00002188                                  */
/* Register default value on SPRMCC: 0x00002188                                 */
/* Register default value on SPRUCC: 0x00002188                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* The lower 14 bits of this register comprise the PSF-required source decode information that MS2IOSF provides on the tdest_id signal when presenting the request to PSF (note exception for MS2IOSF_Port).
*/


#define BANK5_DESTID_IIO_VTD_REG 0x11010942

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 psf_channel : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies which IOSF channel to send requests
                               that hit this bank decoder ranges. This field is
                               used for IOSF Channel and also as part of the
                               IOSF Destination ID.
                            */
    UINT16 psf_port : 3;

                            /* Bits[5:3], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF port to send requests that
                               hit this bank decoder ranges.
                            */
    UINT16 ms2iosf_port : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the MS2IOSF port (left = 0, right = 1)
                               where to send requests that hit this bank
                               decoder. The logic should mask this bit to zero
                               before sending the 14-bit PSF source decode
                               header out. Technically, this is the top bit of
                               the PSF port ID, but MS2IOSF is using it for
                               internal purposes.
                            */
    UINT16 psf_port_group : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF port group to send requests
                               that hit this bank decoder ranges.
                            */
    UINT16 psf_id : 4;

                            /* Bits[11:8], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF to send requests that hit
                               this bank decoder ranges.
                            */
    UINT16 psf_decode_mode : 2;

                            /* Bits[13:12], Access Type=RW, default=0x00000002*/

                            /*
                               Specifies the PSF Destination ID decode mode
                               being used.[br] 00b: Fabric Decode[br] 01b:
                               Implicit Decode[br] 10b: Source Decode to
                               PSF_ID:Port_Group:Port:Channel[br] 11b: Source
                               Decode to PSF_ID, use Fabric Decode from there
                               onward (StF)
                            */
    UINT16 ms2iosf_channel : 2;

                            /* Bits[15:14], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies to which IOSF channel to send requests
                               that hit this bank decoder. Note the difference
                               between this channel ID and the channel ID
                               provided in the source decode header below. The
                               former specifies the channel ID on the MS2IOSF
                               interface itself whereas the latter specifies
                               the channel ID on the PSF interface to the
                               endpoint. MS2IOSF has four channels for each of
                               its two ports.
                            */

  } Bits;
  UINT16 Data;

} BANK5_DESTID_IIO_VTD_STRUCT;

/* BANK5_DEVCON_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x10800944)                                                      */
/*      SPRB0 (0x10800944)                                                      */
/*      SPRHBM (0x10800944)                                                     */
/*      SPRC0 (0x10800944)                                                      */
/*      SPRMCC (0x10800944)                                                     */
/*      SPRUCC (0x10800944)                                                     */
/* Register default value on SPRA0: 0x000000E0                                  */
/* Register default value on SPRB0: 0x000000E0                                  */
/* Register default value on SPRHBM: 0x000000E0                                 */
/* Register default value on SPRC0: 0x000000E0                                  */
/* Register default value on SPRMCC: 0x000000E0                                 */
/* Register default value on SPRUCC: 0x000000E0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Shadowed PCI Express Device Control
*/


#define BANK5_DEVCON_IIO_VTD_REG 0x11010944

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 rsvd : 5;

                            /* Bits[4:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 max_payload_size : 3;

                            /* Bits[7:5], Access Type=RW, default=0x00000007*/

                            /*
                               Max_Payload_Size[br] Indicates the largest
                               packet size supported by the target decoded by
                               this bank. [br] Defined encodings for this field
                               are:[br] 000b 128 bytes max payload size[br]
                               001b 256 bytes max payload size[br] 010b 512
                               bytes max payload size[br] 011b 1024 bytes max
                               payload size[br] 100b 2048 bytes max payload
                               size[br] 101b 4096 bytes max payload size[br]
                               110b Reserved[br] 111b 64 address aligned bytes
                               max payload size[br]
                            */
    UINT16 rsvd_8 : 7;

                            /* Bits[14:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 initiate_flr : 1;

                            /* Bits[15:15], Access Type=RO, default=0x00000000*/

                            /*
                               [br] Initiate Function Level Reset. A write of
                               '1' to the DEVCON[15] field of the device this
                               bank shadows, will cause all shadow-enabled
                               registers for this bank to reset. DEVCON[15]
                               maps to this field. This bit self-clears.[br]
                            */

  } Bits;
  UINT16 Data;

} BANK5_DEVCON_IIO_VTD_STRUCT;

/* BANK5_DEVCON_OFFSET_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x800947)                                                        */
/*      SPRB0 (0x800947)                                                        */
/*      SPRHBM (0x800947)                                                       */
/*      SPRC0 (0x800947)                                                        */
/*      SPRMCC (0x800947)                                                       */
/*      SPRUCC (0x800947)                                                       */
/* Register default value on SPRA0: 0x00000048                                  */
/* Register default value on SPRB0: 0x00000048                                  */
/* Register default value on SPRHBM: 0x00000048                                 */
/* Register default value on SPRC0: 0x00000048                                  */
/* Register default value on SPRMCC: 0x00000048                                 */
/* Register default value on SPRUCC: 0x00000048                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Offset of the PCI Express Device Control Register in the IOSF agent's configuration header
*/


#define BANK5_DEVCON_OFFSET_IIO_VTD_REG 0x11000947

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 devcon_shadowen : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               If this bit and DevCon_Master are set, MS2IOSF
                               shadows writes to the offset programmed above
                               into its copy of the device control register.
                               BIOS must clear this bit for devices that do not
                               have a device control register. If shadowing is
                               disabled for this bank, this bit has no effect.
                            */
    UINT8 devcon_master : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Indicates whether or not this shadow copy is the
                               master copy. For devices that use multiple bank
                               decoders, SW is required to enable one of them
                               as a master. HW shadowing only updates the
                               master copy. Likewise, HW only uses the master
                               copy as input to other logic such as completion
                               combining. For devices that use only one bank
                               decoder, SW is required to set this bit.
                            */
    UINT8 devcon_offset : 6;

                            /* Bits[7:2], Access Type=RW, default=0x00000012*/

                            /*
                               Configuration space register offset for the
                               Device control register. This is a DWord offset
                               (left-shift this value by two to get byte
                               offset). Note that although this points to the
                               lowest order byte of the register, only the
                               upper byte of the register is captured by this
                               bank, which is at this offset + 1h.
                            */

  } Bits;
  UINT8 Data;

} BANK5_DEVCON_OFFSET_IIO_VTD_STRUCT;

/* BANK5_PCICMD_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x10800948)                                                      */
/*      SPRB0 (0x10800948)                                                      */
/*      SPRHBM (0x10800948)                                                     */
/*      SPRC0 (0x10800948)                                                      */
/*      SPRMCC (0x10800948)                                                     */
/*      SPRUCC (0x10800948)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK5_PCICMD_IIO_VTD_REG 0x11010948

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 iose : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               I/O Space Enable (for outbound bank decode)[br]
                               1: Enables bank IOBAS/IOLIM I/O range[br] 0:
                               Disables bank IOBAS/IOLIM I/O range
                            */
    UINT16 mse : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Memory Space Enable (for outbound bank
                               decode)[br] 1: Enables bank MBAS/MLIM and
                               PBAS/PLIM memory ranges[br] 0: Disables bank
                               MBAS/MLIM and PBAS/PLIM memory ranges
                            */
    UINT16 bme : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /* Bme */
    UINT16 sce : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000000*/

                            /* Sce */
    UINT16 mwie : 1;

                            /* Bits[4:4], Access Type=RO, default=0x00000000*/

                            /* Mwie */
    UINT16 vga_palette_snoop_enable : 1;

                            /* Bits[5:5], Access Type=RO, default=0x00000000*/

                            /* Vga Palette Snoop Enable */
    UINT16 perre : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /* Perre */
    UINT16 idsel_stepping_wait_cycle_control : 1;

                            /* Bits[7:7], Access Type=RO, default=0x00000000*/

                            /* Idsel Stepping Wait Cycle Control */
    UINT16 serre : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /* Serre */
    UINT16 fast_back_to_back_enable : 1;

                            /* Bits[9:9], Access Type=RO, default=0x00000000*/

                            /* Fast Back To Back Enable */
    UINT16 rsvd : 6;

                            /* Bits[15:10], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT16 Data;

} BANK5_PCICMD_IIO_VTD_STRUCT;

/* BANK5_SECBUS_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x80094d)                                                        */
/*      SPRB0 (0x80094d)                                                        */
/*      SPRHBM (0x80094d)                                                       */
/*      SPRC0 (0x80094d)                                                        */
/*      SPRMCC (0x80094d)                                                       */
/*      SPRUCC (0x80094d)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK5_SECBUS_IIO_VTD_REG 0x1100094D

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 sbn : 8;

                            /* Bits[7:0], Access Type=RW, default=0x00000000*/

                            /* First bus of a bus range below a PCI Bridge */

  } Bits;
  UINT8 Data;

} BANK5_SECBUS_IIO_VTD_STRUCT;

/* BANK5_SUBBUS_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x80094e)                                                        */
/*      SPRB0 (0x80094e)                                                        */
/*      SPRHBM (0x80094e)                                                       */
/*      SPRC0 (0x80094e)                                                        */
/*      SPRMCC (0x80094e)                                                       */
/*      SPRUCC (0x80094e)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK5_SUBBUS_IIO_VTD_REG 0x1100094E

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 subordinate_bus_number : 8;

                            /* Bits[7:0], Access Type=RW, default=0x00000000*/

                            /* Last bus of a bus range below a PCI Bridge */

  } Bits;
  UINT8 Data;

} BANK5_SUBBUS_IIO_VTD_STRUCT;

/* BANK5_IOBAS_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x800950)                                                        */
/*      SPRB0 (0x800950)                                                        */
/*      SPRHBM (0x800950)                                                       */
/*      SPRC0 (0x800950)                                                        */
/*      SPRMCC (0x800950)                                                       */
/*      SPRUCC (0x800950)                                                       */
/* Register default value on SPRA0: 0x000000F0                                  */
/* Register default value on SPRB0: 0x000000F0                                  */
/* Register default value on SPRHBM: 0x000000F0                                 */
/* Register default value on SPRC0: 0x000000F0                                  */
/* Register default value on SPRMCC: 0x000000F0                                 */
/* Register default value on SPRUCC: 0x000000F0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK5_IOBAS_IIO_VTD_REG 0x11000950

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 i_o_address_capability : 2;

                            /* Bits[1:0], Access Type=RO, default=0x00000000*/

                            /* MS2IOSF supports only 16 bit addressing */
    UINT8 more_i_o_base_address : 2;

                            /* Bits[3:2], Access Type=RW/L, default=0x00000000*/

                            /*
                               When EN1K is set in the IIOMISCCTRL register,
                               these bits become RW and allow for 1K
                               granularity of I/O addressing, otherwise these
                               are RO.[br] Lock: !IIOMISCCTRL.EN1K
                            */
    UINT8 i_o_base_address : 4;

                            /* Bits[7:4], Access Type=RW, default=0x0000000F*/

                            /*
                               Corresponds to A[15:12] of the I/O base address
                               of the PCI Express port. See also the IOLIM
                               register description.
                            */

  } Bits;
  UINT8 Data;

} BANK5_IOBAS_IIO_VTD_STRUCT;

/* BANK5_IOLIM_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x800951)                                                        */
/*      SPRB0 (0x800951)                                                        */
/*      SPRHBM (0x800951)                                                       */
/*      SPRC0 (0x800951)                                                        */
/*      SPRMCC (0x800951)                                                       */
/*      SPRUCC (0x800951)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK5_IOLIM_IIO_VTD_REG 0x11000951

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 i_o_address_limit_capability : 2;

                            /* Bits[1:0], Access Type=RO, default=0x00000000*/

                            /* MS2IOSF supports only 16 bit addressing */
    UINT8 more_i_o_address_limit : 2;

                            /* Bits[3:2], Access Type=RW/L, default=0x00000000*/

                            /*
                               When EN1K is set in the IIOMISCCTRL register,
                               these bits become RW and allow for 1K
                               granularity of I/O addressing, otherwise these
                               are RO.[br] Lock: !IIOMISCCTRL.EN1K
                            */
    UINT8 i_o_address_limit : 4;

                            /* Bits[7:4], Access Type=RW, default=0x00000000*/

                            /*
                               Corresponds to A[15:12] of the I/O limit address
                               of the PCI Express port.The I/O Base and I/O
                               Limit registers define an address range that is
                               used by the PCI Express port to determine when
                               to forward I/O transactions from one interface
                               to the other using the following formula:[br]
                               IO_BASE <= A[15:12] <=IO_LIMIT[br] The bottom of
                               the defined I/O address range will be aligned to
                               a 4KB boundary (1KB if EN1K bit is set. Refer to
                               the IIOMISCCTRL register for definition of EN1K
                               bit) while the top of the region specified by
                               IO_LIMIT will be one less than a 4 KB (1KB if
                               EN1K bit is set) multiple.[br] Notes:[br] -
                               Setting the I/O limit less than I/O base
                               disables the I/O range altogether.[br] - General
                               the I/O base and limit registers won't be
                               programmed by software without clearing the IOSE
                               bit first.
                            */

  } Bits;
  UINT8 Data;

} BANK5_IOLIM_IIO_VTD_STRUCT;

/* BANK5_MBAS_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x10800954)                                                      */
/*      SPRB0 (0x10800954)                                                      */
/*      SPRHBM (0x10800954)                                                     */
/*      SPRC0 (0x10800954)                                                      */
/*      SPRMCC (0x10800954)                                                     */
/*      SPRUCC (0x10800954)                                                     */
/* Register default value on SPRA0: 0x0000FFF0                                  */
/* Register default value on SPRB0: 0x0000FFF0                                  */
/* Register default value on SPRHBM: 0x0000FFF0                                 */
/* Register default value on SPRC0: 0x0000FFF0                                  */
/* Register default value on SPRMCC: 0x0000FFF0                                 */
/* Register default value on SPRUCC: 0x0000FFF0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK5_MBAS_IIO_VTD_REG 0x11010954

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 memory_base_address : 12;

                            /* Bits[15:4], Access Type=RW, default=0x00000FFF*/

                            /*
                               Corresponds to A[31:20] of the 32 bit memory
                               window's base address of the PCI Express port.
                               See also the MLIM register description.
                            */

  } Bits;
  UINT16 Data;

} BANK5_MBAS_IIO_VTD_STRUCT;

/* BANK5_MLIM_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x10800956)                                                      */
/*      SPRB0 (0x10800956)                                                      */
/*      SPRHBM (0x10800956)                                                     */
/*      SPRC0 (0x10800956)                                                      */
/*      SPRMCC (0x10800956)                                                     */
/*      SPRUCC (0x10800956)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK5_MLIM_IIO_VTD_REG 0x11010956

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 memory_limit_address : 12;

                            /* Bits[15:4], Access Type=RW, default=0x00000000*/

                            /*
                               Corresponds to A[31:20] of the 32 bit memory
                               window's limit address that corresponds to the
                               upper limit of the range of memory accesses that
                               will be passed by the PCI Express bridge.The
                               Memory Base and Memory Limit registers define a
                               memory mapped I/O non-prefetchable address range
                               (32-bit addresses) and the MS2IOSF directs
                               accesses in this range to the PCI Express port
                               based on the following formula:[br] MEMORY_BASE
                               <= A[31:20] <= MEMORY_LIMIT[br] The upper 12
                               bits of both the Memory Base and Memory Limit
                               registers are read/write and corresponds to the
                               upper 12 address bits, A[31:20] of 32-bit
                               addresses. Thus, the bottom of the defined
                               memory address range will be aligned to a 1 MB
                               boundary and the top of the defined memory
                               address range will be one less than a 1 MB
                               boundary. Refer to Chapter 5, 'Address Map,'
                               (IOH Platform Architecture Specification) for
                               further details on decoding.[br] Notes:[br] -
                               Setting the memory limit less than memory base
                               disables the 32-bit memory range altogether.[br]
                               - Note that in general the memory base and limit
                               registers won't be programmed by software
                               without clearing the MSE bit first.
                            */

  } Bits;
  UINT16 Data;

} BANK5_MLIM_IIO_VTD_STRUCT;

/* BANK5_PBAS_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x10800958)                                                      */
/*      SPRB0 (0x10800958)                                                      */
/*      SPRHBM (0x10800958)                                                     */
/*      SPRC0 (0x10800958)                                                      */
/*      SPRMCC (0x10800958)                                                     */
/*      SPRUCC (0x10800958)                                                     */
/* Register default value on SPRA0: 0x0000FFF1                                  */
/* Register default value on SPRB0: 0x0000FFF1                                  */
/* Register default value on SPRHBM: 0x0000FFF1                                 */
/* Register default value on SPRC0: 0x0000FFF1                                  */
/* Register default value on SPRMCC: 0x0000FFF1                                 */
/* Register default value on SPRUCC: 0x0000FFF1                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK5_PBAS_IIO_VTD_REG 0x11010958

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 prefetchable_memory_base_address_capability : 4;

                            /* Bits[3:0], Access Type=RO, default=0x00000001*/

                            /*
                               MS2IOSF sets this bit to 01h to indicate 64bit
                               capability.
                            */
    UINT16 prefetchable_memory_base_address : 12;

                            /* Bits[15:4], Access Type=RW, default=0x00000FFF*/

                            /*
                               Corresponds to A[31:20] of the prefetchable
                               memory address range's base address of the PCI
                               Express port. See also the PLIMU register
                               description.
                            */

  } Bits;
  UINT16 Data;

} BANK5_PBAS_IIO_VTD_STRUCT;

/* BANK5_PLIM_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x1080095a)                                                      */
/*      SPRB0 (0x1080095a)                                                      */
/*      SPRHBM (0x1080095a)                                                     */
/*      SPRC0 (0x1080095a)                                                      */
/*      SPRMCC (0x1080095a)                                                     */
/*      SPRUCC (0x1080095a)                                                     */
/* Register default value on SPRA0: 0x00000001                                  */
/* Register default value on SPRB0: 0x00000001                                  */
/* Register default value on SPRHBM: 0x00000001                                 */
/* Register default value on SPRC0: 0x00000001                                  */
/* Register default value on SPRMCC: 0x00000001                                 */
/* Register default value on SPRUCC: 0x00000001                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK5_PLIM_IIO_VTD_REG 0x1101095A

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 prefetchable_memory_limit_address_capability : 4;

                            /* Bits[3:0], Access Type=RO, default=0x00000001*/

                            /*
                               Indicates the addressing capability of the
                               prefetchable range.[br] 0h: 32-bit[br] 1h:
                               64-bit[br] All other values: reserved
                            */
    UINT16 prefetchable_memory_limit_address : 12;

                            /* Bits[15:4], Access Type=RW, default=0x00000000*/

                            /*
                               Corresponds to A[31:20] of the prefetchable
                               memory address range's limit address of the PCI
                               Express port. See also the PLIMU register
                               description.
                            */

  } Bits;
  UINT16 Data;

} BANK5_PLIM_IIO_VTD_STRUCT;

/* BANK5_PBASU_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x2080095c)                                                      */
/*      SPRB0 (0x2080095c)                                                      */
/*      SPRHBM (0x2080095c)                                                     */
/*      SPRC0 (0x2080095c)                                                      */
/*      SPRMCC (0x2080095c)                                                     */
/*      SPRUCC (0x2080095c)                                                     */
/* Register default value on SPRA0: 0xFFFFFFFF                                  */
/* Register default value on SPRB0: 0xFFFFFFFF                                  */
/* Register default value on SPRHBM: 0xFFFFFFFF                                 */
/* Register default value on SPRC0: 0xFFFFFFFF                                  */
/* Register default value on SPRMCC: 0xFFFFFFFF                                 */
/* Register default value on SPRUCC: 0xFFFFFFFF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK5_PBASU_IIO_VTD_REG 0x1102095C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 prefetchable_upper_32_bit_memory_base_address : 32;

                            /* Bits[31:0], Access Type=RW, default=0xFFFFFFFF*/

                            /*
                               Corresponds to A[63:32] of the prefetchable
                               memory address range's base address of the PCI
                               Express port. See also the PLIMU register
                               description.
                            */

  } Bits;
  UINT32 Data;

} BANK5_PBASU_IIO_VTD_STRUCT;

/* BANK5_PLIMU_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x20800960)                                                      */
/*      SPRB0 (0x20800960)                                                      */
/*      SPRHBM (0x20800960)                                                     */
/*      SPRC0 (0x20800960)                                                      */
/*      SPRMCC (0x20800960)                                                     */
/*      SPRUCC (0x20800960)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK5_PLIMU_IIO_VTD_REG 0x11020960

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 prefetchable_upper_32_bit_memory_limit_address : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               Corresponds to A[63:32] of the prefetchable
                               memory address range's limit address of the PCI
                               Express port.The Prefetchable Memory Base and
                               Memory Limit registers define a memory mapped
                               I/O prefetchable address range (64-bit
                               addresses) which is used by the PCI Express
                               bridge to determine when to forward memory
                               transactions based on the following formula:[br]
                               PREFETCH_MEMORY_BASE_UPPER::
                               PREFETCH_MEMORY_BASE <= A[63:20] <= PREFETCH_MEM
                               ORY_LIMIT_UPPER::PREFETCH_MEMORY_LIMIT[br] The
                               upper 12 bits of both the Prefetchable Memory
                               Base and Memory Limit registers are read/write
                               and corresponds to the upper 12 address bits,
                               A[31:20] of 32-bit addresses. The bottom of the
                               defined memory address range will be aligned to
                               a 1 MB boundary and the top of the defined
                               memory address range will be one less than a 1
                               MB boundary.[br] The bottom 4 bits of both the
                               Prefetchable Memory Base and Prefetchable Memory
                               Limit registers are read-only, contain the same
                               value, and encode whether or not the bridge
                               supports 64-bit addresses.[br] If these four
                               bits have the value 0h, then the bridge supports
                               only 32 bit addresses.[br] If these four bits
                               have the value 1h, then the bridge supports
                               64-bit addresses and the Prefetchable Base Upper
                               32 Bits and Prefetchable Limit Upper 32 Bits
                               registers hold the rest of the 64-bit
                               prefetchable base and limit addresses
                               respectively.[br] Setting the prefetchable
                               memory limit less than prefetchable memory base
                               disables the 64-bit prefetchable memory range
                               altogether.[br] Notes:[br] - In general the
                               memory base and limit registers won't be
                               programmed by software without clearing the MSE
                               bit first.
                            */

  } Bits;
  UINT32 Data;

} BANK5_PLIMU_IIO_VTD_STRUCT;

/* BANK5_BCTRL_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x10800966)                                                      */
/*      SPRB0 (0x10800966)                                                      */
/*      SPRHBM (0x10800966)                                                     */
/*      SPRC0 (0x10800966)                                                      */
/*      SPRMCC (0x10800966)                                                     */
/*      SPRUCC (0x10800966)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK5_BCTRL_IIO_VTD_REG 0x11010966

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 perre : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Perre */
    UINT16 serre : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /* Serre */
    UINT16 isaen : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               ISA Enable[br] Modifies the response by the root
                               port to an I/O access issued by the core that
                               target ISA I/O addresses. This applies only to
                               I/O addresses that are enabled by the IOBASE and
                               IOLIM registers.[br] 1: The root port will not
                               forward to PCI Express any I/O transactions
                               addressing the last 768 bytes in each 1KB block
                               even if the addresses are within the range
                               defined by the IOBASE and IOLIM registers.[br]
                               0: All addresses defined by the IOBASE and IOLIM
                               for core issued I/O transactions will be mapped
                               to PCI Express.
                            */
    UINT16 vgaen : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               VGA Enable[br] Controls the routing of CPU
                               initiated transactions targeting VGA compatible
                               I/O and memory address ranges. This bit must
                               only be set for one p2p port in the entire
                               system.[br] Notes:[br] - When Device 3 Function
                               0 is in NTB mode, then the Device 3 Function 0
                               versoin of this bit must be left at default
                               value. VGA compatible devices are not supported
                               on the secondary side of the NTB.
                            */
    UINT16 vga16b : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               VGA 16-bit decode[br] This bit enables the
                               virtual PCI-to-PCI bridge to provide 16-bit
                               decoding of VGA I/O address precluding the
                               decoding of alias addresses every 1 KB.[br] 0:
                               execute 10-bit address decodes on VGA I/O
                               accesses.[br] 1: execute 16-bit address decodes
                               on VGA I/O accesses.[br] Notes:[br] - This bit
                               only has meaning if bit 3 of this register is
                               also set to 1, enabling VGA I/O decoding and
                               forwarding by the bridge.[br] - Refer to PCI-PCI
                               Bridge Specification Revision 1.2 for further
                               details of this bit behavior.
                            */
    UINT16 rsvd : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 sbr : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               1: Setting this bit triggers a hot reset on the
                               link for the corresponding PCI Express port and
                               the PCI Express hierarchy domain subordinate to
                               the port. This sends the LTSSM into the Training
                               (or Link) Control Reset state, which necessarily
                               implies a reset to the downstream device and all
                               subordinate devices. The transaction layer
                               corresponding to port will be emptied by virtue
                               of the link going down when this bit is set.
                               This means that in the outbound direction, all
                               posted transactions are dropped and non-posted
                               transactions are sent a UR response. In the
                               inbound direction, completions for inbound NP
                               requests are dropped when they arrive. Inbound
                               posted writes are retired normally.Note also
                               that a secondary bus reset will not reset the
                               virtual PCI-to-PCI bridge configuration
                               registers of the targeted PCI Express port.[br]
                               0: No reset happens on the PCI Express port.
                            */
    UINT16 rsvd_7 : 9;

                            /* Bits[15:7], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT16 Data;

} BANK5_BCTRL_IIO_VTD_STRUCT;

/* BANK5_BANKCTRL2_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x10800968)                                                      */
/*      SPRB0 (0x10800968)                                                      */
/*      SPRHBM (0x10800968)                                                     */
/*      SPRC0 (0x10800968)                                                      */
/*      SPRMCC (0x10800968)                                                     */
/*      SPRUCC (0x10800968)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the decode logic associated with an arbitrary type 1 IOSF agent (i.e. PCI bridge)
*/


#define BANK5_BANKCTRL2_IIO_VTD_REG 0x11010968

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 devfunc_mask : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               When set, indicates to HW that the contents of
                               devfunc register for the bank are invalid, and
                               should not be used. Since this field is relevant
                               only for type1 bank, setting it essentially
                               ensures that only type1 cfg traffic will be
                               routed based on the secondary and subordinate
                               bus range programmed within this bank.
                            */
    UINT16 rsvd : 15;

                            /* Bits[15:1], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT16 Data;

} BANK5_BANKCTRL2_IIO_VTD_STRUCT;

/* BANK5_MCAST_CTRL_IIO_VTD_REG supported on:                                   */
/*      SPRA0 (0x1080096e)                                                      */
/*      SPRB0 (0x1080096e)                                                      */
/*      SPRHBM (0x1080096e)                                                     */
/*      SPRC0 (0x1080096e)                                                      */
/*      SPRMCC (0x1080096e)                                                     */
/*      SPRUCC (0x1080096e)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the Dualcast Control Register (Dualcast is a specialized version of PCIe Multicast used in conjunction with the Non-Transparent Bridge). The fields in this register mirror the fields in the PCIe spec-defined Multicast Control Register (see section 7.21.3 of the PCIe 3.0 spec).
*/


#define BANK5_MCAST_CTRL_IIO_VTD_REG 0x1101096E

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 mc_num_group : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000000*/

                            /*
                               This field only supports and implements bits
                               [3:0]. Bits [5:4] are not supported.
                            */
    UINT16 rsvd_mc_ctrl_14_6 : 9;

                            /* Bits[14:6], Access Type=RO, default=0x00000000*/

                            /* Rsvd Mc Ctrl 14 6 */
    UINT16 mc_enable : 1;

                            /* Bits[15:15], Access Type=RW/L, default=0x00000000*/

                            /* Mc Enable */

  } Bits;
  UINT16 Data;

} BANK5_MCAST_CTRL_IIO_VTD_STRUCT;

/* BANK5_MCAST_BASE_N0_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x20800970)                                                      */
/*      SPRB0 (0x20800970)                                                      */
/*      SPRHBM (0x20800970)                                                     */
/*      SPRC0 (0x20800970)                                                      */
/*      SPRMCC (0x20800970)                                                     */
/*      SPRUCC (0x20800970)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the Dualcast Base Address Register (Dualcast is a specialized version of PCIe Multicast used in conjunction with the Non-Transparent Bridge). The fields in this register mirror the fields in the PCIe spec-defined MC_Base_Address Register (see section 7.21.4 of the PCIe 3.0 spec).
*/


#define BANK5_MCAST_BASE_N0_IIO_VTD_REG 0x11020970

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mc_index_position : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000000*/

                            /* Mc Index Position */
    UINT32 rsvd_mc_base_11_6 : 6;

                            /* Bits[11:6], Access Type=RO, default=0x00000000*/

                            /* Rsvd Mc Base 11 6 */
    UINT32 mc_base_address : 20;

                            /* Bits[31:12], Access Type=RW, default=0x00000000*/

                            /* Mc Base Address */

  } Bits;
  UINT32 Data;

} BANK5_MCAST_BASE_N0_IIO_VTD_STRUCT;

/* BANK5_MCAST_BASE_N1_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x20800974)                                                      */
/*      SPRB0 (0x20800974)                                                      */
/*      SPRHBM (0x20800974)                                                     */
/*      SPRC0 (0x20800974)                                                      */
/*      SPRMCC (0x20800974)                                                     */
/*      SPRUCC (0x20800974)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the Dualcast Base Address Register (Dualcast is a specialized version of PCIe Multicast used in conjunction with the Non-Transparent Bridge). The fields in this register mirror the fields in the PCIe spec-defined MC_Base_Address Register (see section 7.21.4 of the PCIe 3.0 spec).
*/


#define BANK5_MCAST_BASE_N1_IIO_VTD_REG 0x11020974

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mc_base_address : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /* Mc Base Address */

  } Bits;
  UINT32 Data;

} BANK5_MCAST_BASE_N1_IIO_VTD_STRUCT;

/* BANK5_MCAST_RCV_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x10800978)                                                      */
/*      SPRB0 (0x10800978)                                                      */
/*      SPRHBM (0x10800978)                                                     */
/*      SPRC0 (0x10800978)                                                      */
/*      SPRMCC (0x10800978)                                                     */
/*      SPRUCC (0x10800978)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the Dualcast Receive Register (Dualcast is a specialized version of PCIe Multicast used in conjunction with the Non-Transparent Bridge). The fields in this register mirror the fields in the PCIe spec-defined MC_Receive Register (see section 7.21.5 of the PCIe 3.0 spec).
*/


#define BANK5_MCAST_RCV_IIO_VTD_REG 0x11010978

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 mc_rcv : 16;

                            /* Bits[15:0], Access Type=RW, default=0x00000000*/

                            /* Mc Rcv */

  } Bits;
  UINT16 Data;

} BANK5_MCAST_RCV_IIO_VTD_STRUCT;

/* BANK5_PMCSR_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x2080097c)                                                      */
/*      SPRB0 (0x2080097c)                                                      */
/*      SPRHBM (0x2080097c)                                                     */
/*      SPRC0 (0x2080097c)                                                      */
/*      SPRMCC (0x2080097c)                                                     */
/*      SPRUCC (0x2080097c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the PCIe Power Management Capability Register in the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK5_PMCSR_IIO_VTD_REG 0x1102097C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 power_state : 2;

                            /* Bits[1:0], Access Type=RW, default=0x00000000*/

                            /*
                               This 2-bit field is used to determine the
                               current power state of the function and to set a
                               new power state as well.[br] 00: D0[br] 01:
                               D1[br] 10: D2[br] 11: D3_hot[br] All devices
                               will respond to only Type 0 configuration
                               transactions (targeting the device's
                               configuration space itself) when in D3hot state
                               (root port will not forward Type 1/0
                               transactions to the downstream link) and will
                               not respond to memory/IO transactions (i.e.
                               D3hot state is equivalent to MSE/IOSE bits being
                               clear) as target and will not generate any
                               memory/IO/configuration transactions as
                               initiator on the primary bus (messages are still
                               allowed to pass through).[br] WARNING: MS2IOSF
                               hardware does NOT block any requests targeting
                               the device when the device is not in D0. The
                               IOSF device must be robust enough to handle
                               requests in non-D0 power states. In addition,
                               software should not rely on the accuracy of this
                               shadow register, but instead read the actual
                               PMCSR of the device.
                            */
    UINT32 rsvd : 30;

                            /* Bits[31:2], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} BANK5_PMCSR_IIO_VTD_STRUCT;

/* BANK6_BANKCTRL_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x800980)                                                        */
/*      SPRB0 (0x800980)                                                        */
/*      SPRHBM (0x800980)                                                       */
/*      SPRC0 (0x800980)                                                        */
/*      SPRMCC (0x800980)                                                       */
/*      SPRUCC (0x800980)                                                       */
/* Register default value on SPRA0: 0x00000081                                  */
/* Register default value on SPRB0: 0x00000081                                  */
/* Register default value on SPRHBM: 0x00000081                                 */
/* Register default value on SPRC0: 0x00000081                                  */
/* Register default value on SPRMCC: 0x00000081                                 */
/* Register default value on SPRUCC: 0x00000081                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the source decode logic associated with an arbitrary type 1 IOSF agent (i.e. PCI bridge)
*/


#define BANK6_BANKCTRL_IIO_VTD_REG 0x11000980

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 banktype : 2;

                            /* Bits[1:0], Access Type=RO, default=0x00000001*/

                            /*
                               Specifies the type of Bank Decoder. Valid values
                               are:[br] 00b: Type 0 Bank - 16 Bytes[br] 01b:
                               Type 1 Bank - 64 Bytes[br] 10b: reserved[br]
                               11b: Subtractive Decode Bank - 8 Bytes
                            */
    UINT8 force_config_type0 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               If this bit is set, MS2IOSF sends any
                               configuration request that matches this bank as
                               type 0. Enables support for SR-IOV RCIEP.
                            */
    UINT8 bank_decode_enable : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               1b: The bank decoders are enabled.[br] 0b: The
                               bank decoders are disabled.
                            */
    UINT8 shadow_enable : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               1b: Outbound configuration requests that target
                               the Device/Function specified by this bank on
                               the RootBus will be snarfed to the shadow copy
                               of decode registers.[br] 0b: Outbound
                               configuration requests will not be snarfed. BIOS
                               must program the decode registers to allow this
                               bank to decode to the bank's specified target.
                            */
    UINT8 mc_bank_decode_enable : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               1b: The Multicast bank decoders are enabled.[br]
                               0b: The Multicast bank decoders are disabled.
                            */
    UINT8 mc_shadow_enable : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               1b: Outbound configuration requests that target
                               the Multicast registers of the Device/Function
                               specified by this bank on the RootBus will be
                               snarfed to the shadow copy of decode
                               registers.[br] 0b: Outbound configuration
                               requests to the Multicast registers of the
                               Device/Function will not be snarfed. BIOS must
                               program the decode registers to allow this bank
                               to decode to the bank's specified target.
                            */
    UINT8 function_mask : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               When set, causes the DevFunc.Function field to
                               become ignored. Any configuration request that
                               matches the DevFunc.Device field with any
                               function value will be a match for this decoder
                               bank.
                            */

  } Bits;
  UINT8 Data;

} BANK6_BANKCTRL_IIO_VTD_STRUCT;

/* BANK6_DEVFUNC_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x800981)                                                        */
/*      SPRB0 (0x800981)                                                        */
/*      SPRHBM (0x800981)                                                       */
/*      SPRC0 (0x800981)                                                        */
/*      SPRMCC (0x800981)                                                       */
/*      SPRUCC (0x800981)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* PCI Device and Function number of the IOSF agent being shadowed
*/


#define BANK6_DEVFUNC_IIO_VTD_REG 0x11000981

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 func : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target Function Number on the
                               RootBus that this bank decodes for.
                            */
    UINT8 device : 5;

                            /* Bits[7:3], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target Device Number on the
                               RootBus that this bank decodes for.
                            */

  } Bits;
  UINT8 Data;

} BANK6_DEVFUNC_IIO_VTD_STRUCT;

/* BANK6_DESTID_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x10800982)                                                      */
/*      SPRB0 (0x10800982)                                                      */
/*      SPRHBM (0x10800982)                                                     */
/*      SPRC0 (0x10800982)                                                      */
/*      SPRMCC (0x10800982)                                                     */
/*      SPRUCC (0x10800982)                                                     */
/* Register default value on SPRA0: 0x00002188                                  */
/* Register default value on SPRB0: 0x00002188                                  */
/* Register default value on SPRHBM: 0x00002188                                 */
/* Register default value on SPRC0: 0x00002188                                  */
/* Register default value on SPRMCC: 0x00002188                                 */
/* Register default value on SPRUCC: 0x00002188                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* The lower 14 bits of this register comprise the PSF-required source decode information that MS2IOSF provides on the tdest_id signal when presenting the request to PSF (note exception for MS2IOSF_Port).
*/


#define BANK6_DESTID_IIO_VTD_REG 0x11010982

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 psf_channel : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies which IOSF channel to send requests
                               that hit this bank decoder ranges. This field is
                               used for IOSF Channel and also as part of the
                               IOSF Destination ID.
                            */
    UINT16 psf_port : 3;

                            /* Bits[5:3], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF port to send requests that
                               hit this bank decoder ranges.
                            */
    UINT16 ms2iosf_port : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the MS2IOSF port (left = 0, right = 1)
                               where to send requests that hit this bank
                               decoder. The logic should mask this bit to zero
                               before sending the 14-bit PSF source decode
                               header out. Technically, this is the top bit of
                               the PSF port ID, but MS2IOSF is using it for
                               internal purposes.
                            */
    UINT16 psf_port_group : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF port group to send requests
                               that hit this bank decoder ranges.
                            */
    UINT16 psf_id : 4;

                            /* Bits[11:8], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF to send requests that hit
                               this bank decoder ranges.
                            */
    UINT16 psf_decode_mode : 2;

                            /* Bits[13:12], Access Type=RW, default=0x00000002*/

                            /*
                               Specifies the PSF Destination ID decode mode
                               being used.[br] 00b: Fabric Decode[br] 01b:
                               Implicit Decode[br] 10b: Source Decode to
                               PSF_ID:Port_Group:Port:Channel[br] 11b: Source
                               Decode to PSF_ID, use Fabric Decode from there
                               onward (StF)
                            */
    UINT16 ms2iosf_channel : 2;

                            /* Bits[15:14], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies to which IOSF channel to send requests
                               that hit this bank decoder. Note the difference
                               between this channel ID and the channel ID
                               provided in the source decode header below. The
                               former specifies the channel ID on the MS2IOSF
                               interface itself whereas the latter specifies
                               the channel ID on the PSF interface to the
                               endpoint. MS2IOSF has four channels for each of
                               its two ports.
                            */

  } Bits;
  UINT16 Data;

} BANK6_DESTID_IIO_VTD_STRUCT;

/* BANK6_DEVCON_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x10800984)                                                      */
/*      SPRB0 (0x10800984)                                                      */
/*      SPRHBM (0x10800984)                                                     */
/*      SPRC0 (0x10800984)                                                      */
/*      SPRMCC (0x10800984)                                                     */
/*      SPRUCC (0x10800984)                                                     */
/* Register default value on SPRA0: 0x000000E0                                  */
/* Register default value on SPRB0: 0x000000E0                                  */
/* Register default value on SPRHBM: 0x000000E0                                 */
/* Register default value on SPRC0: 0x000000E0                                  */
/* Register default value on SPRMCC: 0x000000E0                                 */
/* Register default value on SPRUCC: 0x000000E0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Shadowed PCI Express Device Control
*/


#define BANK6_DEVCON_IIO_VTD_REG 0x11010984

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 rsvd : 5;

                            /* Bits[4:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 max_payload_size : 3;

                            /* Bits[7:5], Access Type=RW, default=0x00000007*/

                            /*
                               Max_Payload_Size[br] Indicates the largest
                               packet size supported by the target decoded by
                               this bank. [br] Defined encodings for this field
                               are:[br] 000b 128 bytes max payload size[br]
                               001b 256 bytes max payload size[br] 010b 512
                               bytes max payload size[br] 011b 1024 bytes max
                               payload size[br] 100b 2048 bytes max payload
                               size[br] 101b 4096 bytes max payload size[br]
                               110b Reserved[br] 111b 64 address aligned bytes
                               max payload size[br]
                            */
    UINT16 rsvd_8 : 7;

                            /* Bits[14:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 initiate_flr : 1;

                            /* Bits[15:15], Access Type=RO, default=0x00000000*/

                            /*
                               [br] Initiate Function Level Reset. A write of
                               '1' to the DEVCON[15] field of the device this
                               bank shadows, will cause all shadow-enabled
                               registers for this bank to reset. DEVCON[15]
                               maps to this field. This bit self-clears.[br]
                            */

  } Bits;
  UINT16 Data;

} BANK6_DEVCON_IIO_VTD_STRUCT;

/* BANK6_DEVCON_OFFSET_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x800987)                                                        */
/*      SPRB0 (0x800987)                                                        */
/*      SPRHBM (0x800987)                                                       */
/*      SPRC0 (0x800987)                                                        */
/*      SPRMCC (0x800987)                                                       */
/*      SPRUCC (0x800987)                                                       */
/* Register default value on SPRA0: 0x00000048                                  */
/* Register default value on SPRB0: 0x00000048                                  */
/* Register default value on SPRHBM: 0x00000048                                 */
/* Register default value on SPRC0: 0x00000048                                  */
/* Register default value on SPRMCC: 0x00000048                                 */
/* Register default value on SPRUCC: 0x00000048                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Offset of the PCI Express Device Control Register in the IOSF agent's configuration header
*/


#define BANK6_DEVCON_OFFSET_IIO_VTD_REG 0x11000987

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 devcon_shadowen : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               If this bit and DevCon_Master are set, MS2IOSF
                               shadows writes to the offset programmed above
                               into its copy of the device control register.
                               BIOS must clear this bit for devices that do not
                               have a device control register. If shadowing is
                               disabled for this bank, this bit has no effect.
                            */
    UINT8 devcon_master : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Indicates whether or not this shadow copy is the
                               master copy. For devices that use multiple bank
                               decoders, SW is required to enable one of them
                               as a master. HW shadowing only updates the
                               master copy. Likewise, HW only uses the master
                               copy as input to other logic such as completion
                               combining. For devices that use only one bank
                               decoder, SW is required to set this bit.
                            */
    UINT8 devcon_offset : 6;

                            /* Bits[7:2], Access Type=RW, default=0x00000012*/

                            /*
                               Configuration space register offset for the
                               Device control register. This is a DWord offset
                               (left-shift this value by two to get byte
                               offset). Note that although this points to the
                               lowest order byte of the register, only the
                               upper byte of the register is captured by this
                               bank, which is at this offset + 1h.
                            */

  } Bits;
  UINT8 Data;

} BANK6_DEVCON_OFFSET_IIO_VTD_STRUCT;

/* BANK6_PCICMD_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x10800988)                                                      */
/*      SPRB0 (0x10800988)                                                      */
/*      SPRHBM (0x10800988)                                                     */
/*      SPRC0 (0x10800988)                                                      */
/*      SPRMCC (0x10800988)                                                     */
/*      SPRUCC (0x10800988)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK6_PCICMD_IIO_VTD_REG 0x11010988

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 iose : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               I/O Space Enable (for outbound bank decode)[br]
                               1: Enables bank IOBAS/IOLIM I/O range[br] 0:
                               Disables bank IOBAS/IOLIM I/O range
                            */
    UINT16 mse : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Memory Space Enable (for outbound bank
                               decode)[br] 1: Enables bank MBAS/MLIM and
                               PBAS/PLIM memory ranges[br] 0: Disables bank
                               MBAS/MLIM and PBAS/PLIM memory ranges
                            */
    UINT16 bme : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /* Bme */
    UINT16 sce : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000000*/

                            /* Sce */
    UINT16 mwie : 1;

                            /* Bits[4:4], Access Type=RO, default=0x00000000*/

                            /* Mwie */
    UINT16 vga_palette_snoop_enable : 1;

                            /* Bits[5:5], Access Type=RO, default=0x00000000*/

                            /* Vga Palette Snoop Enable */
    UINT16 perre : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /* Perre */
    UINT16 idsel_stepping_wait_cycle_control : 1;

                            /* Bits[7:7], Access Type=RO, default=0x00000000*/

                            /* Idsel Stepping Wait Cycle Control */
    UINT16 serre : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /* Serre */
    UINT16 fast_back_to_back_enable : 1;

                            /* Bits[9:9], Access Type=RO, default=0x00000000*/

                            /* Fast Back To Back Enable */
    UINT16 rsvd : 6;

                            /* Bits[15:10], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT16 Data;

} BANK6_PCICMD_IIO_VTD_STRUCT;

/* BANK6_SECBUS_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x80098d)                                                        */
/*      SPRB0 (0x80098d)                                                        */
/*      SPRHBM (0x80098d)                                                       */
/*      SPRC0 (0x80098d)                                                        */
/*      SPRMCC (0x80098d)                                                       */
/*      SPRUCC (0x80098d)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK6_SECBUS_IIO_VTD_REG 0x1100098D

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 sbn : 8;

                            /* Bits[7:0], Access Type=RW, default=0x00000000*/

                            /* First bus of a bus range below a PCI Bridge */

  } Bits;
  UINT8 Data;

} BANK6_SECBUS_IIO_VTD_STRUCT;

/* BANK6_SUBBUS_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x80098e)                                                        */
/*      SPRB0 (0x80098e)                                                        */
/*      SPRHBM (0x80098e)                                                       */
/*      SPRC0 (0x80098e)                                                        */
/*      SPRMCC (0x80098e)                                                       */
/*      SPRUCC (0x80098e)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK6_SUBBUS_IIO_VTD_REG 0x1100098E

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 subordinate_bus_number : 8;

                            /* Bits[7:0], Access Type=RW, default=0x00000000*/

                            /* Last bus of a bus range below a PCI Bridge */

  } Bits;
  UINT8 Data;

} BANK6_SUBBUS_IIO_VTD_STRUCT;

/* BANK6_IOBAS_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x800990)                                                        */
/*      SPRB0 (0x800990)                                                        */
/*      SPRHBM (0x800990)                                                       */
/*      SPRC0 (0x800990)                                                        */
/*      SPRMCC (0x800990)                                                       */
/*      SPRUCC (0x800990)                                                       */
/* Register default value on SPRA0: 0x000000F0                                  */
/* Register default value on SPRB0: 0x000000F0                                  */
/* Register default value on SPRHBM: 0x000000F0                                 */
/* Register default value on SPRC0: 0x000000F0                                  */
/* Register default value on SPRMCC: 0x000000F0                                 */
/* Register default value on SPRUCC: 0x000000F0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK6_IOBAS_IIO_VTD_REG 0x11000990

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 i_o_address_capability : 2;

                            /* Bits[1:0], Access Type=RO, default=0x00000000*/

                            /* MS2IOSF supports only 16 bit addressing */
    UINT8 more_i_o_base_address : 2;

                            /* Bits[3:2], Access Type=RW/L, default=0x00000000*/

                            /*
                               When EN1K is set in the IIOMISCCTRL register,
                               these bits become RW and allow for 1K
                               granularity of I/O addressing, otherwise these
                               are RO.[br] Lock: !IIOMISCCTRL.EN1K
                            */
    UINT8 i_o_base_address : 4;

                            /* Bits[7:4], Access Type=RW, default=0x0000000F*/

                            /*
                               Corresponds to A[15:12] of the I/O base address
                               of the PCI Express port. See also the IOLIM
                               register description.
                            */

  } Bits;
  UINT8 Data;

} BANK6_IOBAS_IIO_VTD_STRUCT;

/* BANK6_IOLIM_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x800991)                                                        */
/*      SPRB0 (0x800991)                                                        */
/*      SPRHBM (0x800991)                                                       */
/*      SPRC0 (0x800991)                                                        */
/*      SPRMCC (0x800991)                                                       */
/*      SPRUCC (0x800991)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK6_IOLIM_IIO_VTD_REG 0x11000991

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 i_o_address_limit_capability : 2;

                            /* Bits[1:0], Access Type=RO, default=0x00000000*/

                            /* MS2IOSF supports only 16 bit addressing */
    UINT8 more_i_o_address_limit : 2;

                            /* Bits[3:2], Access Type=RW/L, default=0x00000000*/

                            /*
                               When EN1K is set in the IIOMISCCTRL register,
                               these bits become RW and allow for 1K
                               granularity of I/O addressing, otherwise these
                               are RO.[br] Lock: !IIOMISCCTRL.EN1K
                            */
    UINT8 i_o_address_limit : 4;

                            /* Bits[7:4], Access Type=RW, default=0x00000000*/

                            /*
                               Corresponds to A[15:12] of the I/O limit address
                               of the PCI Express port.The I/O Base and I/O
                               Limit registers define an address range that is
                               used by the PCI Express port to determine when
                               to forward I/O transactions from one interface
                               to the other using the following formula:[br]
                               IO_BASE <= A[15:12] <=IO_LIMIT[br] The bottom of
                               the defined I/O address range will be aligned to
                               a 4KB boundary (1KB if EN1K bit is set. Refer to
                               the IIOMISCCTRL register for definition of EN1K
                               bit) while the top of the region specified by
                               IO_LIMIT will be one less than a 4 KB (1KB if
                               EN1K bit is set) multiple.[br] Notes:[br] -
                               Setting the I/O limit less than I/O base
                               disables the I/O range altogether.[br] - General
                               the I/O base and limit registers won't be
                               programmed by software without clearing the IOSE
                               bit first.
                            */

  } Bits;
  UINT8 Data;

} BANK6_IOLIM_IIO_VTD_STRUCT;

/* BANK6_MBAS_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x10800994)                                                      */
/*      SPRB0 (0x10800994)                                                      */
/*      SPRHBM (0x10800994)                                                     */
/*      SPRC0 (0x10800994)                                                      */
/*      SPRMCC (0x10800994)                                                     */
/*      SPRUCC (0x10800994)                                                     */
/* Register default value on SPRA0: 0x0000FFF0                                  */
/* Register default value on SPRB0: 0x0000FFF0                                  */
/* Register default value on SPRHBM: 0x0000FFF0                                 */
/* Register default value on SPRC0: 0x0000FFF0                                  */
/* Register default value on SPRMCC: 0x0000FFF0                                 */
/* Register default value on SPRUCC: 0x0000FFF0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK6_MBAS_IIO_VTD_REG 0x11010994

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 memory_base_address : 12;

                            /* Bits[15:4], Access Type=RW, default=0x00000FFF*/

                            /*
                               Corresponds to A[31:20] of the 32 bit memory
                               window's base address of the PCI Express port.
                               See also the MLIM register description.
                            */

  } Bits;
  UINT16 Data;

} BANK6_MBAS_IIO_VTD_STRUCT;

/* BANK6_MLIM_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x10800996)                                                      */
/*      SPRB0 (0x10800996)                                                      */
/*      SPRHBM (0x10800996)                                                     */
/*      SPRC0 (0x10800996)                                                      */
/*      SPRMCC (0x10800996)                                                     */
/*      SPRUCC (0x10800996)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK6_MLIM_IIO_VTD_REG 0x11010996

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 memory_limit_address : 12;

                            /* Bits[15:4], Access Type=RW, default=0x00000000*/

                            /*
                               Corresponds to A[31:20] of the 32 bit memory
                               window's limit address that corresponds to the
                               upper limit of the range of memory accesses that
                               will be passed by the PCI Express bridge.The
                               Memory Base and Memory Limit registers define a
                               memory mapped I/O non-prefetchable address range
                               (32-bit addresses) and the MS2IOSF directs
                               accesses in this range to the PCI Express port
                               based on the following formula:[br] MEMORY_BASE
                               <= A[31:20] <= MEMORY_LIMIT[br] The upper 12
                               bits of both the Memory Base and Memory Limit
                               registers are read/write and corresponds to the
                               upper 12 address bits, A[31:20] of 32-bit
                               addresses. Thus, the bottom of the defined
                               memory address range will be aligned to a 1 MB
                               boundary and the top of the defined memory
                               address range will be one less than a 1 MB
                               boundary. Refer to Chapter 5, 'Address Map,'
                               (IOH Platform Architecture Specification) for
                               further details on decoding.[br] Notes:[br] -
                               Setting the memory limit less than memory base
                               disables the 32-bit memory range altogether.[br]
                               - Note that in general the memory base and limit
                               registers won't be programmed by software
                               without clearing the MSE bit first.
                            */

  } Bits;
  UINT16 Data;

} BANK6_MLIM_IIO_VTD_STRUCT;

/* BANK6_PBAS_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x10800998)                                                      */
/*      SPRB0 (0x10800998)                                                      */
/*      SPRHBM (0x10800998)                                                     */
/*      SPRC0 (0x10800998)                                                      */
/*      SPRMCC (0x10800998)                                                     */
/*      SPRUCC (0x10800998)                                                     */
/* Register default value on SPRA0: 0x0000FFF1                                  */
/* Register default value on SPRB0: 0x0000FFF1                                  */
/* Register default value on SPRHBM: 0x0000FFF1                                 */
/* Register default value on SPRC0: 0x0000FFF1                                  */
/* Register default value on SPRMCC: 0x0000FFF1                                 */
/* Register default value on SPRUCC: 0x0000FFF1                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK6_PBAS_IIO_VTD_REG 0x11010998

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 prefetchable_memory_base_address_capability : 4;

                            /* Bits[3:0], Access Type=RO, default=0x00000001*/

                            /*
                               MS2IOSF sets this bit to 01h to indicate 64bit
                               capability.
                            */
    UINT16 prefetchable_memory_base_address : 12;

                            /* Bits[15:4], Access Type=RW, default=0x00000FFF*/

                            /*
                               Corresponds to A[31:20] of the prefetchable
                               memory address range's base address of the PCI
                               Express port. See also the PLIMU register
                               description.
                            */

  } Bits;
  UINT16 Data;

} BANK6_PBAS_IIO_VTD_STRUCT;

/* BANK6_PLIM_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x1080099a)                                                      */
/*      SPRB0 (0x1080099a)                                                      */
/*      SPRHBM (0x1080099a)                                                     */
/*      SPRC0 (0x1080099a)                                                      */
/*      SPRMCC (0x1080099a)                                                     */
/*      SPRUCC (0x1080099a)                                                     */
/* Register default value on SPRA0: 0x00000001                                  */
/* Register default value on SPRB0: 0x00000001                                  */
/* Register default value on SPRHBM: 0x00000001                                 */
/* Register default value on SPRC0: 0x00000001                                  */
/* Register default value on SPRMCC: 0x00000001                                 */
/* Register default value on SPRUCC: 0x00000001                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK6_PLIM_IIO_VTD_REG 0x1101099A

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 prefetchable_memory_limit_address_capability : 4;

                            /* Bits[3:0], Access Type=RO, default=0x00000001*/

                            /*
                               Indicates the addressing capability of the
                               prefetchable range.[br] 0h: 32-bit[br] 1h:
                               64-bit[br] All other values: reserved
                            */
    UINT16 prefetchable_memory_limit_address : 12;

                            /* Bits[15:4], Access Type=RW, default=0x00000000*/

                            /*
                               Corresponds to A[31:20] of the prefetchable
                               memory address range's limit address of the PCI
                               Express port. See also the PLIMU register
                               description.
                            */

  } Bits;
  UINT16 Data;

} BANK6_PLIM_IIO_VTD_STRUCT;

/* BANK6_PBASU_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x2080099c)                                                      */
/*      SPRB0 (0x2080099c)                                                      */
/*      SPRHBM (0x2080099c)                                                     */
/*      SPRC0 (0x2080099c)                                                      */
/*      SPRMCC (0x2080099c)                                                     */
/*      SPRUCC (0x2080099c)                                                     */
/* Register default value on SPRA0: 0xFFFFFFFF                                  */
/* Register default value on SPRB0: 0xFFFFFFFF                                  */
/* Register default value on SPRHBM: 0xFFFFFFFF                                 */
/* Register default value on SPRC0: 0xFFFFFFFF                                  */
/* Register default value on SPRMCC: 0xFFFFFFFF                                 */
/* Register default value on SPRUCC: 0xFFFFFFFF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK6_PBASU_IIO_VTD_REG 0x1102099C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 prefetchable_upper_32_bit_memory_base_address : 32;

                            /* Bits[31:0], Access Type=RW, default=0xFFFFFFFF*/

                            /*
                               Corresponds to A[63:32] of the prefetchable
                               memory address range's base address of the PCI
                               Express port. See also the PLIMU register
                               description.
                            */

  } Bits;
  UINT32 Data;

} BANK6_PBASU_IIO_VTD_STRUCT;

/* BANK6_PLIMU_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x208009a0)                                                      */
/*      SPRB0 (0x208009a0)                                                      */
/*      SPRHBM (0x208009a0)                                                     */
/*      SPRC0 (0x208009a0)                                                      */
/*      SPRMCC (0x208009a0)                                                     */
/*      SPRUCC (0x208009a0)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK6_PLIMU_IIO_VTD_REG 0x110209A0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 prefetchable_upper_32_bit_memory_limit_address : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               Corresponds to A[63:32] of the prefetchable
                               memory address range's limit address of the PCI
                               Express port.The Prefetchable Memory Base and
                               Memory Limit registers define a memory mapped
                               I/O prefetchable address range (64-bit
                               addresses) which is used by the PCI Express
                               bridge to determine when to forward memory
                               transactions based on the following formula:[br]
                               PREFETCH_MEMORY_BASE_UPPER::
                               PREFETCH_MEMORY_BASE <= A[63:20] <= PREFETCH_MEM
                               ORY_LIMIT_UPPER::PREFETCH_MEMORY_LIMIT[br] The
                               upper 12 bits of both the Prefetchable Memory
                               Base and Memory Limit registers are read/write
                               and corresponds to the upper 12 address bits,
                               A[31:20] of 32-bit addresses. The bottom of the
                               defined memory address range will be aligned to
                               a 1 MB boundary and the top of the defined
                               memory address range will be one less than a 1
                               MB boundary.[br] The bottom 4 bits of both the
                               Prefetchable Memory Base and Prefetchable Memory
                               Limit registers are read-only, contain the same
                               value, and encode whether or not the bridge
                               supports 64-bit addresses.[br] If these four
                               bits have the value 0h, then the bridge supports
                               only 32 bit addresses.[br] If these four bits
                               have the value 1h, then the bridge supports
                               64-bit addresses and the Prefetchable Base Upper
                               32 Bits and Prefetchable Limit Upper 32 Bits
                               registers hold the rest of the 64-bit
                               prefetchable base and limit addresses
                               respectively.[br] Setting the prefetchable
                               memory limit less than prefetchable memory base
                               disables the 64-bit prefetchable memory range
                               altogether.[br] Notes:[br] - In general the
                               memory base and limit registers won't be
                               programmed by software without clearing the MSE
                               bit first.
                            */

  } Bits;
  UINT32 Data;

} BANK6_PLIMU_IIO_VTD_STRUCT;

/* BANK6_BCTRL_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x108009a6)                                                      */
/*      SPRB0 (0x108009a6)                                                      */
/*      SPRHBM (0x108009a6)                                                     */
/*      SPRC0 (0x108009a6)                                                      */
/*      SPRMCC (0x108009a6)                                                     */
/*      SPRUCC (0x108009a6)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK6_BCTRL_IIO_VTD_REG 0x110109A6

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 perre : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Perre */
    UINT16 serre : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /* Serre */
    UINT16 isaen : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               ISA Enable[br] Modifies the response by the root
                               port to an I/O access issued by the core that
                               target ISA I/O addresses. This applies only to
                               I/O addresses that are enabled by the IOBASE and
                               IOLIM registers.[br] 1: The root port will not
                               forward to PCI Express any I/O transactions
                               addressing the last 768 bytes in each 1KB block
                               even if the addresses are within the range
                               defined by the IOBASE and IOLIM registers.[br]
                               0: All addresses defined by the IOBASE and IOLIM
                               for core issued I/O transactions will be mapped
                               to PCI Express.
                            */
    UINT16 vgaen : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               VGA Enable[br] Controls the routing of CPU
                               initiated transactions targeting VGA compatible
                               I/O and memory address ranges. This bit must
                               only be set for one p2p port in the entire
                               system.[br] Notes:[br] - When Device 3 Function
                               0 is in NTB mode, then the Device 3 Function 0
                               versoin of this bit must be left at default
                               value. VGA compatible devices are not supported
                               on the secondary side of the NTB.
                            */
    UINT16 vga16b : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               VGA 16-bit decode[br] This bit enables the
                               virtual PCI-to-PCI bridge to provide 16-bit
                               decoding of VGA I/O address precluding the
                               decoding of alias addresses every 1 KB.[br] 0:
                               execute 10-bit address decodes on VGA I/O
                               accesses.[br] 1: execute 16-bit address decodes
                               on VGA I/O accesses.[br] Notes:[br] - This bit
                               only has meaning if bit 3 of this register is
                               also set to 1, enabling VGA I/O decoding and
                               forwarding by the bridge.[br] - Refer to PCI-PCI
                               Bridge Specification Revision 1.2 for further
                               details of this bit behavior.
                            */
    UINT16 rsvd : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 sbr : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               1: Setting this bit triggers a hot reset on the
                               link for the corresponding PCI Express port and
                               the PCI Express hierarchy domain subordinate to
                               the port. This sends the LTSSM into the Training
                               (or Link) Control Reset state, which necessarily
                               implies a reset to the downstream device and all
                               subordinate devices. The transaction layer
                               corresponding to port will be emptied by virtue
                               of the link going down when this bit is set.
                               This means that in the outbound direction, all
                               posted transactions are dropped and non-posted
                               transactions are sent a UR response. In the
                               inbound direction, completions for inbound NP
                               requests are dropped when they arrive. Inbound
                               posted writes are retired normally.Note also
                               that a secondary bus reset will not reset the
                               virtual PCI-to-PCI bridge configuration
                               registers of the targeted PCI Express port.[br]
                               0: No reset happens on the PCI Express port.
                            */
    UINT16 rsvd_7 : 9;

                            /* Bits[15:7], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT16 Data;

} BANK6_BCTRL_IIO_VTD_STRUCT;

/* BANK6_BANKCTRL2_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x108009a8)                                                      */
/*      SPRB0 (0x108009a8)                                                      */
/*      SPRHBM (0x108009a8)                                                     */
/*      SPRC0 (0x108009a8)                                                      */
/*      SPRMCC (0x108009a8)                                                     */
/*      SPRUCC (0x108009a8)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the decode logic associated with an arbitrary type 1 IOSF agent (i.e. PCI bridge)
*/


#define BANK6_BANKCTRL2_IIO_VTD_REG 0x110109A8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 devfunc_mask : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               When set, indicates to HW that the contents of
                               devfunc register for the bank are invalid, and
                               should not be used. Since this field is relevant
                               only for type1 bank, setting it essentially
                               ensures that only type1 cfg traffic will be
                               routed based on the secondary and subordinate
                               bus range programmed within this bank.
                            */
    UINT16 rsvd : 15;

                            /* Bits[15:1], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT16 Data;

} BANK6_BANKCTRL2_IIO_VTD_STRUCT;

/* BANK6_MCAST_CTRL_IIO_VTD_REG supported on:                                   */
/*      SPRA0 (0x108009ae)                                                      */
/*      SPRB0 (0x108009ae)                                                      */
/*      SPRHBM (0x108009ae)                                                     */
/*      SPRC0 (0x108009ae)                                                      */
/*      SPRMCC (0x108009ae)                                                     */
/*      SPRUCC (0x108009ae)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the Dualcast Control Register (Dualcast is a specialized version of PCIe Multicast used in conjunction with the Non-Transparent Bridge). The fields in this register mirror the fields in the PCIe spec-defined Multicast Control Register (see section 7.21.3 of the PCIe 3.0 spec).
*/


#define BANK6_MCAST_CTRL_IIO_VTD_REG 0x110109AE

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 mc_num_group : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000000*/

                            /*
                               This field only supports and implements bits
                               [3:0]. Bits [5:4] are not supported.
                            */
    UINT16 rsvd_mc_ctrl_14_6 : 9;

                            /* Bits[14:6], Access Type=RO, default=0x00000000*/

                            /* Rsvd Mc Ctrl 14 6 */
    UINT16 mc_enable : 1;

                            /* Bits[15:15], Access Type=RW/L, default=0x00000000*/

                            /* Mc Enable */

  } Bits;
  UINT16 Data;

} BANK6_MCAST_CTRL_IIO_VTD_STRUCT;

/* BANK6_MCAST_BASE_N0_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x208009b0)                                                      */
/*      SPRB0 (0x208009b0)                                                      */
/*      SPRHBM (0x208009b0)                                                     */
/*      SPRC0 (0x208009b0)                                                      */
/*      SPRMCC (0x208009b0)                                                     */
/*      SPRUCC (0x208009b0)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the Dualcast Base Address Register (Dualcast is a specialized version of PCIe Multicast used in conjunction with the Non-Transparent Bridge). The fields in this register mirror the fields in the PCIe spec-defined MC_Base_Address Register (see section 7.21.4 of the PCIe 3.0 spec).
*/


#define BANK6_MCAST_BASE_N0_IIO_VTD_REG 0x110209B0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mc_index_position : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000000*/

                            /* Mc Index Position */
    UINT32 rsvd_mc_base_11_6 : 6;

                            /* Bits[11:6], Access Type=RO, default=0x00000000*/

                            /* Rsvd Mc Base 11 6 */
    UINT32 mc_base_address : 20;

                            /* Bits[31:12], Access Type=RW, default=0x00000000*/

                            /* Mc Base Address */

  } Bits;
  UINT32 Data;

} BANK6_MCAST_BASE_N0_IIO_VTD_STRUCT;

/* BANK6_MCAST_BASE_N1_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x208009b4)                                                      */
/*      SPRB0 (0x208009b4)                                                      */
/*      SPRHBM (0x208009b4)                                                     */
/*      SPRC0 (0x208009b4)                                                      */
/*      SPRMCC (0x208009b4)                                                     */
/*      SPRUCC (0x208009b4)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the Dualcast Base Address Register (Dualcast is a specialized version of PCIe Multicast used in conjunction with the Non-Transparent Bridge). The fields in this register mirror the fields in the PCIe spec-defined MC_Base_Address Register (see section 7.21.4 of the PCIe 3.0 spec).
*/


#define BANK6_MCAST_BASE_N1_IIO_VTD_REG 0x110209B4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mc_base_address : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /* Mc Base Address */

  } Bits;
  UINT32 Data;

} BANK6_MCAST_BASE_N1_IIO_VTD_STRUCT;

/* BANK6_MCAST_RCV_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x108009b8)                                                      */
/*      SPRB0 (0x108009b8)                                                      */
/*      SPRHBM (0x108009b8)                                                     */
/*      SPRC0 (0x108009b8)                                                      */
/*      SPRMCC (0x108009b8)                                                     */
/*      SPRUCC (0x108009b8)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the Dualcast Receive Register (Dualcast is a specialized version of PCIe Multicast used in conjunction with the Non-Transparent Bridge). The fields in this register mirror the fields in the PCIe spec-defined MC_Receive Register (see section 7.21.5 of the PCIe 3.0 spec).
*/


#define BANK6_MCAST_RCV_IIO_VTD_REG 0x110109B8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 mc_rcv : 16;

                            /* Bits[15:0], Access Type=RW, default=0x00000000*/

                            /* Mc Rcv */

  } Bits;
  UINT16 Data;

} BANK6_MCAST_RCV_IIO_VTD_STRUCT;

/* BANK6_PMCSR_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x208009bc)                                                      */
/*      SPRB0 (0x208009bc)                                                      */
/*      SPRHBM (0x208009bc)                                                     */
/*      SPRC0 (0x208009bc)                                                      */
/*      SPRMCC (0x208009bc)                                                     */
/*      SPRUCC (0x208009bc)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the PCIe Power Management Capability Register in the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK6_PMCSR_IIO_VTD_REG 0x110209BC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 power_state : 2;

                            /* Bits[1:0], Access Type=RW, default=0x00000000*/

                            /*
                               This 2-bit field is used to determine the
                               current power state of the function and to set a
                               new power state as well.[br] 00: D0[br] 01:
                               D1[br] 10: D2[br] 11: D3_hot[br] All devices
                               will respond to only Type 0 configuration
                               transactions (targeting the device's
                               configuration space itself) when in D3hot state
                               (root port will not forward Type 1/0
                               transactions to the downstream link) and will
                               not respond to memory/IO transactions (i.e.
                               D3hot state is equivalent to MSE/IOSE bits being
                               clear) as target and will not generate any
                               memory/IO/configuration transactions as
                               initiator on the primary bus (messages are still
                               allowed to pass through).[br] WARNING: MS2IOSF
                               hardware does NOT block any requests targeting
                               the device when the device is not in D0. The
                               IOSF device must be robust enough to handle
                               requests in non-D0 power states. In addition,
                               software should not rely on the accuracy of this
                               shadow register, but instead read the actual
                               PMCSR of the device.
                            */
    UINT32 rsvd : 30;

                            /* Bits[31:2], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} BANK6_PMCSR_IIO_VTD_STRUCT;

/* BANK7_BANKCTRL_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x8009c0)                                                        */
/*      SPRB0 (0x8009c0)                                                        */
/*      SPRHBM (0x8009c0)                                                       */
/*      SPRC0 (0x8009c0)                                                        */
/*      SPRMCC (0x8009c0)                                                       */
/*      SPRUCC (0x8009c0)                                                       */
/* Register default value on SPRA0: 0x00000081                                  */
/* Register default value on SPRB0: 0x00000081                                  */
/* Register default value on SPRHBM: 0x00000081                                 */
/* Register default value on SPRC0: 0x00000081                                  */
/* Register default value on SPRMCC: 0x00000081                                 */
/* Register default value on SPRUCC: 0x00000081                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the source decode logic associated with an arbitrary type 1 IOSF agent (i.e. PCI bridge)
*/


#define BANK7_BANKCTRL_IIO_VTD_REG 0x110009C0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 banktype : 2;

                            /* Bits[1:0], Access Type=RO, default=0x00000001*/

                            /*
                               Specifies the type of Bank Decoder. Valid values
                               are:[br] 00b: Type 0 Bank - 16 Bytes[br] 01b:
                               Type 1 Bank - 64 Bytes[br] 10b: reserved[br]
                               11b: Subtractive Decode Bank - 8 Bytes
                            */
    UINT8 force_config_type0 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               If this bit is set, MS2IOSF sends any
                               configuration request that matches this bank as
                               type 0. Enables support for SR-IOV RCIEP.
                            */
    UINT8 bank_decode_enable : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               1b: The bank decoders are enabled.[br] 0b: The
                               bank decoders are disabled.
                            */
    UINT8 shadow_enable : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               1b: Outbound configuration requests that target
                               the Device/Function specified by this bank on
                               the RootBus will be snarfed to the shadow copy
                               of decode registers.[br] 0b: Outbound
                               configuration requests will not be snarfed. BIOS
                               must program the decode registers to allow this
                               bank to decode to the bank's specified target.
                            */
    UINT8 mc_bank_decode_enable : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               1b: The Multicast bank decoders are enabled.[br]
                               0b: The Multicast bank decoders are disabled.
                            */
    UINT8 mc_shadow_enable : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               1b: Outbound configuration requests that target
                               the Multicast registers of the Device/Function
                               specified by this bank on the RootBus will be
                               snarfed to the shadow copy of decode
                               registers.[br] 0b: Outbound configuration
                               requests to the Multicast registers of the
                               Device/Function will not be snarfed. BIOS must
                               program the decode registers to allow this bank
                               to decode to the bank's specified target.
                            */
    UINT8 function_mask : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               When set, causes the DevFunc.Function field to
                               become ignored. Any configuration request that
                               matches the DevFunc.Device field with any
                               function value will be a match for this decoder
                               bank.
                            */

  } Bits;
  UINT8 Data;

} BANK7_BANKCTRL_IIO_VTD_STRUCT;

/* BANK7_DEVFUNC_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x8009c1)                                                        */
/*      SPRB0 (0x8009c1)                                                        */
/*      SPRHBM (0x8009c1)                                                       */
/*      SPRC0 (0x8009c1)                                                        */
/*      SPRMCC (0x8009c1)                                                       */
/*      SPRUCC (0x8009c1)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* PCI Device and Function number of the IOSF agent being shadowed
*/


#define BANK7_DEVFUNC_IIO_VTD_REG 0x110009C1

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 func : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target Function Number on the
                               RootBus that this bank decodes for.
                            */
    UINT8 device : 5;

                            /* Bits[7:3], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target Device Number on the
                               RootBus that this bank decodes for.
                            */

  } Bits;
  UINT8 Data;

} BANK7_DEVFUNC_IIO_VTD_STRUCT;

/* BANK7_DESTID_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x108009c2)                                                      */
/*      SPRB0 (0x108009c2)                                                      */
/*      SPRHBM (0x108009c2)                                                     */
/*      SPRC0 (0x108009c2)                                                      */
/*      SPRMCC (0x108009c2)                                                     */
/*      SPRUCC (0x108009c2)                                                     */
/* Register default value on SPRA0: 0x00002188                                  */
/* Register default value on SPRB0: 0x00002188                                  */
/* Register default value on SPRHBM: 0x00002188                                 */
/* Register default value on SPRC0: 0x00002188                                  */
/* Register default value on SPRMCC: 0x00002188                                 */
/* Register default value on SPRUCC: 0x00002188                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* The lower 14 bits of this register comprise the PSF-required source decode information that MS2IOSF provides on the tdest_id signal when presenting the request to PSF (note exception for MS2IOSF_Port).
*/


#define BANK7_DESTID_IIO_VTD_REG 0x110109C2

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 psf_channel : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies which IOSF channel to send requests
                               that hit this bank decoder ranges. This field is
                               used for IOSF Channel and also as part of the
                               IOSF Destination ID.
                            */
    UINT16 psf_port : 3;

                            /* Bits[5:3], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF port to send requests that
                               hit this bank decoder ranges.
                            */
    UINT16 ms2iosf_port : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the MS2IOSF port (left = 0, right = 1)
                               where to send requests that hit this bank
                               decoder. The logic should mask this bit to zero
                               before sending the 14-bit PSF source decode
                               header out. Technically, this is the top bit of
                               the PSF port ID, but MS2IOSF is using it for
                               internal purposes.
                            */
    UINT16 psf_port_group : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF port group to send requests
                               that hit this bank decoder ranges.
                            */
    UINT16 psf_id : 4;

                            /* Bits[11:8], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF to send requests that hit
                               this bank decoder ranges.
                            */
    UINT16 psf_decode_mode : 2;

                            /* Bits[13:12], Access Type=RW, default=0x00000002*/

                            /*
                               Specifies the PSF Destination ID decode mode
                               being used.[br] 00b: Fabric Decode[br] 01b:
                               Implicit Decode[br] 10b: Source Decode to
                               PSF_ID:Port_Group:Port:Channel[br] 11b: Source
                               Decode to PSF_ID, use Fabric Decode from there
                               onward (StF)
                            */
    UINT16 ms2iosf_channel : 2;

                            /* Bits[15:14], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies to which IOSF channel to send requests
                               that hit this bank decoder. Note the difference
                               between this channel ID and the channel ID
                               provided in the source decode header below. The
                               former specifies the channel ID on the MS2IOSF
                               interface itself whereas the latter specifies
                               the channel ID on the PSF interface to the
                               endpoint. MS2IOSF has four channels for each of
                               its two ports.
                            */

  } Bits;
  UINT16 Data;

} BANK7_DESTID_IIO_VTD_STRUCT;

/* BANK7_DEVCON_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x108009c4)                                                      */
/*      SPRB0 (0x108009c4)                                                      */
/*      SPRHBM (0x108009c4)                                                     */
/*      SPRC0 (0x108009c4)                                                      */
/*      SPRMCC (0x108009c4)                                                     */
/*      SPRUCC (0x108009c4)                                                     */
/* Register default value on SPRA0: 0x000000E0                                  */
/* Register default value on SPRB0: 0x000000E0                                  */
/* Register default value on SPRHBM: 0x000000E0                                 */
/* Register default value on SPRC0: 0x000000E0                                  */
/* Register default value on SPRMCC: 0x000000E0                                 */
/* Register default value on SPRUCC: 0x000000E0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Shadowed PCI Express Device Control
*/


#define BANK7_DEVCON_IIO_VTD_REG 0x110109C4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 rsvd : 5;

                            /* Bits[4:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 max_payload_size : 3;

                            /* Bits[7:5], Access Type=RW, default=0x00000007*/

                            /*
                               Max_Payload_Size[br] Indicates the largest
                               packet size supported by the target decoded by
                               this bank. [br] Defined encodings for this field
                               are:[br] 000b 128 bytes max payload size[br]
                               001b 256 bytes max payload size[br] 010b 512
                               bytes max payload size[br] 011b 1024 bytes max
                               payload size[br] 100b 2048 bytes max payload
                               size[br] 101b 4096 bytes max payload size[br]
                               110b Reserved[br] 111b 64 address aligned bytes
                               max payload size[br]
                            */
    UINT16 rsvd_8 : 7;

                            /* Bits[14:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 initiate_flr : 1;

                            /* Bits[15:15], Access Type=RO, default=0x00000000*/

                            /*
                               [br] Initiate Function Level Reset. A write of
                               '1' to the DEVCON[15] field of the device this
                               bank shadows, will cause all shadow-enabled
                               registers for this bank to reset. DEVCON[15]
                               maps to this field. This bit self-clears.[br]
                            */

  } Bits;
  UINT16 Data;

} BANK7_DEVCON_IIO_VTD_STRUCT;

/* BANK7_DEVCON_OFFSET_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x8009c7)                                                        */
/*      SPRB0 (0x8009c7)                                                        */
/*      SPRHBM (0x8009c7)                                                       */
/*      SPRC0 (0x8009c7)                                                        */
/*      SPRMCC (0x8009c7)                                                       */
/*      SPRUCC (0x8009c7)                                                       */
/* Register default value on SPRA0: 0x00000048                                  */
/* Register default value on SPRB0: 0x00000048                                  */
/* Register default value on SPRHBM: 0x00000048                                 */
/* Register default value on SPRC0: 0x00000048                                  */
/* Register default value on SPRMCC: 0x00000048                                 */
/* Register default value on SPRUCC: 0x00000048                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Offset of the PCI Express Device Control Register in the IOSF agent's configuration header
*/


#define BANK7_DEVCON_OFFSET_IIO_VTD_REG 0x110009C7

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 devcon_shadowen : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               If this bit and DevCon_Master are set, MS2IOSF
                               shadows writes to the offset programmed above
                               into its copy of the device control register.
                               BIOS must clear this bit for devices that do not
                               have a device control register. If shadowing is
                               disabled for this bank, this bit has no effect.
                            */
    UINT8 devcon_master : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Indicates whether or not this shadow copy is the
                               master copy. For devices that use multiple bank
                               decoders, SW is required to enable one of them
                               as a master. HW shadowing only updates the
                               master copy. Likewise, HW only uses the master
                               copy as input to other logic such as completion
                               combining. For devices that use only one bank
                               decoder, SW is required to set this bit.
                            */
    UINT8 devcon_offset : 6;

                            /* Bits[7:2], Access Type=RW, default=0x00000012*/

                            /*
                               Configuration space register offset for the
                               Device control register. This is a DWord offset
                               (left-shift this value by two to get byte
                               offset). Note that although this points to the
                               lowest order byte of the register, only the
                               upper byte of the register is captured by this
                               bank, which is at this offset + 1h.
                            */

  } Bits;
  UINT8 Data;

} BANK7_DEVCON_OFFSET_IIO_VTD_STRUCT;

/* BANK7_PCICMD_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x108009c8)                                                      */
/*      SPRB0 (0x108009c8)                                                      */
/*      SPRHBM (0x108009c8)                                                     */
/*      SPRC0 (0x108009c8)                                                      */
/*      SPRMCC (0x108009c8)                                                     */
/*      SPRUCC (0x108009c8)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK7_PCICMD_IIO_VTD_REG 0x110109C8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 iose : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               I/O Space Enable (for outbound bank decode)[br]
                               1: Enables bank IOBAS/IOLIM I/O range[br] 0:
                               Disables bank IOBAS/IOLIM I/O range
                            */
    UINT16 mse : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Memory Space Enable (for outbound bank
                               decode)[br] 1: Enables bank MBAS/MLIM and
                               PBAS/PLIM memory ranges[br] 0: Disables bank
                               MBAS/MLIM and PBAS/PLIM memory ranges
                            */
    UINT16 bme : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /* Bme */
    UINT16 sce : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000000*/

                            /* Sce */
    UINT16 mwie : 1;

                            /* Bits[4:4], Access Type=RO, default=0x00000000*/

                            /* Mwie */
    UINT16 vga_palette_snoop_enable : 1;

                            /* Bits[5:5], Access Type=RO, default=0x00000000*/

                            /* Vga Palette Snoop Enable */
    UINT16 perre : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /* Perre */
    UINT16 idsel_stepping_wait_cycle_control : 1;

                            /* Bits[7:7], Access Type=RO, default=0x00000000*/

                            /* Idsel Stepping Wait Cycle Control */
    UINT16 serre : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /* Serre */
    UINT16 fast_back_to_back_enable : 1;

                            /* Bits[9:9], Access Type=RO, default=0x00000000*/

                            /* Fast Back To Back Enable */
    UINT16 rsvd : 6;

                            /* Bits[15:10], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT16 Data;

} BANK7_PCICMD_IIO_VTD_STRUCT;

/* BANK7_SECBUS_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x8009cd)                                                        */
/*      SPRB0 (0x8009cd)                                                        */
/*      SPRHBM (0x8009cd)                                                       */
/*      SPRC0 (0x8009cd)                                                        */
/*      SPRMCC (0x8009cd)                                                       */
/*      SPRUCC (0x8009cd)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK7_SECBUS_IIO_VTD_REG 0x110009CD

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 sbn : 8;

                            /* Bits[7:0], Access Type=RW, default=0x00000000*/

                            /* First bus of a bus range below a PCI Bridge */

  } Bits;
  UINT8 Data;

} BANK7_SECBUS_IIO_VTD_STRUCT;

/* BANK7_SUBBUS_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x8009ce)                                                        */
/*      SPRB0 (0x8009ce)                                                        */
/*      SPRHBM (0x8009ce)                                                       */
/*      SPRC0 (0x8009ce)                                                        */
/*      SPRMCC (0x8009ce)                                                       */
/*      SPRUCC (0x8009ce)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK7_SUBBUS_IIO_VTD_REG 0x110009CE

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 subordinate_bus_number : 8;

                            /* Bits[7:0], Access Type=RW, default=0x00000000*/

                            /* Last bus of a bus range below a PCI Bridge */

  } Bits;
  UINT8 Data;

} BANK7_SUBBUS_IIO_VTD_STRUCT;

/* BANK7_IOBAS_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x8009d0)                                                        */
/*      SPRB0 (0x8009d0)                                                        */
/*      SPRHBM (0x8009d0)                                                       */
/*      SPRC0 (0x8009d0)                                                        */
/*      SPRMCC (0x8009d0)                                                       */
/*      SPRUCC (0x8009d0)                                                       */
/* Register default value on SPRA0: 0x000000F0                                  */
/* Register default value on SPRB0: 0x000000F0                                  */
/* Register default value on SPRHBM: 0x000000F0                                 */
/* Register default value on SPRC0: 0x000000F0                                  */
/* Register default value on SPRMCC: 0x000000F0                                 */
/* Register default value on SPRUCC: 0x000000F0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK7_IOBAS_IIO_VTD_REG 0x110009D0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 i_o_address_capability : 2;

                            /* Bits[1:0], Access Type=RO, default=0x00000000*/

                            /* MS2IOSF supports only 16 bit addressing */
    UINT8 more_i_o_base_address : 2;

                            /* Bits[3:2], Access Type=RW/L, default=0x00000000*/

                            /*
                               When EN1K is set in the IIOMISCCTRL register,
                               these bits become RW and allow for 1K
                               granularity of I/O addressing, otherwise these
                               are RO.[br] Lock: !IIOMISCCTRL.EN1K
                            */
    UINT8 i_o_base_address : 4;

                            /* Bits[7:4], Access Type=RW, default=0x0000000F*/

                            /*
                               Corresponds to A[15:12] of the I/O base address
                               of the PCI Express port. See also the IOLIM
                               register description.
                            */

  } Bits;
  UINT8 Data;

} BANK7_IOBAS_IIO_VTD_STRUCT;

/* BANK7_IOLIM_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x8009d1)                                                        */
/*      SPRB0 (0x8009d1)                                                        */
/*      SPRHBM (0x8009d1)                                                       */
/*      SPRC0 (0x8009d1)                                                        */
/*      SPRMCC (0x8009d1)                                                       */
/*      SPRUCC (0x8009d1)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK7_IOLIM_IIO_VTD_REG 0x110009D1

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 i_o_address_limit_capability : 2;

                            /* Bits[1:0], Access Type=RO, default=0x00000000*/

                            /* MS2IOSF supports only 16 bit addressing */
    UINT8 more_i_o_address_limit : 2;

                            /* Bits[3:2], Access Type=RW/L, default=0x00000000*/

                            /*
                               When EN1K is set in the IIOMISCCTRL register,
                               these bits become RW and allow for 1K
                               granularity of I/O addressing, otherwise these
                               are RO.[br] Lock: !IIOMISCCTRL.EN1K
                            */
    UINT8 i_o_address_limit : 4;

                            /* Bits[7:4], Access Type=RW, default=0x00000000*/

                            /*
                               Corresponds to A[15:12] of the I/O limit address
                               of the PCI Express port.The I/O Base and I/O
                               Limit registers define an address range that is
                               used by the PCI Express port to determine when
                               to forward I/O transactions from one interface
                               to the other using the following formula:[br]
                               IO_BASE <= A[15:12] <=IO_LIMIT[br] The bottom of
                               the defined I/O address range will be aligned to
                               a 4KB boundary (1KB if EN1K bit is set. Refer to
                               the IIOMISCCTRL register for definition of EN1K
                               bit) while the top of the region specified by
                               IO_LIMIT will be one less than a 4 KB (1KB if
                               EN1K bit is set) multiple.[br] Notes:[br] -
                               Setting the I/O limit less than I/O base
                               disables the I/O range altogether.[br] - General
                               the I/O base and limit registers won't be
                               programmed by software without clearing the IOSE
                               bit first.
                            */

  } Bits;
  UINT8 Data;

} BANK7_IOLIM_IIO_VTD_STRUCT;

/* BANK7_MBAS_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x108009d4)                                                      */
/*      SPRB0 (0x108009d4)                                                      */
/*      SPRHBM (0x108009d4)                                                     */
/*      SPRC0 (0x108009d4)                                                      */
/*      SPRMCC (0x108009d4)                                                     */
/*      SPRUCC (0x108009d4)                                                     */
/* Register default value on SPRA0: 0x0000FFF0                                  */
/* Register default value on SPRB0: 0x0000FFF0                                  */
/* Register default value on SPRHBM: 0x0000FFF0                                 */
/* Register default value on SPRC0: 0x0000FFF0                                  */
/* Register default value on SPRMCC: 0x0000FFF0                                 */
/* Register default value on SPRUCC: 0x0000FFF0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK7_MBAS_IIO_VTD_REG 0x110109D4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 memory_base_address : 12;

                            /* Bits[15:4], Access Type=RW, default=0x00000FFF*/

                            /*
                               Corresponds to A[31:20] of the 32 bit memory
                               window's base address of the PCI Express port.
                               See also the MLIM register description.
                            */

  } Bits;
  UINT16 Data;

} BANK7_MBAS_IIO_VTD_STRUCT;

/* BANK7_MLIM_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x108009d6)                                                      */
/*      SPRB0 (0x108009d6)                                                      */
/*      SPRHBM (0x108009d6)                                                     */
/*      SPRC0 (0x108009d6)                                                      */
/*      SPRMCC (0x108009d6)                                                     */
/*      SPRUCC (0x108009d6)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK7_MLIM_IIO_VTD_REG 0x110109D6

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 rsvd : 4;

                            /* Bits[3:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 memory_limit_address : 12;

                            /* Bits[15:4], Access Type=RW, default=0x00000000*/

                            /*
                               Corresponds to A[31:20] of the 32 bit memory
                               window's limit address that corresponds to the
                               upper limit of the range of memory accesses that
                               will be passed by the PCI Express bridge.The
                               Memory Base and Memory Limit registers define a
                               memory mapped I/O non-prefetchable address range
                               (32-bit addresses) and the MS2IOSF directs
                               accesses in this range to the PCI Express port
                               based on the following formula:[br] MEMORY_BASE
                               <= A[31:20] <= MEMORY_LIMIT[br] The upper 12
                               bits of both the Memory Base and Memory Limit
                               registers are read/write and corresponds to the
                               upper 12 address bits, A[31:20] of 32-bit
                               addresses. Thus, the bottom of the defined
                               memory address range will be aligned to a 1 MB
                               boundary and the top of the defined memory
                               address range will be one less than a 1 MB
                               boundary. Refer to Chapter 5, 'Address Map,'
                               (IOH Platform Architecture Specification) for
                               further details on decoding.[br] Notes:[br] -
                               Setting the memory limit less than memory base
                               disables the 32-bit memory range altogether.[br]
                               - Note that in general the memory base and limit
                               registers won't be programmed by software
                               without clearing the MSE bit first.
                            */

  } Bits;
  UINT16 Data;

} BANK7_MLIM_IIO_VTD_STRUCT;

/* BANK7_PBAS_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x108009d8)                                                      */
/*      SPRB0 (0x108009d8)                                                      */
/*      SPRHBM (0x108009d8)                                                     */
/*      SPRC0 (0x108009d8)                                                      */
/*      SPRMCC (0x108009d8)                                                     */
/*      SPRUCC (0x108009d8)                                                     */
/* Register default value on SPRA0: 0x0000FFF1                                  */
/* Register default value on SPRB0: 0x0000FFF1                                  */
/* Register default value on SPRHBM: 0x0000FFF1                                 */
/* Register default value on SPRC0: 0x0000FFF1                                  */
/* Register default value on SPRMCC: 0x0000FFF1                                 */
/* Register default value on SPRUCC: 0x0000FFF1                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK7_PBAS_IIO_VTD_REG 0x110109D8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 prefetchable_memory_base_address_capability : 4;

                            /* Bits[3:0], Access Type=RO, default=0x00000001*/

                            /*
                               MS2IOSF sets this bit to 01h to indicate 64bit
                               capability.
                            */
    UINT16 prefetchable_memory_base_address : 12;

                            /* Bits[15:4], Access Type=RW, default=0x00000FFF*/

                            /*
                               Corresponds to A[31:20] of the prefetchable
                               memory address range's base address of the PCI
                               Express port. See also the PLIMU register
                               description.
                            */

  } Bits;
  UINT16 Data;

} BANK7_PBAS_IIO_VTD_STRUCT;

/* BANK7_PLIM_IIO_VTD_REG supported on:                                         */
/*      SPRA0 (0x108009da)                                                      */
/*      SPRB0 (0x108009da)                                                      */
/*      SPRHBM (0x108009da)                                                     */
/*      SPRC0 (0x108009da)                                                      */
/*      SPRMCC (0x108009da)                                                     */
/*      SPRUCC (0x108009da)                                                     */
/* Register default value on SPRA0: 0x00000001                                  */
/* Register default value on SPRB0: 0x00000001                                  */
/* Register default value on SPRHBM: 0x00000001                                 */
/* Register default value on SPRC0: 0x00000001                                  */
/* Register default value on SPRMCC: 0x00000001                                 */
/* Register default value on SPRUCC: 0x00000001                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK7_PLIM_IIO_VTD_REG 0x110109DA

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 prefetchable_memory_limit_address_capability : 4;

                            /* Bits[3:0], Access Type=RO, default=0x00000001*/

                            /*
                               Indicates the addressing capability of the
                               prefetchable range.[br] 0h: 32-bit[br] 1h:
                               64-bit[br] All other values: reserved
                            */
    UINT16 prefetchable_memory_limit_address : 12;

                            /* Bits[15:4], Access Type=RW, default=0x00000000*/

                            /*
                               Corresponds to A[31:20] of the prefetchable
                               memory address range's limit address of the PCI
                               Express port. See also the PLIMU register
                               description.
                            */

  } Bits;
  UINT16 Data;

} BANK7_PLIM_IIO_VTD_STRUCT;

/* BANK7_PBASU_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x208009dc)                                                      */
/*      SPRB0 (0x208009dc)                                                      */
/*      SPRHBM (0x208009dc)                                                     */
/*      SPRC0 (0x208009dc)                                                      */
/*      SPRMCC (0x208009dc)                                                     */
/*      SPRUCC (0x208009dc)                                                     */
/* Register default value on SPRA0: 0xFFFFFFFF                                  */
/* Register default value on SPRB0: 0xFFFFFFFF                                  */
/* Register default value on SPRHBM: 0xFFFFFFFF                                 */
/* Register default value on SPRC0: 0xFFFFFFFF                                  */
/* Register default value on SPRMCC: 0xFFFFFFFF                                 */
/* Register default value on SPRUCC: 0xFFFFFFFF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK7_PBASU_IIO_VTD_REG 0x110209DC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 prefetchable_upper_32_bit_memory_base_address : 32;

                            /* Bits[31:0], Access Type=RW, default=0xFFFFFFFF*/

                            /*
                               Corresponds to A[63:32] of the prefetchable
                               memory address range's base address of the PCI
                               Express port. See also the PLIMU register
                               description.
                            */

  } Bits;
  UINT32 Data;

} BANK7_PBASU_IIO_VTD_STRUCT;

/* BANK7_PLIMU_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x208009e0)                                                      */
/*      SPRB0 (0x208009e0)                                                      */
/*      SPRHBM (0x208009e0)                                                     */
/*      SPRC0 (0x208009e0)                                                      */
/*      SPRMCC (0x208009e0)                                                     */
/*      SPRUCC (0x208009e0)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK7_PLIMU_IIO_VTD_REG 0x110209E0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 prefetchable_upper_32_bit_memory_limit_address : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /*
                               Corresponds to A[63:32] of the prefetchable
                               memory address range's limit address of the PCI
                               Express port.The Prefetchable Memory Base and
                               Memory Limit registers define a memory mapped
                               I/O prefetchable address range (64-bit
                               addresses) which is used by the PCI Express
                               bridge to determine when to forward memory
                               transactions based on the following formula:[br]
                               PREFETCH_MEMORY_BASE_UPPER::
                               PREFETCH_MEMORY_BASE <= A[63:20] <= PREFETCH_MEM
                               ORY_LIMIT_UPPER::PREFETCH_MEMORY_LIMIT[br] The
                               upper 12 bits of both the Prefetchable Memory
                               Base and Memory Limit registers are read/write
                               and corresponds to the upper 12 address bits,
                               A[31:20] of 32-bit addresses. The bottom of the
                               defined memory address range will be aligned to
                               a 1 MB boundary and the top of the defined
                               memory address range will be one less than a 1
                               MB boundary.[br] The bottom 4 bits of both the
                               Prefetchable Memory Base and Prefetchable Memory
                               Limit registers are read-only, contain the same
                               value, and encode whether or not the bridge
                               supports 64-bit addresses.[br] If these four
                               bits have the value 0h, then the bridge supports
                               only 32 bit addresses.[br] If these four bits
                               have the value 1h, then the bridge supports
                               64-bit addresses and the Prefetchable Base Upper
                               32 Bits and Prefetchable Limit Upper 32 Bits
                               registers hold the rest of the 64-bit
                               prefetchable base and limit addresses
                               respectively.[br] Setting the prefetchable
                               memory limit less than prefetchable memory base
                               disables the 64-bit prefetchable memory range
                               altogether.[br] Notes:[br] - In general the
                               memory base and limit registers won't be
                               programmed by software without clearing the MSE
                               bit first.
                            */

  } Bits;
  UINT32 Data;

} BANK7_PLIMU_IIO_VTD_STRUCT;

/* BANK7_BCTRL_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x108009e6)                                                      */
/*      SPRB0 (0x108009e6)                                                      */
/*      SPRHBM (0x108009e6)                                                     */
/*      SPRC0 (0x108009e6)                                                      */
/*      SPRMCC (0x108009e6)                                                     */
/*      SPRUCC (0x108009e6)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK7_BCTRL_IIO_VTD_REG 0x110109E6

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 perre : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Perre */
    UINT16 serre : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /* Serre */
    UINT16 isaen : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               ISA Enable[br] Modifies the response by the root
                               port to an I/O access issued by the core that
                               target ISA I/O addresses. This applies only to
                               I/O addresses that are enabled by the IOBASE and
                               IOLIM registers.[br] 1: The root port will not
                               forward to PCI Express any I/O transactions
                               addressing the last 768 bytes in each 1KB block
                               even if the addresses are within the range
                               defined by the IOBASE and IOLIM registers.[br]
                               0: All addresses defined by the IOBASE and IOLIM
                               for core issued I/O transactions will be mapped
                               to PCI Express.
                            */
    UINT16 vgaen : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               VGA Enable[br] Controls the routing of CPU
                               initiated transactions targeting VGA compatible
                               I/O and memory address ranges. This bit must
                               only be set for one p2p port in the entire
                               system.[br] Notes:[br] - When Device 3 Function
                               0 is in NTB mode, then the Device 3 Function 0
                               versoin of this bit must be left at default
                               value. VGA compatible devices are not supported
                               on the secondary side of the NTB.
                            */
    UINT16 vga16b : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               VGA 16-bit decode[br] This bit enables the
                               virtual PCI-to-PCI bridge to provide 16-bit
                               decoding of VGA I/O address precluding the
                               decoding of alias addresses every 1 KB.[br] 0:
                               execute 10-bit address decodes on VGA I/O
                               accesses.[br] 1: execute 16-bit address decodes
                               on VGA I/O accesses.[br] Notes:[br] - This bit
                               only has meaning if bit 3 of this register is
                               also set to 1, enabling VGA I/O decoding and
                               forwarding by the bridge.[br] - Refer to PCI-PCI
                               Bridge Specification Revision 1.2 for further
                               details of this bit behavior.
                            */
    UINT16 rsvd : 1;

                            /* Bits[5:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 sbr : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               1: Setting this bit triggers a hot reset on the
                               link for the corresponding PCI Express port and
                               the PCI Express hierarchy domain subordinate to
                               the port. This sends the LTSSM into the Training
                               (or Link) Control Reset state, which necessarily
                               implies a reset to the downstream device and all
                               subordinate devices. The transaction layer
                               corresponding to port will be emptied by virtue
                               of the link going down when this bit is set.
                               This means that in the outbound direction, all
                               posted transactions are dropped and non-posted
                               transactions are sent a UR response. In the
                               inbound direction, completions for inbound NP
                               requests are dropped when they arrive. Inbound
                               posted writes are retired normally.Note also
                               that a secondary bus reset will not reset the
                               virtual PCI-to-PCI bridge configuration
                               registers of the targeted PCI Express port.[br]
                               0: No reset happens on the PCI Express port.
                            */
    UINT16 rsvd_7 : 9;

                            /* Bits[15:7], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT16 Data;

} BANK7_BCTRL_IIO_VTD_STRUCT;

/* BANK7_BANKCTRL2_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x108009e8)                                                      */
/*      SPRB0 (0x108009e8)                                                      */
/*      SPRHBM (0x108009e8)                                                     */
/*      SPRC0 (0x108009e8)                                                      */
/*      SPRMCC (0x108009e8)                                                     */
/*      SPRUCC (0x108009e8)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the decode logic associated with an arbitrary type 1 IOSF agent (i.e. PCI bridge)
*/


#define BANK7_BANKCTRL2_IIO_VTD_REG 0x110109E8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 devfunc_mask : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               When set, indicates to HW that the contents of
                               devfunc register for the bank are invalid, and
                               should not be used. Since this field is relevant
                               only for type1 bank, setting it essentially
                               ensures that only type1 cfg traffic will be
                               routed based on the secondary and subordinate
                               bus range programmed within this bank.
                            */
    UINT16 rsvd : 15;

                            /* Bits[15:1], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT16 Data;

} BANK7_BANKCTRL2_IIO_VTD_STRUCT;

/* BANK7_MCAST_CTRL_IIO_VTD_REG supported on:                                   */
/*      SPRA0 (0x108009ee)                                                      */
/*      SPRB0 (0x108009ee)                                                      */
/*      SPRHBM (0x108009ee)                                                     */
/*      SPRC0 (0x108009ee)                                                      */
/*      SPRMCC (0x108009ee)                                                     */
/*      SPRUCC (0x108009ee)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the Dualcast Control Register (Dualcast is a specialized version of PCIe Multicast used in conjunction with the Non-Transparent Bridge). The fields in this register mirror the fields in the PCIe spec-defined Multicast Control Register (see section 7.21.3 of the PCIe 3.0 spec).
*/


#define BANK7_MCAST_CTRL_IIO_VTD_REG 0x110109EE

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 mc_num_group : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000000*/

                            /*
                               This field only supports and implements bits
                               [3:0]. Bits [5:4] are not supported.
                            */
    UINT16 rsvd_mc_ctrl_14_6 : 9;

                            /* Bits[14:6], Access Type=RO, default=0x00000000*/

                            /* Rsvd Mc Ctrl 14 6 */
    UINT16 mc_enable : 1;

                            /* Bits[15:15], Access Type=RW/L, default=0x00000000*/

                            /* Mc Enable */

  } Bits;
  UINT16 Data;

} BANK7_MCAST_CTRL_IIO_VTD_STRUCT;

/* BANK7_MCAST_BASE_N0_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x208009f0)                                                      */
/*      SPRB0 (0x208009f0)                                                      */
/*      SPRHBM (0x208009f0)                                                     */
/*      SPRC0 (0x208009f0)                                                      */
/*      SPRMCC (0x208009f0)                                                     */
/*      SPRUCC (0x208009f0)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the Dualcast Base Address Register (Dualcast is a specialized version of PCIe Multicast used in conjunction with the Non-Transparent Bridge). The fields in this register mirror the fields in the PCIe spec-defined MC_Base_Address Register (see section 7.21.4 of the PCIe 3.0 spec).
*/


#define BANK7_MCAST_BASE_N0_IIO_VTD_REG 0x110209F0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mc_index_position : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000000*/

                            /* Mc Index Position */
    UINT32 rsvd_mc_base_11_6 : 6;

                            /* Bits[11:6], Access Type=RO, default=0x00000000*/

                            /* Rsvd Mc Base 11 6 */
    UINT32 mc_base_address : 20;

                            /* Bits[31:12], Access Type=RW, default=0x00000000*/

                            /* Mc Base Address */

  } Bits;
  UINT32 Data;

} BANK7_MCAST_BASE_N0_IIO_VTD_STRUCT;

/* BANK7_MCAST_BASE_N1_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x208009f4)                                                      */
/*      SPRB0 (0x208009f4)                                                      */
/*      SPRHBM (0x208009f4)                                                     */
/*      SPRC0 (0x208009f4)                                                      */
/*      SPRMCC (0x208009f4)                                                     */
/*      SPRUCC (0x208009f4)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the Dualcast Base Address Register (Dualcast is a specialized version of PCIe Multicast used in conjunction with the Non-Transparent Bridge). The fields in this register mirror the fields in the PCIe spec-defined MC_Base_Address Register (see section 7.21.4 of the PCIe 3.0 spec).
*/


#define BANK7_MCAST_BASE_N1_IIO_VTD_REG 0x110209F4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mc_base_address : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /* Mc Base Address */

  } Bits;
  UINT32 Data;

} BANK7_MCAST_BASE_N1_IIO_VTD_STRUCT;

/* BANK7_MCAST_RCV_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x108009f8)                                                      */
/*      SPRB0 (0x108009f8)                                                      */
/*      SPRHBM (0x108009f8)                                                     */
/*      SPRC0 (0x108009f8)                                                      */
/*      SPRMCC (0x108009f8)                                                     */
/*      SPRUCC (0x108009f8)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the Dualcast Receive Register (Dualcast is a specialized version of PCIe Multicast used in conjunction with the Non-Transparent Bridge). The fields in this register mirror the fields in the PCIe spec-defined MC_Receive Register (see section 7.21.5 of the PCIe 3.0 spec).
*/


#define BANK7_MCAST_RCV_IIO_VTD_REG 0x110109F8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 mc_rcv : 16;

                            /* Bits[15:0], Access Type=RW, default=0x00000000*/

                            /* Mc Rcv */

  } Bits;
  UINT16 Data;

} BANK7_MCAST_RCV_IIO_VTD_STRUCT;

/* BANK7_PMCSR_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x208009fc)                                                      */
/*      SPRB0 (0x208009fc)                                                      */
/*      SPRHBM (0x208009fc)                                                     */
/*      SPRC0 (0x208009fc)                                                      */
/*      SPRMCC (0x208009fc)                                                     */
/*      SPRUCC (0x208009fc)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the PCIe Power Management Capability Register in the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK7_PMCSR_IIO_VTD_REG 0x110209FC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 power_state : 2;

                            /* Bits[1:0], Access Type=RW, default=0x00000000*/

                            /*
                               This 2-bit field is used to determine the
                               current power state of the function and to set a
                               new power state as well.[br] 00: D0[br] 01:
                               D1[br] 10: D2[br] 11: D3_hot[br] All devices
                               will respond to only Type 0 configuration
                               transactions (targeting the device's
                               configuration space itself) when in D3hot state
                               (root port will not forward Type 1/0
                               transactions to the downstream link) and will
                               not respond to memory/IO transactions (i.e.
                               D3hot state is equivalent to MSE/IOSE bits being
                               clear) as target and will not generate any
                               memory/IO/configuration transactions as
                               initiator on the primary bus (messages are still
                               allowed to pass through).[br] WARNING: MS2IOSF
                               hardware does NOT block any requests targeting
                               the device when the device is not in D0. The
                               IOSF device must be robust enough to handle
                               requests in non-D0 power states. In addition,
                               software should not rely on the accuracy of this
                               shadow register, but instead read the actual
                               PMCSR of the device.
                            */
    UINT32 rsvd : 30;

                            /* Bits[31:2], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} BANK7_PMCSR_IIO_VTD_STRUCT;

/* BANK8_BANKCTRL_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x800a00)                                                        */
/*      SPRB0 (0x800a00)                                                        */
/*      SPRHBM (0x800a00)                                                       */
/*      SPRC0 (0x800a00)                                                        */
/*      SPRMCC (0x800a00)                                                       */
/*      SPRUCC (0x800a00)                                                       */
/* Register default value on SPRA0: 0x00000080                                  */
/* Register default value on SPRB0: 0x00000080                                  */
/* Register default value on SPRHBM: 0x00000080                                 */
/* Register default value on SPRC0: 0x00000080                                  */
/* Register default value on SPRMCC: 0x00000080                                 */
/* Register default value on SPRUCC: 0x00000080                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the source decode logic associated with an arbitrary type 0 IOSF agent (i.e. IOSF endpoint)
*/


#define BANK8_BANKCTRL_IIO_VTD_REG 0x11000A00

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 banktype : 2;

                            /* Bits[1:0], Access Type=RO, default=0x00000000*/

                            /*
                               Specifies the type of Bank Decoder. Valid values
                               are:[br] 00b: Type 0 Bank - 16 Bytes[br] 01b:
                               Type 1 Bank - 64 Bytes[br] 10b: reserved[br]
                               11b: Subtractive Decode Bank - 8 Bytes
                            */
    UINT8 force_config_type0 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               If this bit is set, MS2IOSF sends any
                               configuration request that matches this bank as
                               type 0. Enables support for SR-IOV RCIEP.
                            */
    UINT8 bank_decode_enable : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               1b: The bank decoders are enabled.[br] 0b: The
                               bank decoders are disabled.
                            */
    UINT8 shadow_enable : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               1b: Outbound configuration requests that target
                               the Device/Function specified by this bank on
                               the RootBus will be snarfed to the shadow copy
                               of decode registers.[br] 0b: Outbound
                               configuration requests will not be snarfed. BIOS
                               must program the decode registers to allow this
                               bank to decode to the bank's specified target.
                            */
    UINT8 flr_supported : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               1b: The device decoded by this bank supports the
                               optional Function Level Reset mechanism. If
                               MS2IOSF observes a 1 being written to the
                               "Initiate FLR" (bit 15 of Device Control
                               Register), it clears the shadowed registers in
                               this bank.[br] 0b: The device decoded by this
                               bank does not support the optional Function
                               Level Reset mechanism.
                            */
    UINT8 rsvd : 1;

                            /* Bits[6:6], Access Type=RO, default=None*/

                            /* Reserved */
    UINT8 function_mask : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               When set, causes the DevFunc.Function field to
                               become ignored. Any configuration request that
                               matches the DevFunc.Device field with any
                               function value will be a match for this decoder
                               bank.
                            */

  } Bits;
  UINT8 Data;

} BANK8_BANKCTRL_IIO_VTD_STRUCT;

/* BANK8_DEVFUNC_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x800a01)                                                        */
/*      SPRB0 (0x800a01)                                                        */
/*      SPRHBM (0x800a01)                                                       */
/*      SPRC0 (0x800a01)                                                        */
/*      SPRMCC (0x800a01)                                                       */
/*      SPRUCC (0x800a01)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* PCI Device and Function number of the IOSF agent being shadowed
*/


#define BANK8_DEVFUNC_IIO_VTD_REG 0x11000A01

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 func : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target Function Number on the
                               RootBus that this bank decodes for.
                            */
    UINT8 device : 5;

                            /* Bits[7:3], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target Device Number on the
                               RootBus that this bank decodes for.
                            */

  } Bits;
  UINT8 Data;

} BANK8_DEVFUNC_IIO_VTD_STRUCT;

/* BANK8_DESTID_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x10800a02)                                                      */
/*      SPRB0 (0x10800a02)                                                      */
/*      SPRHBM (0x10800a02)                                                     */
/*      SPRC0 (0x10800a02)                                                      */
/*      SPRMCC (0x10800a02)                                                     */
/*      SPRUCC (0x10800a02)                                                     */
/* Register default value on SPRA0: 0x00002188                                  */
/* Register default value on SPRB0: 0x00002188                                  */
/* Register default value on SPRHBM: 0x00002188                                 */
/* Register default value on SPRC0: 0x00002188                                  */
/* Register default value on SPRMCC: 0x00002188                                 */
/* Register default value on SPRUCC: 0x00002188                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* The lower 14 bits of this register comprise the PSF-required source decode information that MS2IOSF provides on the tdest_id signal when presenting the request to PSF (note exception for MS2IOSF_Port).
*/


#define BANK8_DESTID_IIO_VTD_REG 0x11010A02

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 psf_channel : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies which IOSF channel to send requests
                               that hit this bank decoder ranges. This field is
                               used for IOSF Channel and also as part of the
                               IOSF Destination ID.
                            */
    UINT16 psf_port : 3;

                            /* Bits[5:3], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF port to send requests that
                               hit this bank decoder ranges.
                            */
    UINT16 ms2iosf_port : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the MS2IOSF port (left = 0, right = 1)
                               where to send requests that hit this bank
                               decoder. The logic should mask this bit to zero
                               before sending the 14-bit PSF source decode
                               header out. Technically, this is the top bit of
                               the PSF port ID, but MS2IOSF is using it for
                               internal purposes.
                            */
    UINT16 psf_port_group : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF port group to send requests
                               that hit this bank decoder ranges.
                            */
    UINT16 psf_id : 4;

                            /* Bits[11:8], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF to send requests that hit
                               this bank decoder ranges.
                            */
    UINT16 psf_decode_mode : 2;

                            /* Bits[13:12], Access Type=RW, default=0x00000002*/

                            /*
                               Specifies the PSF Destination ID decode mode
                               being used.[br] 00b: Fabric Decode[br] 01b:
                               Implicit Decode[br] 10b: Source Decode to
                               PSF_ID:Port_Group:Port:Channel[br] 11b: Source
                               Decode to PSF_ID, use Fabric Decode from there
                               onward (StF)
                            */
    UINT16 ms2iosf_channel : 2;

                            /* Bits[15:14], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies to which IOSF channel to send requests
                               that hit this bank decoder. Note the difference
                               between this channel ID and the channel ID
                               provided in the source decode header below. The
                               former specifies the channel ID on the MS2IOSF
                               interface itself whereas the latter specifies
                               the channel ID on the PSF interface to the
                               endpoint. MS2IOSF has four channels for each of
                               its two ports.
                            */

  } Bits;
  UINT16 Data;

} BANK8_DESTID_IIO_VTD_STRUCT;

/* BANK8_DEVCON_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x10800a04)                                                      */
/*      SPRB0 (0x10800a04)                                                      */
/*      SPRHBM (0x10800a04)                                                     */
/*      SPRC0 (0x10800a04)                                                      */
/*      SPRMCC (0x10800a04)                                                     */
/*      SPRUCC (0x10800a04)                                                     */
/* Register default value on SPRA0: 0x000000E0                                  */
/* Register default value on SPRB0: 0x000000E0                                  */
/* Register default value on SPRHBM: 0x000000E0                                 */
/* Register default value on SPRC0: 0x000000E0                                  */
/* Register default value on SPRMCC: 0x000000E0                                 */
/* Register default value on SPRUCC: 0x000000E0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK8_DEVCON_IIO_VTD_REG 0x11010A04

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 rsvd : 5;

                            /* Bits[4:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 max_payload_size : 3;

                            /* Bits[7:5], Access Type=RW/V, default=0x00000007*/

                            /*
                               Indicates the largest packet size supported by
                               the target decoded by this bank.[br] Defined
                               encodings for this field are:[br] 000b 128 bytes
                               max payload size[br] 001b 256 bytes max payload
                               size[br] 010b 512 bytes max payload size[br]
                               011b 1024 bytes max payload size[br] 100b 2048
                               bytes max payload size[br] 101b 4096 bytes max
                               payload size[br] 110b Reserved[br] 111b 64
                               address aligned bytes max payload size
                            */
    UINT16 rsvd_8 : 7;

                            /* Bits[14:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 initiate_flr : 1;

                            /* Bits[15:15], Access Type=RW/V, default=0x00000000*/

                            /*
                               Initiate Function Level Reset. A write of '1' to
                               the DEVCON[15] field of the device this bank
                               shadows, will cause all shadow-enabled registers
                               for this bank to reset. DEVCON[15] maps to this
                               field. This bit self-clears.
                            */

  } Bits;
  UINT16 Data;

} BANK8_DEVCON_IIO_VTD_STRUCT;

/* BANK8_DEVCON_OFFSET_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x800a07)                                                        */
/*      SPRB0 (0x800a07)                                                        */
/*      SPRHBM (0x800a07)                                                       */
/*      SPRC0 (0x800a07)                                                        */
/*      SPRMCC (0x800a07)                                                       */
/*      SPRUCC (0x800a07)                                                       */
/* Register default value on SPRA0: 0x00000048                                  */
/* Register default value on SPRB0: 0x00000048                                  */
/* Register default value on SPRHBM: 0x00000048                                 */
/* Register default value on SPRC0: 0x00000048                                  */
/* Register default value on SPRMCC: 0x00000048                                 */
/* Register default value on SPRUCC: 0x00000048                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Offset of the PCI Express Device Control Register in the IOSF agent's configuration header
*/


#define BANK8_DEVCON_OFFSET_IIO_VTD_REG 0x11000A07

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 devcon_shadowen : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               If this bit and DevCon_Master are set, MS2IOSF
                               shadows writes to the offset programmed above
                               into its copy of the device control register.
                               BIOS must clear this bit for devices that do not
                               have a device control register. If shadowing is
                               disabled for this bank, this bit has no effect.
                            */
    UINT8 devcon_master : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Indicates whether or not this shadow copy is the
                               master copy. For devices that use multiple bank
                               decoders, SW is required to enable one of them
                               as a master. HW shadowing only updates the
                               master copy. Likewise, HW only uses the master
                               copy as input to other logic such as completion
                               combining. For devices that use only one bank
                               decoder, SW is required to set this bit.
                            */
    UINT8 devcon_offset : 6;

                            /* Bits[7:2], Access Type=RW, default=0x00000012*/

                            /*
                               Configuration space register offset for the
                               Device control register. This is a DWord offset
                               (left-shift this value by two to get byte
                               offset). Note that although this points to the
                               lowest order byte of the register, only the
                               upper byte of the register is captured by this
                               bank, which is at this offset + 1h.
                            */

  } Bits;
  UINT8 Data;

} BANK8_DEVCON_OFFSET_IIO_VTD_STRUCT;

/* BANK8_BARSIZE_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x800a08)                                                        */
/*      SPRB0 (0x800a08)                                                        */
/*      SPRHBM (0x800a08)                                                       */
/*      SPRC0 (0x800a08)                                                        */
/*      SPRMCC (0x800a08)                                                       */
/*      SPRUCC (0x800a08)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Size of the memory BAR being shadowed in this bank
*/


#define BANK8_BARSIZE_IIO_VTD_REG 0x11000A08

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 type : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               This bit allows the size of the BAR to be
                               selected. Generally, 32b BARs will be programmed
                               below 4GB boundary and 64b BARs will be
                               programmed above 4GB.[br] 0: 32b BAR[br] 1: 64b
                               BAR
                            */
    UINT8 rsvd : 1;

                            /* Bits[1:1], Access Type=RO, default=None*/

                            /* Reserved */
    UINT8 size : 6;

                            /* Bits[7:2], Access Type=RW, default=0x00000000*/

                            /*
                               Value indicating the size of 64-bit BAR. This
                               value is written by BIOS prior to enumeration.
                               The value indicates the lowest order address bit
                               that is writeable in the BAR. Only legal
                               settings are 12 to 51 (decimal), representing
                               BAR sizes of 4KB through 128PB.[br] Notes:[br] -
                               Programming a value of '0' or any other value
                               other than 12 to 51 will result in the BAR being
                               disabled.
                            */

  } Bits;
  UINT8 Data;

} BANK8_BARSIZE_IIO_VTD_STRUCT;

/* BANK8_BAR_OFFSET_IIO_VTD_REG supported on:                                   */
/*      SPRA0 (0x800a0a)                                                        */
/*      SPRB0 (0x800a0a)                                                        */
/*      SPRHBM (0x800a0a)                                                       */
/*      SPRC0 (0x800a0a)                                                        */
/*      SPRMCC (0x800a0a)                                                       */
/*      SPRUCC (0x800a0a)                                                       */
/* Register default value on SPRA0: 0x00000010                                  */
/* Register default value on SPRB0: 0x00000010                                  */
/* Register default value on SPRHBM: 0x00000010                                 */
/* Register default value on SPRC0: 0x00000010                                  */
/* Register default value on SPRMCC: 0x00000010                                 */
/* Register default value on SPRUCC: 0x00000010                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Offset of the shadowed BAR in the IOSF agent's configuration header
*/


#define BANK8_BAR_OFFSET_IIO_VTD_REG 0x11000A0A

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 rsvd : 2;

                            /* Bits[1:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT8 bar_offset : 4;

                            /* Bits[5:2], Access Type=RW, default=0x00000004*/

                            /*
                               Configuration space register offset for the BAR
                               register.[br] The only valid values for a 32b
                               BAR (offset [5:2]) are 0100b, 0101b, 0110b,
                               0111b, 1000b, and 1001b.[br] The only valid
                               values for 64b BAR (offset [5:2]) are 0100b,
                               0110b, and 1000b.[br] Note that this field is a
                               DW offset.
                            */
    UINT8 rsvd_6 : 2;

                            /* Bits[7:6], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT8 Data;

} BANK8_BAR_OFFSET_IIO_VTD_STRUCT;

/* BANK8_BAR_N0_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x20800a10)                                                      */
/*      SPRB0 (0x20800a10)                                                      */
/*      SPRHBM (0x20800a10)                                                     */
/*      SPRC0 (0x20800a10)                                                      */
/*      SPRMCC (0x20800a10)                                                     */
/*      SPRUCC (0x20800a10)                                                     */
/* Register default value on SPRA0: 0x40000000                                  */
/* Register default value on SPRB0: 0x40000000                                  */
/* Register default value on SPRHBM: 0x40000000                                 */
/* Register default value on SPRC0: 0x40000000                                  */
/* Register default value on SPRMCC: 0x40000000                                 */
/* Register default value on SPRUCC: 0x40000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the memory Base Address Register (BAR) in the IOSF agent's configuration header. BIOS can disable shadowing and/or overwrite the values in this register. If MS2IOSF observes FLR to the device and function shadowed by this bank, it clears this register.
*/


#define BANK8_BAR_N0_IIO_VTD_REG 0x11020A10

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 memory_space_indicator : 1;

                            /* Bits[0:0], Access Type=RO, default=0x00000000*/

                            /* BAR resource is memory (as opposed to I/O). */
    UINT32 type : 2;

                            /* Bits[2:1], Access Type=RO/V, default=0x00000000*/

                            /*
                               00: Memory type claimed by the BAR is 32-bit
                               addressable[br] 10: Memory type claimed by the
                               BAR is 64-bit addressable[br] The value in this
                               register is selected by the BARSZ.Type bit.
                            */
    UINT32 prefetchable : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000000*/

                            /* BAR points to Prefetchable memory. */
    UINT32 rsvd : 8;

                            /* Bits[11:4], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 address : 20;

                            /* Bits[31:12], Access Type=RW/V, default=0x00040000*/

                            /*
                               Sets the location of the BAR written by
                               software[br] The number of bits that are
                               writable in this register is dictated by the
                               value loaded into the BARSZ register by the BIOS
                               at initialization time (before BIOS PCI
                               enumeration). BARSZ indicates the lowest order
                               bit of this register field that is writeable
                               where valid values are 12-51.[br] - If BARSZ is
                               set to 12, all bits are writeable.[br] - If
                               BARSZ is set to 52, all bits are read only and
                               0.[br] - If the BARSZ.Type bit is clear, then
                               bits 63:32 will be read only and 0.[br] - For
                               the special case where BARSZ = 0, bits 63:0 are
                               all read only and 0 resulting in the BAR being
                               disabled.[br] Note: The lowest order address bit
                               is 12 to enforce a minimum granularity of 4 KB.
                            */

  } Bits;
  UINT32 Data;

} BANK8_BAR_N0_IIO_VTD_STRUCT;

/* BANK8_BAR_N1_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x20800a14)                                                      */
/*      SPRB0 (0x20800a14)                                                      */
/*      SPRHBM (0x20800a14)                                                     */
/*      SPRC0 (0x20800a14)                                                      */
/*      SPRMCC (0x20800a14)                                                     */
/*      SPRUCC (0x20800a14)                                                     */
/* Register default value on SPRA0: 0xFFFFFFFF                                  */
/* Register default value on SPRB0: 0xFFFFFFFF                                  */
/* Register default value on SPRHBM: 0xFFFFFFFF                                 */
/* Register default value on SPRC0: 0xFFFFFFFF                                  */
/* Register default value on SPRMCC: 0xFFFFFFFF                                 */
/* Register default value on SPRUCC: 0xFFFFFFFF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the memory Base Address Register (BAR) in the IOSF agent's configuration header. BIOS can disable shadowing and/or overwrite the values in this register. If MS2IOSF observes FLR to the device and function shadowed by this bank, it clears this register.
*/


#define BANK8_BAR_N1_IIO_VTD_REG 0x11020A14

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 address : 32;

                            /* Bits[31:0], Access Type=RW/V, default=0xFFFFFFFF*/

                            /*
                               Sets the location of the BAR written by
                               software[br] The number of bits that are
                               writable in this register is dictated by the
                               value loaded into the BARSZ register by the BIOS
                               at initialization time (before BIOS PCI
                               enumeration). BARSZ indicates the lowest order
                               bit of this register field that is writeable
                               where valid values are 12-51.[br] - If BARSZ is
                               set to 12, all bits are writeable.[br] - If
                               BARSZ is set to 52, all bits are read only and
                               0.[br] - If the BARSZ.Type bit is clear, then
                               bits 63:32 will be read only and 0.[br] - For
                               the special case where BARSZ = 0, bits 63:0 are
                               all read only and 0 resulting in the BAR being
                               disabled.[br] Note: The lowest order address bit
                               is 12 to enforce a minimum granularity of 4 KB.
                            */

  } Bits;
  UINT32 Data;

} BANK8_BAR_N1_IIO_VTD_STRUCT;

/* BANK9_BANKCTRL_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x800a20)                                                        */
/*      SPRB0 (0x800a20)                                                        */
/*      SPRHBM (0x800a20)                                                       */
/*      SPRC0 (0x800a20)                                                        */
/*      SPRMCC (0x800a20)                                                       */
/*      SPRUCC (0x800a20)                                                       */
/* Register default value on SPRA0: 0x00000080                                  */
/* Register default value on SPRB0: 0x00000080                                  */
/* Register default value on SPRHBM: 0x00000080                                 */
/* Register default value on SPRC0: 0x00000080                                  */
/* Register default value on SPRMCC: 0x00000080                                 */
/* Register default value on SPRUCC: 0x00000080                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the source decode logic associated with an arbitrary type 0 IOSF agent (i.e. IOSF endpoint)
*/


#define BANK9_BANKCTRL_IIO_VTD_REG 0x11000A20

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 banktype : 2;

                            /* Bits[1:0], Access Type=RO, default=0x00000000*/

                            /*
                               Specifies the type of Bank Decoder. Valid values
                               are:[br] 00b: Type 0 Bank - 16 Bytes[br] 01b:
                               Type 1 Bank - 64 Bytes[br] 10b: reserved[br]
                               11b: Subtractive Decode Bank - 8 Bytes
                            */
    UINT8 force_config_type0 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               If this bit is set, MS2IOSF sends any
                               configuration request that matches this bank as
                               type 0. Enables support for SR-IOV RCIEP.
                            */
    UINT8 bank_decode_enable : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               1b: The bank decoders are enabled.[br] 0b: The
                               bank decoders are disabled.
                            */
    UINT8 shadow_enable : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               1b: Outbound configuration requests that target
                               the Device/Function specified by this bank on
                               the RootBus will be snarfed to the shadow copy
                               of decode registers.[br] 0b: Outbound
                               configuration requests will not be snarfed. BIOS
                               must program the decode registers to allow this
                               bank to decode to the bank's specified target.
                            */
    UINT8 flr_supported : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               1b: The device decoded by this bank supports the
                               optional Function Level Reset mechanism. If
                               MS2IOSF observes a 1 being written to the
                               "Initiate FLR" (bit 15 of Device Control
                               Register), it clears the shadowed registers in
                               this bank.[br] 0b: The device decoded by this
                               bank does not support the optional Function
                               Level Reset mechanism.
                            */
    UINT8 rsvd : 1;

                            /* Bits[6:6], Access Type=RO, default=None*/

                            /* Reserved */
    UINT8 function_mask : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               When set, causes the DevFunc.Function field to
                               become ignored. Any configuration request that
                               matches the DevFunc.Device field with any
                               function value will be a match for this decoder
                               bank.
                            */

  } Bits;
  UINT8 Data;

} BANK9_BANKCTRL_IIO_VTD_STRUCT;

/* BANK9_DEVFUNC_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x800a21)                                                        */
/*      SPRB0 (0x800a21)                                                        */
/*      SPRHBM (0x800a21)                                                       */
/*      SPRC0 (0x800a21)                                                        */
/*      SPRMCC (0x800a21)                                                       */
/*      SPRUCC (0x800a21)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* PCI Device and Function number of the IOSF agent being shadowed
*/


#define BANK9_DEVFUNC_IIO_VTD_REG 0x11000A21

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 func : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target Function Number on the
                               RootBus that this bank decodes for.
                            */
    UINT8 device : 5;

                            /* Bits[7:3], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target Device Number on the
                               RootBus that this bank decodes for.
                            */

  } Bits;
  UINT8 Data;

} BANK9_DEVFUNC_IIO_VTD_STRUCT;

/* BANK9_DESTID_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x10800a22)                                                      */
/*      SPRB0 (0x10800a22)                                                      */
/*      SPRHBM (0x10800a22)                                                     */
/*      SPRC0 (0x10800a22)                                                      */
/*      SPRMCC (0x10800a22)                                                     */
/*      SPRUCC (0x10800a22)                                                     */
/* Register default value on SPRA0: 0x00002188                                  */
/* Register default value on SPRB0: 0x00002188                                  */
/* Register default value on SPRHBM: 0x00002188                                 */
/* Register default value on SPRC0: 0x00002188                                  */
/* Register default value on SPRMCC: 0x00002188                                 */
/* Register default value on SPRUCC: 0x00002188                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* The lower 14 bits of this register comprise the PSF-required source decode information that MS2IOSF provides on the tdest_id signal when presenting the request to PSF (note exception for MS2IOSF_Port).
*/


#define BANK9_DESTID_IIO_VTD_REG 0x11010A22

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 psf_channel : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies which IOSF channel to send requests
                               that hit this bank decoder ranges. This field is
                               used for IOSF Channel and also as part of the
                               IOSF Destination ID.
                            */
    UINT16 psf_port : 3;

                            /* Bits[5:3], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF port to send requests that
                               hit this bank decoder ranges.
                            */
    UINT16 ms2iosf_port : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the MS2IOSF port (left = 0, right = 1)
                               where to send requests that hit this bank
                               decoder. The logic should mask this bit to zero
                               before sending the 14-bit PSF source decode
                               header out. Technically, this is the top bit of
                               the PSF port ID, but MS2IOSF is using it for
                               internal purposes.
                            */
    UINT16 psf_port_group : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF port group to send requests
                               that hit this bank decoder ranges.
                            */
    UINT16 psf_id : 4;

                            /* Bits[11:8], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF to send requests that hit
                               this bank decoder ranges.
                            */
    UINT16 psf_decode_mode : 2;

                            /* Bits[13:12], Access Type=RW, default=0x00000002*/

                            /*
                               Specifies the PSF Destination ID decode mode
                               being used.[br] 00b: Fabric Decode[br] 01b:
                               Implicit Decode[br] 10b: Source Decode to
                               PSF_ID:Port_Group:Port:Channel[br] 11b: Source
                               Decode to PSF_ID, use Fabric Decode from there
                               onward (StF)
                            */
    UINT16 ms2iosf_channel : 2;

                            /* Bits[15:14], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies to which IOSF channel to send requests
                               that hit this bank decoder. Note the difference
                               between this channel ID and the channel ID
                               provided in the source decode header below. The
                               former specifies the channel ID on the MS2IOSF
                               interface itself whereas the latter specifies
                               the channel ID on the PSF interface to the
                               endpoint. MS2IOSF has four channels for each of
                               its two ports.
                            */

  } Bits;
  UINT16 Data;

} BANK9_DESTID_IIO_VTD_STRUCT;

/* BANK9_DEVCON_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x10800a24)                                                      */
/*      SPRB0 (0x10800a24)                                                      */
/*      SPRHBM (0x10800a24)                                                     */
/*      SPRC0 (0x10800a24)                                                      */
/*      SPRMCC (0x10800a24)                                                     */
/*      SPRUCC (0x10800a24)                                                     */
/* Register default value on SPRA0: 0x000000E0                                  */
/* Register default value on SPRB0: 0x000000E0                                  */
/* Register default value on SPRHBM: 0x000000E0                                 */
/* Register default value on SPRC0: 0x000000E0                                  */
/* Register default value on SPRMCC: 0x000000E0                                 */
/* Register default value on SPRUCC: 0x000000E0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK9_DEVCON_IIO_VTD_REG 0x11010A24

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 rsvd : 5;

                            /* Bits[4:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 max_payload_size : 3;

                            /* Bits[7:5], Access Type=RW/V, default=0x00000007*/

                            /*
                               Indicates the largest packet size supported by
                               the target decoded by this bank.[br] Defined
                               encodings for this field are:[br] 000b 128 bytes
                               max payload size[br] 001b 256 bytes max payload
                               size[br] 010b 512 bytes max payload size[br]
                               011b 1024 bytes max payload size[br] 100b 2048
                               bytes max payload size[br] 101b 4096 bytes max
                               payload size[br] 110b Reserved[br] 111b 64
                               address aligned bytes max payload size
                            */
    UINT16 rsvd_8 : 7;

                            /* Bits[14:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 initiate_flr : 1;

                            /* Bits[15:15], Access Type=RW/V, default=0x00000000*/

                            /*
                               Initiate Function Level Reset. A write of '1' to
                               the DEVCON[15] field of the device this bank
                               shadows, will cause all shadow-enabled registers
                               for this bank to reset. DEVCON[15] maps to this
                               field. This bit self-clears.
                            */

  } Bits;
  UINT16 Data;

} BANK9_DEVCON_IIO_VTD_STRUCT;

/* BANK9_DEVCON_OFFSET_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x800a27)                                                        */
/*      SPRB0 (0x800a27)                                                        */
/*      SPRHBM (0x800a27)                                                       */
/*      SPRC0 (0x800a27)                                                        */
/*      SPRMCC (0x800a27)                                                       */
/*      SPRUCC (0x800a27)                                                       */
/* Register default value on SPRA0: 0x00000048                                  */
/* Register default value on SPRB0: 0x00000048                                  */
/* Register default value on SPRHBM: 0x00000048                                 */
/* Register default value on SPRC0: 0x00000048                                  */
/* Register default value on SPRMCC: 0x00000048                                 */
/* Register default value on SPRUCC: 0x00000048                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Offset of the PCI Express Device Control Register in the IOSF agent's configuration header
*/


#define BANK9_DEVCON_OFFSET_IIO_VTD_REG 0x11000A27

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 devcon_shadowen : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               If this bit and DevCon_Master are set, MS2IOSF
                               shadows writes to the offset programmed above
                               into its copy of the device control register.
                               BIOS must clear this bit for devices that do not
                               have a device control register. If shadowing is
                               disabled for this bank, this bit has no effect.
                            */
    UINT8 devcon_master : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Indicates whether or not this shadow copy is the
                               master copy. For devices that use multiple bank
                               decoders, SW is required to enable one of them
                               as a master. HW shadowing only updates the
                               master copy. Likewise, HW only uses the master
                               copy as input to other logic such as completion
                               combining. For devices that use only one bank
                               decoder, SW is required to set this bit.
                            */
    UINT8 devcon_offset : 6;

                            /* Bits[7:2], Access Type=RW, default=0x00000012*/

                            /*
                               Configuration space register offset for the
                               Device control register. This is a DWord offset
                               (left-shift this value by two to get byte
                               offset). Note that although this points to the
                               lowest order byte of the register, only the
                               upper byte of the register is captured by this
                               bank, which is at this offset + 1h.
                            */

  } Bits;
  UINT8 Data;

} BANK9_DEVCON_OFFSET_IIO_VTD_STRUCT;

/* BANK9_BARSIZE_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x800a28)                                                        */
/*      SPRB0 (0x800a28)                                                        */
/*      SPRHBM (0x800a28)                                                       */
/*      SPRC0 (0x800a28)                                                        */
/*      SPRMCC (0x800a28)                                                       */
/*      SPRUCC (0x800a28)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Size of the memory BAR being shadowed in this bank
*/


#define BANK9_BARSIZE_IIO_VTD_REG 0x11000A28

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 type : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               This bit allows the size of the BAR to be
                               selected. Generally, 32b BARs will be programmed
                               below 4GB boundary and 64b BARs will be
                               programmed above 4GB.[br] 0: 32b BAR[br] 1: 64b
                               BAR
                            */
    UINT8 rsvd : 1;

                            /* Bits[1:1], Access Type=RO, default=None*/

                            /* Reserved */
    UINT8 size : 6;

                            /* Bits[7:2], Access Type=RW, default=0x00000000*/

                            /*
                               Value indicating the size of 64-bit BAR. This
                               value is written by BIOS prior to enumeration.
                               The value indicates the lowest order address bit
                               that is writeable in the BAR. Only legal
                               settings are 12 to 51 (decimal), representing
                               BAR sizes of 4KB through 128PB.[br] Notes:[br] -
                               Programming a value of '0' or any other value
                               other than 12 to 51 will result in the BAR being
                               disabled.
                            */

  } Bits;
  UINT8 Data;

} BANK9_BARSIZE_IIO_VTD_STRUCT;

/* BANK9_BAR_OFFSET_IIO_VTD_REG supported on:                                   */
/*      SPRA0 (0x800a2a)                                                        */
/*      SPRB0 (0x800a2a)                                                        */
/*      SPRHBM (0x800a2a)                                                       */
/*      SPRC0 (0x800a2a)                                                        */
/*      SPRMCC (0x800a2a)                                                       */
/*      SPRUCC (0x800a2a)                                                       */
/* Register default value on SPRA0: 0x00000010                                  */
/* Register default value on SPRB0: 0x00000010                                  */
/* Register default value on SPRHBM: 0x00000010                                 */
/* Register default value on SPRC0: 0x00000010                                  */
/* Register default value on SPRMCC: 0x00000010                                 */
/* Register default value on SPRUCC: 0x00000010                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Offset of the shadowed BAR in the IOSF agent's configuration header
*/


#define BANK9_BAR_OFFSET_IIO_VTD_REG 0x11000A2A

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 rsvd : 2;

                            /* Bits[1:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT8 bar_offset : 4;

                            /* Bits[5:2], Access Type=RW, default=0x00000004*/

                            /*
                               Configuration space register offset for the BAR
                               register.[br] The only valid values for a 32b
                               BAR (offset [5:2]) are 0100b, 0101b, 0110b,
                               0111b, 1000b, and 1001b.[br] The only valid
                               values for 64b BAR (offset [5:2]) are 0100b,
                               0110b, and 1000b.[br] Note that this field is a
                               DW offset.
                            */
    UINT8 rsvd_6 : 2;

                            /* Bits[7:6], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT8 Data;

} BANK9_BAR_OFFSET_IIO_VTD_STRUCT;

/* BANK9_BAR_N0_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x20800a30)                                                      */
/*      SPRB0 (0x20800a30)                                                      */
/*      SPRHBM (0x20800a30)                                                     */
/*      SPRC0 (0x20800a30)                                                      */
/*      SPRMCC (0x20800a30)                                                     */
/*      SPRUCC (0x20800a30)                                                     */
/* Register default value on SPRA0: 0x40000000                                  */
/* Register default value on SPRB0: 0x40000000                                  */
/* Register default value on SPRHBM: 0x40000000                                 */
/* Register default value on SPRC0: 0x40000000                                  */
/* Register default value on SPRMCC: 0x40000000                                 */
/* Register default value on SPRUCC: 0x40000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the memory Base Address Register (BAR) in the IOSF agent's configuration header. BIOS can disable shadowing and/or overwrite the values in this register. If MS2IOSF observes FLR to the device and function shadowed by this bank, it clears this register.
*/


#define BANK9_BAR_N0_IIO_VTD_REG 0x11020A30

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 memory_space_indicator : 1;

                            /* Bits[0:0], Access Type=RO, default=0x00000000*/

                            /* BAR resource is memory (as opposed to I/O). */
    UINT32 type : 2;

                            /* Bits[2:1], Access Type=RO/V, default=0x00000000*/

                            /*
                               00: Memory type claimed by the BAR is 32-bit
                               addressable[br] 10: Memory type claimed by the
                               BAR is 64-bit addressable[br] The value in this
                               register is selected by the BARSZ.Type bit.
                            */
    UINT32 prefetchable : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000000*/

                            /* BAR points to Prefetchable memory. */
    UINT32 rsvd : 8;

                            /* Bits[11:4], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 address : 20;

                            /* Bits[31:12], Access Type=RW/V, default=0x00040000*/

                            /*
                               Sets the location of the BAR written by
                               software[br] The number of bits that are
                               writable in this register is dictated by the
                               value loaded into the BARSZ register by the BIOS
                               at initialization time (before BIOS PCI
                               enumeration). BARSZ indicates the lowest order
                               bit of this register field that is writeable
                               where valid values are 12-51.[br] - If BARSZ is
                               set to 12, all bits are writeable.[br] - If
                               BARSZ is set to 52, all bits are read only and
                               0.[br] - If the BARSZ.Type bit is clear, then
                               bits 63:32 will be read only and 0.[br] - For
                               the special case where BARSZ = 0, bits 63:0 are
                               all read only and 0 resulting in the BAR being
                               disabled.[br] Note: The lowest order address bit
                               is 12 to enforce a minimum granularity of 4 KB.
                            */

  } Bits;
  UINT32 Data;

} BANK9_BAR_N0_IIO_VTD_STRUCT;

/* BANK9_BAR_N1_IIO_VTD_REG supported on:                                       */
/*      SPRA0 (0x20800a34)                                                      */
/*      SPRB0 (0x20800a34)                                                      */
/*      SPRHBM (0x20800a34)                                                     */
/*      SPRC0 (0x20800a34)                                                      */
/*      SPRMCC (0x20800a34)                                                     */
/*      SPRUCC (0x20800a34)                                                     */
/* Register default value on SPRA0: 0xFFFFFFFF                                  */
/* Register default value on SPRB0: 0xFFFFFFFF                                  */
/* Register default value on SPRHBM: 0xFFFFFFFF                                 */
/* Register default value on SPRC0: 0xFFFFFFFF                                  */
/* Register default value on SPRMCC: 0xFFFFFFFF                                 */
/* Register default value on SPRUCC: 0xFFFFFFFF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the memory Base Address Register (BAR) in the IOSF agent's configuration header. BIOS can disable shadowing and/or overwrite the values in this register. If MS2IOSF observes FLR to the device and function shadowed by this bank, it clears this register.
*/


#define BANK9_BAR_N1_IIO_VTD_REG 0x11020A34

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 address : 32;

                            /* Bits[31:0], Access Type=RW/V, default=0xFFFFFFFF*/

                            /*
                               Sets the location of the BAR written by
                               software[br] The number of bits that are
                               writable in this register is dictated by the
                               value loaded into the BARSZ register by the BIOS
                               at initialization time (before BIOS PCI
                               enumeration). BARSZ indicates the lowest order
                               bit of this register field that is writeable
                               where valid values are 12-51.[br] - If BARSZ is
                               set to 12, all bits are writeable.[br] - If
                               BARSZ is set to 52, all bits are read only and
                               0.[br] - If the BARSZ.Type bit is clear, then
                               bits 63:32 will be read only and 0.[br] - For
                               the special case where BARSZ = 0, bits 63:0 are
                               all read only and 0 resulting in the BAR being
                               disabled.[br] Note: The lowest order address bit
                               is 12 to enforce a minimum granularity of 4 KB.
                            */

  } Bits;
  UINT32 Data;

} BANK9_BAR_N1_IIO_VTD_STRUCT;

/* BANK10_BANKCTRL_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x800a40)                                                        */
/*      SPRB0 (0x800a40)                                                        */
/*      SPRHBM (0x800a40)                                                       */
/*      SPRC0 (0x800a40)                                                        */
/*      SPRMCC (0x800a40)                                                       */
/*      SPRUCC (0x800a40)                                                       */
/* Register default value on SPRA0: 0x00000080                                  */
/* Register default value on SPRB0: 0x00000080                                  */
/* Register default value on SPRHBM: 0x00000080                                 */
/* Register default value on SPRC0: 0x00000080                                  */
/* Register default value on SPRMCC: 0x00000080                                 */
/* Register default value on SPRUCC: 0x00000080                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the source decode logic associated with an arbitrary type 0 IOSF agent (i.e. IOSF endpoint)
*/


#define BANK10_BANKCTRL_IIO_VTD_REG 0x11000A40

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 banktype : 2;

                            /* Bits[1:0], Access Type=RO, default=0x00000000*/

                            /*
                               Specifies the type of Bank Decoder. Valid values
                               are:[br] 00b: Type 0 Bank - 16 Bytes[br] 01b:
                               Type 1 Bank - 64 Bytes[br] 10b: reserved[br]
                               11b: Subtractive Decode Bank - 8 Bytes
                            */
    UINT8 force_config_type0 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               If this bit is set, MS2IOSF sends any
                               configuration request that matches this bank as
                               type 0. Enables support for SR-IOV RCIEP.
                            */
    UINT8 bank_decode_enable : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               1b: The bank decoders are enabled.[br] 0b: The
                               bank decoders are disabled.
                            */
    UINT8 shadow_enable : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               1b: Outbound configuration requests that target
                               the Device/Function specified by this bank on
                               the RootBus will be snarfed to the shadow copy
                               of decode registers.[br] 0b: Outbound
                               configuration requests will not be snarfed. BIOS
                               must program the decode registers to allow this
                               bank to decode to the bank's specified target.
                            */
    UINT8 flr_supported : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               1b: The device decoded by this bank supports the
                               optional Function Level Reset mechanism. If
                               MS2IOSF observes a 1 being written to the
                               "Initiate FLR" (bit 15 of Device Control
                               Register), it clears the shadowed registers in
                               this bank.[br] 0b: The device decoded by this
                               bank does not support the optional Function
                               Level Reset mechanism.
                            */
    UINT8 rsvd : 1;

                            /* Bits[6:6], Access Type=RO, default=None*/

                            /* Reserved */
    UINT8 function_mask : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               When set, causes the DevFunc.Function field to
                               become ignored. Any configuration request that
                               matches the DevFunc.Device field with any
                               function value will be a match for this decoder
                               bank.
                            */

  } Bits;
  UINT8 Data;

} BANK10_BANKCTRL_IIO_VTD_STRUCT;

/* BANK10_DEVFUNC_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x800a41)                                                        */
/*      SPRB0 (0x800a41)                                                        */
/*      SPRHBM (0x800a41)                                                       */
/*      SPRC0 (0x800a41)                                                        */
/*      SPRMCC (0x800a41)                                                       */
/*      SPRUCC (0x800a41)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* PCI Device and Function number of the IOSF agent being shadowed
*/


#define BANK10_DEVFUNC_IIO_VTD_REG 0x11000A41

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 func : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target Function Number on the
                               RootBus that this bank decodes for.
                            */
    UINT8 device : 5;

                            /* Bits[7:3], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target Device Number on the
                               RootBus that this bank decodes for.
                            */

  } Bits;
  UINT8 Data;

} BANK10_DEVFUNC_IIO_VTD_STRUCT;

/* BANK10_DESTID_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x10800a42)                                                      */
/*      SPRB0 (0x10800a42)                                                      */
/*      SPRHBM (0x10800a42)                                                     */
/*      SPRC0 (0x10800a42)                                                      */
/*      SPRMCC (0x10800a42)                                                     */
/*      SPRUCC (0x10800a42)                                                     */
/* Register default value on SPRA0: 0x00002188                                  */
/* Register default value on SPRB0: 0x00002188                                  */
/* Register default value on SPRHBM: 0x00002188                                 */
/* Register default value on SPRC0: 0x00002188                                  */
/* Register default value on SPRMCC: 0x00002188                                 */
/* Register default value on SPRUCC: 0x00002188                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* The lower 14 bits of this register comprise the PSF-required source decode information that MS2IOSF provides on the tdest_id signal when presenting the request to PSF (note exception for MS2IOSF_Port).
*/


#define BANK10_DESTID_IIO_VTD_REG 0x11010A42

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 psf_channel : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies which IOSF channel to send requests
                               that hit this bank decoder ranges. This field is
                               used for IOSF Channel and also as part of the
                               IOSF Destination ID.
                            */
    UINT16 psf_port : 3;

                            /* Bits[5:3], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF port to send requests that
                               hit this bank decoder ranges.
                            */
    UINT16 ms2iosf_port : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the MS2IOSF port (left = 0, right = 1)
                               where to send requests that hit this bank
                               decoder. The logic should mask this bit to zero
                               before sending the 14-bit PSF source decode
                               header out. Technically, this is the top bit of
                               the PSF port ID, but MS2IOSF is using it for
                               internal purposes.
                            */
    UINT16 psf_port_group : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF port group to send requests
                               that hit this bank decoder ranges.
                            */
    UINT16 psf_id : 4;

                            /* Bits[11:8], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF to send requests that hit
                               this bank decoder ranges.
                            */
    UINT16 psf_decode_mode : 2;

                            /* Bits[13:12], Access Type=RW, default=0x00000002*/

                            /*
                               Specifies the PSF Destination ID decode mode
                               being used.[br] 00b: Fabric Decode[br] 01b:
                               Implicit Decode[br] 10b: Source Decode to
                               PSF_ID:Port_Group:Port:Channel[br] 11b: Source
                               Decode to PSF_ID, use Fabric Decode from there
                               onward (StF)
                            */
    UINT16 ms2iosf_channel : 2;

                            /* Bits[15:14], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies to which IOSF channel to send requests
                               that hit this bank decoder. Note the difference
                               between this channel ID and the channel ID
                               provided in the source decode header below. The
                               former specifies the channel ID on the MS2IOSF
                               interface itself whereas the latter specifies
                               the channel ID on the PSF interface to the
                               endpoint. MS2IOSF has four channels for each of
                               its two ports.
                            */

  } Bits;
  UINT16 Data;

} BANK10_DESTID_IIO_VTD_STRUCT;

/* BANK10_DEVCON_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x10800a44)                                                      */
/*      SPRB0 (0x10800a44)                                                      */
/*      SPRHBM (0x10800a44)                                                     */
/*      SPRC0 (0x10800a44)                                                      */
/*      SPRMCC (0x10800a44)                                                     */
/*      SPRUCC (0x10800a44)                                                     */
/* Register default value on SPRA0: 0x000000E0                                  */
/* Register default value on SPRB0: 0x000000E0                                  */
/* Register default value on SPRHBM: 0x000000E0                                 */
/* Register default value on SPRC0: 0x000000E0                                  */
/* Register default value on SPRMCC: 0x000000E0                                 */
/* Register default value on SPRUCC: 0x000000E0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK10_DEVCON_IIO_VTD_REG 0x11010A44

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 rsvd : 5;

                            /* Bits[4:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 max_payload_size : 3;

                            /* Bits[7:5], Access Type=RW/V, default=0x00000007*/

                            /*
                               Indicates the largest packet size supported by
                               the target decoded by this bank.[br] Defined
                               encodings for this field are:[br] 000b 128 bytes
                               max payload size[br] 001b 256 bytes max payload
                               size[br] 010b 512 bytes max payload size[br]
                               011b 1024 bytes max payload size[br] 100b 2048
                               bytes max payload size[br] 101b 4096 bytes max
                               payload size[br] 110b Reserved[br] 111b 64
                               address aligned bytes max payload size
                            */
    UINT16 rsvd_8 : 7;

                            /* Bits[14:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 initiate_flr : 1;

                            /* Bits[15:15], Access Type=RW/V, default=0x00000000*/

                            /*
                               Initiate Function Level Reset. A write of '1' to
                               the DEVCON[15] field of the device this bank
                               shadows, will cause all shadow-enabled registers
                               for this bank to reset. DEVCON[15] maps to this
                               field. This bit self-clears.
                            */

  } Bits;
  UINT16 Data;

} BANK10_DEVCON_IIO_VTD_STRUCT;

/* BANK10_DEVCON_OFFSET_IIO_VTD_REG supported on:                               */
/*      SPRA0 (0x800a47)                                                        */
/*      SPRB0 (0x800a47)                                                        */
/*      SPRHBM (0x800a47)                                                       */
/*      SPRC0 (0x800a47)                                                        */
/*      SPRMCC (0x800a47)                                                       */
/*      SPRUCC (0x800a47)                                                       */
/* Register default value on SPRA0: 0x00000048                                  */
/* Register default value on SPRB0: 0x00000048                                  */
/* Register default value on SPRHBM: 0x00000048                                 */
/* Register default value on SPRC0: 0x00000048                                  */
/* Register default value on SPRMCC: 0x00000048                                 */
/* Register default value on SPRUCC: 0x00000048                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Offset of the PCI Express Device Control Register in the IOSF agent's configuration header
*/


#define BANK10_DEVCON_OFFSET_IIO_VTD_REG 0x11000A47

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 devcon_shadowen : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               If this bit and DevCon_Master are set, MS2IOSF
                               shadows writes to the offset programmed above
                               into its copy of the device control register.
                               BIOS must clear this bit for devices that do not
                               have a device control register. If shadowing is
                               disabled for this bank, this bit has no effect.
                            */
    UINT8 devcon_master : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Indicates whether or not this shadow copy is the
                               master copy. For devices that use multiple bank
                               decoders, SW is required to enable one of them
                               as a master. HW shadowing only updates the
                               master copy. Likewise, HW only uses the master
                               copy as input to other logic such as completion
                               combining. For devices that use only one bank
                               decoder, SW is required to set this bit.
                            */
    UINT8 devcon_offset : 6;

                            /* Bits[7:2], Access Type=RW, default=0x00000012*/

                            /*
                               Configuration space register offset for the
                               Device control register. This is a DWord offset
                               (left-shift this value by two to get byte
                               offset). Note that although this points to the
                               lowest order byte of the register, only the
                               upper byte of the register is captured by this
                               bank, which is at this offset + 1h.
                            */

  } Bits;
  UINT8 Data;

} BANK10_DEVCON_OFFSET_IIO_VTD_STRUCT;

/* BANK10_BARSIZE_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x800a48)                                                        */
/*      SPRB0 (0x800a48)                                                        */
/*      SPRHBM (0x800a48)                                                       */
/*      SPRC0 (0x800a48)                                                        */
/*      SPRMCC (0x800a48)                                                       */
/*      SPRUCC (0x800a48)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Size of the memory BAR being shadowed in this bank
*/


#define BANK10_BARSIZE_IIO_VTD_REG 0x11000A48

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 type : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               This bit allows the size of the BAR to be
                               selected. Generally, 32b BARs will be programmed
                               below 4GB boundary and 64b BARs will be
                               programmed above 4GB.[br] 0: 32b BAR[br] 1: 64b
                               BAR
                            */
    UINT8 rsvd : 1;

                            /* Bits[1:1], Access Type=RO, default=None*/

                            /* Reserved */
    UINT8 size : 6;

                            /* Bits[7:2], Access Type=RW, default=0x00000000*/

                            /*
                               Value indicating the size of 64-bit BAR. This
                               value is written by BIOS prior to enumeration.
                               The value indicates the lowest order address bit
                               that is writeable in the BAR. Only legal
                               settings are 12 to 51 (decimal), representing
                               BAR sizes of 4KB through 128PB.[br] Notes:[br] -
                               Programming a value of '0' or any other value
                               other than 12 to 51 will result in the BAR being
                               disabled.
                            */

  } Bits;
  UINT8 Data;

} BANK10_BARSIZE_IIO_VTD_STRUCT;

/* BANK10_BAR_OFFSET_IIO_VTD_REG supported on:                                  */
/*      SPRA0 (0x800a4a)                                                        */
/*      SPRB0 (0x800a4a)                                                        */
/*      SPRHBM (0x800a4a)                                                       */
/*      SPRC0 (0x800a4a)                                                        */
/*      SPRMCC (0x800a4a)                                                       */
/*      SPRUCC (0x800a4a)                                                       */
/* Register default value on SPRA0: 0x00000010                                  */
/* Register default value on SPRB0: 0x00000010                                  */
/* Register default value on SPRHBM: 0x00000010                                 */
/* Register default value on SPRC0: 0x00000010                                  */
/* Register default value on SPRMCC: 0x00000010                                 */
/* Register default value on SPRUCC: 0x00000010                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Offset of the shadowed BAR in the IOSF agent's configuration header
*/


#define BANK10_BAR_OFFSET_IIO_VTD_REG 0x11000A4A

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 rsvd : 2;

                            /* Bits[1:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT8 bar_offset : 4;

                            /* Bits[5:2], Access Type=RW, default=0x00000004*/

                            /*
                               Configuration space register offset for the BAR
                               register.[br] The only valid values for a 32b
                               BAR (offset [5:2]) are 0100b, 0101b, 0110b,
                               0111b, 1000b, and 1001b.[br] The only valid
                               values for 64b BAR (offset [5:2]) are 0100b,
                               0110b, and 1000b.[br] Note that this field is a
                               DW offset.
                            */
    UINT8 rsvd_6 : 2;

                            /* Bits[7:6], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT8 Data;

} BANK10_BAR_OFFSET_IIO_VTD_STRUCT;

/* BANK10_BAR_N0_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x20800a50)                                                      */
/*      SPRB0 (0x20800a50)                                                      */
/*      SPRHBM (0x20800a50)                                                     */
/*      SPRC0 (0x20800a50)                                                      */
/*      SPRMCC (0x20800a50)                                                     */
/*      SPRUCC (0x20800a50)                                                     */
/* Register default value on SPRA0: 0x40000000                                  */
/* Register default value on SPRB0: 0x40000000                                  */
/* Register default value on SPRHBM: 0x40000000                                 */
/* Register default value on SPRC0: 0x40000000                                  */
/* Register default value on SPRMCC: 0x40000000                                 */
/* Register default value on SPRUCC: 0x40000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the memory Base Address Register (BAR) in the IOSF agent's configuration header. BIOS can disable shadowing and/or overwrite the values in this register. If MS2IOSF observes FLR to the device and function shadowed by this bank, it clears this register.
*/


#define BANK10_BAR_N0_IIO_VTD_REG 0x11020A50

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 memory_space_indicator : 1;

                            /* Bits[0:0], Access Type=RO, default=0x00000000*/

                            /* BAR resource is memory (as opposed to I/O). */
    UINT32 type : 2;

                            /* Bits[2:1], Access Type=RO/V, default=0x00000000*/

                            /*
                               00: Memory type claimed by the BAR is 32-bit
                               addressable[br] 10: Memory type claimed by the
                               BAR is 64-bit addressable[br] The value in this
                               register is selected by the BARSZ.Type bit.
                            */
    UINT32 prefetchable : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000000*/

                            /* BAR points to Prefetchable memory. */
    UINT32 rsvd : 8;

                            /* Bits[11:4], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 address : 20;

                            /* Bits[31:12], Access Type=RW/V, default=0x00040000*/

                            /*
                               Sets the location of the BAR written by
                               software[br] The number of bits that are
                               writable in this register is dictated by the
                               value loaded into the BARSZ register by the BIOS
                               at initialization time (before BIOS PCI
                               enumeration). BARSZ indicates the lowest order
                               bit of this register field that is writeable
                               where valid values are 12-51.[br] - If BARSZ is
                               set to 12, all bits are writeable.[br] - If
                               BARSZ is set to 52, all bits are read only and
                               0.[br] - If the BARSZ.Type bit is clear, then
                               bits 63:32 will be read only and 0.[br] - For
                               the special case where BARSZ = 0, bits 63:0 are
                               all read only and 0 resulting in the BAR being
                               disabled.[br] Note: The lowest order address bit
                               is 12 to enforce a minimum granularity of 4 KB.
                            */

  } Bits;
  UINT32 Data;

} BANK10_BAR_N0_IIO_VTD_STRUCT;

/* BANK10_BAR_N1_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x20800a54)                                                      */
/*      SPRB0 (0x20800a54)                                                      */
/*      SPRHBM (0x20800a54)                                                     */
/*      SPRC0 (0x20800a54)                                                      */
/*      SPRMCC (0x20800a54)                                                     */
/*      SPRUCC (0x20800a54)                                                     */
/* Register default value on SPRA0: 0xFFFFFFFF                                  */
/* Register default value on SPRB0: 0xFFFFFFFF                                  */
/* Register default value on SPRHBM: 0xFFFFFFFF                                 */
/* Register default value on SPRC0: 0xFFFFFFFF                                  */
/* Register default value on SPRMCC: 0xFFFFFFFF                                 */
/* Register default value on SPRUCC: 0xFFFFFFFF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the memory Base Address Register (BAR) in the IOSF agent's configuration header. BIOS can disable shadowing and/or overwrite the values in this register. If MS2IOSF observes FLR to the device and function shadowed by this bank, it clears this register.
*/


#define BANK10_BAR_N1_IIO_VTD_REG 0x11020A54

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 address : 32;

                            /* Bits[31:0], Access Type=RW/V, default=0xFFFFFFFF*/

                            /*
                               Sets the location of the BAR written by
                               software[br] The number of bits that are
                               writable in this register is dictated by the
                               value loaded into the BARSZ register by the BIOS
                               at initialization time (before BIOS PCI
                               enumeration). BARSZ indicates the lowest order
                               bit of this register field that is writeable
                               where valid values are 12-51.[br] - If BARSZ is
                               set to 12, all bits are writeable.[br] - If
                               BARSZ is set to 52, all bits are read only and
                               0.[br] - If the BARSZ.Type bit is clear, then
                               bits 63:32 will be read only and 0.[br] - For
                               the special case where BARSZ = 0, bits 63:0 are
                               all read only and 0 resulting in the BAR being
                               disabled.[br] Note: The lowest order address bit
                               is 12 to enforce a minimum granularity of 4 KB.
                            */

  } Bits;
  UINT32 Data;

} BANK10_BAR_N1_IIO_VTD_STRUCT;

/* BANK11_BANKCTRL_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x800a60)                                                        */
/*      SPRB0 (0x800a60)                                                        */
/*      SPRHBM (0x800a60)                                                       */
/*      SPRC0 (0x800a60)                                                        */
/*      SPRMCC (0x800a60)                                                       */
/*      SPRUCC (0x800a60)                                                       */
/* Register default value on SPRA0: 0x00000080                                  */
/* Register default value on SPRB0: 0x00000080                                  */
/* Register default value on SPRHBM: 0x00000080                                 */
/* Register default value on SPRC0: 0x00000080                                  */
/* Register default value on SPRMCC: 0x00000080                                 */
/* Register default value on SPRUCC: 0x00000080                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the source decode logic associated with an arbitrary type 0 IOSF agent (i.e. IOSF endpoint)
*/


#define BANK11_BANKCTRL_IIO_VTD_REG 0x11000A60

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 banktype : 2;

                            /* Bits[1:0], Access Type=RO, default=0x00000000*/

                            /*
                               Specifies the type of Bank Decoder. Valid values
                               are:[br] 00b: Type 0 Bank - 16 Bytes[br] 01b:
                               Type 1 Bank - 64 Bytes[br] 10b: reserved[br]
                               11b: Subtractive Decode Bank - 8 Bytes
                            */
    UINT8 force_config_type0 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               If this bit is set, MS2IOSF sends any
                               configuration request that matches this bank as
                               type 0. Enables support for SR-IOV RCIEP.
                            */
    UINT8 bank_decode_enable : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               1b: The bank decoders are enabled.[br] 0b: The
                               bank decoders are disabled.
                            */
    UINT8 shadow_enable : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               1b: Outbound configuration requests that target
                               the Device/Function specified by this bank on
                               the RootBus will be snarfed to the shadow copy
                               of decode registers.[br] 0b: Outbound
                               configuration requests will not be snarfed. BIOS
                               must program the decode registers to allow this
                               bank to decode to the bank's specified target.
                            */
    UINT8 flr_supported : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               1b: The device decoded by this bank supports the
                               optional Function Level Reset mechanism. If
                               MS2IOSF observes a 1 being written to the
                               "Initiate FLR" (bit 15 of Device Control
                               Register), it clears the shadowed registers in
                               this bank.[br] 0b: The device decoded by this
                               bank does not support the optional Function
                               Level Reset mechanism.
                            */
    UINT8 rsvd : 1;

                            /* Bits[6:6], Access Type=RO, default=None*/

                            /* Reserved */
    UINT8 function_mask : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               When set, causes the DevFunc.Function field to
                               become ignored. Any configuration request that
                               matches the DevFunc.Device field with any
                               function value will be a match for this decoder
                               bank.
                            */

  } Bits;
  UINT8 Data;

} BANK11_BANKCTRL_IIO_VTD_STRUCT;

/* BANK11_DEVFUNC_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x800a61)                                                        */
/*      SPRB0 (0x800a61)                                                        */
/*      SPRHBM (0x800a61)                                                       */
/*      SPRC0 (0x800a61)                                                        */
/*      SPRMCC (0x800a61)                                                       */
/*      SPRUCC (0x800a61)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* PCI Device and Function number of the IOSF agent being shadowed
*/


#define BANK11_DEVFUNC_IIO_VTD_REG 0x11000A61

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 func : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target Function Number on the
                               RootBus that this bank decodes for.
                            */
    UINT8 device : 5;

                            /* Bits[7:3], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target Device Number on the
                               RootBus that this bank decodes for.
                            */

  } Bits;
  UINT8 Data;

} BANK11_DEVFUNC_IIO_VTD_STRUCT;

/* BANK11_DESTID_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x10800a62)                                                      */
/*      SPRB0 (0x10800a62)                                                      */
/*      SPRHBM (0x10800a62)                                                     */
/*      SPRC0 (0x10800a62)                                                      */
/*      SPRMCC (0x10800a62)                                                     */
/*      SPRUCC (0x10800a62)                                                     */
/* Register default value on SPRA0: 0x00002188                                  */
/* Register default value on SPRB0: 0x00002188                                  */
/* Register default value on SPRHBM: 0x00002188                                 */
/* Register default value on SPRC0: 0x00002188                                  */
/* Register default value on SPRMCC: 0x00002188                                 */
/* Register default value on SPRUCC: 0x00002188                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* The lower 14 bits of this register comprise the PSF-required source decode information that MS2IOSF provides on the tdest_id signal when presenting the request to PSF (note exception for MS2IOSF_Port).
*/


#define BANK11_DESTID_IIO_VTD_REG 0x11010A62

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 psf_channel : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies which IOSF channel to send requests
                               that hit this bank decoder ranges. This field is
                               used for IOSF Channel and also as part of the
                               IOSF Destination ID.
                            */
    UINT16 psf_port : 3;

                            /* Bits[5:3], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF port to send requests that
                               hit this bank decoder ranges.
                            */
    UINT16 ms2iosf_port : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the MS2IOSF port (left = 0, right = 1)
                               where to send requests that hit this bank
                               decoder. The logic should mask this bit to zero
                               before sending the 14-bit PSF source decode
                               header out. Technically, this is the top bit of
                               the PSF port ID, but MS2IOSF is using it for
                               internal purposes.
                            */
    UINT16 psf_port_group : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF port group to send requests
                               that hit this bank decoder ranges.
                            */
    UINT16 psf_id : 4;

                            /* Bits[11:8], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF to send requests that hit
                               this bank decoder ranges.
                            */
    UINT16 psf_decode_mode : 2;

                            /* Bits[13:12], Access Type=RW, default=0x00000002*/

                            /*
                               Specifies the PSF Destination ID decode mode
                               being used.[br] 00b: Fabric Decode[br] 01b:
                               Implicit Decode[br] 10b: Source Decode to
                               PSF_ID:Port_Group:Port:Channel[br] 11b: Source
                               Decode to PSF_ID, use Fabric Decode from there
                               onward (StF)
                            */
    UINT16 ms2iosf_channel : 2;

                            /* Bits[15:14], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies to which IOSF channel to send requests
                               that hit this bank decoder. Note the difference
                               between this channel ID and the channel ID
                               provided in the source decode header below. The
                               former specifies the channel ID on the MS2IOSF
                               interface itself whereas the latter specifies
                               the channel ID on the PSF interface to the
                               endpoint. MS2IOSF has four channels for each of
                               its two ports.
                            */

  } Bits;
  UINT16 Data;

} BANK11_DESTID_IIO_VTD_STRUCT;

/* BANK11_DEVCON_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x10800a64)                                                      */
/*      SPRB0 (0x10800a64)                                                      */
/*      SPRHBM (0x10800a64)                                                     */
/*      SPRC0 (0x10800a64)                                                      */
/*      SPRMCC (0x10800a64)                                                     */
/*      SPRUCC (0x10800a64)                                                     */
/* Register default value on SPRA0: 0x000000E0                                  */
/* Register default value on SPRB0: 0x000000E0                                  */
/* Register default value on SPRHBM: 0x000000E0                                 */
/* Register default value on SPRC0: 0x000000E0                                  */
/* Register default value on SPRMCC: 0x000000E0                                 */
/* Register default value on SPRUCC: 0x000000E0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK11_DEVCON_IIO_VTD_REG 0x11010A64

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 rsvd : 5;

                            /* Bits[4:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 max_payload_size : 3;

                            /* Bits[7:5], Access Type=RW/V, default=0x00000007*/

                            /*
                               Indicates the largest packet size supported by
                               the target decoded by this bank.[br] Defined
                               encodings for this field are:[br] 000b 128 bytes
                               max payload size[br] 001b 256 bytes max payload
                               size[br] 010b 512 bytes max payload size[br]
                               011b 1024 bytes max payload size[br] 100b 2048
                               bytes max payload size[br] 101b 4096 bytes max
                               payload size[br] 110b Reserved[br] 111b 64
                               address aligned bytes max payload size
                            */
    UINT16 rsvd_8 : 7;

                            /* Bits[14:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 initiate_flr : 1;

                            /* Bits[15:15], Access Type=RW/V, default=0x00000000*/

                            /*
                               Initiate Function Level Reset. A write of '1' to
                               the DEVCON[15] field of the device this bank
                               shadows, will cause all shadow-enabled registers
                               for this bank to reset. DEVCON[15] maps to this
                               field. This bit self-clears.
                            */

  } Bits;
  UINT16 Data;

} BANK11_DEVCON_IIO_VTD_STRUCT;

/* BANK11_DEVCON_OFFSET_IIO_VTD_REG supported on:                               */
/*      SPRA0 (0x800a67)                                                        */
/*      SPRB0 (0x800a67)                                                        */
/*      SPRHBM (0x800a67)                                                       */
/*      SPRC0 (0x800a67)                                                        */
/*      SPRMCC (0x800a67)                                                       */
/*      SPRUCC (0x800a67)                                                       */
/* Register default value on SPRA0: 0x00000048                                  */
/* Register default value on SPRB0: 0x00000048                                  */
/* Register default value on SPRHBM: 0x00000048                                 */
/* Register default value on SPRC0: 0x00000048                                  */
/* Register default value on SPRMCC: 0x00000048                                 */
/* Register default value on SPRUCC: 0x00000048                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Offset of the PCI Express Device Control Register in the IOSF agent's configuration header
*/


#define BANK11_DEVCON_OFFSET_IIO_VTD_REG 0x11000A67

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 devcon_shadowen : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               If this bit and DevCon_Master are set, MS2IOSF
                               shadows writes to the offset programmed above
                               into its copy of the device control register.
                               BIOS must clear this bit for devices that do not
                               have a device control register. If shadowing is
                               disabled for this bank, this bit has no effect.
                            */
    UINT8 devcon_master : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Indicates whether or not this shadow copy is the
                               master copy. For devices that use multiple bank
                               decoders, SW is required to enable one of them
                               as a master. HW shadowing only updates the
                               master copy. Likewise, HW only uses the master
                               copy as input to other logic such as completion
                               combining. For devices that use only one bank
                               decoder, SW is required to set this bit.
                            */
    UINT8 devcon_offset : 6;

                            /* Bits[7:2], Access Type=RW, default=0x00000012*/

                            /*
                               Configuration space register offset for the
                               Device control register. This is a DWord offset
                               (left-shift this value by two to get byte
                               offset). Note that although this points to the
                               lowest order byte of the register, only the
                               upper byte of the register is captured by this
                               bank, which is at this offset + 1h.
                            */

  } Bits;
  UINT8 Data;

} BANK11_DEVCON_OFFSET_IIO_VTD_STRUCT;

/* BANK11_BARSIZE_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x800a68)                                                        */
/*      SPRB0 (0x800a68)                                                        */
/*      SPRHBM (0x800a68)                                                       */
/*      SPRC0 (0x800a68)                                                        */
/*      SPRMCC (0x800a68)                                                       */
/*      SPRUCC (0x800a68)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Size of the memory BAR being shadowed in this bank
*/


#define BANK11_BARSIZE_IIO_VTD_REG 0x11000A68

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 type : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               This bit allows the size of the BAR to be
                               selected. Generally, 32b BARs will be programmed
                               below 4GB boundary and 64b BARs will be
                               programmed above 4GB.[br] 0: 32b BAR[br] 1: 64b
                               BAR
                            */
    UINT8 rsvd : 1;

                            /* Bits[1:1], Access Type=RO, default=None*/

                            /* Reserved */
    UINT8 size : 6;

                            /* Bits[7:2], Access Type=RW, default=0x00000000*/

                            /*
                               Value indicating the size of 64-bit BAR. This
                               value is written by BIOS prior to enumeration.
                               The value indicates the lowest order address bit
                               that is writeable in the BAR. Only legal
                               settings are 12 to 51 (decimal), representing
                               BAR sizes of 4KB through 128PB.[br] Notes:[br] -
                               Programming a value of '0' or any other value
                               other than 12 to 51 will result in the BAR being
                               disabled.
                            */

  } Bits;
  UINT8 Data;

} BANK11_BARSIZE_IIO_VTD_STRUCT;

/* BANK11_BAR_OFFSET_IIO_VTD_REG supported on:                                  */
/*      SPRA0 (0x800a6a)                                                        */
/*      SPRB0 (0x800a6a)                                                        */
/*      SPRHBM (0x800a6a)                                                       */
/*      SPRC0 (0x800a6a)                                                        */
/*      SPRMCC (0x800a6a)                                                       */
/*      SPRUCC (0x800a6a)                                                       */
/* Register default value on SPRA0: 0x00000010                                  */
/* Register default value on SPRB0: 0x00000010                                  */
/* Register default value on SPRHBM: 0x00000010                                 */
/* Register default value on SPRC0: 0x00000010                                  */
/* Register default value on SPRMCC: 0x00000010                                 */
/* Register default value on SPRUCC: 0x00000010                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Offset of the shadowed BAR in the IOSF agent's configuration header
*/


#define BANK11_BAR_OFFSET_IIO_VTD_REG 0x11000A6A

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 rsvd : 2;

                            /* Bits[1:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT8 bar_offset : 4;

                            /* Bits[5:2], Access Type=RW, default=0x00000004*/

                            /*
                               Configuration space register offset for the BAR
                               register.[br] The only valid values for a 32b
                               BAR (offset [5:2]) are 0100b, 0101b, 0110b,
                               0111b, 1000b, and 1001b.[br] The only valid
                               values for 64b BAR (offset [5:2]) are 0100b,
                               0110b, and 1000b.[br] Note that this field is a
                               DW offset.
                            */
    UINT8 rsvd_6 : 2;

                            /* Bits[7:6], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT8 Data;

} BANK11_BAR_OFFSET_IIO_VTD_STRUCT;

/* BANK11_BAR_N0_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x20800a70)                                                      */
/*      SPRB0 (0x20800a70)                                                      */
/*      SPRHBM (0x20800a70)                                                     */
/*      SPRC0 (0x20800a70)                                                      */
/*      SPRMCC (0x20800a70)                                                     */
/*      SPRUCC (0x20800a70)                                                     */
/* Register default value on SPRA0: 0x40000000                                  */
/* Register default value on SPRB0: 0x40000000                                  */
/* Register default value on SPRHBM: 0x40000000                                 */
/* Register default value on SPRC0: 0x40000000                                  */
/* Register default value on SPRMCC: 0x40000000                                 */
/* Register default value on SPRUCC: 0x40000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the memory Base Address Register (BAR) in the IOSF agent's configuration header. BIOS can disable shadowing and/or overwrite the values in this register. If MS2IOSF observes FLR to the device and function shadowed by this bank, it clears this register.
*/


#define BANK11_BAR_N0_IIO_VTD_REG 0x11020A70

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 memory_space_indicator : 1;

                            /* Bits[0:0], Access Type=RO, default=0x00000000*/

                            /* BAR resource is memory (as opposed to I/O). */
    UINT32 type : 2;

                            /* Bits[2:1], Access Type=RO/V, default=0x00000000*/

                            /*
                               00: Memory type claimed by the BAR is 32-bit
                               addressable[br] 10: Memory type claimed by the
                               BAR is 64-bit addressable[br] The value in this
                               register is selected by the BARSZ.Type bit.
                            */
    UINT32 prefetchable : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000000*/

                            /* BAR points to Prefetchable memory. */
    UINT32 rsvd : 8;

                            /* Bits[11:4], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 address : 20;

                            /* Bits[31:12], Access Type=RW/V, default=0x00040000*/

                            /*
                               Sets the location of the BAR written by
                               software[br] The number of bits that are
                               writable in this register is dictated by the
                               value loaded into the BARSZ register by the BIOS
                               at initialization time (before BIOS PCI
                               enumeration). BARSZ indicates the lowest order
                               bit of this register field that is writeable
                               where valid values are 12-51.[br] - If BARSZ is
                               set to 12, all bits are writeable.[br] - If
                               BARSZ is set to 52, all bits are read only and
                               0.[br] - If the BARSZ.Type bit is clear, then
                               bits 63:32 will be read only and 0.[br] - For
                               the special case where BARSZ = 0, bits 63:0 are
                               all read only and 0 resulting in the BAR being
                               disabled.[br] Note: The lowest order address bit
                               is 12 to enforce a minimum granularity of 4 KB.
                            */

  } Bits;
  UINT32 Data;

} BANK11_BAR_N0_IIO_VTD_STRUCT;

/* BANK11_BAR_N1_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x20800a74)                                                      */
/*      SPRB0 (0x20800a74)                                                      */
/*      SPRHBM (0x20800a74)                                                     */
/*      SPRC0 (0x20800a74)                                                      */
/*      SPRMCC (0x20800a74)                                                     */
/*      SPRUCC (0x20800a74)                                                     */
/* Register default value on SPRA0: 0xFFFFFFFF                                  */
/* Register default value on SPRB0: 0xFFFFFFFF                                  */
/* Register default value on SPRHBM: 0xFFFFFFFF                                 */
/* Register default value on SPRC0: 0xFFFFFFFF                                  */
/* Register default value on SPRMCC: 0xFFFFFFFF                                 */
/* Register default value on SPRUCC: 0xFFFFFFFF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the memory Base Address Register (BAR) in the IOSF agent's configuration header. BIOS can disable shadowing and/or overwrite the values in this register. If MS2IOSF observes FLR to the device and function shadowed by this bank, it clears this register.
*/


#define BANK11_BAR_N1_IIO_VTD_REG 0x11020A74

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 address : 32;

                            /* Bits[31:0], Access Type=RW/V, default=0xFFFFFFFF*/

                            /*
                               Sets the location of the BAR written by
                               software[br] The number of bits that are
                               writable in this register is dictated by the
                               value loaded into the BARSZ register by the BIOS
                               at initialization time (before BIOS PCI
                               enumeration). BARSZ indicates the lowest order
                               bit of this register field that is writeable
                               where valid values are 12-51.[br] - If BARSZ is
                               set to 12, all bits are writeable.[br] - If
                               BARSZ is set to 52, all bits are read only and
                               0.[br] - If the BARSZ.Type bit is clear, then
                               bits 63:32 will be read only and 0.[br] - For
                               the special case where BARSZ = 0, bits 63:0 are
                               all read only and 0 resulting in the BAR being
                               disabled.[br] Note: The lowest order address bit
                               is 12 to enforce a minimum granularity of 4 KB.
                            */

  } Bits;
  UINT32 Data;

} BANK11_BAR_N1_IIO_VTD_STRUCT;

/* BANK12_BANKCTRL_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x800a80)                                                        */
/*      SPRB0 (0x800a80)                                                        */
/*      SPRHBM (0x800a80)                                                       */
/*      SPRC0 (0x800a80)                                                        */
/*      SPRMCC (0x800a80)                                                       */
/*      SPRUCC (0x800a80)                                                       */
/* Register default value on SPRA0: 0x00000080                                  */
/* Register default value on SPRB0: 0x00000080                                  */
/* Register default value on SPRHBM: 0x00000080                                 */
/* Register default value on SPRC0: 0x00000080                                  */
/* Register default value on SPRMCC: 0x00000080                                 */
/* Register default value on SPRUCC: 0x00000080                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the source decode logic associated with an arbitrary type 0 IOSF agent (i.e. IOSF endpoint)
*/


#define BANK12_BANKCTRL_IIO_VTD_REG 0x11000A80

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 banktype : 2;

                            /* Bits[1:0], Access Type=RO, default=0x00000000*/

                            /*
                               Specifies the type of Bank Decoder. Valid values
                               are:[br] 00b: Type 0 Bank - 16 Bytes[br] 01b:
                               Type 1 Bank - 64 Bytes[br] 10b: reserved[br]
                               11b: Subtractive Decode Bank - 8 Bytes
                            */
    UINT8 force_config_type0 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               If this bit is set, MS2IOSF sends any
                               configuration request that matches this bank as
                               type 0. Enables support for SR-IOV RCIEP.
                            */
    UINT8 bank_decode_enable : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               1b: The bank decoders are enabled.[br] 0b: The
                               bank decoders are disabled.
                            */
    UINT8 shadow_enable : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               1b: Outbound configuration requests that target
                               the Device/Function specified by this bank on
                               the RootBus will be snarfed to the shadow copy
                               of decode registers.[br] 0b: Outbound
                               configuration requests will not be snarfed. BIOS
                               must program the decode registers to allow this
                               bank to decode to the bank's specified target.
                            */
    UINT8 flr_supported : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               1b: The device decoded by this bank supports the
                               optional Function Level Reset mechanism. If
                               MS2IOSF observes a 1 being written to the
                               "Initiate FLR" (bit 15 of Device Control
                               Register), it clears the shadowed registers in
                               this bank.[br] 0b: The device decoded by this
                               bank does not support the optional Function
                               Level Reset mechanism.
                            */
    UINT8 rsvd : 1;

                            /* Bits[6:6], Access Type=RO, default=None*/

                            /* Reserved */
    UINT8 function_mask : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               When set, causes the DevFunc.Function field to
                               become ignored. Any configuration request that
                               matches the DevFunc.Device field with any
                               function value will be a match for this decoder
                               bank.
                            */

  } Bits;
  UINT8 Data;

} BANK12_BANKCTRL_IIO_VTD_STRUCT;

/* BANK12_DEVFUNC_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x800a81)                                                        */
/*      SPRB0 (0x800a81)                                                        */
/*      SPRHBM (0x800a81)                                                       */
/*      SPRC0 (0x800a81)                                                        */
/*      SPRMCC (0x800a81)                                                       */
/*      SPRUCC (0x800a81)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* PCI Device and Function number of the IOSF agent being shadowed
*/


#define BANK12_DEVFUNC_IIO_VTD_REG 0x11000A81

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 func : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target Function Number on the
                               RootBus that this bank decodes for.
                            */
    UINT8 device : 5;

                            /* Bits[7:3], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target Device Number on the
                               RootBus that this bank decodes for.
                            */

  } Bits;
  UINT8 Data;

} BANK12_DEVFUNC_IIO_VTD_STRUCT;

/* BANK12_DESTID_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x10800a82)                                                      */
/*      SPRB0 (0x10800a82)                                                      */
/*      SPRHBM (0x10800a82)                                                     */
/*      SPRC0 (0x10800a82)                                                      */
/*      SPRMCC (0x10800a82)                                                     */
/*      SPRUCC (0x10800a82)                                                     */
/* Register default value on SPRA0: 0x00002188                                  */
/* Register default value on SPRB0: 0x00002188                                  */
/* Register default value on SPRHBM: 0x00002188                                 */
/* Register default value on SPRC0: 0x00002188                                  */
/* Register default value on SPRMCC: 0x00002188                                 */
/* Register default value on SPRUCC: 0x00002188                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* The lower 14 bits of this register comprise the PSF-required source decode information that MS2IOSF provides on the tdest_id signal when presenting the request to PSF (note exception for MS2IOSF_Port).
*/


#define BANK12_DESTID_IIO_VTD_REG 0x11010A82

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 psf_channel : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies which IOSF channel to send requests
                               that hit this bank decoder ranges. This field is
                               used for IOSF Channel and also as part of the
                               IOSF Destination ID.
                            */
    UINT16 psf_port : 3;

                            /* Bits[5:3], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF port to send requests that
                               hit this bank decoder ranges.
                            */
    UINT16 ms2iosf_port : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the MS2IOSF port (left = 0, right = 1)
                               where to send requests that hit this bank
                               decoder. The logic should mask this bit to zero
                               before sending the 14-bit PSF source decode
                               header out. Technically, this is the top bit of
                               the PSF port ID, but MS2IOSF is using it for
                               internal purposes.
                            */
    UINT16 psf_port_group : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF port group to send requests
                               that hit this bank decoder ranges.
                            */
    UINT16 psf_id : 4;

                            /* Bits[11:8], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF to send requests that hit
                               this bank decoder ranges.
                            */
    UINT16 psf_decode_mode : 2;

                            /* Bits[13:12], Access Type=RW, default=0x00000002*/

                            /*
                               Specifies the PSF Destination ID decode mode
                               being used.[br] 00b: Fabric Decode[br] 01b:
                               Implicit Decode[br] 10b: Source Decode to
                               PSF_ID:Port_Group:Port:Channel[br] 11b: Source
                               Decode to PSF_ID, use Fabric Decode from there
                               onward (StF)
                            */
    UINT16 ms2iosf_channel : 2;

                            /* Bits[15:14], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies to which IOSF channel to send requests
                               that hit this bank decoder. Note the difference
                               between this channel ID and the channel ID
                               provided in the source decode header below. The
                               former specifies the channel ID on the MS2IOSF
                               interface itself whereas the latter specifies
                               the channel ID on the PSF interface to the
                               endpoint. MS2IOSF has four channels for each of
                               its two ports.
                            */

  } Bits;
  UINT16 Data;

} BANK12_DESTID_IIO_VTD_STRUCT;

/* BANK12_DEVCON_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x10800a84)                                                      */
/*      SPRB0 (0x10800a84)                                                      */
/*      SPRHBM (0x10800a84)                                                     */
/*      SPRC0 (0x10800a84)                                                      */
/*      SPRMCC (0x10800a84)                                                     */
/*      SPRUCC (0x10800a84)                                                     */
/* Register default value on SPRA0: 0x000000E0                                  */
/* Register default value on SPRB0: 0x000000E0                                  */
/* Register default value on SPRHBM: 0x000000E0                                 */
/* Register default value on SPRC0: 0x000000E0                                  */
/* Register default value on SPRMCC: 0x000000E0                                 */
/* Register default value on SPRUCC: 0x000000E0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK12_DEVCON_IIO_VTD_REG 0x11010A84

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 rsvd : 5;

                            /* Bits[4:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 max_payload_size : 3;

                            /* Bits[7:5], Access Type=RW/V, default=0x00000007*/

                            /*
                               Indicates the largest packet size supported by
                               the target decoded by this bank.[br] Defined
                               encodings for this field are:[br] 000b 128 bytes
                               max payload size[br] 001b 256 bytes max payload
                               size[br] 010b 512 bytes max payload size[br]
                               011b 1024 bytes max payload size[br] 100b 2048
                               bytes max payload size[br] 101b 4096 bytes max
                               payload size[br] 110b Reserved[br] 111b 64
                               address aligned bytes max payload size
                            */
    UINT16 rsvd_8 : 7;

                            /* Bits[14:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 initiate_flr : 1;

                            /* Bits[15:15], Access Type=RW/V, default=0x00000000*/

                            /*
                               Initiate Function Level Reset. A write of '1' to
                               the DEVCON[15] field of the device this bank
                               shadows, will cause all shadow-enabled registers
                               for this bank to reset. DEVCON[15] maps to this
                               field. This bit self-clears.
                            */

  } Bits;
  UINT16 Data;

} BANK12_DEVCON_IIO_VTD_STRUCT;

/* BANK12_DEVCON_OFFSET_IIO_VTD_REG supported on:                               */
/*      SPRA0 (0x800a87)                                                        */
/*      SPRB0 (0x800a87)                                                        */
/*      SPRHBM (0x800a87)                                                       */
/*      SPRC0 (0x800a87)                                                        */
/*      SPRMCC (0x800a87)                                                       */
/*      SPRUCC (0x800a87)                                                       */
/* Register default value on SPRA0: 0x00000048                                  */
/* Register default value on SPRB0: 0x00000048                                  */
/* Register default value on SPRHBM: 0x00000048                                 */
/* Register default value on SPRC0: 0x00000048                                  */
/* Register default value on SPRMCC: 0x00000048                                 */
/* Register default value on SPRUCC: 0x00000048                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Offset of the PCI Express Device Control Register in the IOSF agent's configuration header
*/


#define BANK12_DEVCON_OFFSET_IIO_VTD_REG 0x11000A87

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 devcon_shadowen : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               If this bit and DevCon_Master are set, MS2IOSF
                               shadows writes to the offset programmed above
                               into its copy of the device control register.
                               BIOS must clear this bit for devices that do not
                               have a device control register. If shadowing is
                               disabled for this bank, this bit has no effect.
                            */
    UINT8 devcon_master : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Indicates whether or not this shadow copy is the
                               master copy. For devices that use multiple bank
                               decoders, SW is required to enable one of them
                               as a master. HW shadowing only updates the
                               master copy. Likewise, HW only uses the master
                               copy as input to other logic such as completion
                               combining. For devices that use only one bank
                               decoder, SW is required to set this bit.
                            */
    UINT8 devcon_offset : 6;

                            /* Bits[7:2], Access Type=RW, default=0x00000012*/

                            /*
                               Configuration space register offset for the
                               Device control register. This is a DWord offset
                               (left-shift this value by two to get byte
                               offset). Note that although this points to the
                               lowest order byte of the register, only the
                               upper byte of the register is captured by this
                               bank, which is at this offset + 1h.
                            */

  } Bits;
  UINT8 Data;

} BANK12_DEVCON_OFFSET_IIO_VTD_STRUCT;

/* BANK12_BARSIZE_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x800a88)                                                        */
/*      SPRB0 (0x800a88)                                                        */
/*      SPRHBM (0x800a88)                                                       */
/*      SPRC0 (0x800a88)                                                        */
/*      SPRMCC (0x800a88)                                                       */
/*      SPRUCC (0x800a88)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Size of the memory BAR being shadowed in this bank
*/


#define BANK12_BARSIZE_IIO_VTD_REG 0x11000A88

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 type : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               This bit allows the size of the BAR to be
                               selected. Generally, 32b BARs will be programmed
                               below 4GB boundary and 64b BARs will be
                               programmed above 4GB.[br] 0: 32b BAR[br] 1: 64b
                               BAR
                            */
    UINT8 rsvd : 1;

                            /* Bits[1:1], Access Type=RO, default=None*/

                            /* Reserved */
    UINT8 size : 6;

                            /* Bits[7:2], Access Type=RW, default=0x00000000*/

                            /*
                               Value indicating the size of 64-bit BAR. This
                               value is written by BIOS prior to enumeration.
                               The value indicates the lowest order address bit
                               that is writeable in the BAR. Only legal
                               settings are 12 to 51 (decimal), representing
                               BAR sizes of 4KB through 128PB.[br] Notes:[br] -
                               Programming a value of '0' or any other value
                               other than 12 to 51 will result in the BAR being
                               disabled.
                            */

  } Bits;
  UINT8 Data;

} BANK12_BARSIZE_IIO_VTD_STRUCT;

/* BANK12_BAR_OFFSET_IIO_VTD_REG supported on:                                  */
/*      SPRA0 (0x800a8a)                                                        */
/*      SPRB0 (0x800a8a)                                                        */
/*      SPRHBM (0x800a8a)                                                       */
/*      SPRC0 (0x800a8a)                                                        */
/*      SPRMCC (0x800a8a)                                                       */
/*      SPRUCC (0x800a8a)                                                       */
/* Register default value on SPRA0: 0x00000010                                  */
/* Register default value on SPRB0: 0x00000010                                  */
/* Register default value on SPRHBM: 0x00000010                                 */
/* Register default value on SPRC0: 0x00000010                                  */
/* Register default value on SPRMCC: 0x00000010                                 */
/* Register default value on SPRUCC: 0x00000010                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Offset of the shadowed BAR in the IOSF agent's configuration header
*/


#define BANK12_BAR_OFFSET_IIO_VTD_REG 0x11000A8A

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 rsvd : 2;

                            /* Bits[1:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT8 bar_offset : 4;

                            /* Bits[5:2], Access Type=RW, default=0x00000004*/

                            /*
                               Configuration space register offset for the BAR
                               register.[br] The only valid values for a 32b
                               BAR (offset [5:2]) are 0100b, 0101b, 0110b,
                               0111b, 1000b, and 1001b.[br] The only valid
                               values for 64b BAR (offset [5:2]) are 0100b,
                               0110b, and 1000b.[br] Note that this field is a
                               DW offset.
                            */
    UINT8 rsvd_6 : 2;

                            /* Bits[7:6], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT8 Data;

} BANK12_BAR_OFFSET_IIO_VTD_STRUCT;

/* BANK12_BAR_N0_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x20800a90)                                                      */
/*      SPRB0 (0x20800a90)                                                      */
/*      SPRHBM (0x20800a90)                                                     */
/*      SPRC0 (0x20800a90)                                                      */
/*      SPRMCC (0x20800a90)                                                     */
/*      SPRUCC (0x20800a90)                                                     */
/* Register default value on SPRA0: 0x40000000                                  */
/* Register default value on SPRB0: 0x40000000                                  */
/* Register default value on SPRHBM: 0x40000000                                 */
/* Register default value on SPRC0: 0x40000000                                  */
/* Register default value on SPRMCC: 0x40000000                                 */
/* Register default value on SPRUCC: 0x40000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the memory Base Address Register (BAR) in the IOSF agent's configuration header. BIOS can disable shadowing and/or overwrite the values in this register. If MS2IOSF observes FLR to the device and function shadowed by this bank, it clears this register.
*/


#define BANK12_BAR_N0_IIO_VTD_REG 0x11020A90

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 memory_space_indicator : 1;

                            /* Bits[0:0], Access Type=RO, default=0x00000000*/

                            /* BAR resource is memory (as opposed to I/O). */
    UINT32 type : 2;

                            /* Bits[2:1], Access Type=RO/V, default=0x00000000*/

                            /*
                               00: Memory type claimed by the BAR is 32-bit
                               addressable[br] 10: Memory type claimed by the
                               BAR is 64-bit addressable[br] The value in this
                               register is selected by the BARSZ.Type bit.
                            */
    UINT32 prefetchable : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000000*/

                            /* BAR points to Prefetchable memory. */
    UINT32 rsvd : 8;

                            /* Bits[11:4], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 address : 20;

                            /* Bits[31:12], Access Type=RW/V, default=0x00040000*/

                            /*
                               Sets the location of the BAR written by
                               software[br] The number of bits that are
                               writable in this register is dictated by the
                               value loaded into the BARSZ register by the BIOS
                               at initialization time (before BIOS PCI
                               enumeration). BARSZ indicates the lowest order
                               bit of this register field that is writeable
                               where valid values are 12-51.[br] - If BARSZ is
                               set to 12, all bits are writeable.[br] - If
                               BARSZ is set to 52, all bits are read only and
                               0.[br] - If the BARSZ.Type bit is clear, then
                               bits 63:32 will be read only and 0.[br] - For
                               the special case where BARSZ = 0, bits 63:0 are
                               all read only and 0 resulting in the BAR being
                               disabled.[br] Note: The lowest order address bit
                               is 12 to enforce a minimum granularity of 4 KB.
                            */

  } Bits;
  UINT32 Data;

} BANK12_BAR_N0_IIO_VTD_STRUCT;

/* BANK12_BAR_N1_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x20800a94)                                                      */
/*      SPRB0 (0x20800a94)                                                      */
/*      SPRHBM (0x20800a94)                                                     */
/*      SPRC0 (0x20800a94)                                                      */
/*      SPRMCC (0x20800a94)                                                     */
/*      SPRUCC (0x20800a94)                                                     */
/* Register default value on SPRA0: 0xFFFFFFFF                                  */
/* Register default value on SPRB0: 0xFFFFFFFF                                  */
/* Register default value on SPRHBM: 0xFFFFFFFF                                 */
/* Register default value on SPRC0: 0xFFFFFFFF                                  */
/* Register default value on SPRMCC: 0xFFFFFFFF                                 */
/* Register default value on SPRUCC: 0xFFFFFFFF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the memory Base Address Register (BAR) in the IOSF agent's configuration header. BIOS can disable shadowing and/or overwrite the values in this register. If MS2IOSF observes FLR to the device and function shadowed by this bank, it clears this register.
*/


#define BANK12_BAR_N1_IIO_VTD_REG 0x11020A94

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 address : 32;

                            /* Bits[31:0], Access Type=RW/V, default=0xFFFFFFFF*/

                            /*
                               Sets the location of the BAR written by
                               software[br] The number of bits that are
                               writable in this register is dictated by the
                               value loaded into the BARSZ register by the BIOS
                               at initialization time (before BIOS PCI
                               enumeration). BARSZ indicates the lowest order
                               bit of this register field that is writeable
                               where valid values are 12-51.[br] - If BARSZ is
                               set to 12, all bits are writeable.[br] - If
                               BARSZ is set to 52, all bits are read only and
                               0.[br] - If the BARSZ.Type bit is clear, then
                               bits 63:32 will be read only and 0.[br] - For
                               the special case where BARSZ = 0, bits 63:0 are
                               all read only and 0 resulting in the BAR being
                               disabled.[br] Note: The lowest order address bit
                               is 12 to enforce a minimum granularity of 4 KB.
                            */

  } Bits;
  UINT32 Data;

} BANK12_BAR_N1_IIO_VTD_STRUCT;

/* BANK13_BANKCTRL_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x800aa0)                                                        */
/*      SPRB0 (0x800aa0)                                                        */
/*      SPRHBM (0x800aa0)                                                       */
/*      SPRC0 (0x800aa0)                                                        */
/*      SPRMCC (0x800aa0)                                                       */
/*      SPRUCC (0x800aa0)                                                       */
/* Register default value on SPRA0: 0x00000080                                  */
/* Register default value on SPRB0: 0x00000080                                  */
/* Register default value on SPRHBM: 0x00000080                                 */
/* Register default value on SPRC0: 0x00000080                                  */
/* Register default value on SPRMCC: 0x00000080                                 */
/* Register default value on SPRUCC: 0x00000080                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the source decode logic associated with an arbitrary type 0 IOSF agent (i.e. IOSF endpoint)
*/


#define BANK13_BANKCTRL_IIO_VTD_REG 0x11000AA0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 banktype : 2;

                            /* Bits[1:0], Access Type=RO, default=0x00000000*/

                            /*
                               Specifies the type of Bank Decoder. Valid values
                               are:[br] 00b: Type 0 Bank - 16 Bytes[br] 01b:
                               Type 1 Bank - 64 Bytes[br] 10b: reserved[br]
                               11b: Subtractive Decode Bank - 8 Bytes
                            */
    UINT8 force_config_type0 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               If this bit is set, MS2IOSF sends any
                               configuration request that matches this bank as
                               type 0. Enables support for SR-IOV RCIEP.
                            */
    UINT8 bank_decode_enable : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               1b: The bank decoders are enabled.[br] 0b: The
                               bank decoders are disabled.
                            */
    UINT8 shadow_enable : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               1b: Outbound configuration requests that target
                               the Device/Function specified by this bank on
                               the RootBus will be snarfed to the shadow copy
                               of decode registers.[br] 0b: Outbound
                               configuration requests will not be snarfed. BIOS
                               must program the decode registers to allow this
                               bank to decode to the bank's specified target.
                            */
    UINT8 flr_supported : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               1b: The device decoded by this bank supports the
                               optional Function Level Reset mechanism. If
                               MS2IOSF observes a 1 being written to the
                               "Initiate FLR" (bit 15 of Device Control
                               Register), it clears the shadowed registers in
                               this bank.[br] 0b: The device decoded by this
                               bank does not support the optional Function
                               Level Reset mechanism.
                            */
    UINT8 rsvd : 1;

                            /* Bits[6:6], Access Type=RO, default=None*/

                            /* Reserved */
    UINT8 function_mask : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               When set, causes the DevFunc.Function field to
                               become ignored. Any configuration request that
                               matches the DevFunc.Device field with any
                               function value will be a match for this decoder
                               bank.
                            */

  } Bits;
  UINT8 Data;

} BANK13_BANKCTRL_IIO_VTD_STRUCT;

/* BANK13_DEVFUNC_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x800aa1)                                                        */
/*      SPRB0 (0x800aa1)                                                        */
/*      SPRHBM (0x800aa1)                                                       */
/*      SPRC0 (0x800aa1)                                                        */
/*      SPRMCC (0x800aa1)                                                       */
/*      SPRUCC (0x800aa1)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* PCI Device and Function number of the IOSF agent being shadowed
*/


#define BANK13_DEVFUNC_IIO_VTD_REG 0x11000AA1

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 func : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target Function Number on the
                               RootBus that this bank decodes for.
                            */
    UINT8 device : 5;

                            /* Bits[7:3], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target Device Number on the
                               RootBus that this bank decodes for.
                            */

  } Bits;
  UINT8 Data;

} BANK13_DEVFUNC_IIO_VTD_STRUCT;

/* BANK13_DESTID_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x10800aa2)                                                      */
/*      SPRB0 (0x10800aa2)                                                      */
/*      SPRHBM (0x10800aa2)                                                     */
/*      SPRC0 (0x10800aa2)                                                      */
/*      SPRMCC (0x10800aa2)                                                     */
/*      SPRUCC (0x10800aa2)                                                     */
/* Register default value on SPRA0: 0x00002188                                  */
/* Register default value on SPRB0: 0x00002188                                  */
/* Register default value on SPRHBM: 0x00002188                                 */
/* Register default value on SPRC0: 0x00002188                                  */
/* Register default value on SPRMCC: 0x00002188                                 */
/* Register default value on SPRUCC: 0x00002188                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* The lower 14 bits of this register comprise the PSF-required source decode information that MS2IOSF provides on the tdest_id signal when presenting the request to PSF (note exception for MS2IOSF_Port).
*/


#define BANK13_DESTID_IIO_VTD_REG 0x11010AA2

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 psf_channel : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies which IOSF channel to send requests
                               that hit this bank decoder ranges. This field is
                               used for IOSF Channel and also as part of the
                               IOSF Destination ID.
                            */
    UINT16 psf_port : 3;

                            /* Bits[5:3], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF port to send requests that
                               hit this bank decoder ranges.
                            */
    UINT16 ms2iosf_port : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the MS2IOSF port (left = 0, right = 1)
                               where to send requests that hit this bank
                               decoder. The logic should mask this bit to zero
                               before sending the 14-bit PSF source decode
                               header out. Technically, this is the top bit of
                               the PSF port ID, but MS2IOSF is using it for
                               internal purposes.
                            */
    UINT16 psf_port_group : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF port group to send requests
                               that hit this bank decoder ranges.
                            */
    UINT16 psf_id : 4;

                            /* Bits[11:8], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF to send requests that hit
                               this bank decoder ranges.
                            */
    UINT16 psf_decode_mode : 2;

                            /* Bits[13:12], Access Type=RW, default=0x00000002*/

                            /*
                               Specifies the PSF Destination ID decode mode
                               being used.[br] 00b: Fabric Decode[br] 01b:
                               Implicit Decode[br] 10b: Source Decode to
                               PSF_ID:Port_Group:Port:Channel[br] 11b: Source
                               Decode to PSF_ID, use Fabric Decode from there
                               onward (StF)
                            */
    UINT16 ms2iosf_channel : 2;

                            /* Bits[15:14], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies to which IOSF channel to send requests
                               that hit this bank decoder. Note the difference
                               between this channel ID and the channel ID
                               provided in the source decode header below. The
                               former specifies the channel ID on the MS2IOSF
                               interface itself whereas the latter specifies
                               the channel ID on the PSF interface to the
                               endpoint. MS2IOSF has four channels for each of
                               its two ports.
                            */

  } Bits;
  UINT16 Data;

} BANK13_DESTID_IIO_VTD_STRUCT;

/* BANK13_DEVCON_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x10800aa4)                                                      */
/*      SPRB0 (0x10800aa4)                                                      */
/*      SPRHBM (0x10800aa4)                                                     */
/*      SPRC0 (0x10800aa4)                                                      */
/*      SPRMCC (0x10800aa4)                                                     */
/*      SPRUCC (0x10800aa4)                                                     */
/* Register default value on SPRA0: 0x000000E0                                  */
/* Register default value on SPRB0: 0x000000E0                                  */
/* Register default value on SPRHBM: 0x000000E0                                 */
/* Register default value on SPRC0: 0x000000E0                                  */
/* Register default value on SPRMCC: 0x000000E0                                 */
/* Register default value on SPRUCC: 0x000000E0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK13_DEVCON_IIO_VTD_REG 0x11010AA4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 rsvd : 5;

                            /* Bits[4:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 max_payload_size : 3;

                            /* Bits[7:5], Access Type=RW/V, default=0x00000007*/

                            /*
                               Indicates the largest packet size supported by
                               the target decoded by this bank.[br] Defined
                               encodings for this field are:[br] 000b 128 bytes
                               max payload size[br] 001b 256 bytes max payload
                               size[br] 010b 512 bytes max payload size[br]
                               011b 1024 bytes max payload size[br] 100b 2048
                               bytes max payload size[br] 101b 4096 bytes max
                               payload size[br] 110b Reserved[br] 111b 64
                               address aligned bytes max payload size
                            */
    UINT16 rsvd_8 : 7;

                            /* Bits[14:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 initiate_flr : 1;

                            /* Bits[15:15], Access Type=RW/V, default=0x00000000*/

                            /*
                               Initiate Function Level Reset. A write of '1' to
                               the DEVCON[15] field of the device this bank
                               shadows, will cause all shadow-enabled registers
                               for this bank to reset. DEVCON[15] maps to this
                               field. This bit self-clears.
                            */

  } Bits;
  UINT16 Data;

} BANK13_DEVCON_IIO_VTD_STRUCT;

/* BANK13_DEVCON_OFFSET_IIO_VTD_REG supported on:                               */
/*      SPRA0 (0x800aa7)                                                        */
/*      SPRB0 (0x800aa7)                                                        */
/*      SPRHBM (0x800aa7)                                                       */
/*      SPRC0 (0x800aa7)                                                        */
/*      SPRMCC (0x800aa7)                                                       */
/*      SPRUCC (0x800aa7)                                                       */
/* Register default value on SPRA0: 0x00000048                                  */
/* Register default value on SPRB0: 0x00000048                                  */
/* Register default value on SPRHBM: 0x00000048                                 */
/* Register default value on SPRC0: 0x00000048                                  */
/* Register default value on SPRMCC: 0x00000048                                 */
/* Register default value on SPRUCC: 0x00000048                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Offset of the PCI Express Device Control Register in the IOSF agent's configuration header
*/


#define BANK13_DEVCON_OFFSET_IIO_VTD_REG 0x11000AA7

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 devcon_shadowen : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               If this bit and DevCon_Master are set, MS2IOSF
                               shadows writes to the offset programmed above
                               into its copy of the device control register.
                               BIOS must clear this bit for devices that do not
                               have a device control register. If shadowing is
                               disabled for this bank, this bit has no effect.
                            */
    UINT8 devcon_master : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Indicates whether or not this shadow copy is the
                               master copy. For devices that use multiple bank
                               decoders, SW is required to enable one of them
                               as a master. HW shadowing only updates the
                               master copy. Likewise, HW only uses the master
                               copy as input to other logic such as completion
                               combining. For devices that use only one bank
                               decoder, SW is required to set this bit.
                            */
    UINT8 devcon_offset : 6;

                            /* Bits[7:2], Access Type=RW, default=0x00000012*/

                            /*
                               Configuration space register offset for the
                               Device control register. This is a DWord offset
                               (left-shift this value by two to get byte
                               offset). Note that although this points to the
                               lowest order byte of the register, only the
                               upper byte of the register is captured by this
                               bank, which is at this offset + 1h.
                            */

  } Bits;
  UINT8 Data;

} BANK13_DEVCON_OFFSET_IIO_VTD_STRUCT;

/* BANK13_BARSIZE_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x800aa8)                                                        */
/*      SPRB0 (0x800aa8)                                                        */
/*      SPRHBM (0x800aa8)                                                       */
/*      SPRC0 (0x800aa8)                                                        */
/*      SPRMCC (0x800aa8)                                                       */
/*      SPRUCC (0x800aa8)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Size of the memory BAR being shadowed in this bank
*/


#define BANK13_BARSIZE_IIO_VTD_REG 0x11000AA8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 type : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               This bit allows the size of the BAR to be
                               selected. Generally, 32b BARs will be programmed
                               below 4GB boundary and 64b BARs will be
                               programmed above 4GB.[br] 0: 32b BAR[br] 1: 64b
                               BAR
                            */
    UINT8 rsvd : 1;

                            /* Bits[1:1], Access Type=RO, default=None*/

                            /* Reserved */
    UINT8 size : 6;

                            /* Bits[7:2], Access Type=RW, default=0x00000000*/

                            /*
                               Value indicating the size of 64-bit BAR. This
                               value is written by BIOS prior to enumeration.
                               The value indicates the lowest order address bit
                               that is writeable in the BAR. Only legal
                               settings are 12 to 51 (decimal), representing
                               BAR sizes of 4KB through 128PB.[br] Notes:[br] -
                               Programming a value of '0' or any other value
                               other than 12 to 51 will result in the BAR being
                               disabled.
                            */

  } Bits;
  UINT8 Data;

} BANK13_BARSIZE_IIO_VTD_STRUCT;

/* BANK13_BAR_OFFSET_IIO_VTD_REG supported on:                                  */
/*      SPRA0 (0x800aaa)                                                        */
/*      SPRB0 (0x800aaa)                                                        */
/*      SPRHBM (0x800aaa)                                                       */
/*      SPRC0 (0x800aaa)                                                        */
/*      SPRMCC (0x800aaa)                                                       */
/*      SPRUCC (0x800aaa)                                                       */
/* Register default value on SPRA0: 0x00000010                                  */
/* Register default value on SPRB0: 0x00000010                                  */
/* Register default value on SPRHBM: 0x00000010                                 */
/* Register default value on SPRC0: 0x00000010                                  */
/* Register default value on SPRMCC: 0x00000010                                 */
/* Register default value on SPRUCC: 0x00000010                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Offset of the shadowed BAR in the IOSF agent's configuration header
*/


#define BANK13_BAR_OFFSET_IIO_VTD_REG 0x11000AAA

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 rsvd : 2;

                            /* Bits[1:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT8 bar_offset : 4;

                            /* Bits[5:2], Access Type=RW, default=0x00000004*/

                            /*
                               Configuration space register offset for the BAR
                               register.[br] The only valid values for a 32b
                               BAR (offset [5:2]) are 0100b, 0101b, 0110b,
                               0111b, 1000b, and 1001b.[br] The only valid
                               values for 64b BAR (offset [5:2]) are 0100b,
                               0110b, and 1000b.[br] Note that this field is a
                               DW offset.
                            */
    UINT8 rsvd_6 : 2;

                            /* Bits[7:6], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT8 Data;

} BANK13_BAR_OFFSET_IIO_VTD_STRUCT;

/* BANK13_BAR_N0_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x20800ab0)                                                      */
/*      SPRB0 (0x20800ab0)                                                      */
/*      SPRHBM (0x20800ab0)                                                     */
/*      SPRC0 (0x20800ab0)                                                      */
/*      SPRMCC (0x20800ab0)                                                     */
/*      SPRUCC (0x20800ab0)                                                     */
/* Register default value on SPRA0: 0x40000000                                  */
/* Register default value on SPRB0: 0x40000000                                  */
/* Register default value on SPRHBM: 0x40000000                                 */
/* Register default value on SPRC0: 0x40000000                                  */
/* Register default value on SPRMCC: 0x40000000                                 */
/* Register default value on SPRUCC: 0x40000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the memory Base Address Register (BAR) in the IOSF agent's configuration header. BIOS can disable shadowing and/or overwrite the values in this register. If MS2IOSF observes FLR to the device and function shadowed by this bank, it clears this register.
*/


#define BANK13_BAR_N0_IIO_VTD_REG 0x11020AB0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 memory_space_indicator : 1;

                            /* Bits[0:0], Access Type=RO, default=0x00000000*/

                            /* BAR resource is memory (as opposed to I/O). */
    UINT32 type : 2;

                            /* Bits[2:1], Access Type=RO/V, default=0x00000000*/

                            /*
                               00: Memory type claimed by the BAR is 32-bit
                               addressable[br] 10: Memory type claimed by the
                               BAR is 64-bit addressable[br] The value in this
                               register is selected by the BARSZ.Type bit.
                            */
    UINT32 prefetchable : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000000*/

                            /* BAR points to Prefetchable memory. */
    UINT32 rsvd : 8;

                            /* Bits[11:4], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 address : 20;

                            /* Bits[31:12], Access Type=RW/V, default=0x00040000*/

                            /*
                               Sets the location of the BAR written by
                               software[br] The number of bits that are
                               writable in this register is dictated by the
                               value loaded into the BARSZ register by the BIOS
                               at initialization time (before BIOS PCI
                               enumeration). BARSZ indicates the lowest order
                               bit of this register field that is writeable
                               where valid values are 12-51.[br] - If BARSZ is
                               set to 12, all bits are writeable.[br] - If
                               BARSZ is set to 52, all bits are read only and
                               0.[br] - If the BARSZ.Type bit is clear, then
                               bits 63:32 will be read only and 0.[br] - For
                               the special case where BARSZ = 0, bits 63:0 are
                               all read only and 0 resulting in the BAR being
                               disabled.[br] Note: The lowest order address bit
                               is 12 to enforce a minimum granularity of 4 KB.
                            */

  } Bits;
  UINT32 Data;

} BANK13_BAR_N0_IIO_VTD_STRUCT;

/* BANK13_BAR_N1_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x20800ab4)                                                      */
/*      SPRB0 (0x20800ab4)                                                      */
/*      SPRHBM (0x20800ab4)                                                     */
/*      SPRC0 (0x20800ab4)                                                      */
/*      SPRMCC (0x20800ab4)                                                     */
/*      SPRUCC (0x20800ab4)                                                     */
/* Register default value on SPRA0: 0xFFFFFFFF                                  */
/* Register default value on SPRB0: 0xFFFFFFFF                                  */
/* Register default value on SPRHBM: 0xFFFFFFFF                                 */
/* Register default value on SPRC0: 0xFFFFFFFF                                  */
/* Register default value on SPRMCC: 0xFFFFFFFF                                 */
/* Register default value on SPRUCC: 0xFFFFFFFF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the memory Base Address Register (BAR) in the IOSF agent's configuration header. BIOS can disable shadowing and/or overwrite the values in this register. If MS2IOSF observes FLR to the device and function shadowed by this bank, it clears this register.
*/


#define BANK13_BAR_N1_IIO_VTD_REG 0x11020AB4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 address : 32;

                            /* Bits[31:0], Access Type=RW/V, default=0xFFFFFFFF*/

                            /*
                               Sets the location of the BAR written by
                               software[br] The number of bits that are
                               writable in this register is dictated by the
                               value loaded into the BARSZ register by the BIOS
                               at initialization time (before BIOS PCI
                               enumeration). BARSZ indicates the lowest order
                               bit of this register field that is writeable
                               where valid values are 12-51.[br] - If BARSZ is
                               set to 12, all bits are writeable.[br] - If
                               BARSZ is set to 52, all bits are read only and
                               0.[br] - If the BARSZ.Type bit is clear, then
                               bits 63:32 will be read only and 0.[br] - For
                               the special case where BARSZ = 0, bits 63:0 are
                               all read only and 0 resulting in the BAR being
                               disabled.[br] Note: The lowest order address bit
                               is 12 to enforce a minimum granularity of 4 KB.
                            */

  } Bits;
  UINT32 Data;

} BANK13_BAR_N1_IIO_VTD_STRUCT;

/* BANK14_BANKCTRL_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x800ac0)                                                        */
/*      SPRB0 (0x800ac0)                                                        */
/*      SPRHBM (0x800ac0)                                                       */
/*      SPRC0 (0x800ac0)                                                        */
/*      SPRMCC (0x800ac0)                                                       */
/*      SPRUCC (0x800ac0)                                                       */
/* Register default value on SPRA0: 0x00000080                                  */
/* Register default value on SPRB0: 0x00000080                                  */
/* Register default value on SPRHBM: 0x00000080                                 */
/* Register default value on SPRC0: 0x00000080                                  */
/* Register default value on SPRMCC: 0x00000080                                 */
/* Register default value on SPRUCC: 0x00000080                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the source decode logic associated with an arbitrary type 0 IOSF agent (i.e. IOSF endpoint)
*/


#define BANK14_BANKCTRL_IIO_VTD_REG 0x11000AC0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 banktype : 2;

                            /* Bits[1:0], Access Type=RO, default=0x00000000*/

                            /*
                               Specifies the type of Bank Decoder. Valid values
                               are:[br] 00b: Type 0 Bank - 16 Bytes[br] 01b:
                               Type 1 Bank - 64 Bytes[br] 10b: reserved[br]
                               11b: Subtractive Decode Bank - 8 Bytes
                            */
    UINT8 force_config_type0 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               If this bit is set, MS2IOSF sends any
                               configuration request that matches this bank as
                               type 0. Enables support for SR-IOV RCIEP.
                            */
    UINT8 bank_decode_enable : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               1b: The bank decoders are enabled.[br] 0b: The
                               bank decoders are disabled.
                            */
    UINT8 shadow_enable : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               1b: Outbound configuration requests that target
                               the Device/Function specified by this bank on
                               the RootBus will be snarfed to the shadow copy
                               of decode registers.[br] 0b: Outbound
                               configuration requests will not be snarfed. BIOS
                               must program the decode registers to allow this
                               bank to decode to the bank's specified target.
                            */
    UINT8 flr_supported : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               1b: The device decoded by this bank supports the
                               optional Function Level Reset mechanism. If
                               MS2IOSF observes a 1 being written to the
                               "Initiate FLR" (bit 15 of Device Control
                               Register), it clears the shadowed registers in
                               this bank.[br] 0b: The device decoded by this
                               bank does not support the optional Function
                               Level Reset mechanism.
                            */
    UINT8 rsvd : 1;

                            /* Bits[6:6], Access Type=RO, default=None*/

                            /* Reserved */
    UINT8 function_mask : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               When set, causes the DevFunc.Function field to
                               become ignored. Any configuration request that
                               matches the DevFunc.Device field with any
                               function value will be a match for this decoder
                               bank.
                            */

  } Bits;
  UINT8 Data;

} BANK14_BANKCTRL_IIO_VTD_STRUCT;

/* BANK14_DEVFUNC_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x800ac1)                                                        */
/*      SPRB0 (0x800ac1)                                                        */
/*      SPRHBM (0x800ac1)                                                       */
/*      SPRC0 (0x800ac1)                                                        */
/*      SPRMCC (0x800ac1)                                                       */
/*      SPRUCC (0x800ac1)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* PCI Device and Function number of the IOSF agent being shadowed
*/


#define BANK14_DEVFUNC_IIO_VTD_REG 0x11000AC1

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 func : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target Function Number on the
                               RootBus that this bank decodes for.
                            */
    UINT8 device : 5;

                            /* Bits[7:3], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target Device Number on the
                               RootBus that this bank decodes for.
                            */

  } Bits;
  UINT8 Data;

} BANK14_DEVFUNC_IIO_VTD_STRUCT;

/* BANK14_DESTID_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x10800ac2)                                                      */
/*      SPRB0 (0x10800ac2)                                                      */
/*      SPRHBM (0x10800ac2)                                                     */
/*      SPRC0 (0x10800ac2)                                                      */
/*      SPRMCC (0x10800ac2)                                                     */
/*      SPRUCC (0x10800ac2)                                                     */
/* Register default value on SPRA0: 0x00002188                                  */
/* Register default value on SPRB0: 0x00002188                                  */
/* Register default value on SPRHBM: 0x00002188                                 */
/* Register default value on SPRC0: 0x00002188                                  */
/* Register default value on SPRMCC: 0x00002188                                 */
/* Register default value on SPRUCC: 0x00002188                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* The lower 14 bits of this register comprise the PSF-required source decode information that MS2IOSF provides on the tdest_id signal when presenting the request to PSF (note exception for MS2IOSF_Port).
*/


#define BANK14_DESTID_IIO_VTD_REG 0x11010AC2

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 psf_channel : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies which IOSF channel to send requests
                               that hit this bank decoder ranges. This field is
                               used for IOSF Channel and also as part of the
                               IOSF Destination ID.
                            */
    UINT16 psf_port : 3;

                            /* Bits[5:3], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF port to send requests that
                               hit this bank decoder ranges.
                            */
    UINT16 ms2iosf_port : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the MS2IOSF port (left = 0, right = 1)
                               where to send requests that hit this bank
                               decoder. The logic should mask this bit to zero
                               before sending the 14-bit PSF source decode
                               header out. Technically, this is the top bit of
                               the PSF port ID, but MS2IOSF is using it for
                               internal purposes.
                            */
    UINT16 psf_port_group : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF port group to send requests
                               that hit this bank decoder ranges.
                            */
    UINT16 psf_id : 4;

                            /* Bits[11:8], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF to send requests that hit
                               this bank decoder ranges.
                            */
    UINT16 psf_decode_mode : 2;

                            /* Bits[13:12], Access Type=RW, default=0x00000002*/

                            /*
                               Specifies the PSF Destination ID decode mode
                               being used.[br] 00b: Fabric Decode[br] 01b:
                               Implicit Decode[br] 10b: Source Decode to
                               PSF_ID:Port_Group:Port:Channel[br] 11b: Source
                               Decode to PSF_ID, use Fabric Decode from there
                               onward (StF)
                            */
    UINT16 ms2iosf_channel : 2;

                            /* Bits[15:14], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies to which IOSF channel to send requests
                               that hit this bank decoder. Note the difference
                               between this channel ID and the channel ID
                               provided in the source decode header below. The
                               former specifies the channel ID on the MS2IOSF
                               interface itself whereas the latter specifies
                               the channel ID on the PSF interface to the
                               endpoint. MS2IOSF has four channels for each of
                               its two ports.
                            */

  } Bits;
  UINT16 Data;

} BANK14_DESTID_IIO_VTD_STRUCT;

/* BANK14_DEVCON_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x10800ac4)                                                      */
/*      SPRB0 (0x10800ac4)                                                      */
/*      SPRHBM (0x10800ac4)                                                     */
/*      SPRC0 (0x10800ac4)                                                      */
/*      SPRMCC (0x10800ac4)                                                     */
/*      SPRUCC (0x10800ac4)                                                     */
/* Register default value on SPRA0: 0x000000E0                                  */
/* Register default value on SPRB0: 0x000000E0                                  */
/* Register default value on SPRHBM: 0x000000E0                                 */
/* Register default value on SPRC0: 0x000000E0                                  */
/* Register default value on SPRMCC: 0x000000E0                                 */
/* Register default value on SPRUCC: 0x000000E0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK14_DEVCON_IIO_VTD_REG 0x11010AC4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 rsvd : 5;

                            /* Bits[4:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 max_payload_size : 3;

                            /* Bits[7:5], Access Type=RW/V, default=0x00000007*/

                            /*
                               Indicates the largest packet size supported by
                               the target decoded by this bank.[br] Defined
                               encodings for this field are:[br] 000b 128 bytes
                               max payload size[br] 001b 256 bytes max payload
                               size[br] 010b 512 bytes max payload size[br]
                               011b 1024 bytes max payload size[br] 100b 2048
                               bytes max payload size[br] 101b 4096 bytes max
                               payload size[br] 110b Reserved[br] 111b 64
                               address aligned bytes max payload size
                            */
    UINT16 rsvd_8 : 7;

                            /* Bits[14:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 initiate_flr : 1;

                            /* Bits[15:15], Access Type=RW/V, default=0x00000000*/

                            /*
                               Initiate Function Level Reset. A write of '1' to
                               the DEVCON[15] field of the device this bank
                               shadows, will cause all shadow-enabled registers
                               for this bank to reset. DEVCON[15] maps to this
                               field. This bit self-clears.
                            */

  } Bits;
  UINT16 Data;

} BANK14_DEVCON_IIO_VTD_STRUCT;

/* BANK14_DEVCON_OFFSET_IIO_VTD_REG supported on:                               */
/*      SPRA0 (0x800ac7)                                                        */
/*      SPRB0 (0x800ac7)                                                        */
/*      SPRHBM (0x800ac7)                                                       */
/*      SPRC0 (0x800ac7)                                                        */
/*      SPRMCC (0x800ac7)                                                       */
/*      SPRUCC (0x800ac7)                                                       */
/* Register default value on SPRA0: 0x00000048                                  */
/* Register default value on SPRB0: 0x00000048                                  */
/* Register default value on SPRHBM: 0x00000048                                 */
/* Register default value on SPRC0: 0x00000048                                  */
/* Register default value on SPRMCC: 0x00000048                                 */
/* Register default value on SPRUCC: 0x00000048                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Offset of the PCI Express Device Control Register in the IOSF agent's configuration header
*/


#define BANK14_DEVCON_OFFSET_IIO_VTD_REG 0x11000AC7

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 devcon_shadowen : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               If this bit and DevCon_Master are set, MS2IOSF
                               shadows writes to the offset programmed above
                               into its copy of the device control register.
                               BIOS must clear this bit for devices that do not
                               have a device control register. If shadowing is
                               disabled for this bank, this bit has no effect.
                            */
    UINT8 devcon_master : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Indicates whether or not this shadow copy is the
                               master copy. For devices that use multiple bank
                               decoders, SW is required to enable one of them
                               as a master. HW shadowing only updates the
                               master copy. Likewise, HW only uses the master
                               copy as input to other logic such as completion
                               combining. For devices that use only one bank
                               decoder, SW is required to set this bit.
                            */
    UINT8 devcon_offset : 6;

                            /* Bits[7:2], Access Type=RW, default=0x00000012*/

                            /*
                               Configuration space register offset for the
                               Device control register. This is a DWord offset
                               (left-shift this value by two to get byte
                               offset). Note that although this points to the
                               lowest order byte of the register, only the
                               upper byte of the register is captured by this
                               bank, which is at this offset + 1h.
                            */

  } Bits;
  UINT8 Data;

} BANK14_DEVCON_OFFSET_IIO_VTD_STRUCT;

/* BANK14_BARSIZE_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x800ac8)                                                        */
/*      SPRB0 (0x800ac8)                                                        */
/*      SPRHBM (0x800ac8)                                                       */
/*      SPRC0 (0x800ac8)                                                        */
/*      SPRMCC (0x800ac8)                                                       */
/*      SPRUCC (0x800ac8)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Size of the memory BAR being shadowed in this bank
*/


#define BANK14_BARSIZE_IIO_VTD_REG 0x11000AC8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 type : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               This bit allows the size of the BAR to be
                               selected. Generally, 32b BARs will be programmed
                               below 4GB boundary and 64b BARs will be
                               programmed above 4GB.[br] 0: 32b BAR[br] 1: 64b
                               BAR
                            */
    UINT8 rsvd : 1;

                            /* Bits[1:1], Access Type=RO, default=None*/

                            /* Reserved */
    UINT8 size : 6;

                            /* Bits[7:2], Access Type=RW, default=0x00000000*/

                            /*
                               Value indicating the size of 64-bit BAR. This
                               value is written by BIOS prior to enumeration.
                               The value indicates the lowest order address bit
                               that is writeable in the BAR. Only legal
                               settings are 12 to 51 (decimal), representing
                               BAR sizes of 4KB through 128PB.[br] Notes:[br] -
                               Programming a value of '0' or any other value
                               other than 12 to 51 will result in the BAR being
                               disabled.
                            */

  } Bits;
  UINT8 Data;

} BANK14_BARSIZE_IIO_VTD_STRUCT;

/* BANK14_BAR_OFFSET_IIO_VTD_REG supported on:                                  */
/*      SPRA0 (0x800aca)                                                        */
/*      SPRB0 (0x800aca)                                                        */
/*      SPRHBM (0x800aca)                                                       */
/*      SPRC0 (0x800aca)                                                        */
/*      SPRMCC (0x800aca)                                                       */
/*      SPRUCC (0x800aca)                                                       */
/* Register default value on SPRA0: 0x00000010                                  */
/* Register default value on SPRB0: 0x00000010                                  */
/* Register default value on SPRHBM: 0x00000010                                 */
/* Register default value on SPRC0: 0x00000010                                  */
/* Register default value on SPRMCC: 0x00000010                                 */
/* Register default value on SPRUCC: 0x00000010                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Offset of the shadowed BAR in the IOSF agent's configuration header
*/


#define BANK14_BAR_OFFSET_IIO_VTD_REG 0x11000ACA

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 rsvd : 2;

                            /* Bits[1:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT8 bar_offset : 4;

                            /* Bits[5:2], Access Type=RW, default=0x00000004*/

                            /*
                               Configuration space register offset for the BAR
                               register.[br] The only valid values for a 32b
                               BAR (offset [5:2]) are 0100b, 0101b, 0110b,
                               0111b, 1000b, and 1001b.[br] The only valid
                               values for 64b BAR (offset [5:2]) are 0100b,
                               0110b, and 1000b.[br] Note that this field is a
                               DW offset.
                            */
    UINT8 rsvd_6 : 2;

                            /* Bits[7:6], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT8 Data;

} BANK14_BAR_OFFSET_IIO_VTD_STRUCT;

/* BANK14_BAR_N0_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x20800ad0)                                                      */
/*      SPRB0 (0x20800ad0)                                                      */
/*      SPRHBM (0x20800ad0)                                                     */
/*      SPRC0 (0x20800ad0)                                                      */
/*      SPRMCC (0x20800ad0)                                                     */
/*      SPRUCC (0x20800ad0)                                                     */
/* Register default value on SPRA0: 0x40000000                                  */
/* Register default value on SPRB0: 0x40000000                                  */
/* Register default value on SPRHBM: 0x40000000                                 */
/* Register default value on SPRC0: 0x40000000                                  */
/* Register default value on SPRMCC: 0x40000000                                 */
/* Register default value on SPRUCC: 0x40000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the memory Base Address Register (BAR) in the IOSF agent's configuration header. BIOS can disable shadowing and/or overwrite the values in this register. If MS2IOSF observes FLR to the device and function shadowed by this bank, it clears this register.
*/


#define BANK14_BAR_N0_IIO_VTD_REG 0x11020AD0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 memory_space_indicator : 1;

                            /* Bits[0:0], Access Type=RO, default=0x00000000*/

                            /* BAR resource is memory (as opposed to I/O). */
    UINT32 type : 2;

                            /* Bits[2:1], Access Type=RO/V, default=0x00000000*/

                            /*
                               00: Memory type claimed by the BAR is 32-bit
                               addressable[br] 10: Memory type claimed by the
                               BAR is 64-bit addressable[br] The value in this
                               register is selected by the BARSZ.Type bit.
                            */
    UINT32 prefetchable : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000000*/

                            /* BAR points to Prefetchable memory. */
    UINT32 rsvd : 8;

                            /* Bits[11:4], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 address : 20;

                            /* Bits[31:12], Access Type=RW/V, default=0x00040000*/

                            /*
                               Sets the location of the BAR written by
                               software[br] The number of bits that are
                               writable in this register is dictated by the
                               value loaded into the BARSZ register by the BIOS
                               at initialization time (before BIOS PCI
                               enumeration). BARSZ indicates the lowest order
                               bit of this register field that is writeable
                               where valid values are 12-51.[br] - If BARSZ is
                               set to 12, all bits are writeable.[br] - If
                               BARSZ is set to 52, all bits are read only and
                               0.[br] - If the BARSZ.Type bit is clear, then
                               bits 63:32 will be read only and 0.[br] - For
                               the special case where BARSZ = 0, bits 63:0 are
                               all read only and 0 resulting in the BAR being
                               disabled.[br] Note: The lowest order address bit
                               is 12 to enforce a minimum granularity of 4 KB.
                            */

  } Bits;
  UINT32 Data;

} BANK14_BAR_N0_IIO_VTD_STRUCT;

/* BANK14_BAR_N1_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x20800ad4)                                                      */
/*      SPRB0 (0x20800ad4)                                                      */
/*      SPRHBM (0x20800ad4)                                                     */
/*      SPRC0 (0x20800ad4)                                                      */
/*      SPRMCC (0x20800ad4)                                                     */
/*      SPRUCC (0x20800ad4)                                                     */
/* Register default value on SPRA0: 0xFFFFFFFF                                  */
/* Register default value on SPRB0: 0xFFFFFFFF                                  */
/* Register default value on SPRHBM: 0xFFFFFFFF                                 */
/* Register default value on SPRC0: 0xFFFFFFFF                                  */
/* Register default value on SPRMCC: 0xFFFFFFFF                                 */
/* Register default value on SPRUCC: 0xFFFFFFFF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the memory Base Address Register (BAR) in the IOSF agent's configuration header. BIOS can disable shadowing and/or overwrite the values in this register. If MS2IOSF observes FLR to the device and function shadowed by this bank, it clears this register.
*/


#define BANK14_BAR_N1_IIO_VTD_REG 0x11020AD4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 address : 32;

                            /* Bits[31:0], Access Type=RW/V, default=0xFFFFFFFF*/

                            /*
                               Sets the location of the BAR written by
                               software[br] The number of bits that are
                               writable in this register is dictated by the
                               value loaded into the BARSZ register by the BIOS
                               at initialization time (before BIOS PCI
                               enumeration). BARSZ indicates the lowest order
                               bit of this register field that is writeable
                               where valid values are 12-51.[br] - If BARSZ is
                               set to 12, all bits are writeable.[br] - If
                               BARSZ is set to 52, all bits are read only and
                               0.[br] - If the BARSZ.Type bit is clear, then
                               bits 63:32 will be read only and 0.[br] - For
                               the special case where BARSZ = 0, bits 63:0 are
                               all read only and 0 resulting in the BAR being
                               disabled.[br] Note: The lowest order address bit
                               is 12 to enforce a minimum granularity of 4 KB.
                            */

  } Bits;
  UINT32 Data;

} BANK14_BAR_N1_IIO_VTD_STRUCT;

/* BANK15_BANKCTRL_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x800ae0)                                                        */
/*      SPRB0 (0x800ae0)                                                        */
/*      SPRHBM (0x800ae0)                                                       */
/*      SPRC0 (0x800ae0)                                                        */
/*      SPRMCC (0x800ae0)                                                       */
/*      SPRUCC (0x800ae0)                                                       */
/* Register default value on SPRA0: 0x00000080                                  */
/* Register default value on SPRB0: 0x00000080                                  */
/* Register default value on SPRHBM: 0x00000080                                 */
/* Register default value on SPRC0: 0x00000080                                  */
/* Register default value on SPRMCC: 0x00000080                                 */
/* Register default value on SPRUCC: 0x00000080                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the source decode logic associated with an arbitrary type 0 IOSF agent (i.e. IOSF endpoint)
*/


#define BANK15_BANKCTRL_IIO_VTD_REG 0x11000AE0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 banktype : 2;

                            /* Bits[1:0], Access Type=RO, default=0x00000000*/

                            /*
                               Specifies the type of Bank Decoder. Valid values
                               are:[br] 00b: Type 0 Bank - 16 Bytes[br] 01b:
                               Type 1 Bank - 64 Bytes[br] 10b: reserved[br]
                               11b: Subtractive Decode Bank - 8 Bytes
                            */
    UINT8 force_config_type0 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               If this bit is set, MS2IOSF sends any
                               configuration request that matches this bank as
                               type 0. Enables support for SR-IOV RCIEP.
                            */
    UINT8 bank_decode_enable : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               1b: The bank decoders are enabled.[br] 0b: The
                               bank decoders are disabled.
                            */
    UINT8 shadow_enable : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               1b: Outbound configuration requests that target
                               the Device/Function specified by this bank on
                               the RootBus will be snarfed to the shadow copy
                               of decode registers.[br] 0b: Outbound
                               configuration requests will not be snarfed. BIOS
                               must program the decode registers to allow this
                               bank to decode to the bank's specified target.
                            */
    UINT8 flr_supported : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               1b: The device decoded by this bank supports the
                               optional Function Level Reset mechanism. If
                               MS2IOSF observes a 1 being written to the
                               "Initiate FLR" (bit 15 of Device Control
                               Register), it clears the shadowed registers in
                               this bank.[br] 0b: The device decoded by this
                               bank does not support the optional Function
                               Level Reset mechanism.
                            */
    UINT8 rsvd : 1;

                            /* Bits[6:6], Access Type=RO, default=None*/

                            /* Reserved */
    UINT8 function_mask : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               When set, causes the DevFunc.Function field to
                               become ignored. Any configuration request that
                               matches the DevFunc.Device field with any
                               function value will be a match for this decoder
                               bank.
                            */

  } Bits;
  UINT8 Data;

} BANK15_BANKCTRL_IIO_VTD_STRUCT;

/* BANK15_DEVFUNC_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x800ae1)                                                        */
/*      SPRB0 (0x800ae1)                                                        */
/*      SPRHBM (0x800ae1)                                                       */
/*      SPRC0 (0x800ae1)                                                        */
/*      SPRMCC (0x800ae1)                                                       */
/*      SPRUCC (0x800ae1)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* PCI Device and Function number of the IOSF agent being shadowed
*/


#define BANK15_DEVFUNC_IIO_VTD_REG 0x11000AE1

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 func : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target Function Number on the
                               RootBus that this bank decodes for.
                            */
    UINT8 device : 5;

                            /* Bits[7:3], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target Device Number on the
                               RootBus that this bank decodes for.
                            */

  } Bits;
  UINT8 Data;

} BANK15_DEVFUNC_IIO_VTD_STRUCT;

/* BANK15_DESTID_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x10800ae2)                                                      */
/*      SPRB0 (0x10800ae2)                                                      */
/*      SPRHBM (0x10800ae2)                                                     */
/*      SPRC0 (0x10800ae2)                                                      */
/*      SPRMCC (0x10800ae2)                                                     */
/*      SPRUCC (0x10800ae2)                                                     */
/* Register default value on SPRA0: 0x00002188                                  */
/* Register default value on SPRB0: 0x00002188                                  */
/* Register default value on SPRHBM: 0x00002188                                 */
/* Register default value on SPRC0: 0x00002188                                  */
/* Register default value on SPRMCC: 0x00002188                                 */
/* Register default value on SPRUCC: 0x00002188                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* The lower 14 bits of this register comprise the PSF-required source decode information that MS2IOSF provides on the tdest_id signal when presenting the request to PSF (note exception for MS2IOSF_Port).
*/


#define BANK15_DESTID_IIO_VTD_REG 0x11010AE2

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 psf_channel : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies which IOSF channel to send requests
                               that hit this bank decoder ranges. This field is
                               used for IOSF Channel and also as part of the
                               IOSF Destination ID.
                            */
    UINT16 psf_port : 3;

                            /* Bits[5:3], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF port to send requests that
                               hit this bank decoder ranges.
                            */
    UINT16 ms2iosf_port : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the MS2IOSF port (left = 0, right = 1)
                               where to send requests that hit this bank
                               decoder. The logic should mask this bit to zero
                               before sending the 14-bit PSF source decode
                               header out. Technically, this is the top bit of
                               the PSF port ID, but MS2IOSF is using it for
                               internal purposes.
                            */
    UINT16 psf_port_group : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF port group to send requests
                               that hit this bank decoder ranges.
                            */
    UINT16 psf_id : 4;

                            /* Bits[11:8], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF to send requests that hit
                               this bank decoder ranges.
                            */
    UINT16 psf_decode_mode : 2;

                            /* Bits[13:12], Access Type=RW, default=0x00000002*/

                            /*
                               Specifies the PSF Destination ID decode mode
                               being used.[br] 00b: Fabric Decode[br] 01b:
                               Implicit Decode[br] 10b: Source Decode to
                               PSF_ID:Port_Group:Port:Channel[br] 11b: Source
                               Decode to PSF_ID, use Fabric Decode from there
                               onward (StF)
                            */
    UINT16 ms2iosf_channel : 2;

                            /* Bits[15:14], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies to which IOSF channel to send requests
                               that hit this bank decoder. Note the difference
                               between this channel ID and the channel ID
                               provided in the source decode header below. The
                               former specifies the channel ID on the MS2IOSF
                               interface itself whereas the latter specifies
                               the channel ID on the PSF interface to the
                               endpoint. MS2IOSF has four channels for each of
                               its two ports.
                            */

  } Bits;
  UINT16 Data;

} BANK15_DESTID_IIO_VTD_STRUCT;

/* BANK15_DEVCON_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x10800ae4)                                                      */
/*      SPRB0 (0x10800ae4)                                                      */
/*      SPRHBM (0x10800ae4)                                                     */
/*      SPRC0 (0x10800ae4)                                                      */
/*      SPRMCC (0x10800ae4)                                                     */
/*      SPRUCC (0x10800ae4)                                                     */
/* Register default value on SPRA0: 0x000000E0                                  */
/* Register default value on SPRB0: 0x000000E0                                  */
/* Register default value on SPRHBM: 0x000000E0                                 */
/* Register default value on SPRC0: 0x000000E0                                  */
/* Register default value on SPRMCC: 0x000000E0                                 */
/* Register default value on SPRUCC: 0x000000E0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK15_DEVCON_IIO_VTD_REG 0x11010AE4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 rsvd : 5;

                            /* Bits[4:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 max_payload_size : 3;

                            /* Bits[7:5], Access Type=RW/V, default=0x00000007*/

                            /*
                               Indicates the largest packet size supported by
                               the target decoded by this bank.[br] Defined
                               encodings for this field are:[br] 000b 128 bytes
                               max payload size[br] 001b 256 bytes max payload
                               size[br] 010b 512 bytes max payload size[br]
                               011b 1024 bytes max payload size[br] 100b 2048
                               bytes max payload size[br] 101b 4096 bytes max
                               payload size[br] 110b Reserved[br] 111b 64
                               address aligned bytes max payload size
                            */
    UINT16 rsvd_8 : 7;

                            /* Bits[14:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 initiate_flr : 1;

                            /* Bits[15:15], Access Type=RW/V, default=0x00000000*/

                            /*
                               Initiate Function Level Reset. A write of '1' to
                               the DEVCON[15] field of the device this bank
                               shadows, will cause all shadow-enabled registers
                               for this bank to reset. DEVCON[15] maps to this
                               field. This bit self-clears.
                            */

  } Bits;
  UINT16 Data;

} BANK15_DEVCON_IIO_VTD_STRUCT;

/* BANK15_DEVCON_OFFSET_IIO_VTD_REG supported on:                               */
/*      SPRA0 (0x800ae7)                                                        */
/*      SPRB0 (0x800ae7)                                                        */
/*      SPRHBM (0x800ae7)                                                       */
/*      SPRC0 (0x800ae7)                                                        */
/*      SPRMCC (0x800ae7)                                                       */
/*      SPRUCC (0x800ae7)                                                       */
/* Register default value on SPRA0: 0x00000048                                  */
/* Register default value on SPRB0: 0x00000048                                  */
/* Register default value on SPRHBM: 0x00000048                                 */
/* Register default value on SPRC0: 0x00000048                                  */
/* Register default value on SPRMCC: 0x00000048                                 */
/* Register default value on SPRUCC: 0x00000048                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Offset of the PCI Express Device Control Register in the IOSF agent's configuration header
*/


#define BANK15_DEVCON_OFFSET_IIO_VTD_REG 0x11000AE7

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 devcon_shadowen : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               If this bit and DevCon_Master are set, MS2IOSF
                               shadows writes to the offset programmed above
                               into its copy of the device control register.
                               BIOS must clear this bit for devices that do not
                               have a device control register. If shadowing is
                               disabled for this bank, this bit has no effect.
                            */
    UINT8 devcon_master : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Indicates whether or not this shadow copy is the
                               master copy. For devices that use multiple bank
                               decoders, SW is required to enable one of them
                               as a master. HW shadowing only updates the
                               master copy. Likewise, HW only uses the master
                               copy as input to other logic such as completion
                               combining. For devices that use only one bank
                               decoder, SW is required to set this bit.
                            */
    UINT8 devcon_offset : 6;

                            /* Bits[7:2], Access Type=RW, default=0x00000012*/

                            /*
                               Configuration space register offset for the
                               Device control register. This is a DWord offset
                               (left-shift this value by two to get byte
                               offset). Note that although this points to the
                               lowest order byte of the register, only the
                               upper byte of the register is captured by this
                               bank, which is at this offset + 1h.
                            */

  } Bits;
  UINT8 Data;

} BANK15_DEVCON_OFFSET_IIO_VTD_STRUCT;

/* BANK15_BARSIZE_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x800ae8)                                                        */
/*      SPRB0 (0x800ae8)                                                        */
/*      SPRHBM (0x800ae8)                                                       */
/*      SPRC0 (0x800ae8)                                                        */
/*      SPRMCC (0x800ae8)                                                       */
/*      SPRUCC (0x800ae8)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Size of the memory BAR being shadowed in this bank
*/


#define BANK15_BARSIZE_IIO_VTD_REG 0x11000AE8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 type : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               This bit allows the size of the BAR to be
                               selected. Generally, 32b BARs will be programmed
                               below 4GB boundary and 64b BARs will be
                               programmed above 4GB.[br] 0: 32b BAR[br] 1: 64b
                               BAR
                            */
    UINT8 rsvd : 1;

                            /* Bits[1:1], Access Type=RO, default=None*/

                            /* Reserved */
    UINT8 size : 6;

                            /* Bits[7:2], Access Type=RW, default=0x00000000*/

                            /*
                               Value indicating the size of 64-bit BAR. This
                               value is written by BIOS prior to enumeration.
                               The value indicates the lowest order address bit
                               that is writeable in the BAR. Only legal
                               settings are 12 to 51 (decimal), representing
                               BAR sizes of 4KB through 128PB.[br] Notes:[br] -
                               Programming a value of '0' or any other value
                               other than 12 to 51 will result in the BAR being
                               disabled.
                            */

  } Bits;
  UINT8 Data;

} BANK15_BARSIZE_IIO_VTD_STRUCT;

/* BANK15_BAR_OFFSET_IIO_VTD_REG supported on:                                  */
/*      SPRA0 (0x800aea)                                                        */
/*      SPRB0 (0x800aea)                                                        */
/*      SPRHBM (0x800aea)                                                       */
/*      SPRC0 (0x800aea)                                                        */
/*      SPRMCC (0x800aea)                                                       */
/*      SPRUCC (0x800aea)                                                       */
/* Register default value on SPRA0: 0x00000010                                  */
/* Register default value on SPRB0: 0x00000010                                  */
/* Register default value on SPRHBM: 0x00000010                                 */
/* Register default value on SPRC0: 0x00000010                                  */
/* Register default value on SPRMCC: 0x00000010                                 */
/* Register default value on SPRUCC: 0x00000010                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Offset of the shadowed BAR in the IOSF agent's configuration header
*/


#define BANK15_BAR_OFFSET_IIO_VTD_REG 0x11000AEA

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 rsvd : 2;

                            /* Bits[1:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT8 bar_offset : 4;

                            /* Bits[5:2], Access Type=RW, default=0x00000004*/

                            /*
                               Configuration space register offset for the BAR
                               register.[br] The only valid values for a 32b
                               BAR (offset [5:2]) are 0100b, 0101b, 0110b,
                               0111b, 1000b, and 1001b.[br] The only valid
                               values for 64b BAR (offset [5:2]) are 0100b,
                               0110b, and 1000b.[br] Note that this field is a
                               DW offset.
                            */
    UINT8 rsvd_6 : 2;

                            /* Bits[7:6], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT8 Data;

} BANK15_BAR_OFFSET_IIO_VTD_STRUCT;

/* BANK15_BAR_N0_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x20800af0)                                                      */
/*      SPRB0 (0x20800af0)                                                      */
/*      SPRHBM (0x20800af0)                                                     */
/*      SPRC0 (0x20800af0)                                                      */
/*      SPRMCC (0x20800af0)                                                     */
/*      SPRUCC (0x20800af0)                                                     */
/* Register default value on SPRA0: 0x40000000                                  */
/* Register default value on SPRB0: 0x40000000                                  */
/* Register default value on SPRHBM: 0x40000000                                 */
/* Register default value on SPRC0: 0x40000000                                  */
/* Register default value on SPRMCC: 0x40000000                                 */
/* Register default value on SPRUCC: 0x40000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the memory Base Address Register (BAR) in the IOSF agent's configuration header. BIOS can disable shadowing and/or overwrite the values in this register. If MS2IOSF observes FLR to the device and function shadowed by this bank, it clears this register.
*/


#define BANK15_BAR_N0_IIO_VTD_REG 0x11020AF0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 memory_space_indicator : 1;

                            /* Bits[0:0], Access Type=RO, default=0x00000000*/

                            /* BAR resource is memory (as opposed to I/O). */
    UINT32 type : 2;

                            /* Bits[2:1], Access Type=RO/V, default=0x00000000*/

                            /*
                               00: Memory type claimed by the BAR is 32-bit
                               addressable[br] 10: Memory type claimed by the
                               BAR is 64-bit addressable[br] The value in this
                               register is selected by the BARSZ.Type bit.
                            */
    UINT32 prefetchable : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000000*/

                            /* BAR points to Prefetchable memory. */
    UINT32 rsvd : 8;

                            /* Bits[11:4], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 address : 20;

                            /* Bits[31:12], Access Type=RW/V, default=0x00040000*/

                            /*
                               Sets the location of the BAR written by
                               software[br] The number of bits that are
                               writable in this register is dictated by the
                               value loaded into the BARSZ register by the BIOS
                               at initialization time (before BIOS PCI
                               enumeration). BARSZ indicates the lowest order
                               bit of this register field that is writeable
                               where valid values are 12-51.[br] - If BARSZ is
                               set to 12, all bits are writeable.[br] - If
                               BARSZ is set to 52, all bits are read only and
                               0.[br] - If the BARSZ.Type bit is clear, then
                               bits 63:32 will be read only and 0.[br] - For
                               the special case where BARSZ = 0, bits 63:0 are
                               all read only and 0 resulting in the BAR being
                               disabled.[br] Note: The lowest order address bit
                               is 12 to enforce a minimum granularity of 4 KB.
                            */

  } Bits;
  UINT32 Data;

} BANK15_BAR_N0_IIO_VTD_STRUCT;

/* BANK15_BAR_N1_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x20800af4)                                                      */
/*      SPRB0 (0x20800af4)                                                      */
/*      SPRHBM (0x20800af4)                                                     */
/*      SPRC0 (0x20800af4)                                                      */
/*      SPRMCC (0x20800af4)                                                     */
/*      SPRUCC (0x20800af4)                                                     */
/* Register default value on SPRA0: 0xFFFFFFFF                                  */
/* Register default value on SPRB0: 0xFFFFFFFF                                  */
/* Register default value on SPRHBM: 0xFFFFFFFF                                 */
/* Register default value on SPRC0: 0xFFFFFFFF                                  */
/* Register default value on SPRMCC: 0xFFFFFFFF                                 */
/* Register default value on SPRUCC: 0xFFFFFFFF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the memory Base Address Register (BAR) in the IOSF agent's configuration header. BIOS can disable shadowing and/or overwrite the values in this register. If MS2IOSF observes FLR to the device and function shadowed by this bank, it clears this register.
*/


#define BANK15_BAR_N1_IIO_VTD_REG 0x11020AF4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 address : 32;

                            /* Bits[31:0], Access Type=RW/V, default=0xFFFFFFFF*/

                            /*
                               Sets the location of the BAR written by
                               software[br] The number of bits that are
                               writable in this register is dictated by the
                               value loaded into the BARSZ register by the BIOS
                               at initialization time (before BIOS PCI
                               enumeration). BARSZ indicates the lowest order
                               bit of this register field that is writeable
                               where valid values are 12-51.[br] - If BARSZ is
                               set to 12, all bits are writeable.[br] - If
                               BARSZ is set to 52, all bits are read only and
                               0.[br] - If the BARSZ.Type bit is clear, then
                               bits 63:32 will be read only and 0.[br] - For
                               the special case where BARSZ = 0, bits 63:0 are
                               all read only and 0 resulting in the BAR being
                               disabled.[br] Note: The lowest order address bit
                               is 12 to enforce a minimum granularity of 4 KB.
                            */

  } Bits;
  UINT32 Data;

} BANK15_BAR_N1_IIO_VTD_STRUCT;

/* BANK16_BANKCTRL_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x800b00)                                                        */
/*      SPRB0 (0x800b00)                                                        */
/*      SPRHBM (0x800b00)                                                       */
/*      SPRC0 (0x800b00)                                                        */
/*      SPRMCC (0x800b00)                                                       */
/*      SPRUCC (0x800b00)                                                       */
/* Register default value on SPRA0: 0x00000080                                  */
/* Register default value on SPRB0: 0x00000080                                  */
/* Register default value on SPRHBM: 0x00000080                                 */
/* Register default value on SPRC0: 0x00000080                                  */
/* Register default value on SPRMCC: 0x00000080                                 */
/* Register default value on SPRUCC: 0x00000080                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the source decode logic associated with an arbitrary type 0 IOSF agent (i.e. IOSF endpoint)
*/


#define BANK16_BANKCTRL_IIO_VTD_REG 0x11000B00

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 banktype : 2;

                            /* Bits[1:0], Access Type=RO, default=0x00000000*/

                            /*
                               Specifies the type of Bank Decoder. Valid values
                               are:[br] 00b: Type 0 Bank - 16 Bytes[br] 01b:
                               Type 1 Bank - 64 Bytes[br] 10b: reserved[br]
                               11b: Subtractive Decode Bank - 8 Bytes
                            */
    UINT8 force_config_type0 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               If this bit is set, MS2IOSF sends any
                               configuration request that matches this bank as
                               type 0. Enables support for SR-IOV RCIEP.
                            */
    UINT8 bank_decode_enable : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               1b: The bank decoders are enabled.[br] 0b: The
                               bank decoders are disabled.
                            */
    UINT8 shadow_enable : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               1b: Outbound configuration requests that target
                               the Device/Function specified by this bank on
                               the RootBus will be snarfed to the shadow copy
                               of decode registers.[br] 0b: Outbound
                               configuration requests will not be snarfed. BIOS
                               must program the decode registers to allow this
                               bank to decode to the bank's specified target.
                            */
    UINT8 flr_supported : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               1b: The device decoded by this bank supports the
                               optional Function Level Reset mechanism. If
                               MS2IOSF observes a 1 being written to the
                               "Initiate FLR" (bit 15 of Device Control
                               Register), it clears the shadowed registers in
                               this bank.[br] 0b: The device decoded by this
                               bank does not support the optional Function
                               Level Reset mechanism.
                            */
    UINT8 rsvd : 1;

                            /* Bits[6:6], Access Type=RO, default=None*/

                            /* Reserved */
    UINT8 function_mask : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               When set, causes the DevFunc.Function field to
                               become ignored. Any configuration request that
                               matches the DevFunc.Device field with any
                               function value will be a match for this decoder
                               bank.
                            */

  } Bits;
  UINT8 Data;

} BANK16_BANKCTRL_IIO_VTD_STRUCT;

/* BANK16_DEVFUNC_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x800b01)                                                        */
/*      SPRB0 (0x800b01)                                                        */
/*      SPRHBM (0x800b01)                                                       */
/*      SPRC0 (0x800b01)                                                        */
/*      SPRMCC (0x800b01)                                                       */
/*      SPRUCC (0x800b01)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* PCI Device and Function number of the IOSF agent being shadowed
*/


#define BANK16_DEVFUNC_IIO_VTD_REG 0x11000B01

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 func : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target Function Number on the
                               RootBus that this bank decodes for.
                            */
    UINT8 device : 5;

                            /* Bits[7:3], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target Device Number on the
                               RootBus that this bank decodes for.
                            */

  } Bits;
  UINT8 Data;

} BANK16_DEVFUNC_IIO_VTD_STRUCT;

/* BANK16_DESTID_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x10800b02)                                                      */
/*      SPRB0 (0x10800b02)                                                      */
/*      SPRHBM (0x10800b02)                                                     */
/*      SPRC0 (0x10800b02)                                                      */
/*      SPRMCC (0x10800b02)                                                     */
/*      SPRUCC (0x10800b02)                                                     */
/* Register default value on SPRA0: 0x00002188                                  */
/* Register default value on SPRB0: 0x00002188                                  */
/* Register default value on SPRHBM: 0x00002188                                 */
/* Register default value on SPRC0: 0x00002188                                  */
/* Register default value on SPRMCC: 0x00002188                                 */
/* Register default value on SPRUCC: 0x00002188                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* The lower 14 bits of this register comprise the PSF-required source decode information that MS2IOSF provides on the tdest_id signal when presenting the request to PSF (note exception for MS2IOSF_Port).
*/


#define BANK16_DESTID_IIO_VTD_REG 0x11010B02

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 psf_channel : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies which IOSF channel to send requests
                               that hit this bank decoder ranges. This field is
                               used for IOSF Channel and also as part of the
                               IOSF Destination ID.
                            */
    UINT16 psf_port : 3;

                            /* Bits[5:3], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF port to send requests that
                               hit this bank decoder ranges.
                            */
    UINT16 ms2iosf_port : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the MS2IOSF port (left = 0, right = 1)
                               where to send requests that hit this bank
                               decoder. The logic should mask this bit to zero
                               before sending the 14-bit PSF source decode
                               header out. Technically, this is the top bit of
                               the PSF port ID, but MS2IOSF is using it for
                               internal purposes.
                            */
    UINT16 psf_port_group : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF port group to send requests
                               that hit this bank decoder ranges.
                            */
    UINT16 psf_id : 4;

                            /* Bits[11:8], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF to send requests that hit
                               this bank decoder ranges.
                            */
    UINT16 psf_decode_mode : 2;

                            /* Bits[13:12], Access Type=RW, default=0x00000002*/

                            /*
                               Specifies the PSF Destination ID decode mode
                               being used.[br] 00b: Fabric Decode[br] 01b:
                               Implicit Decode[br] 10b: Source Decode to
                               PSF_ID:Port_Group:Port:Channel[br] 11b: Source
                               Decode to PSF_ID, use Fabric Decode from there
                               onward (StF)
                            */
    UINT16 ms2iosf_channel : 2;

                            /* Bits[15:14], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies to which IOSF channel to send requests
                               that hit this bank decoder. Note the difference
                               between this channel ID and the channel ID
                               provided in the source decode header below. The
                               former specifies the channel ID on the MS2IOSF
                               interface itself whereas the latter specifies
                               the channel ID on the PSF interface to the
                               endpoint. MS2IOSF has four channels for each of
                               its two ports.
                            */

  } Bits;
  UINT16 Data;

} BANK16_DESTID_IIO_VTD_STRUCT;

/* BANK16_DEVCON_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x10800b04)                                                      */
/*      SPRB0 (0x10800b04)                                                      */
/*      SPRHBM (0x10800b04)                                                     */
/*      SPRC0 (0x10800b04)                                                      */
/*      SPRMCC (0x10800b04)                                                     */
/*      SPRUCC (0x10800b04)                                                     */
/* Register default value on SPRA0: 0x000000E0                                  */
/* Register default value on SPRB0: 0x000000E0                                  */
/* Register default value on SPRHBM: 0x000000E0                                 */
/* Register default value on SPRC0: 0x000000E0                                  */
/* Register default value on SPRMCC: 0x000000E0                                 */
/* Register default value on SPRUCC: 0x000000E0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK16_DEVCON_IIO_VTD_REG 0x11010B04

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 rsvd : 5;

                            /* Bits[4:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 max_payload_size : 3;

                            /* Bits[7:5], Access Type=RW/V, default=0x00000007*/

                            /*
                               Indicates the largest packet size supported by
                               the target decoded by this bank.[br] Defined
                               encodings for this field are:[br] 000b 128 bytes
                               max payload size[br] 001b 256 bytes max payload
                               size[br] 010b 512 bytes max payload size[br]
                               011b 1024 bytes max payload size[br] 100b 2048
                               bytes max payload size[br] 101b 4096 bytes max
                               payload size[br] 110b Reserved[br] 111b 64
                               address aligned bytes max payload size
                            */
    UINT16 rsvd_8 : 7;

                            /* Bits[14:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 initiate_flr : 1;

                            /* Bits[15:15], Access Type=RW/V, default=0x00000000*/

                            /*
                               Initiate Function Level Reset. A write of '1' to
                               the DEVCON[15] field of the device this bank
                               shadows, will cause all shadow-enabled registers
                               for this bank to reset. DEVCON[15] maps to this
                               field. This bit self-clears.
                            */

  } Bits;
  UINT16 Data;

} BANK16_DEVCON_IIO_VTD_STRUCT;

/* BANK16_DEVCON_OFFSET_IIO_VTD_REG supported on:                               */
/*      SPRA0 (0x800b07)                                                        */
/*      SPRB0 (0x800b07)                                                        */
/*      SPRHBM (0x800b07)                                                       */
/*      SPRC0 (0x800b07)                                                        */
/*      SPRMCC (0x800b07)                                                       */
/*      SPRUCC (0x800b07)                                                       */
/* Register default value on SPRA0: 0x00000048                                  */
/* Register default value on SPRB0: 0x00000048                                  */
/* Register default value on SPRHBM: 0x00000048                                 */
/* Register default value on SPRC0: 0x00000048                                  */
/* Register default value on SPRMCC: 0x00000048                                 */
/* Register default value on SPRUCC: 0x00000048                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Offset of the PCI Express Device Control Register in the IOSF agent's configuration header
*/


#define BANK16_DEVCON_OFFSET_IIO_VTD_REG 0x11000B07

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 devcon_shadowen : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               If this bit and DevCon_Master are set, MS2IOSF
                               shadows writes to the offset programmed above
                               into its copy of the device control register.
                               BIOS must clear this bit for devices that do not
                               have a device control register. If shadowing is
                               disabled for this bank, this bit has no effect.
                            */
    UINT8 devcon_master : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Indicates whether or not this shadow copy is the
                               master copy. For devices that use multiple bank
                               decoders, SW is required to enable one of them
                               as a master. HW shadowing only updates the
                               master copy. Likewise, HW only uses the master
                               copy as input to other logic such as completion
                               combining. For devices that use only one bank
                               decoder, SW is required to set this bit.
                            */
    UINT8 devcon_offset : 6;

                            /* Bits[7:2], Access Type=RW, default=0x00000012*/

                            /*
                               Configuration space register offset for the
                               Device control register. This is a DWord offset
                               (left-shift this value by two to get byte
                               offset). Note that although this points to the
                               lowest order byte of the register, only the
                               upper byte of the register is captured by this
                               bank, which is at this offset + 1h.
                            */

  } Bits;
  UINT8 Data;

} BANK16_DEVCON_OFFSET_IIO_VTD_STRUCT;

/* BANK16_BARSIZE_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x800b08)                                                        */
/*      SPRB0 (0x800b08)                                                        */
/*      SPRHBM (0x800b08)                                                       */
/*      SPRC0 (0x800b08)                                                        */
/*      SPRMCC (0x800b08)                                                       */
/*      SPRUCC (0x800b08)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Size of the memory BAR being shadowed in this bank
*/


#define BANK16_BARSIZE_IIO_VTD_REG 0x11000B08

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 type : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               This bit allows the size of the BAR to be
                               selected. Generally, 32b BARs will be programmed
                               below 4GB boundary and 64b BARs will be
                               programmed above 4GB.[br] 0: 32b BAR[br] 1: 64b
                               BAR
                            */
    UINT8 rsvd : 1;

                            /* Bits[1:1], Access Type=RO, default=None*/

                            /* Reserved */
    UINT8 size : 6;

                            /* Bits[7:2], Access Type=RW, default=0x00000000*/

                            /*
                               Value indicating the size of 64-bit BAR. This
                               value is written by BIOS prior to enumeration.
                               The value indicates the lowest order address bit
                               that is writeable in the BAR. Only legal
                               settings are 12 to 51 (decimal), representing
                               BAR sizes of 4KB through 128PB.[br] Notes:[br] -
                               Programming a value of '0' or any other value
                               other than 12 to 51 will result in the BAR being
                               disabled.
                            */

  } Bits;
  UINT8 Data;

} BANK16_BARSIZE_IIO_VTD_STRUCT;

/* BANK16_BAR_OFFSET_IIO_VTD_REG supported on:                                  */
/*      SPRA0 (0x800b0a)                                                        */
/*      SPRB0 (0x800b0a)                                                        */
/*      SPRHBM (0x800b0a)                                                       */
/*      SPRC0 (0x800b0a)                                                        */
/*      SPRMCC (0x800b0a)                                                       */
/*      SPRUCC (0x800b0a)                                                       */
/* Register default value on SPRA0: 0x00000010                                  */
/* Register default value on SPRB0: 0x00000010                                  */
/* Register default value on SPRHBM: 0x00000010                                 */
/* Register default value on SPRC0: 0x00000010                                  */
/* Register default value on SPRMCC: 0x00000010                                 */
/* Register default value on SPRUCC: 0x00000010                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Offset of the shadowed BAR in the IOSF agent's configuration header
*/


#define BANK16_BAR_OFFSET_IIO_VTD_REG 0x11000B0A

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 rsvd : 2;

                            /* Bits[1:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT8 bar_offset : 4;

                            /* Bits[5:2], Access Type=RW, default=0x00000004*/

                            /*
                               Configuration space register offset for the BAR
                               register.[br] The only valid values for a 32b
                               BAR (offset [5:2]) are 0100b, 0101b, 0110b,
                               0111b, 1000b, and 1001b.[br] The only valid
                               values for 64b BAR (offset [5:2]) are 0100b,
                               0110b, and 1000b.[br] Note that this field is a
                               DW offset.
                            */
    UINT8 rsvd_6 : 2;

                            /* Bits[7:6], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT8 Data;

} BANK16_BAR_OFFSET_IIO_VTD_STRUCT;

/* BANK16_BAR_N0_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x20800b10)                                                      */
/*      SPRB0 (0x20800b10)                                                      */
/*      SPRHBM (0x20800b10)                                                     */
/*      SPRC0 (0x20800b10)                                                      */
/*      SPRMCC (0x20800b10)                                                     */
/*      SPRUCC (0x20800b10)                                                     */
/* Register default value on SPRA0: 0x40000000                                  */
/* Register default value on SPRB0: 0x40000000                                  */
/* Register default value on SPRHBM: 0x40000000                                 */
/* Register default value on SPRC0: 0x40000000                                  */
/* Register default value on SPRMCC: 0x40000000                                 */
/* Register default value on SPRUCC: 0x40000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the memory Base Address Register (BAR) in the IOSF agent's configuration header. BIOS can disable shadowing and/or overwrite the values in this register. If MS2IOSF observes FLR to the device and function shadowed by this bank, it clears this register.
*/


#define BANK16_BAR_N0_IIO_VTD_REG 0x11020B10

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 memory_space_indicator : 1;

                            /* Bits[0:0], Access Type=RO, default=0x00000000*/

                            /* BAR resource is memory (as opposed to I/O). */
    UINT32 type : 2;

                            /* Bits[2:1], Access Type=RO/V, default=0x00000000*/

                            /*
                               00: Memory type claimed by the BAR is 32-bit
                               addressable[br] 10: Memory type claimed by the
                               BAR is 64-bit addressable[br] The value in this
                               register is selected by the BARSZ.Type bit.
                            */
    UINT32 prefetchable : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000000*/

                            /* BAR points to Prefetchable memory. */
    UINT32 rsvd : 8;

                            /* Bits[11:4], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 address : 20;

                            /* Bits[31:12], Access Type=RW/V, default=0x00040000*/

                            /*
                               Sets the location of the BAR written by
                               software[br] The number of bits that are
                               writable in this register is dictated by the
                               value loaded into the BARSZ register by the BIOS
                               at initialization time (before BIOS PCI
                               enumeration). BARSZ indicates the lowest order
                               bit of this register field that is writeable
                               where valid values are 12-51.[br] - If BARSZ is
                               set to 12, all bits are writeable.[br] - If
                               BARSZ is set to 52, all bits are read only and
                               0.[br] - If the BARSZ.Type bit is clear, then
                               bits 63:32 will be read only and 0.[br] - For
                               the special case where BARSZ = 0, bits 63:0 are
                               all read only and 0 resulting in the BAR being
                               disabled.[br] Note: The lowest order address bit
                               is 12 to enforce a minimum granularity of 4 KB.
                            */

  } Bits;
  UINT32 Data;

} BANK16_BAR_N0_IIO_VTD_STRUCT;

/* BANK16_BAR_N1_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x20800b14)                                                      */
/*      SPRB0 (0x20800b14)                                                      */
/*      SPRHBM (0x20800b14)                                                     */
/*      SPRC0 (0x20800b14)                                                      */
/*      SPRMCC (0x20800b14)                                                     */
/*      SPRUCC (0x20800b14)                                                     */
/* Register default value on SPRA0: 0xFFFFFFFF                                  */
/* Register default value on SPRB0: 0xFFFFFFFF                                  */
/* Register default value on SPRHBM: 0xFFFFFFFF                                 */
/* Register default value on SPRC0: 0xFFFFFFFF                                  */
/* Register default value on SPRMCC: 0xFFFFFFFF                                 */
/* Register default value on SPRUCC: 0xFFFFFFFF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the memory Base Address Register (BAR) in the IOSF agent's configuration header. BIOS can disable shadowing and/or overwrite the values in this register. If MS2IOSF observes FLR to the device and function shadowed by this bank, it clears this register.
*/


#define BANK16_BAR_N1_IIO_VTD_REG 0x11020B14

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 address : 32;

                            /* Bits[31:0], Access Type=RW/V, default=0xFFFFFFFF*/

                            /*
                               Sets the location of the BAR written by
                               software[br] The number of bits that are
                               writable in this register is dictated by the
                               value loaded into the BARSZ register by the BIOS
                               at initialization time (before BIOS PCI
                               enumeration). BARSZ indicates the lowest order
                               bit of this register field that is writeable
                               where valid values are 12-51.[br] - If BARSZ is
                               set to 12, all bits are writeable.[br] - If
                               BARSZ is set to 52, all bits are read only and
                               0.[br] - If the BARSZ.Type bit is clear, then
                               bits 63:32 will be read only and 0.[br] - For
                               the special case where BARSZ = 0, bits 63:0 are
                               all read only and 0 resulting in the BAR being
                               disabled.[br] Note: The lowest order address bit
                               is 12 to enforce a minimum granularity of 4 KB.
                            */

  } Bits;
  UINT32 Data;

} BANK16_BAR_N1_IIO_VTD_STRUCT;

/* BANK17_BANKCTRL_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x800b20)                                                        */
/*      SPRB0 (0x800b20)                                                        */
/*      SPRHBM (0x800b20)                                                       */
/*      SPRC0 (0x800b20)                                                        */
/*      SPRMCC (0x800b20)                                                       */
/*      SPRUCC (0x800b20)                                                       */
/* Register default value on SPRA0: 0x00000080                                  */
/* Register default value on SPRB0: 0x00000080                                  */
/* Register default value on SPRHBM: 0x00000080                                 */
/* Register default value on SPRC0: 0x00000080                                  */
/* Register default value on SPRMCC: 0x00000080                                 */
/* Register default value on SPRUCC: 0x00000080                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the source decode logic associated with an arbitrary type 0 IOSF agent (i.e. IOSF endpoint)
*/


#define BANK17_BANKCTRL_IIO_VTD_REG 0x11000B20

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 banktype : 2;

                            /* Bits[1:0], Access Type=RO, default=0x00000000*/

                            /*
                               Specifies the type of Bank Decoder. Valid values
                               are:[br] 00b: Type 0 Bank - 16 Bytes[br] 01b:
                               Type 1 Bank - 64 Bytes[br] 10b: reserved[br]
                               11b: Subtractive Decode Bank - 8 Bytes
                            */
    UINT8 force_config_type0 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               If this bit is set, MS2IOSF sends any
                               configuration request that matches this bank as
                               type 0. Enables support for SR-IOV RCIEP.
                            */
    UINT8 bank_decode_enable : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               1b: The bank decoders are enabled.[br] 0b: The
                               bank decoders are disabled.
                            */
    UINT8 shadow_enable : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               1b: Outbound configuration requests that target
                               the Device/Function specified by this bank on
                               the RootBus will be snarfed to the shadow copy
                               of decode registers.[br] 0b: Outbound
                               configuration requests will not be snarfed. BIOS
                               must program the decode registers to allow this
                               bank to decode to the bank's specified target.
                            */
    UINT8 flr_supported : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               1b: The device decoded by this bank supports the
                               optional Function Level Reset mechanism. If
                               MS2IOSF observes a 1 being written to the
                               "Initiate FLR" (bit 15 of Device Control
                               Register), it clears the shadowed registers in
                               this bank.[br] 0b: The device decoded by this
                               bank does not support the optional Function
                               Level Reset mechanism.
                            */
    UINT8 rsvd : 1;

                            /* Bits[6:6], Access Type=RO, default=None*/

                            /* Reserved */
    UINT8 function_mask : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               When set, causes the DevFunc.Function field to
                               become ignored. Any configuration request that
                               matches the DevFunc.Device field with any
                               function value will be a match for this decoder
                               bank.
                            */

  } Bits;
  UINT8 Data;

} BANK17_BANKCTRL_IIO_VTD_STRUCT;

/* BANK17_DEVFUNC_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x800b21)                                                        */
/*      SPRB0 (0x800b21)                                                        */
/*      SPRHBM (0x800b21)                                                       */
/*      SPRC0 (0x800b21)                                                        */
/*      SPRMCC (0x800b21)                                                       */
/*      SPRUCC (0x800b21)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* PCI Device and Function number of the IOSF agent being shadowed
*/


#define BANK17_DEVFUNC_IIO_VTD_REG 0x11000B21

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 func : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target Function Number on the
                               RootBus that this bank decodes for.
                            */
    UINT8 device : 5;

                            /* Bits[7:3], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target Device Number on the
                               RootBus that this bank decodes for.
                            */

  } Bits;
  UINT8 Data;

} BANK17_DEVFUNC_IIO_VTD_STRUCT;

/* BANK17_DESTID_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x10800b22)                                                      */
/*      SPRB0 (0x10800b22)                                                      */
/*      SPRHBM (0x10800b22)                                                     */
/*      SPRC0 (0x10800b22)                                                      */
/*      SPRMCC (0x10800b22)                                                     */
/*      SPRUCC (0x10800b22)                                                     */
/* Register default value on SPRA0: 0x00002188                                  */
/* Register default value on SPRB0: 0x00002188                                  */
/* Register default value on SPRHBM: 0x00002188                                 */
/* Register default value on SPRC0: 0x00002188                                  */
/* Register default value on SPRMCC: 0x00002188                                 */
/* Register default value on SPRUCC: 0x00002188                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* The lower 14 bits of this register comprise the PSF-required source decode information that MS2IOSF provides on the tdest_id signal when presenting the request to PSF (note exception for MS2IOSF_Port).
*/


#define BANK17_DESTID_IIO_VTD_REG 0x11010B22

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 psf_channel : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies which IOSF channel to send requests
                               that hit this bank decoder ranges. This field is
                               used for IOSF Channel and also as part of the
                               IOSF Destination ID.
                            */
    UINT16 psf_port : 3;

                            /* Bits[5:3], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF port to send requests that
                               hit this bank decoder ranges.
                            */
    UINT16 ms2iosf_port : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the MS2IOSF port (left = 0, right = 1)
                               where to send requests that hit this bank
                               decoder. The logic should mask this bit to zero
                               before sending the 14-bit PSF source decode
                               header out. Technically, this is the top bit of
                               the PSF port ID, but MS2IOSF is using it for
                               internal purposes.
                            */
    UINT16 psf_port_group : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF port group to send requests
                               that hit this bank decoder ranges.
                            */
    UINT16 psf_id : 4;

                            /* Bits[11:8], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF to send requests that hit
                               this bank decoder ranges.
                            */
    UINT16 psf_decode_mode : 2;

                            /* Bits[13:12], Access Type=RW, default=0x00000002*/

                            /*
                               Specifies the PSF Destination ID decode mode
                               being used.[br] 00b: Fabric Decode[br] 01b:
                               Implicit Decode[br] 10b: Source Decode to
                               PSF_ID:Port_Group:Port:Channel[br] 11b: Source
                               Decode to PSF_ID, use Fabric Decode from there
                               onward (StF)
                            */
    UINT16 ms2iosf_channel : 2;

                            /* Bits[15:14], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies to which IOSF channel to send requests
                               that hit this bank decoder. Note the difference
                               between this channel ID and the channel ID
                               provided in the source decode header below. The
                               former specifies the channel ID on the MS2IOSF
                               interface itself whereas the latter specifies
                               the channel ID on the PSF interface to the
                               endpoint. MS2IOSF has four channels for each of
                               its two ports.
                            */

  } Bits;
  UINT16 Data;

} BANK17_DESTID_IIO_VTD_STRUCT;

/* BANK17_DEVCON_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x10800b24)                                                      */
/*      SPRB0 (0x10800b24)                                                      */
/*      SPRHBM (0x10800b24)                                                     */
/*      SPRC0 (0x10800b24)                                                      */
/*      SPRMCC (0x10800b24)                                                     */
/*      SPRUCC (0x10800b24)                                                     */
/* Register default value on SPRA0: 0x000000E0                                  */
/* Register default value on SPRB0: 0x000000E0                                  */
/* Register default value on SPRHBM: 0x000000E0                                 */
/* Register default value on SPRC0: 0x000000E0                                  */
/* Register default value on SPRMCC: 0x000000E0                                 */
/* Register default value on SPRUCC: 0x000000E0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK17_DEVCON_IIO_VTD_REG 0x11010B24

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 rsvd : 5;

                            /* Bits[4:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 max_payload_size : 3;

                            /* Bits[7:5], Access Type=RW/V, default=0x00000007*/

                            /*
                               Indicates the largest packet size supported by
                               the target decoded by this bank.[br] Defined
                               encodings for this field are:[br] 000b 128 bytes
                               max payload size[br] 001b 256 bytes max payload
                               size[br] 010b 512 bytes max payload size[br]
                               011b 1024 bytes max payload size[br] 100b 2048
                               bytes max payload size[br] 101b 4096 bytes max
                               payload size[br] 110b Reserved[br] 111b 64
                               address aligned bytes max payload size
                            */
    UINT16 rsvd_8 : 7;

                            /* Bits[14:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 initiate_flr : 1;

                            /* Bits[15:15], Access Type=RW/V, default=0x00000000*/

                            /*
                               Initiate Function Level Reset. A write of '1' to
                               the DEVCON[15] field of the device this bank
                               shadows, will cause all shadow-enabled registers
                               for this bank to reset. DEVCON[15] maps to this
                               field. This bit self-clears.
                            */

  } Bits;
  UINT16 Data;

} BANK17_DEVCON_IIO_VTD_STRUCT;

/* BANK17_DEVCON_OFFSET_IIO_VTD_REG supported on:                               */
/*      SPRA0 (0x800b27)                                                        */
/*      SPRB0 (0x800b27)                                                        */
/*      SPRHBM (0x800b27)                                                       */
/*      SPRC0 (0x800b27)                                                        */
/*      SPRMCC (0x800b27)                                                       */
/*      SPRUCC (0x800b27)                                                       */
/* Register default value on SPRA0: 0x00000048                                  */
/* Register default value on SPRB0: 0x00000048                                  */
/* Register default value on SPRHBM: 0x00000048                                 */
/* Register default value on SPRC0: 0x00000048                                  */
/* Register default value on SPRMCC: 0x00000048                                 */
/* Register default value on SPRUCC: 0x00000048                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Offset of the PCI Express Device Control Register in the IOSF agent's configuration header
*/


#define BANK17_DEVCON_OFFSET_IIO_VTD_REG 0x11000B27

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 devcon_shadowen : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               If this bit and DevCon_Master are set, MS2IOSF
                               shadows writes to the offset programmed above
                               into its copy of the device control register.
                               BIOS must clear this bit for devices that do not
                               have a device control register. If shadowing is
                               disabled for this bank, this bit has no effect.
                            */
    UINT8 devcon_master : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Indicates whether or not this shadow copy is the
                               master copy. For devices that use multiple bank
                               decoders, SW is required to enable one of them
                               as a master. HW shadowing only updates the
                               master copy. Likewise, HW only uses the master
                               copy as input to other logic such as completion
                               combining. For devices that use only one bank
                               decoder, SW is required to set this bit.
                            */
    UINT8 devcon_offset : 6;

                            /* Bits[7:2], Access Type=RW, default=0x00000012*/

                            /*
                               Configuration space register offset for the
                               Device control register. This is a DWord offset
                               (left-shift this value by two to get byte
                               offset). Note that although this points to the
                               lowest order byte of the register, only the
                               upper byte of the register is captured by this
                               bank, which is at this offset + 1h.
                            */

  } Bits;
  UINT8 Data;

} BANK17_DEVCON_OFFSET_IIO_VTD_STRUCT;

/* BANK17_BARSIZE_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x800b28)                                                        */
/*      SPRB0 (0x800b28)                                                        */
/*      SPRHBM (0x800b28)                                                       */
/*      SPRC0 (0x800b28)                                                        */
/*      SPRMCC (0x800b28)                                                       */
/*      SPRUCC (0x800b28)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Size of the memory BAR being shadowed in this bank
*/


#define BANK17_BARSIZE_IIO_VTD_REG 0x11000B28

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 type : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               This bit allows the size of the BAR to be
                               selected. Generally, 32b BARs will be programmed
                               below 4GB boundary and 64b BARs will be
                               programmed above 4GB.[br] 0: 32b BAR[br] 1: 64b
                               BAR
                            */
    UINT8 rsvd : 1;

                            /* Bits[1:1], Access Type=RO, default=None*/

                            /* Reserved */
    UINT8 size : 6;

                            /* Bits[7:2], Access Type=RW, default=0x00000000*/

                            /*
                               Value indicating the size of 64-bit BAR. This
                               value is written by BIOS prior to enumeration.
                               The value indicates the lowest order address bit
                               that is writeable in the BAR. Only legal
                               settings are 12 to 51 (decimal), representing
                               BAR sizes of 4KB through 128PB.[br] Notes:[br] -
                               Programming a value of '0' or any other value
                               other than 12 to 51 will result in the BAR being
                               disabled.
                            */

  } Bits;
  UINT8 Data;

} BANK17_BARSIZE_IIO_VTD_STRUCT;

/* BANK17_BAR_OFFSET_IIO_VTD_REG supported on:                                  */
/*      SPRA0 (0x800b2a)                                                        */
/*      SPRB0 (0x800b2a)                                                        */
/*      SPRHBM (0x800b2a)                                                       */
/*      SPRC0 (0x800b2a)                                                        */
/*      SPRMCC (0x800b2a)                                                       */
/*      SPRUCC (0x800b2a)                                                       */
/* Register default value on SPRA0: 0x00000010                                  */
/* Register default value on SPRB0: 0x00000010                                  */
/* Register default value on SPRHBM: 0x00000010                                 */
/* Register default value on SPRC0: 0x00000010                                  */
/* Register default value on SPRMCC: 0x00000010                                 */
/* Register default value on SPRUCC: 0x00000010                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Offset of the shadowed BAR in the IOSF agent's configuration header
*/


#define BANK17_BAR_OFFSET_IIO_VTD_REG 0x11000B2A

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 rsvd : 2;

                            /* Bits[1:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT8 bar_offset : 4;

                            /* Bits[5:2], Access Type=RW, default=0x00000004*/

                            /*
                               Configuration space register offset for the BAR
                               register.[br] The only valid values for a 32b
                               BAR (offset [5:2]) are 0100b, 0101b, 0110b,
                               0111b, 1000b, and 1001b.[br] The only valid
                               values for 64b BAR (offset [5:2]) are 0100b,
                               0110b, and 1000b.[br] Note that this field is a
                               DW offset.
                            */
    UINT8 rsvd_6 : 2;

                            /* Bits[7:6], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT8 Data;

} BANK17_BAR_OFFSET_IIO_VTD_STRUCT;

/* BANK17_BAR_N0_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x20800b30)                                                      */
/*      SPRB0 (0x20800b30)                                                      */
/*      SPRHBM (0x20800b30)                                                     */
/*      SPRC0 (0x20800b30)                                                      */
/*      SPRMCC (0x20800b30)                                                     */
/*      SPRUCC (0x20800b30)                                                     */
/* Register default value on SPRA0: 0x40000000                                  */
/* Register default value on SPRB0: 0x40000000                                  */
/* Register default value on SPRHBM: 0x40000000                                 */
/* Register default value on SPRC0: 0x40000000                                  */
/* Register default value on SPRMCC: 0x40000000                                 */
/* Register default value on SPRUCC: 0x40000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the memory Base Address Register (BAR) in the IOSF agent's configuration header. BIOS can disable shadowing and/or overwrite the values in this register. If MS2IOSF observes FLR to the device and function shadowed by this bank, it clears this register.
*/


#define BANK17_BAR_N0_IIO_VTD_REG 0x11020B30

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 memory_space_indicator : 1;

                            /* Bits[0:0], Access Type=RO, default=0x00000000*/

                            /* BAR resource is memory (as opposed to I/O). */
    UINT32 type : 2;

                            /* Bits[2:1], Access Type=RO/V, default=0x00000000*/

                            /*
                               00: Memory type claimed by the BAR is 32-bit
                               addressable[br] 10: Memory type claimed by the
                               BAR is 64-bit addressable[br] The value in this
                               register is selected by the BARSZ.Type bit.
                            */
    UINT32 prefetchable : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000000*/

                            /* BAR points to Prefetchable memory. */
    UINT32 rsvd : 8;

                            /* Bits[11:4], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 address : 20;

                            /* Bits[31:12], Access Type=RW/V, default=0x00040000*/

                            /*
                               Sets the location of the BAR written by
                               software[br] The number of bits that are
                               writable in this register is dictated by the
                               value loaded into the BARSZ register by the BIOS
                               at initialization time (before BIOS PCI
                               enumeration). BARSZ indicates the lowest order
                               bit of this register field that is writeable
                               where valid values are 12-51.[br] - If BARSZ is
                               set to 12, all bits are writeable.[br] - If
                               BARSZ is set to 52, all bits are read only and
                               0.[br] - If the BARSZ.Type bit is clear, then
                               bits 63:32 will be read only and 0.[br] - For
                               the special case where BARSZ = 0, bits 63:0 are
                               all read only and 0 resulting in the BAR being
                               disabled.[br] Note: The lowest order address bit
                               is 12 to enforce a minimum granularity of 4 KB.
                            */

  } Bits;
  UINT32 Data;

} BANK17_BAR_N0_IIO_VTD_STRUCT;

/* BANK17_BAR_N1_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x20800b34)                                                      */
/*      SPRB0 (0x20800b34)                                                      */
/*      SPRHBM (0x20800b34)                                                     */
/*      SPRC0 (0x20800b34)                                                      */
/*      SPRMCC (0x20800b34)                                                     */
/*      SPRUCC (0x20800b34)                                                     */
/* Register default value on SPRA0: 0xFFFFFFFF                                  */
/* Register default value on SPRB0: 0xFFFFFFFF                                  */
/* Register default value on SPRHBM: 0xFFFFFFFF                                 */
/* Register default value on SPRC0: 0xFFFFFFFF                                  */
/* Register default value on SPRMCC: 0xFFFFFFFF                                 */
/* Register default value on SPRUCC: 0xFFFFFFFF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the memory Base Address Register (BAR) in the IOSF agent's configuration header. BIOS can disable shadowing and/or overwrite the values in this register. If MS2IOSF observes FLR to the device and function shadowed by this bank, it clears this register.
*/


#define BANK17_BAR_N1_IIO_VTD_REG 0x11020B34

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 address : 32;

                            /* Bits[31:0], Access Type=RW/V, default=0xFFFFFFFF*/

                            /*
                               Sets the location of the BAR written by
                               software[br] The number of bits that are
                               writable in this register is dictated by the
                               value loaded into the BARSZ register by the BIOS
                               at initialization time (before BIOS PCI
                               enumeration). BARSZ indicates the lowest order
                               bit of this register field that is writeable
                               where valid values are 12-51.[br] - If BARSZ is
                               set to 12, all bits are writeable.[br] - If
                               BARSZ is set to 52, all bits are read only and
                               0.[br] - If the BARSZ.Type bit is clear, then
                               bits 63:32 will be read only and 0.[br] - For
                               the special case where BARSZ = 0, bits 63:0 are
                               all read only and 0 resulting in the BAR being
                               disabled.[br] Note: The lowest order address bit
                               is 12 to enforce a minimum granularity of 4 KB.
                            */

  } Bits;
  UINT32 Data;

} BANK17_BAR_N1_IIO_VTD_STRUCT;

/* BANK18_BANKCTRL_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x800b40)                                                        */
/*      SPRB0 (0x800b40)                                                        */
/*      SPRHBM (0x800b40)                                                       */
/*      SPRC0 (0x800b40)                                                        */
/*      SPRMCC (0x800b40)                                                       */
/*      SPRUCC (0x800b40)                                                       */
/* Register default value on SPRA0: 0x00000080                                  */
/* Register default value on SPRB0: 0x00000080                                  */
/* Register default value on SPRHBM: 0x00000080                                 */
/* Register default value on SPRC0: 0x00000080                                  */
/* Register default value on SPRMCC: 0x00000080                                 */
/* Register default value on SPRUCC: 0x00000080                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the source decode logic associated with an arbitrary type 0 IOSF agent (i.e. IOSF endpoint)
*/


#define BANK18_BANKCTRL_IIO_VTD_REG 0x11000B40

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 banktype : 2;

                            /* Bits[1:0], Access Type=RO, default=0x00000000*/

                            /*
                               Specifies the type of Bank Decoder. Valid values
                               are:[br] 00b: Type 0 Bank - 16 Bytes[br] 01b:
                               Type 1 Bank - 64 Bytes[br] 10b: reserved[br]
                               11b: Subtractive Decode Bank - 8 Bytes
                            */
    UINT8 force_config_type0 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               If this bit is set, MS2IOSF sends any
                               configuration request that matches this bank as
                               type 0. Enables support for SR-IOV RCIEP.
                            */
    UINT8 bank_decode_enable : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               1b: The bank decoders are enabled.[br] 0b: The
                               bank decoders are disabled.
                            */
    UINT8 shadow_enable : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               1b: Outbound configuration requests that target
                               the Device/Function specified by this bank on
                               the RootBus will be snarfed to the shadow copy
                               of decode registers.[br] 0b: Outbound
                               configuration requests will not be snarfed. BIOS
                               must program the decode registers to allow this
                               bank to decode to the bank's specified target.
                            */
    UINT8 flr_supported : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               1b: The device decoded by this bank supports the
                               optional Function Level Reset mechanism. If
                               MS2IOSF observes a 1 being written to the
                               "Initiate FLR" (bit 15 of Device Control
                               Register), it clears the shadowed registers in
                               this bank.[br] 0b: The device decoded by this
                               bank does not support the optional Function
                               Level Reset mechanism.
                            */
    UINT8 rsvd : 1;

                            /* Bits[6:6], Access Type=RO, default=None*/

                            /* Reserved */
    UINT8 function_mask : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               When set, causes the DevFunc.Function field to
                               become ignored. Any configuration request that
                               matches the DevFunc.Device field with any
                               function value will be a match for this decoder
                               bank.
                            */

  } Bits;
  UINT8 Data;

} BANK18_BANKCTRL_IIO_VTD_STRUCT;

/* BANK18_DEVFUNC_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x800b41)                                                        */
/*      SPRB0 (0x800b41)                                                        */
/*      SPRHBM (0x800b41)                                                       */
/*      SPRC0 (0x800b41)                                                        */
/*      SPRMCC (0x800b41)                                                       */
/*      SPRUCC (0x800b41)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* PCI Device and Function number of the IOSF agent being shadowed
*/


#define BANK18_DEVFUNC_IIO_VTD_REG 0x11000B41

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 func : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target Function Number on the
                               RootBus that this bank decodes for.
                            */
    UINT8 device : 5;

                            /* Bits[7:3], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the target Device Number on the
                               RootBus that this bank decodes for.
                            */

  } Bits;
  UINT8 Data;

} BANK18_DEVFUNC_IIO_VTD_STRUCT;

/* BANK18_DESTID_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x10800b42)                                                      */
/*      SPRB0 (0x10800b42)                                                      */
/*      SPRHBM (0x10800b42)                                                     */
/*      SPRC0 (0x10800b42)                                                      */
/*      SPRMCC (0x10800b42)                                                     */
/*      SPRUCC (0x10800b42)                                                     */
/* Register default value on SPRA0: 0x00002188                                  */
/* Register default value on SPRB0: 0x00002188                                  */
/* Register default value on SPRHBM: 0x00002188                                 */
/* Register default value on SPRC0: 0x00002188                                  */
/* Register default value on SPRMCC: 0x00002188                                 */
/* Register default value on SPRUCC: 0x00002188                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* The lower 14 bits of this register comprise the PSF-required source decode information that MS2IOSF provides on the tdest_id signal when presenting the request to PSF (note exception for MS2IOSF_Port).
*/


#define BANK18_DESTID_IIO_VTD_REG 0x11010B42

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 psf_channel : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies which IOSF channel to send requests
                               that hit this bank decoder ranges. This field is
                               used for IOSF Channel and also as part of the
                               IOSF Destination ID.
                            */
    UINT16 psf_port : 3;

                            /* Bits[5:3], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF port to send requests that
                               hit this bank decoder ranges.
                            */
    UINT16 ms2iosf_port : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the MS2IOSF port (left = 0, right = 1)
                               where to send requests that hit this bank
                               decoder. The logic should mask this bit to zero
                               before sending the 14-bit PSF source decode
                               header out. Technically, this is the top bit of
                               the PSF port ID, but MS2IOSF is using it for
                               internal purposes.
                            */
    UINT16 psf_port_group : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF port group to send requests
                               that hit this bank decoder ranges.
                            */
    UINT16 psf_id : 4;

                            /* Bits[11:8], Access Type=RW, default=0x00000001*/

                            /*
                               Specifies which PSF to send requests that hit
                               this bank decoder ranges.
                            */
    UINT16 psf_decode_mode : 2;

                            /* Bits[13:12], Access Type=RW, default=0x00000002*/

                            /*
                               Specifies the PSF Destination ID decode mode
                               being used.[br] 00b: Fabric Decode[br] 01b:
                               Implicit Decode[br] 10b: Source Decode to
                               PSF_ID:Port_Group:Port:Channel[br] 11b: Source
                               Decode to PSF_ID, use Fabric Decode from there
                               onward (StF)
                            */
    UINT16 ms2iosf_channel : 2;

                            /* Bits[15:14], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies to which IOSF channel to send requests
                               that hit this bank decoder. Note the difference
                               between this channel ID and the channel ID
                               provided in the source decode header below. The
                               former specifies the channel ID on the MS2IOSF
                               interface itself whereas the latter specifies
                               the channel ID on the PSF interface to the
                               endpoint. MS2IOSF has four channels for each of
                               its two ports.
                            */

  } Bits;
  UINT16 Data;

} BANK18_DESTID_IIO_VTD_STRUCT;

/* BANK18_DEVCON_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x10800b44)                                                      */
/*      SPRB0 (0x10800b44)                                                      */
/*      SPRHBM (0x10800b44)                                                     */
/*      SPRC0 (0x10800b44)                                                      */
/*      SPRMCC (0x10800b44)                                                     */
/*      SPRUCC (0x10800b44)                                                     */
/* Register default value on SPRA0: 0x000000E0                                  */
/* Register default value on SPRB0: 0x000000E0                                  */
/* Register default value on SPRHBM: 0x000000E0                                 */
/* Register default value on SPRC0: 0x000000E0                                  */
/* Register default value on SPRMCC: 0x000000E0                                 */
/* Register default value on SPRUCC: 0x000000E0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK18_DEVCON_IIO_VTD_REG 0x11010B44

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 rsvd : 5;

                            /* Bits[4:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 max_payload_size : 3;

                            /* Bits[7:5], Access Type=RW/V, default=0x00000007*/

                            /*
                               Indicates the largest packet size supported by
                               the target decoded by this bank.[br] Defined
                               encodings for this field are:[br] 000b 128 bytes
                               max payload size[br] 001b 256 bytes max payload
                               size[br] 010b 512 bytes max payload size[br]
                               011b 1024 bytes max payload size[br] 100b 2048
                               bytes max payload size[br] 101b 4096 bytes max
                               payload size[br] 110b Reserved[br] 111b 64
                               address aligned bytes max payload size
                            */
    UINT16 rsvd_8 : 7;

                            /* Bits[14:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 initiate_flr : 1;

                            /* Bits[15:15], Access Type=RW/V, default=0x00000000*/

                            /*
                               Initiate Function Level Reset. A write of '1' to
                               the DEVCON[15] field of the device this bank
                               shadows, will cause all shadow-enabled registers
                               for this bank to reset. DEVCON[15] maps to this
                               field. This bit self-clears.
                            */

  } Bits;
  UINT16 Data;

} BANK18_DEVCON_IIO_VTD_STRUCT;

/* BANK18_DEVCON_OFFSET_IIO_VTD_REG supported on:                               */
/*      SPRA0 (0x800b47)                                                        */
/*      SPRB0 (0x800b47)                                                        */
/*      SPRHBM (0x800b47)                                                       */
/*      SPRC0 (0x800b47)                                                        */
/*      SPRMCC (0x800b47)                                                       */
/*      SPRUCC (0x800b47)                                                       */
/* Register default value on SPRA0: 0x00000048                                  */
/* Register default value on SPRB0: 0x00000048                                  */
/* Register default value on SPRHBM: 0x00000048                                 */
/* Register default value on SPRC0: 0x00000048                                  */
/* Register default value on SPRMCC: 0x00000048                                 */
/* Register default value on SPRUCC: 0x00000048                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Offset of the PCI Express Device Control Register in the IOSF agent's configuration header
*/


#define BANK18_DEVCON_OFFSET_IIO_VTD_REG 0x11000B47

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 devcon_shadowen : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               If this bit and DevCon_Master are set, MS2IOSF
                               shadows writes to the offset programmed above
                               into its copy of the device control register.
                               BIOS must clear this bit for devices that do not
                               have a device control register. If shadowing is
                               disabled for this bank, this bit has no effect.
                            */
    UINT8 devcon_master : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Indicates whether or not this shadow copy is the
                               master copy. For devices that use multiple bank
                               decoders, SW is required to enable one of them
                               as a master. HW shadowing only updates the
                               master copy. Likewise, HW only uses the master
                               copy as input to other logic such as completion
                               combining. For devices that use only one bank
                               decoder, SW is required to set this bit.
                            */
    UINT8 devcon_offset : 6;

                            /* Bits[7:2], Access Type=RW, default=0x00000012*/

                            /*
                               Configuration space register offset for the
                               Device control register. This is a DWord offset
                               (left-shift this value by two to get byte
                               offset). Note that although this points to the
                               lowest order byte of the register, only the
                               upper byte of the register is captured by this
                               bank, which is at this offset + 1h.
                            */

  } Bits;
  UINT8 Data;

} BANK18_DEVCON_OFFSET_IIO_VTD_STRUCT;

/* BANK18_BARSIZE_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x800b48)                                                        */
/*      SPRB0 (0x800b48)                                                        */
/*      SPRHBM (0x800b48)                                                       */
/*      SPRC0 (0x800b48)                                                        */
/*      SPRMCC (0x800b48)                                                       */
/*      SPRUCC (0x800b48)                                                       */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Size of the memory BAR being shadowed in this bank
*/


#define BANK18_BARSIZE_IIO_VTD_REG 0x11000B48

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 type : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               This bit allows the size of the BAR to be
                               selected. Generally, 32b BARs will be programmed
                               below 4GB boundary and 64b BARs will be
                               programmed above 4GB.[br] 0: 32b BAR[br] 1: 64b
                               BAR
                            */
    UINT8 rsvd : 1;

                            /* Bits[1:1], Access Type=RO, default=None*/

                            /* Reserved */
    UINT8 size : 6;

                            /* Bits[7:2], Access Type=RW, default=0x00000000*/

                            /*
                               Value indicating the size of 64-bit BAR. This
                               value is written by BIOS prior to enumeration.
                               The value indicates the lowest order address bit
                               that is writeable in the BAR. Only legal
                               settings are 12 to 51 (decimal), representing
                               BAR sizes of 4KB through 128PB.[br] Notes:[br] -
                               Programming a value of '0' or any other value
                               other than 12 to 51 will result in the BAR being
                               disabled.
                            */

  } Bits;
  UINT8 Data;

} BANK18_BARSIZE_IIO_VTD_STRUCT;

/* BANK18_BAR_OFFSET_IIO_VTD_REG supported on:                                  */
/*      SPRA0 (0x800b4a)                                                        */
/*      SPRB0 (0x800b4a)                                                        */
/*      SPRHBM (0x800b4a)                                                       */
/*      SPRC0 (0x800b4a)                                                        */
/*      SPRMCC (0x800b4a)                                                       */
/*      SPRUCC (0x800b4a)                                                       */
/* Register default value on SPRA0: 0x00000010                                  */
/* Register default value on SPRB0: 0x00000010                                  */
/* Register default value on SPRHBM: 0x00000010                                 */
/* Register default value on SPRC0: 0x00000010                                  */
/* Register default value on SPRMCC: 0x00000010                                 */
/* Register default value on SPRUCC: 0x00000010                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Offset of the shadowed BAR in the IOSF agent's configuration header
*/


#define BANK18_BAR_OFFSET_IIO_VTD_REG 0x11000B4A

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 rsvd : 2;

                            /* Bits[1:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT8 bar_offset : 4;

                            /* Bits[5:2], Access Type=RW, default=0x00000004*/

                            /*
                               Configuration space register offset for the BAR
                               register.[br] The only valid values for a 32b
                               BAR (offset [5:2]) are 0100b, 0101b, 0110b,
                               0111b, 1000b, and 1001b.[br] The only valid
                               values for 64b BAR (offset [5:2]) are 0100b,
                               0110b, and 1000b.[br] Note that this field is a
                               DW offset.
                            */
    UINT8 rsvd_6 : 2;

                            /* Bits[7:6], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT8 Data;

} BANK18_BAR_OFFSET_IIO_VTD_STRUCT;

/* BANK18_BAR_N0_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x20800b50)                                                      */
/*      SPRB0 (0x20800b50)                                                      */
/*      SPRHBM (0x20800b50)                                                     */
/*      SPRC0 (0x20800b50)                                                      */
/*      SPRMCC (0x20800b50)                                                     */
/*      SPRUCC (0x20800b50)                                                     */
/* Register default value on SPRA0: 0x40000000                                  */
/* Register default value on SPRB0: 0x40000000                                  */
/* Register default value on SPRHBM: 0x40000000                                 */
/* Register default value on SPRC0: 0x40000000                                  */
/* Register default value on SPRMCC: 0x40000000                                 */
/* Register default value on SPRUCC: 0x40000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the memory Base Address Register (BAR) in the IOSF agent's configuration header. BIOS can disable shadowing and/or overwrite the values in this register. If MS2IOSF observes FLR to the device and function shadowed by this bank, it clears this register.
*/


#define BANK18_BAR_N0_IIO_VTD_REG 0x11020B50

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 memory_space_indicator : 1;

                            /* Bits[0:0], Access Type=RO, default=0x00000000*/

                            /* BAR resource is memory (as opposed to I/O). */
    UINT32 type : 2;

                            /* Bits[2:1], Access Type=RO/V, default=0x00000000*/

                            /*
                               00: Memory type claimed by the BAR is 32-bit
                               addressable[br] 10: Memory type claimed by the
                               BAR is 64-bit addressable[br] The value in this
                               register is selected by the BARSZ.Type bit.
                            */
    UINT32 prefetchable : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000000*/

                            /* BAR points to Prefetchable memory. */
    UINT32 rsvd : 8;

                            /* Bits[11:4], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 address : 20;

                            /* Bits[31:12], Access Type=RW/V, default=0x00040000*/

                            /*
                               Sets the location of the BAR written by
                               software[br] The number of bits that are
                               writable in this register is dictated by the
                               value loaded into the BARSZ register by the BIOS
                               at initialization time (before BIOS PCI
                               enumeration). BARSZ indicates the lowest order
                               bit of this register field that is writeable
                               where valid values are 12-51.[br] - If BARSZ is
                               set to 12, all bits are writeable.[br] - If
                               BARSZ is set to 52, all bits are read only and
                               0.[br] - If the BARSZ.Type bit is clear, then
                               bits 63:32 will be read only and 0.[br] - For
                               the special case where BARSZ = 0, bits 63:0 are
                               all read only and 0 resulting in the BAR being
                               disabled.[br] Note: The lowest order address bit
                               is 12 to enforce a minimum granularity of 4 KB.
                            */

  } Bits;
  UINT32 Data;

} BANK18_BAR_N0_IIO_VTD_STRUCT;

/* BANK18_BAR_N1_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x20800b54)                                                      */
/*      SPRB0 (0x20800b54)                                                      */
/*      SPRHBM (0x20800b54)                                                     */
/*      SPRC0 (0x20800b54)                                                      */
/*      SPRMCC (0x20800b54)                                                     */
/*      SPRUCC (0x20800b54)                                                     */
/* Register default value on SPRA0: 0xFFFFFFFF                                  */
/* Register default value on SPRB0: 0xFFFFFFFF                                  */
/* Register default value on SPRHBM: 0xFFFFFFFF                                 */
/* Register default value on SPRC0: 0xFFFFFFFF                                  */
/* Register default value on SPRMCC: 0xFFFFFFFF                                 */
/* Register default value on SPRUCC: 0xFFFFFFFF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* This register is a shadow copy of the memory Base Address Register (BAR) in the IOSF agent's configuration header. BIOS can disable shadowing and/or overwrite the values in this register. If MS2IOSF observes FLR to the device and function shadowed by this bank, it clears this register.
*/


#define BANK18_BAR_N1_IIO_VTD_REG 0x11020B54

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 address : 32;

                            /* Bits[31:0], Access Type=RW/V, default=0xFFFFFFFF*/

                            /*
                               Sets the location of the BAR written by
                               software[br] The number of bits that are
                               writable in this register is dictated by the
                               value loaded into the BARSZ register by the BIOS
                               at initialization time (before BIOS PCI
                               enumeration). BARSZ indicates the lowest order
                               bit of this register field that is writeable
                               where valid values are 12-51.[br] - If BARSZ is
                               set to 12, all bits are writeable.[br] - If
                               BARSZ is set to 52, all bits are read only and
                               0.[br] - If the BARSZ.Type bit is clear, then
                               bits 63:32 will be read only and 0.[br] - For
                               the special case where BARSZ = 0, bits 63:0 are
                               all read only and 0 resulting in the BAR being
                               disabled.[br] Note: The lowest order address bit
                               is 12 to enforce a minimum granularity of 4 KB.
                            */

  } Bits;
  UINT32 Data;

} BANK18_BAR_N1_IIO_VTD_STRUCT;

/* BANK19_BANKCTRL_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x800cf0)                                                        */
/*      SPRB0 (0x800cf0)                                                        */
/*      SPRHBM (0x800cf0)                                                       */
/*      SPRC0 (0x800cf0)                                                        */
/*      SPRMCC (0x800cf0)                                                       */
/*      SPRUCC (0x800cf0)                                                       */
/* Register default value on SPRA0: 0x0000000B                                  */
/* Register default value on SPRB0: 0x0000000B                                  */
/* Register default value on SPRHBM: 0x0000000B                                 */
/* Register default value on SPRC0: 0x0000000B                                  */
/* Register default value on SPRMCC: 0x0000000B                                 */
/* Register default value on SPRUCC: 0x0000000B                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the source decode logic associated with requests that fail all positive decode paths
*/


#define BANK19_BANKCTRL_IIO_VTD_REG 0x11000CF0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 banktype : 2;

                            /* Bits[1:0], Access Type=RO, default=0x00000003*/

                            /*
                               Specifies the type of Bank Decoder. Valid values
                               are:[br] 00b: Type 0 Bank - 16 Bytes[br] 01b:
                               Type 1 Bank - 64 Bytes[br] 10b: reserved[br]
                               11b: Subtractive Decode Bank - 8 Bytes
                            */
    UINT8 force_config_type0 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               If this bit is set, MS2IOSF sends any
                               configuration request that matches this bank as
                               type 0. Enables support for SR-IOV RCIEP.
                            */
    UINT8 bank_decode_enable : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000001*/

                            /*
                               1b: The bank decoders are enabled.[br] 0b: The
                               bank decoders are disabled.
                            */
    UINT8 rsvd : 4;

                            /* Bits[7:4], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT8 Data;

} BANK19_BANKCTRL_IIO_VTD_STRUCT;

/* BANK19_DESTID_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x10800cf2)                                                      */
/*      SPRB0 (0x10800cf2)                                                      */
/*      SPRHBM (0x10800cf2)                                                     */
/*      SPRC0 (0x10800cf2)                                                      */
/*      SPRMCC (0x10800cf2)                                                     */
/*      SPRUCC (0x10800cf2)                                                     */
/* Register default value on SPRA0: 0x00002180                                  */
/* Register default value on SPRB0: 0x00002180                                  */
/* Register default value on SPRHBM: 0x00002180                                 */
/* Register default value on SPRC0: 0x00002180                                  */
/* Register default value on SPRMCC: 0x00002180                                 */
/* Register default value on SPRUCC: 0x00002180                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* The lower 14 bits of this register comprise the PSF-required source decode information that MS2IOSF provides on the tdest_id signal when presenting the request to PSF (note exception for MS2IOSF_Port).
*/


#define BANK19_DESTID_IIO_VTD_REG 0x11010CF2

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 psf_channel : 3;

                            /* Bits[2:0], Access Type=RW/V, default=0x00000000*/

                            /*
                               Specifies which IOSF channel to send requests
                               that hit this bank decoder ranges. This field is
                               used for IOSF Channel and also as part of the
                               IOSF Destination ID.
                            */
    UINT16 psf_port : 3;

                            /* Bits[5:3], Access Type=RW/V, default=0x00000000*/

                            /*
                               Specifies which PSF port to send requests that
                               hit this bank decoder ranges.
                            */
    UINT16 ms2iosf_port : 1;

                            /* Bits[6:6], Access Type=RW/V, default=0x00000000*/

                            /*
                               Specifies the MS2IOSF port (left = 0, right = 1)
                               where to send requests that hit this bank
                               decoder. The logic should mask this bit to zero
                               before sending the 14-bit PSF source decode
                               header out. Technically, this is the top bit of
                               the PSF port ID, but MS2IOSF is using it for
                               internal purposes.[br] HW initializes the
                               default value of this field from a strap tied
                               off at the MS2IOSF instance level.[br] Nebulon
                               attribute is RW/O/V
                            */
    UINT16 psf_port_group : 1;

                            /* Bits[7:7], Access Type=RW/V, default=0x00000001*/

                            /*
                               Specifies which PSF port group to send requests
                               that hit this bank decoder ranges.
                            */
    UINT16 psf_id : 4;

                            /* Bits[11:8], Access Type=RW/V, default=0x00000001*/

                            /*
                               Specifies which PSF to send requests that hit
                               this bank decoder ranges.
                            */
    UINT16 psf_decode_mode : 2;

                            /* Bits[13:12], Access Type=RW/V, default=0x00000002*/

                            /*
                               Specifies the PSF Destination ID decode mode
                               being used.[br] 00b: Fabric Decode[br] 01b:
                               Implicit Decode[br] 10b: Source Decode to
                               PSF_ID:Port_Group:Port:Channel[br] 11b: Source
                               Decode to PSF_ID, use Fabric Decode from there
                               onward (StF)
                            */
    UINT16 ms2iosf_channel : 2;

                            /* Bits[15:14], Access Type=RW/V, default=0x00000000*/

                            /*
                               Specifies to which IOSF channel to send requests
                               that hit this bank decoder. Note the difference
                               between this channel ID and the channel ID
                               provided in the source decode header below. The
                               former specifies the channel ID on the MS2IOSF
                               interface itself whereas the latter specifies
                               the channel ID on the PSF interface to the
                               endpoint. MS2IOSF has four channels for each of
                               its two ports.
                            */

  } Bits;
  UINT16 Data;

} BANK19_DESTID_IIO_VTD_STRUCT;

/* BANK19_DEVCON_IIO_VTD_REG supported on:                                      */
/*      SPRA0 (0x10800cf4)                                                      */
/*      SPRB0 (0x10800cf4)                                                      */
/*      SPRHBM (0x10800cf4)                                                     */
/*      SPRC0 (0x10800cf4)                                                      */
/*      SPRMCC (0x10800cf4)                                                     */
/*      SPRUCC (0x10800cf4)                                                     */
/* Register default value on SPRA0: 0x000000E0                                  */
/* Register default value on SPRB0: 0x000000E0                                  */
/* Register default value on SPRHBM: 0x000000E0                                 */
/* Register default value on SPRC0: 0x000000E0                                  */
/* Register default value on SPRMCC: 0x000000E0                                 */
/* Register default value on SPRUCC: 0x000000E0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register is a shadow copy of the corresponding register in the configuration header of the IOSF agent. BIOS can disable shadowing and/or overwrite the values in this register.
*/


#define BANK19_DEVCON_IIO_VTD_REG 0x11010CF4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 rsvd : 5;

                            /* Bits[4:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 max_payload_size : 3;

                            /* Bits[7:5], Access Type=RW/V, default=0x00000007*/

                            /*
                               Indicates the largest packet size supported by
                               the target decoded by this bank.[br] Defined
                               encodings for this field are:[br] 000b 128 bytes
                               max payload size[br] 001b 256 bytes max payload
                               size[br] 010b 512 bytes max payload size[br]
                               011b 1024 bytes max payload size[br] 100b 2048
                               bytes max payload size[br] 101b 4096 bytes max
                               payload size[br] 110b Reserved[br] 111b 64
                               address aligned bytes max payload size
                            */
    UINT16 rsvd_8 : 7;

                            /* Bits[14:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 initiate_flr : 1;

                            /* Bits[15:15], Access Type=RW/V, default=0x00000000*/

                            /*
                               Initiate Function Level Reset. A write of '1' to
                               the DEVCON[15] field of the device this bank
                               shadows, will cause all shadow-enabled registers
                               for this bank to reset. DEVCON[15] maps to this
                               field. This bit self-clears.
                            */

  } Bits;
  UINT16 Data;

} BANK19_DEVCON_IIO_VTD_STRUCT;

/* CAP_STRUCT_OFFSETS_IIO_VTD_REG supported on:                                 */
/*      SPRA0 (0x20800cf8)                                                      */
/*      SPRB0 (0x20800cf8)                                                      */
/*      SPRHBM (0x20800cf8)                                                     */
/*      SPRC0 (0x20800cf8)                                                      */
/*      SPRMCC (0x20800cf8)                                                     */
/*      SPRUCC (0x20800cf8)                                                     */
/* Register default value on SPRA0: 0x00030EE4                                  */
/* Register default value on SPRB0: 0x00030EE4                                  */
/* Register default value on SPRHBM: 0x00030EE4                                 */
/* Register default value on SPRC0: 0x00030EE4                                  */
/* Register default value on SPRMCC: 0x00030EE4                                 */
/* Register default value on SPRUCC: 0x00030EE4                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register contains the configuration offsets for APIC registers, multicast registers, and power management registers in the attached IOSF agents. MS2IOSF uses these offsets when shadowing these registers into the type 1 decoder banks. 
*/


#define CAP_STRUCT_OFFSETS_IIO_VTD_REG 0x11020CF8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 pm_offset : 8;

                            /* Bits[7:0], Access Type=RW, default=0x000000E4*/

                            /*
                               Configuration space register offset for the
                               Power Management Capability control/status
                               register.
                            */
    UINT32 mc_offset : 12;

                            /* Bits[19:8], Access Type=RW, default=0x0000030E*/

                            /*
                               Configuration space register offset for the
                               Multicast Capability control register. Multicast
                               base and receive registers are expected to be at
                               this offset + 2h and this offset + Ah
                               respectively. The value is specified by
                               hardware.
                            */
    UINT32 rsvd : 12;

                            /* Bits[31:20], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} CAP_STRUCT_OFFSETS_IIO_VTD_STRUCT;

/* OTCMAXTOTCRDTS0_N0_IIO_VTD_REG supported on:                                 */
/*      SPRA0 (0x20800d30)                                                      */
/*      SPRB0 (0x20800d30)                                                      */
/*      SPRHBM (0x20800d30)                                                     */
/*      SPRC0 (0x20800d30)                                                      */
/*      SPRMCC (0x20800d30)                                                     */
/*      SPRUCC (0x20800d30)                                                     */
/* Register default value on SPRA0: 0x02004080                                  */
/* Register default value on SPRB0: 0x02004080                                  */
/* Register default value on SPRHBM: 0x02004080                                 */
/* Register default value on SPRC0: 0x02004080                                  */
/* Register default value on SPRMCC: 0x02004080                                 */
/* Register default value on SPRUCC: 0x02004080                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of credits that a given channel and flow class is allowed to utilize within the Outbound Traffic Controller. [br]

*/


#define OTCMAXTOTCRDTS0_N0_IIO_VTD_REG 0x11020D30

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 5;

                            /* Bits[4:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch00_p_max : 7;

                            /* Bits[11:5], Access Type=RW/P, default=0x00000004*/

                            /*
                               Maximum number of credits available to posted
                               requests on channel 0
                            */
    UINT32 ch00_np_max : 6;

                            /* Bits[17:12], Access Type=RW/P, default=0x00000004*/

                            /*
                               Maximum number of credits available to non-
                               posted requests on channel 0
                            */
    UINT32 rsvd_18 : 5;

                            /* Bits[22:18], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch01_p_max : 7;

                            /* Bits[29:23], Access Type=RW/P, default=0x00000004*/

                            /*
                               Maximum number of credits available to posted
                               requests on channel 1
                            */
    UINT32 ch01_np_max : 2;

                            /* Bits[31:30], Access Type=RW/P, default=0x00000000*/

                            /*
                               Maximum number of credits available to non-
                               posted requests on channel 1
                            */

  } Bits;
  UINT32 Data;

} OTCMAXTOTCRDTS0_N0_IIO_VTD_STRUCT;

/* OTCMAXTOTCRDTS0_N1_IIO_VTD_REG supported on:                                 */
/*      SPRA0 (0x20800d34)                                                      */
/*      SPRB0 (0x20800d34)                                                      */
/*      SPRHBM (0x20800d34)                                                     */
/*      SPRC0 (0x20800d34)                                                      */
/*      SPRMCC (0x20800d34)                                                     */
/*      SPRUCC (0x20800d34)                                                     */
/* Register default value on SPRA0: 0x00040801                                  */
/* Register default value on SPRB0: 0x00040801                                  */
/* Register default value on SPRHBM: 0x00040801                                 */
/* Register default value on SPRC0: 0x00040801                                  */
/* Register default value on SPRMCC: 0x00040801                                 */
/* Register default value on SPRUCC: 0x00040801                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of credits that a given channel and flow class is allowed to utilize within the Outbound Traffic Controller. [br]

*/


#define OTCMAXTOTCRDTS0_N1_IIO_VTD_REG 0x11020D34

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch01_np_max : 4;

                            /* Bits[3:0], Access Type=RW/P, default=0x00000001*/

                            /*
                               Maximum number of credits available to non-
                               posted requests on channel 1
                            */
    UINT32 rsvd : 5;

                            /* Bits[8:4], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch02_p_max : 7;

                            /* Bits[15:9], Access Type=RW/P, default=0x00000004*/

                            /*
                               Maximum number of credits available to posted
                               requests on channel 2
                            */
    UINT32 ch02_np_max : 6;

                            /* Bits[21:16], Access Type=RW/P, default=0x00000004*/

                            /*
                               Maximum number of credits available to non-
                               posted requests on channel 2
                            */
    UINT32 reserved : 10;

                            /* Bits[31:22], Access Type=RW/P, default=0x00000000*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} OTCMAXTOTCRDTS0_N1_IIO_VTD_STRUCT;

/* OTCMAXTOTCRDTS1_N0_IIO_VTD_REG supported on:                                 */
/*      SPRA0 (0x20800d38)                                                      */
/*      SPRB0 (0x20800d38)                                                      */
/*      SPRHBM (0x20800d38)                                                     */
/*      SPRC0 (0x20800d38)                                                      */
/*      SPRMCC (0x20800d38)                                                     */
/*      SPRUCC (0x20800d38)                                                     */
/* Register default value on SPRA0: 0x02004080                                  */
/* Register default value on SPRB0: 0x02004080                                  */
/* Register default value on SPRHBM: 0x02004080                                 */
/* Register default value on SPRC0: 0x02004080                                  */
/* Register default value on SPRMCC: 0x02004080                                 */
/* Register default value on SPRUCC: 0x02004080                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of credits that a given channel and flow class is allowed to utilize within the Outbound Traffic Controller. [br]

*/


#define OTCMAXTOTCRDTS1_N0_IIO_VTD_REG 0x11020D38

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 5;

                            /* Bits[4:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch03_p_max : 7;

                            /* Bits[11:5], Access Type=RW/P, default=0x00000004*/

                            /*
                               Maximum number of credits available to posted
                               requests on channel 3
                            */
    UINT32 ch03_np_max : 6;

                            /* Bits[17:12], Access Type=RW/P, default=0x00000004*/

                            /*
                               Maximum number of credits available to non-
                               posted requests on channel 3
                            */
    UINT32 rsvd_18 : 5;

                            /* Bits[22:18], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch04_p_max : 7;

                            /* Bits[29:23], Access Type=RW/P, default=0x00000004*/

                            /*
                               Maximum number of credits available to posted
                               requests on channel 4
                            */
    UINT32 ch04_np_max : 2;

                            /* Bits[31:30], Access Type=RW/P, default=0x00000000*/

                            /*
                               Maximum number of credits available to non-
                               posted requests on channel 4
                            */

  } Bits;
  UINT32 Data;

} OTCMAXTOTCRDTS1_N0_IIO_VTD_STRUCT;

/* OTCMAXTOTCRDTS1_N1_IIO_VTD_REG supported on:                                 */
/*      SPRA0 (0x20800d3c)                                                      */
/*      SPRB0 (0x20800d3c)                                                      */
/*      SPRHBM (0x20800d3c)                                                     */
/*      SPRC0 (0x20800d3c)                                                      */
/*      SPRMCC (0x20800d3c)                                                     */
/*      SPRUCC (0x20800d3c)                                                     */
/* Register default value on SPRA0: 0x00040801                                  */
/* Register default value on SPRB0: 0x00040801                                  */
/* Register default value on SPRHBM: 0x00040801                                 */
/* Register default value on SPRC0: 0x00040801                                  */
/* Register default value on SPRMCC: 0x00040801                                 */
/* Register default value on SPRUCC: 0x00040801                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of credits that a given channel and flow class is allowed to utilize within the Outbound Traffic Controller. [br]

*/


#define OTCMAXTOTCRDTS1_N1_IIO_VTD_REG 0x11020D3C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch04_np_max : 4;

                            /* Bits[3:0], Access Type=RW/P, default=0x00000001*/

                            /*
                               Maximum number of credits available to non-
                               posted requests on channel 4
                            */
    UINT32 rsvd : 5;

                            /* Bits[8:4], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch05_p_max : 7;

                            /* Bits[15:9], Access Type=RW/P, default=0x00000004*/

                            /*
                               Maximum number of credits available to posted
                               requests on channel 5
                            */
    UINT32 ch05_np_max : 6;

                            /* Bits[21:16], Access Type=RW/P, default=0x00000004*/

                            /*
                               Maximum number of credits available to non-
                               posted requests on channel 5
                            */
    UINT32 reserved : 10;

                            /* Bits[31:22], Access Type=RW/P, default=0x00000000*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} OTCMAXTOTCRDTS1_N1_IIO_VTD_STRUCT;

/* OTCMAXTOTCRDTS2_N0_IIO_VTD_REG supported on:                                 */
/*      SPRA0 (0x20800d40)                                                      */
/*      SPRB0 (0x20800d40)                                                      */
/*      SPRHBM (0x20800d40)                                                     */
/*      SPRC0 (0x20800d40)                                                      */
/*      SPRMCC (0x20800d40)                                                     */
/*      SPRUCC (0x20800d40)                                                     */
/* Register default value on SPRA0: 0x02004080                                  */
/* Register default value on SPRB0: 0x02004080                                  */
/* Register default value on SPRHBM: 0x02004080                                 */
/* Register default value on SPRC0: 0x02004080                                  */
/* Register default value on SPRMCC: 0x02004080                                 */
/* Register default value on SPRUCC: 0x02004080                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of credits that a given channel and flow class is allowed to utilize within the Outbound Traffic Controller. [br]

*/


#define OTCMAXTOTCRDTS2_N0_IIO_VTD_REG 0x11020D40

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 5;

                            /* Bits[4:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch06_p_max : 7;

                            /* Bits[11:5], Access Type=RW/P, default=0x00000004*/

                            /*
                               Maximum number of credits available to posted
                               requests on channel 6
                            */
    UINT32 ch06_np_max : 6;

                            /* Bits[17:12], Access Type=RW/P, default=0x00000004*/

                            /*
                               Maximum number of credits available to non-
                               posted requests on channel 6
                            */
    UINT32 rsvd_18 : 5;

                            /* Bits[22:18], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch07_p_max : 7;

                            /* Bits[29:23], Access Type=RW/P, default=0x00000004*/

                            /*
                               Maximum number of credits available to posted
                               requests on channel 7
                            */
    UINT32 ch07_np_max : 2;

                            /* Bits[31:30], Access Type=RW/P, default=0x00000000*/

                            /*
                               Maximum number of credits available to non-
                               posted requests on channel 7
                            */

  } Bits;
  UINT32 Data;

} OTCMAXTOTCRDTS2_N0_IIO_VTD_STRUCT;

/* OTCMAXTOTCRDTS2_N1_IIO_VTD_REG supported on:                                 */
/*      SPRA0 (0x20800d44)                                                      */
/*      SPRB0 (0x20800d44)                                                      */
/*      SPRHBM (0x20800d44)                                                     */
/*      SPRC0 (0x20800d44)                                                      */
/*      SPRMCC (0x20800d44)                                                     */
/*      SPRUCC (0x20800d44)                                                     */
/* Register default value on SPRA0: 0x00040801                                  */
/* Register default value on SPRB0: 0x00040801                                  */
/* Register default value on SPRHBM: 0x00040801                                 */
/* Register default value on SPRC0: 0x00040801                                  */
/* Register default value on SPRMCC: 0x00040801                                 */
/* Register default value on SPRUCC: 0x00040801                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of credits that a given channel and flow class is allowed to utilize within the Outbound Traffic Controller. [br]

*/


#define OTCMAXTOTCRDTS2_N1_IIO_VTD_REG 0x11020D44

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch07_np_max : 4;

                            /* Bits[3:0], Access Type=RW/P, default=0x00000001*/

                            /*
                               Maximum number of credits available to non-
                               posted requests on channel 7
                            */
    UINT32 rsvd : 5;

                            /* Bits[8:4], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch08_p_max : 7;

                            /* Bits[15:9], Access Type=RW/P, default=0x00000004*/

                            /*
                               Maximum number of credits available to posted
                               requests on channel 8
                            */
    UINT32 ch08_np_max : 6;

                            /* Bits[21:16], Access Type=RW/P, default=0x00000004*/

                            /*
                               Maximum number of credits available to non-
                               posted requests on channel 8
                            */
    UINT32 reserved : 10;

                            /* Bits[31:22], Access Type=RW/P, default=0x00000000*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} OTCMAXTOTCRDTS2_N1_IIO_VTD_STRUCT;

/* OTCMAXTOTCRDTS3_N0_IIO_VTD_REG supported on:                                 */
/*      SPRA0 (0x20800d48)                                                      */
/*      SPRB0 (0x20800d48)                                                      */
/*      SPRHBM (0x20800d48)                                                     */
/*      SPRC0 (0x20800d48)                                                      */
/*      SPRMCC (0x20800d48)                                                     */
/*      SPRUCC (0x20800d48)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of credits that a given channel and flow class is allowed to utilize within the Outbound Traffic Controller. [br]

*/


#define OTCMAXTOTCRDTS3_N0_IIO_VTD_REG 0x11020D48

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 5;

                            /* Bits[4:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch09_p_max : 7;

                            /* Bits[11:5], Access Type=RW/P, default=0x00000000*/

                            /*
                               Maximum number of credits available to posted
                               requests on channel 9
                            */
    UINT32 ch09_np_max : 6;

                            /* Bits[17:12], Access Type=RW/P, default=0x00000000*/

                            /*
                               Maximum number of credits available to non-
                               posted requests on channel 9
                            */
    UINT32 rsvd_18 : 5;

                            /* Bits[22:18], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch10_p_max : 7;

                            /* Bits[29:23], Access Type=RW/P, default=0x00000000*/

                            /*
                               Maximum number of credits available to posted
                               requests on channel 10
                            */
    UINT32 ch10_np_max : 2;

                            /* Bits[31:30], Access Type=RW/P, default=0x00000000*/

                            /*
                               Maximum number of credits available to non-
                               posted requests on channel 10
                            */

  } Bits;
  UINT32 Data;

} OTCMAXTOTCRDTS3_N0_IIO_VTD_STRUCT;

/* OTCMAXTOTCRDTS3_N1_IIO_VTD_REG supported on:                                 */
/*      SPRA0 (0x20800d4c)                                                      */
/*      SPRB0 (0x20800d4c)                                                      */
/*      SPRHBM (0x20800d4c)                                                     */
/*      SPRC0 (0x20800d4c)                                                      */
/*      SPRMCC (0x20800d4c)                                                     */
/*      SPRUCC (0x20800d4c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of credits that a given channel and flow class is allowed to utilize within the Outbound Traffic Controller. [br]

*/


#define OTCMAXTOTCRDTS3_N1_IIO_VTD_REG 0x11020D4C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch10_np_max : 4;

                            /* Bits[3:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               Maximum number of credits available to non-
                               posted requests on channel 10
                            */
    UINT32 rsvd : 5;

                            /* Bits[8:4], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch11_p_max : 7;

                            /* Bits[15:9], Access Type=RW/P, default=0x00000000*/

                            /*
                               Maximum number of credits available to posted
                               requests on channel 11
                            */
    UINT32 ch11_np_max : 6;

                            /* Bits[21:16], Access Type=RW/P, default=0x00000000*/

                            /*
                               Maximum number of credits available to non-
                               posted requests on channel 11
                            */
    UINT32 reserved : 10;

                            /* Bits[31:22], Access Type=RW/P, default=0x00000000*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} OTCMAXTOTCRDTS3_N1_IIO_VTD_STRUCT;

/* OTCMINTOTCRDTS0_N0_IIO_VTD_REG supported on:                                 */
/*      SPRA0 (0x20800d50)                                                      */
/*      SPRB0 (0x20800d50)                                                      */
/*      SPRHBM (0x20800d50)                                                     */
/*      SPRC0 (0x20800d50)                                                      */
/*      SPRMCC (0x20800d50)                                                     */
/*      SPRUCC (0x20800d50)                                                     */
/* Register default value on SPRA0: 0x02004080                                  */
/* Register default value on SPRB0: 0x02004080                                  */
/* Register default value on SPRHBM: 0x02004080                                 */
/* Register default value on SPRC0: 0x02004080                                  */
/* Register default value on SPRMCC: 0x02004080                                 */
/* Register default value on SPRUCC: 0x02004080                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the low watermark for the number of credits that a given channel and flow class is guaranteed to have available at all times within the Outbound Traffic Controller. [br]

*/


#define OTCMINTOTCRDTS0_N0_IIO_VTD_REG 0x11020D50

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 5;

                            /* Bits[4:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch00_p_min : 7;

                            /* Bits[11:5], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to posted
                               requests on channel 0
                            */
    UINT32 ch00_np_min : 6;

                            /* Bits[17:12], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to non-
                               posted requests on channel 0
                            */
    UINT32 rsvd_18 : 5;

                            /* Bits[22:18], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch01_p_min : 7;

                            /* Bits[29:23], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to posted
                               requests on channel 1
                            */
    UINT32 ch01_np_min : 2;

                            /* Bits[31:30], Access Type=RW/P, default=0x00000000*/

                            /*
                               Minimum number of credits available to non-
                               posted requests on channel 1
                            */

  } Bits;
  UINT32 Data;

} OTCMINTOTCRDTS0_N0_IIO_VTD_STRUCT;

/* OTCMINTOTCRDTS0_N1_IIO_VTD_REG supported on:                                 */
/*      SPRA0 (0x20800d54)                                                      */
/*      SPRB0 (0x20800d54)                                                      */
/*      SPRHBM (0x20800d54)                                                     */
/*      SPRC0 (0x20800d54)                                                      */
/*      SPRMCC (0x20800d54)                                                     */
/*      SPRUCC (0x20800d54)                                                     */
/* Register default value on SPRA0: 0x00040801                                  */
/* Register default value on SPRB0: 0x00040801                                  */
/* Register default value on SPRHBM: 0x00040801                                 */
/* Register default value on SPRC0: 0x00040801                                  */
/* Register default value on SPRMCC: 0x00040801                                 */
/* Register default value on SPRUCC: 0x00040801                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the low watermark for the number of credits that a given channel and flow class is guaranteed to have available at all times within the Outbound Traffic Controller. [br]

*/


#define OTCMINTOTCRDTS0_N1_IIO_VTD_REG 0x11020D54

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch01_np_min : 4;

                            /* Bits[3:0], Access Type=RW/P, default=0x00000001*/

                            /*
                               Minimum number of credits available to non-
                               posted requests on channel 1
                            */
    UINT32 rsvd : 5;

                            /* Bits[8:4], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch02_p_min : 7;

                            /* Bits[15:9], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to posted
                               requests on channel 2
                            */
    UINT32 ch02_np_min : 6;

                            /* Bits[21:16], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to non-
                               posted requests on channel 2
                            */
    UINT32 reserved : 10;

                            /* Bits[31:22], Access Type=RW/P, default=0x00000000*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} OTCMINTOTCRDTS0_N1_IIO_VTD_STRUCT;

/* OTCMINTOTCRDTS1_N0_IIO_VTD_REG supported on:                                 */
/*      SPRA0 (0x20800d58)                                                      */
/*      SPRB0 (0x20800d58)                                                      */
/*      SPRHBM (0x20800d58)                                                     */
/*      SPRC0 (0x20800d58)                                                      */
/*      SPRMCC (0x20800d58)                                                     */
/*      SPRUCC (0x20800d58)                                                     */
/* Register default value on SPRA0: 0x02004080                                  */
/* Register default value on SPRB0: 0x02004080                                  */
/* Register default value on SPRHBM: 0x02004080                                 */
/* Register default value on SPRC0: 0x02004080                                  */
/* Register default value on SPRMCC: 0x02004080                                 */
/* Register default value on SPRUCC: 0x02004080                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the low watermark for the number of credits that a given channel and flow class is guaranteed to have available at all times within the Outbound Traffic Controller. [br]

*/


#define OTCMINTOTCRDTS1_N0_IIO_VTD_REG 0x11020D58

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 5;

                            /* Bits[4:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch03_p_min : 7;

                            /* Bits[11:5], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to posted
                               requests on channel 3
                            */
    UINT32 ch03_np_min : 6;

                            /* Bits[17:12], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to non-
                               posted requests on channel 3
                            */
    UINT32 rsvd_18 : 5;

                            /* Bits[22:18], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch04_p_min : 7;

                            /* Bits[29:23], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to posted
                               requests on channel 4
                            */
    UINT32 ch04_np_min : 2;

                            /* Bits[31:30], Access Type=RW/P, default=0x00000000*/

                            /*
                               Minimum number of credits available to non-
                               posted requests on channel 4
                            */

  } Bits;
  UINT32 Data;

} OTCMINTOTCRDTS1_N0_IIO_VTD_STRUCT;

/* OTCMINTOTCRDTS1_N1_IIO_VTD_REG supported on:                                 */
/*      SPRA0 (0x20800d5c)                                                      */
/*      SPRB0 (0x20800d5c)                                                      */
/*      SPRHBM (0x20800d5c)                                                     */
/*      SPRC0 (0x20800d5c)                                                      */
/*      SPRMCC (0x20800d5c)                                                     */
/*      SPRUCC (0x20800d5c)                                                     */
/* Register default value on SPRA0: 0x00040801                                  */
/* Register default value on SPRB0: 0x00040801                                  */
/* Register default value on SPRHBM: 0x00040801                                 */
/* Register default value on SPRC0: 0x00040801                                  */
/* Register default value on SPRMCC: 0x00040801                                 */
/* Register default value on SPRUCC: 0x00040801                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the low watermark for the number of credits that a given channel and flow class is guaranteed to have available at all times within the Outbound Traffic Controller. [br]

*/


#define OTCMINTOTCRDTS1_N1_IIO_VTD_REG 0x11020D5C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch04_np_min : 4;

                            /* Bits[3:0], Access Type=RW/P, default=0x00000001*/

                            /*
                               Minimum number of credits available to non-
                               posted requests on channel 4
                            */
    UINT32 rsvd : 5;

                            /* Bits[8:4], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch05_p_min : 7;

                            /* Bits[15:9], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to posted
                               requests on channel 5
                            */
    UINT32 ch05_np_min : 6;

                            /* Bits[21:16], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to non-
                               posted requests on channel 5
                            */
    UINT32 reserved : 10;

                            /* Bits[31:22], Access Type=RW/P, default=0x00000000*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} OTCMINTOTCRDTS1_N1_IIO_VTD_STRUCT;

/* OTCMINTOTCRDTS2_N0_IIO_VTD_REG supported on:                                 */
/*      SPRA0 (0x20800d60)                                                      */
/*      SPRB0 (0x20800d60)                                                      */
/*      SPRHBM (0x20800d60)                                                     */
/*      SPRC0 (0x20800d60)                                                      */
/*      SPRMCC (0x20800d60)                                                     */
/*      SPRUCC (0x20800d60)                                                     */
/* Register default value on SPRA0: 0x02004080                                  */
/* Register default value on SPRB0: 0x02004080                                  */
/* Register default value on SPRHBM: 0x02004080                                 */
/* Register default value on SPRC0: 0x02004080                                  */
/* Register default value on SPRMCC: 0x02004080                                 */
/* Register default value on SPRUCC: 0x02004080                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the low watermark for the number of credits that a given channel and flow class is guaranteed to have available at all times within the Outbound Traffic Controller. [br]

*/


#define OTCMINTOTCRDTS2_N0_IIO_VTD_REG 0x11020D60

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 5;

                            /* Bits[4:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch06_p_min : 7;

                            /* Bits[11:5], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to posted
                               requests on channel 6
                            */
    UINT32 ch06_np_min : 6;

                            /* Bits[17:12], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to non-
                               posted requests on channel 6
                            */
    UINT32 rsvd_18 : 5;

                            /* Bits[22:18], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch07_p_min : 7;

                            /* Bits[29:23], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to posted
                               requests on channel 7
                            */
    UINT32 ch07_np_min : 2;

                            /* Bits[31:30], Access Type=RW/P, default=0x00000000*/

                            /*
                               Minimum number of credits available to non-
                               posted requests on channel 7
                            */

  } Bits;
  UINT32 Data;

} OTCMINTOTCRDTS2_N0_IIO_VTD_STRUCT;

/* OTCMINTOTCRDTS2_N1_IIO_VTD_REG supported on:                                 */
/*      SPRA0 (0x20800d64)                                                      */
/*      SPRB0 (0x20800d64)                                                      */
/*      SPRHBM (0x20800d64)                                                     */
/*      SPRC0 (0x20800d64)                                                      */
/*      SPRMCC (0x20800d64)                                                     */
/*      SPRUCC (0x20800d64)                                                     */
/* Register default value on SPRA0: 0x00040801                                  */
/* Register default value on SPRB0: 0x00040801                                  */
/* Register default value on SPRHBM: 0x00040801                                 */
/* Register default value on SPRC0: 0x00040801                                  */
/* Register default value on SPRMCC: 0x00040801                                 */
/* Register default value on SPRUCC: 0x00040801                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the low watermark for the number of credits that a given channel and flow class is guaranteed to have available at all times within the Outbound Traffic Controller. [br]

*/


#define OTCMINTOTCRDTS2_N1_IIO_VTD_REG 0x11020D64

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch07_np_min : 4;

                            /* Bits[3:0], Access Type=RW/P, default=0x00000001*/

                            /*
                               Minimum number of credits available to non-
                               posted requests on channel 7
                            */
    UINT32 rsvd : 5;

                            /* Bits[8:4], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch08_p_min : 7;

                            /* Bits[15:9], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to posted
                               requests on channel 8
                            */
    UINT32 ch08_np_min : 6;

                            /* Bits[21:16], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to non-
                               posted requests on channel 8
                            */
    UINT32 reserved : 10;

                            /* Bits[31:22], Access Type=RW/P, default=0x00000000*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} OTCMINTOTCRDTS2_N1_IIO_VTD_STRUCT;

/* OTCMINTOTCRDTS3_N0_IIO_VTD_REG supported on:                                 */
/*      SPRA0 (0x20800d68)                                                      */
/*      SPRB0 (0x20800d68)                                                      */
/*      SPRHBM (0x20800d68)                                                     */
/*      SPRC0 (0x20800d68)                                                      */
/*      SPRMCC (0x20800d68)                                                     */
/*      SPRUCC (0x20800d68)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the low watermark for the number of credits that a given channel and flow class is guaranteed to have available at all times within the Outbound Traffic Controller. [br]

*/


#define OTCMINTOTCRDTS3_N0_IIO_VTD_REG 0x11020D68

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 5;

                            /* Bits[4:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch09_p_min : 7;

                            /* Bits[11:5], Access Type=RW/P, default=0x00000000*/

                            /*
                               Minimum number of credits available to posted
                               requests on channel 9
                            */
    UINT32 ch09_np_min : 6;

                            /* Bits[17:12], Access Type=RW/P, default=0x00000000*/

                            /*
                               Minimum number of credits available to non-
                               posted requests on channel 9
                            */
    UINT32 rsvd_18 : 5;

                            /* Bits[22:18], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch10_p_min : 7;

                            /* Bits[29:23], Access Type=RW/P, default=0x00000000*/

                            /*
                               Minimum number of credits available to posted
                               requests on channel 10
                            */
    UINT32 ch10_np_min : 2;

                            /* Bits[31:30], Access Type=RW/P, default=0x00000000*/

                            /*
                               Minimum number of credits available to non-
                               posted requests on channel 10
                            */

  } Bits;
  UINT32 Data;

} OTCMINTOTCRDTS3_N0_IIO_VTD_STRUCT;

/* OTCMINTOTCRDTS3_N1_IIO_VTD_REG supported on:                                 */
/*      SPRA0 (0x20800d6c)                                                      */
/*      SPRB0 (0x20800d6c)                                                      */
/*      SPRHBM (0x20800d6c)                                                     */
/*      SPRC0 (0x20800d6c)                                                      */
/*      SPRMCC (0x20800d6c)                                                     */
/*      SPRUCC (0x20800d6c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the low watermark for the number of credits that a given channel and flow class is guaranteed to have available at all times within the Outbound Traffic Controller. [br]

*/


#define OTCMINTOTCRDTS3_N1_IIO_VTD_REG 0x11020D6C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch10_np_min : 4;

                            /* Bits[3:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               Minimum number of credits available to non-
                               posted requests on channel 10
                            */
    UINT32 rsvd : 5;

                            /* Bits[8:4], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch11_p_min : 7;

                            /* Bits[15:9], Access Type=RW/P, default=0x00000000*/

                            /*
                               Minimum number of credits available to posted
                               requests on channel 11
                            */
    UINT32 ch11_np_min : 6;

                            /* Bits[21:16], Access Type=RW/P, default=0x00000000*/

                            /*
                               Minimum number of credits available to non-
                               posted requests on channel 11
                            */
    UINT32 reserved : 10;

                            /* Bits[31:22], Access Type=RW/P, default=0x00000000*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} OTCMINTOTCRDTS3_N1_IIO_VTD_STRUCT;

/* OTCPOOLCRDTS_N0_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x20800d70)                                                      */
/*      SPRB0 (0x20800d70)                                                      */
/*      SPRHBM (0x20800d70)                                                     */
/*      SPRC0 (0x20800d70)                                                      */
/*      SPRMCC (0x20800d70)                                                     */
/*      SPRUCC (0x20800d70)                                                     */
/* Register default value on SPRA0: 0x01020810                                  */
/* Register default value on SPRB0: 0x01020810                                  */
/* Register default value on SPRHBM: 0x01020810                                 */
/* Register default value on SPRC0: 0x01020810                                  */
/* Register default value on SPRMCC: 0x01020810                                 */
/* Register default value on SPRUCC: 0x01020810                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the low watermark and high watermark for the shared credit pool in the Outbound Traffic Controller. IRP requests utilize this credit pool.[br]

*/


#define OTCPOOLCRDTS_N0_IIO_VTD_REG 0x11020D70

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 pool_p_max : 7;

                            /* Bits[6:0], Access Type=RW/P, default=0x00000010*/

                            /*
                               Maximum number of credits to maintain in the
                               pool for posted requests
                            */
    UINT32 pool_np_max : 6;

                            /* Bits[12:7], Access Type=RW/P, default=0x00000010*/

                            /*
                               Maximum number of credits to maintain in the
                               pool for non-posted requests
                            */
    UINT32 pool_p_min : 7;

                            /* Bits[19:13], Access Type=RW/P, default=0x00000010*/

                            /*
                               Minimum number of credits to maintain in the
                               pool for posted requests
                            */
    UINT32 pool_np_min : 6;

                            /* Bits[25:20], Access Type=RW/P, default=0x00000010*/

                            /*
                               Minimum number of credits to maintain in the
                               pool for non-posted requests
                            */
    UINT32 reserved : 6;

                            /* Bits[31:26], Access Type=RW/P, default=0x00000000*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} OTCPOOLCRDTS_N0_IIO_VTD_STRUCT;

/* OTCPOOLCRDTS_N1_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x20800d74)                                                      */
/*      SPRB0 (0x20800d74)                                                      */
/*      SPRHBM (0x20800d74)                                                     */
/*      SPRC0 (0x20800d74)                                                      */
/*      SPRMCC (0x20800d74)                                                     */
/*      SPRUCC (0x20800d74)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the low watermark and high watermark for the shared credit pool in the Outbound Traffic Controller. IRP requests utilize this credit pool.[br]

*/


#define OTCPOOLCRDTS_N1_IIO_VTD_REG 0x11020D74

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 reserved : 32;

                            /* Bits[31:0], Access Type=RW/P, default=0x00000000*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} OTCPOOLCRDTS_N1_IIO_VTD_STRUCT;

/* OTCMAXTOTCRDTS_C0_N0_IIO_VTD_REG supported on:                               */
/*      SPRA0 (0x20800d80)                                                      */
/*      SPRB0 (0x20800d80)                                                      */
/*      SPRHBM (0x20800d80)                                                     */
/*      SPRC0 (0x20800d80)                                                      */
/*      SPRMCC (0x20800d80)                                                     */
/*      SPRUCC (0x20800d80)                                                     */
/* Register default value on SPRA0: 0x00401004                                  */
/* Register default value on SPRB0: 0x00401004                                  */
/* Register default value on SPRHBM: 0x00401004                                 */
/* Register default value on SPRC0: 0x00401004                                  */
/* Register default value on SPRMCC: 0x00401004                                 */
/* Register default value on SPRUCC: 0x00401004                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of completion credits that a given channel and flow class is allowed to utilize within the Outbound Traffic Controller, for channels 0-5
*/


#define OTCMAXTOTCRDTS_C0_N0_IIO_VTD_REG 0x11020D80

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch00_c_max : 9;

                            /* Bits[8:0], Access Type=RW/P, default=0x00000004*/

                            /*
                               Maximum number of credits available to
                               completions on channel 0
                            */
    UINT32 rsvd : 1;

                            /* Bits[9:9], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch01_c_max : 9;

                            /* Bits[18:10], Access Type=RW/P, default=0x00000004*/

                            /*
                               Maximum number of credits available to
                               completions on channel 1
                            */
    UINT32 rsvd_19 : 1;

                            /* Bits[19:19], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch02_c_max : 9;

                            /* Bits[28:20], Access Type=RW/P, default=0x00000004*/

                            /*
                               Maximum number of credits available to
                               completions on channel 2
                            */
    UINT32 rsvd_29 : 1;

                            /* Bits[29:29], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch03_c_max : 2;

                            /* Bits[31:30], Access Type=RW/P, default=0x00000000*/

                            /*
                               Maximum number of credits available to
                               completions on channel 3
                            */

  } Bits;
  UINT32 Data;

} OTCMAXTOTCRDTS_C0_N0_IIO_VTD_STRUCT;

/* OTCMAXTOTCRDTS_C0_N1_IIO_VTD_REG supported on:                               */
/*      SPRA0 (0x20800d84)                                                      */
/*      SPRB0 (0x20800d84)                                                      */
/*      SPRHBM (0x20800d84)                                                     */
/*      SPRC0 (0x20800d84)                                                      */
/*      SPRMCC (0x20800d84)                                                     */
/*      SPRUCC (0x20800d84)                                                     */
/* Register default value on SPRA0: 0x00100401                                  */
/* Register default value on SPRB0: 0x00100401                                  */
/* Register default value on SPRHBM: 0x00100401                                 */
/* Register default value on SPRC0: 0x00100401                                  */
/* Register default value on SPRMCC: 0x00100401                                 */
/* Register default value on SPRUCC: 0x00100401                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of completion credits that a given channel and flow class is allowed to utilize within the Outbound Traffic Controller, for channels 0-5
*/


#define OTCMAXTOTCRDTS_C0_N1_IIO_VTD_REG 0x11020D84

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch03_c_max : 7;

                            /* Bits[6:0], Access Type=RW/P, default=0x00000001*/

                            /*
                               Maximum number of credits available to
                               completions on channel 3
                            */
    UINT32 rsvd : 1;

                            /* Bits[7:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch04_c_max : 9;

                            /* Bits[16:8], Access Type=RW/P, default=0x00000004*/

                            /*
                               Maximum number of credits available to
                               completions on channel 4
                            */
    UINT32 rsvd_17 : 1;

                            /* Bits[17:17], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch05_c_max : 9;

                            /* Bits[26:18], Access Type=RW/P, default=0x00000004*/

                            /*
                               Maximum number of credits available to
                               completions on channel 5
                            */
    UINT32 rsvd_27 : 5;

                            /* Bits[31:27], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} OTCMAXTOTCRDTS_C0_N1_IIO_VTD_STRUCT;

/* OTCMAXTOTCRDTS_C1_N0_IIO_VTD_REG supported on:                               */
/*      SPRA0 (0x20800d88)                                                      */
/*      SPRB0 (0x20800d88)                                                      */
/*      SPRHBM (0x20800d88)                                                     */
/*      SPRC0 (0x20800d88)                                                      */
/*      SPRMCC (0x20800d88)                                                     */
/*      SPRUCC (0x20800d88)                                                     */
/* Register default value on SPRA0: 0x00401004                                  */
/* Register default value on SPRB0: 0x00401004                                  */
/* Register default value on SPRHBM: 0x00401004                                 */
/* Register default value on SPRC0: 0x00401004                                  */
/* Register default value on SPRMCC: 0x00401004                                 */
/* Register default value on SPRUCC: 0x00401004                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of completion credits that a given channel and flow class is allowed to utilize within the Outbound Traffic Controller, for channels 6-11
*/


#define OTCMAXTOTCRDTS_C1_N0_IIO_VTD_REG 0x11020D88

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch06_c_max : 9;

                            /* Bits[8:0], Access Type=RW/P, default=0x00000004*/

                            /*
                               Maximum number of credits available to
                               completions on channel 6
                            */
    UINT32 rsvd : 1;

                            /* Bits[9:9], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch07_c_max : 9;

                            /* Bits[18:10], Access Type=RW/P, default=0x00000004*/

                            /*
                               Maximum number of credits available to
                               completions on channel 7
                            */
    UINT32 rsvd_19 : 1;

                            /* Bits[19:19], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch08_c_max : 9;

                            /* Bits[28:20], Access Type=RW/P, default=0x00000004*/

                            /*
                               Maximum number of credits available to
                               completions on channel 8
                            */
    UINT32 rsvd_29 : 1;

                            /* Bits[29:29], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch09_c_max : 2;

                            /* Bits[31:30], Access Type=RW/P, default=0x00000000*/

                            /*
                               Maximum number of credits available to
                               completions on channel 9
                            */

  } Bits;
  UINT32 Data;

} OTCMAXTOTCRDTS_C1_N0_IIO_VTD_STRUCT;

/* OTCMAXTOTCRDTS_C1_N1_IIO_VTD_REG supported on:                               */
/*      SPRA0 (0x20800d8c)                                                      */
/*      SPRB0 (0x20800d8c)                                                      */
/*      SPRHBM (0x20800d8c)                                                     */
/*      SPRC0 (0x20800d8c)                                                      */
/*      SPRMCC (0x20800d8c)                                                     */
/*      SPRUCC (0x20800d8c)                                                     */
/* Register default value on SPRA0: 0x00000401                                  */
/* Register default value on SPRB0: 0x00000401                                  */
/* Register default value on SPRHBM: 0x00000401                                 */
/* Register default value on SPRC0: 0x00000401                                  */
/* Register default value on SPRMCC: 0x00000401                                 */
/* Register default value on SPRUCC: 0x00000401                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of completion credits that a given channel and flow class is allowed to utilize within the Outbound Traffic Controller, for channels 6-11
*/


#define OTCMAXTOTCRDTS_C1_N1_IIO_VTD_REG 0x11020D8C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch09_c_max : 7;

                            /* Bits[6:0], Access Type=RW/P, default=0x00000001*/

                            /*
                               Maximum number of credits available to
                               completions on channel 9
                            */
    UINT32 rsvd : 1;

                            /* Bits[7:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch10_c_max : 9;

                            /* Bits[16:8], Access Type=RW/P, default=0x00000004*/

                            /*
                               Maximum number of credits available to
                               completions on channel 10
                            */
    UINT32 rsvd_17 : 1;

                            /* Bits[17:17], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch11_c_max : 9;

                            /* Bits[26:18], Access Type=RW/P, default=0x00000000*/

                            /*
                               Maximum number of credits available to
                               completions on channel 11
                            */
    UINT32 rsvd_27 : 5;

                            /* Bits[31:27], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} OTCMAXTOTCRDTS_C1_N1_IIO_VTD_STRUCT;

/* OTCMINTOTCRDTS_C0_N0_IIO_VTD_REG supported on:                               */
/*      SPRA0 (0x20800d90)                                                      */
/*      SPRB0 (0x20800d90)                                                      */
/*      SPRHBM (0x20800d90)                                                     */
/*      SPRC0 (0x20800d90)                                                      */
/*      SPRMCC (0x20800d90)                                                     */
/*      SPRUCC (0x20800d90)                                                     */
/* Register default value on SPRA0: 0x00401004                                  */
/* Register default value on SPRB0: 0x00401004                                  */
/* Register default value on SPRHBM: 0x00401004                                 */
/* Register default value on SPRC0: 0x00401004                                  */
/* Register default value on SPRMCC: 0x00401004                                 */
/* Register default value on SPRUCC: 0x00401004                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the low watermark for the number of completion credits that a given channel and flow class is guaranteed to have available at all times within the Outbound Traffic Controller, for channels 0-5
*/


#define OTCMINTOTCRDTS_C0_N0_IIO_VTD_REG 0x11020D90

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch00_c_min : 9;

                            /* Bits[8:0], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to
                               completions on channel 0
                            */
    UINT32 rsvd : 1;

                            /* Bits[9:9], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch01_c_min : 9;

                            /* Bits[18:10], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to
                               completions on channel 1
                            */
    UINT32 rsvd_19 : 1;

                            /* Bits[19:19], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch02_c_min : 9;

                            /* Bits[28:20], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to
                               completions on channel 2
                            */
    UINT32 rsvd_29 : 1;

                            /* Bits[29:29], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch03_c_min : 2;

                            /* Bits[31:30], Access Type=RW/P, default=0x00000000*/

                            /*
                               Minimum number of credits available to
                               completions on channel 3
                            */

  } Bits;
  UINT32 Data;

} OTCMINTOTCRDTS_C0_N0_IIO_VTD_STRUCT;

/* OTCMINTOTCRDTS_C0_N1_IIO_VTD_REG supported on:                               */
/*      SPRA0 (0x20800d94)                                                      */
/*      SPRB0 (0x20800d94)                                                      */
/*      SPRHBM (0x20800d94)                                                     */
/*      SPRC0 (0x20800d94)                                                      */
/*      SPRMCC (0x20800d94)                                                     */
/*      SPRUCC (0x20800d94)                                                     */
/* Register default value on SPRA0: 0x00100401                                  */
/* Register default value on SPRB0: 0x00100401                                  */
/* Register default value on SPRHBM: 0x00100401                                 */
/* Register default value on SPRC0: 0x00100401                                  */
/* Register default value on SPRMCC: 0x00100401                                 */
/* Register default value on SPRUCC: 0x00100401                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the low watermark for the number of completion credits that a given channel and flow class is guaranteed to have available at all times within the Outbound Traffic Controller, for channels 0-5
*/


#define OTCMINTOTCRDTS_C0_N1_IIO_VTD_REG 0x11020D94

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch03_c_min : 7;

                            /* Bits[6:0], Access Type=RW/P, default=0x00000001*/

                            /*
                               Minimum number of credits available to
                               completions on channel 3
                            */
    UINT32 rsvd : 1;

                            /* Bits[7:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch04_c_min : 9;

                            /* Bits[16:8], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to
                               completions on channel 4
                            */
    UINT32 rsvd_17 : 1;

                            /* Bits[17:17], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch05_c_min : 9;

                            /* Bits[26:18], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to
                               completions on channel 5
                            */
    UINT32 rsvd_27 : 5;

                            /* Bits[31:27], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} OTCMINTOTCRDTS_C0_N1_IIO_VTD_STRUCT;

/* OTCMINTOTCRDTS_C1_N0_IIO_VTD_REG supported on:                               */
/*      SPRA0 (0x20800d98)                                                      */
/*      SPRB0 (0x20800d98)                                                      */
/*      SPRHBM (0x20800d98)                                                     */
/*      SPRC0 (0x20800d98)                                                      */
/*      SPRMCC (0x20800d98)                                                     */
/*      SPRUCC (0x20800d98)                                                     */
/* Register default value on SPRA0: 0x00401004                                  */
/* Register default value on SPRB0: 0x00401004                                  */
/* Register default value on SPRHBM: 0x00401004                                 */
/* Register default value on SPRC0: 0x00401004                                  */
/* Register default value on SPRMCC: 0x00401004                                 */
/* Register default value on SPRUCC: 0x00401004                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the low watermark for the number of completion credits that a given channel and flow class is guaranteed to have available at all times within the Outbound Traffic Controller, for channels 6-11
*/


#define OTCMINTOTCRDTS_C1_N0_IIO_VTD_REG 0x11020D98

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch06_c_min : 9;

                            /* Bits[8:0], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to
                               completions on channel 6
                            */
    UINT32 rsvd : 1;

                            /* Bits[9:9], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch07_c_min : 9;

                            /* Bits[18:10], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to
                               completions on channel 7
                            */
    UINT32 rsvd_19 : 1;

                            /* Bits[19:19], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch08_c_min : 9;

                            /* Bits[28:20], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to
                               completions on channel 8
                            */
    UINT32 rsvd_29 : 1;

                            /* Bits[29:29], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch09_c_min : 2;

                            /* Bits[31:30], Access Type=RW/P, default=0x00000000*/

                            /*
                               Minimum number of credits available to
                               completions on channel 9
                            */

  } Bits;
  UINT32 Data;

} OTCMINTOTCRDTS_C1_N0_IIO_VTD_STRUCT;

/* OTCMINTOTCRDTS_C1_N1_IIO_VTD_REG supported on:                               */
/*      SPRA0 (0x20800d9c)                                                      */
/*      SPRB0 (0x20800d9c)                                                      */
/*      SPRHBM (0x20800d9c)                                                     */
/*      SPRC0 (0x20800d9c)                                                      */
/*      SPRMCC (0x20800d9c)                                                     */
/*      SPRUCC (0x20800d9c)                                                     */
/* Register default value on SPRA0: 0x00000401                                  */
/* Register default value on SPRB0: 0x00000401                                  */
/* Register default value on SPRHBM: 0x00000401                                 */
/* Register default value on SPRC0: 0x00000401                                  */
/* Register default value on SPRMCC: 0x00000401                                 */
/* Register default value on SPRUCC: 0x00000401                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the low watermark for the number of completion credits that a given channel and flow class is guaranteed to have available at all times within the Outbound Traffic Controller, for channels 6-11
*/


#define OTCMINTOTCRDTS_C1_N1_IIO_VTD_REG 0x11020D9C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch09_c_min : 7;

                            /* Bits[6:0], Access Type=RW/P, default=0x00000001*/

                            /*
                               Minimum number of credits available to
                               completions on channel 9
                            */
    UINT32 rsvd : 1;

                            /* Bits[7:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch10_c_min : 9;

                            /* Bits[16:8], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to
                               completions on channel 10
                            */
    UINT32 rsvd_17 : 1;

                            /* Bits[17:17], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ch11_c_min : 9;

                            /* Bits[26:18], Access Type=RW/P, default=0x00000000*/

                            /*
                               Minimum number of credits available to
                               completions on channel 11
                            */
    UINT32 rsvd_27 : 5;

                            /* Bits[31:27], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} OTCMINTOTCRDTS_C1_N1_IIO_VTD_STRUCT;

/* TCPRHPENDCRDTCOUNT0_N0_IIO_VTD_REG supported on:                             */
/*      SPRA0 (0x20800da0)                                                      */
/*      SPRB0 (0x20800da0)                                                      */
/*      SPRHBM (0x20800da0)                                                     */
/*      SPRC0 (0x20800da0)                                                      */
/*      SPRMCC (0x20800da0)                                                     */
/*      SPRUCC (0x20800da0)                                                     */
/* Register default value on SPRA0: 0xFFFFFFFF                                  */
/* Register default value on SPRB0: 0xFFFFFFFF                                  */
/* Register default value on SPRHBM: 0xFFFFFFFF                                 */
/* Register default value on SPRC0: 0xFFFFFFFF                                  */
/* Register default value on SPRMCC: 0xFFFFFFFF                                 */
/* Register default value on SPRUCC: 0xFFFFFFFF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Inbound Traffic Controller Posted Request Header Pending credit count. BIOS must proram this for each MS2IOSF instance, depending on bifurcation mode and which IOSF IPs are connected. After programming all of these credit registers, BIOS must write TC_MISC_UCR.hw_init to trigger the HW initialization of inbound IOSF credits. This register acts as a MAX threshold to limit the prhpend occupancy in ITC from any given IOSF channel. The MAX is required since the prhpend uses dynamic crediting.
*/


#define TCPRHPENDCRDTCOUNT0_N0_IIO_VTD_REG 0x11020DA0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 prh_crdt_cnt_ch0 : 9;

                            /* Bits[8:0], Access Type=RW/P, default=0x000001FF*/

                            /*
                               Posted Request Header-Pending (PRH-Pend) Count
                               for IOSF Channel 0
                            */
    UINT32 prh_crdt_cnt_ch1 : 9;

                            /* Bits[17:9], Access Type=RW/P, default=0x000001FF*/

                            /*
                               Posted Request Header-Pending (PRH-Pend) Count
                               for IOSF Channel 1
                            */
    UINT32 prh_crdt_cnt_ch2 : 9;

                            /* Bits[26:18], Access Type=RW/P, default=0x000001FF*/

                            /*
                               Posted Request Header-Pending (PRH-Pend) Count
                               for IOSF Channel 2
                            */
    UINT32 prh_crdt_cnt_ch3 : 5;

                            /* Bits[31:27], Access Type=RW/P, default=0x0000001F*/

                            /*
                               Posted Request Header-Pending (PRH-Pend) Count
                               for IOSF Channel 3
                            */

  } Bits;
  UINT32 Data;

} TCPRHPENDCRDTCOUNT0_N0_IIO_VTD_STRUCT;

/* TCPRHPENDCRDTCOUNT0_N1_IIO_VTD_REG supported on:                             */
/*      SPRA0 (0x20800da4)                                                      */
/*      SPRB0 (0x20800da4)                                                      */
/*      SPRHBM (0x20800da4)                                                     */
/*      SPRC0 (0x20800da4)                                                      */
/*      SPRMCC (0x20800da4)                                                     */
/*      SPRUCC (0x20800da4)                                                     */
/* Register default value on SPRA0: 0x7FFFFFFF                                  */
/* Register default value on SPRB0: 0x7FFFFFFF                                  */
/* Register default value on SPRHBM: 0x7FFFFFFF                                 */
/* Register default value on SPRC0: 0x7FFFFFFF                                  */
/* Register default value on SPRMCC: 0x7FFFFFFF                                 */
/* Register default value on SPRUCC: 0x7FFFFFFF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Inbound Traffic Controller Posted Request Header Pending credit count. BIOS must proram this for each MS2IOSF instance, depending on bifurcation mode and which IOSF IPs are connected. After programming all of these credit registers, BIOS must write TC_MISC_UCR.hw_init to trigger the HW initialization of inbound IOSF credits. This register acts as a MAX threshold to limit the prhpend occupancy in ITC from any given IOSF channel. The MAX is required since the prhpend uses dynamic crediting.
*/


#define TCPRHPENDCRDTCOUNT0_N1_IIO_VTD_REG 0x11020DA4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 prh_crdt_cnt_ch3 : 4;

                            /* Bits[3:0], Access Type=RW/P, default=0x0000000F*/

                            /*
                               Posted Request Header-Pending (PRH-Pend) Count
                               for IOSF Channel 3
                            */
    UINT32 prh_crdt_cnt_ch4 : 9;

                            /* Bits[12:4], Access Type=RW/P, default=0x000001FF*/

                            /*
                               Posted Request Header-Pending (PRH-Pend) Count
                               for IOSF Channel 4
                            */
    UINT32 prh_crdt_cnt_ch5 : 9;

                            /* Bits[21:13], Access Type=RW/P, default=0x000001FF*/

                            /*
                               Posted Request Header-Pending (PRH-Pend) Count
                               for IOSF Channel 5
                            */
    UINT32 prh_crdt_cnt_ch6 : 9;

                            /* Bits[30:22], Access Type=RW/P, default=0x000001FF*/

                            /*
                               Posted Request Header-Pending (PRH-Pend) Count
                               for IOSF Channel 6
                            */
    UINT32 rsvd : 1;

                            /* Bits[31:31], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TCPRHPENDCRDTCOUNT0_N1_IIO_VTD_STRUCT;

/* TCPRHPENDCRDTCOUNT1_N0_IIO_VTD_REG supported on:                             */
/*      SPRA0 (0x20800da8)                                                      */
/*      SPRB0 (0x20800da8)                                                      */
/*      SPRHBM (0x20800da8)                                                     */
/*      SPRC0 (0x20800da8)                                                      */
/*      SPRMCC (0x20800da8)                                                     */
/*      SPRUCC (0x20800da8)                                                     */
/* Register default value on SPRA0: 0x783C1FFF                                  */
/* Register default value on SPRB0: 0x783C1FFF                                  */
/* Register default value on SPRHBM: 0x783C1FFF                                 */
/* Register default value on SPRC0: 0x783C1FFF                                  */
/* Register default value on SPRMCC: 0x783C1FFF                                 */
/* Register default value on SPRUCC: 0x783C1FFF                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Inbound Traffic Controller Non-Posted Request Header Pending credit count. BIOS must proram this for each MS2IOSF instance, depending on bifurcation mode and which IOSF IPs are connected. After programming all of these credit registers, BIOS must write TC_MISC_UCR.hw_init to trigger the HW initialization of inbound IOSF credits.
*/


#define TCPRHPENDCRDTCOUNT1_N0_IIO_VTD_REG 0x11020DA8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 prh_crdt_cnt_ch7 : 9;

                            /* Bits[8:0], Access Type=RW/P, default=0x000001FF*/

                            /*
                               Posted Request Header-Pending (PRH-Pend) Count
                               for IOSF Channel 7
                            */
    UINT32 prh_crdt_cnt_ch8 : 9;

                            /* Bits[17:9], Access Type=RW/P, default=0x0000000F*/

                            /*
                               Posted Request Header-Pending (PRH-Pend) Count
                               for IOSF Channel 8 Misc
                            */
    UINT32 prh_crdt_cnt_ch9 : 9;

                            /* Bits[26:18], Access Type=RW/P, default=0x0000000F*/

                            /*
                               Posted Request Header-Pending (PRH-Pend) Count
                               for IOSF Channel 9 VTd
                            */
    UINT32 prh_crdt_cnt_ch10 : 5;

                            /* Bits[31:27], Access Type=RW/P, default=0x0000000F*/

                            /*
                               Posted Request Header-Pending (PRH-Pend) Count
                               for IOSF Channel 10
                            */

  } Bits;
  UINT32 Data;

} TCPRHPENDCRDTCOUNT1_N0_IIO_VTD_STRUCT;

/* TCPRHPENDCRDTCOUNT1_N1_IIO_VTD_REG supported on:                             */
/*      SPRA0 (0x20800dac)                                                      */
/*      SPRB0 (0x20800dac)                                                      */
/*      SPRHBM (0x20800dac)                                                     */
/*      SPRC0 (0x20800dac)                                                      */
/*      SPRMCC (0x20800dac)                                                     */
/*      SPRUCC (0x20800dac)                                                     */
/* Register default value on SPRA0: 0x000000F0                                  */
/* Register default value on SPRB0: 0x7FFFE0F0                                  */
/* Register default value on SPRHBM: 0x7FFFE0F0                                 */
/* Register default value on SPRC0: 0x7FFFE0F0                                  */
/* Register default value on SPRMCC: 0x7FFFE0F0                                 */
/* Register default value on SPRUCC: 0x7FFFE0F0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Inbound Traffic Controller Non-Posted Request Header Pending credit count. BIOS must proram this for each MS2IOSF instance, depending on bifurcation mode and which IOSF IPs are connected. After programming all of these credit registers, BIOS must write TC_MISC_UCR.hw_init to trigger the HW initialization of inbound IOSF credits.
*/


#define TCPRHPENDCRDTCOUNT1_N1_IIO_VTD_REG 0x11020DAC

#if defined(SPRA0_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 prh_crdt_cnt_ch10 : 4;

                            /* Bits[3:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               Posted Request Header-Pending (PRH-Pend) Count
                               for IOSF Channel 10
                            */
    UINT32 prh_crdt_cnt_ch11 : 9;

                            /* Bits[12:4], Access Type=RW/P, default=0x0000000F*/

                            /*
                               Posted Request Header-Pending (PRH-Pend) Count
                               for IOSF Channel 11
                            */
    UINT32 rsvd : 19;

                            /* Bits[31:13], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TCPRHPENDCRDTCOUNT1_N1_IIO_VTD_SPRA0_STRUCT;
#endif /* (SPRA0_HOST) */

#if defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 prh_crdt_cnt_ch10 : 4;

                            /* Bits[3:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               Posted Request Header-Pending (PRH-Pend) Count
                               for IOSF Channel 10
                            */
    UINT32 prh_crdt_cnt_ch11 : 9;

                            /* Bits[12:4], Access Type=RW/P, default=0x0000000F*/

                            /*
                               Posted Request Header-Pending (PRH-Pend) Count
                               for IOSF Channel 11
                            */
    UINT32 prh_crdt_cnt_tot : 9;

                            /* Bits[21:13], Access Type=RW/P, default=0x000001FF*/

                            /*
                               Posted Request Header-Pending (PRH-Pend) Count
                               total for dynamic crediting
                            */
    UINT32 prh_crdt_cnt_tot_b2b : 9;

                            /* Bits[30:22], Access Type=RW/P, default=0x000001FF*/

                            /*
                               Posted Request Header-Pending (PRH-Pend) Count
                               total for dynamic crediting to block shadow pipe
                            */
    UINT32 rsvd : 1;

                            /* Bits[31:31], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TCPRHPENDCRDTCOUNT1_N1_IIO_VTD_SPRB0_SPRHBM_SPRC0_SPRMCC_SPRUCC_STRUCT;
#endif /* (SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 prh_crdt_cnt_ch10 : 4;

                            /* Bits[3:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               Posted Request Header-Pending (PRH-Pend) Count
                               for IOSF Channel 10
                            */
    UINT32 prh_crdt_cnt_ch11 : 9;

                            /* Bits[12:4], Access Type=RW/P, default=0x0000000F*/

                            /*
                               Posted Request Header-Pending (PRH-Pend) Count
                               for IOSF Channel 11
                            */
    UINT32 rsvd : 19;

                            /* Bits[31:13], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} TCPRHPENDCRDTCOUNT1_N1_IIO_VTD_STRUCT;

/* ITCHDRTOTCRDTS_C1_N0_IIO_VTD_REG supported on:                               */
/*      SPRA0 (0x20800db0)                                                      */
/*      SPRB0 (0x20800db0)                                                      */
/*      SPRHBM (0x20800db0)                                                     */
/*      SPRC0 (0x20800db0)                                                      */
/*      SPRMCC (0x20800db0)                                                     */
/*      SPRUCC (0x20800db0)                                                     */
/* Register default value on SPRA0: 0x000C0300                                  */
/* Register default value on SPRB0: 0x000C0300                                  */
/* Register default value on SPRHBM: 0x000C0300                                 */
/* Register default value on SPRC0: 0x000C0300                                  */
/* Register default value on SPRMCC: 0x000C0300                                 */
/* Register default value on SPRUCC: 0x000C0300                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of completion credits that a given channel and flow class is allowed to utilize within the Inbound Traffic Controller, for channels 6-7
*/


#define ITCHDRTOTCRDTS_C1_N0_IIO_VTD_REG 0x11020DB0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch06_c_max : 10;

                            /* Bits[9:0], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to
                               completions on channel 6
                            */
    UINT32 ch07_c_max : 10;

                            /* Bits[19:10], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to
                               completions on channel 7
                            */
    UINT32 rsvd : 12;

                            /* Bits[31:20], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCHDRTOTCRDTS_C1_N0_IIO_VTD_STRUCT;

/* ITCHDRTOTCRDTS_C1_N1_IIO_VTD_REG supported on:                               */
/*      SPRA0 (0x20800db4)                                                      */
/*      SPRB0 (0x20800db4)                                                      */
/*      SPRHBM (0x20800db4)                                                     */
/*      SPRC0 (0x20800db4)                                                      */
/*      SPRMCC (0x20800db4)                                                     */
/*      SPRUCC (0x20800db4)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of completion credits that a given channel and flow class is allowed to utilize within the Inbound Traffic Controller, for channels 6-7
*/


#define ITCHDRTOTCRDTS_C1_N1_IIO_VTD_REG 0x11020DB4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 32;

                            /* Bits[31:0], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCHDRTOTCRDTS_C1_N1_IIO_VTD_STRUCT;

/* ITCDATTOTCRDTS_P0_N0_IIO_VTD_REG supported on:                               */
/*      SPRA0 (0x20800db8)                                                      */
/*      SPRB0 (0x20800db8)                                                      */
/*      SPRHBM (0x20800db8)                                                     */
/*      SPRC0 (0x20800db8)                                                      */
/*      SPRMCC (0x20800db8)                                                     */
/*      SPRUCC (0x20800db8)                                                     */
/* Register default value on SPRA0: 0x300C0300                                  */
/* Register default value on SPRB0: 0x300C0300                                  */
/* Register default value on SPRHBM: 0x300C0300                                 */
/* Register default value on SPRC0: 0x300C0300                                  */
/* Register default value on SPRMCC: 0x300C0300                                 */
/* Register default value on SPRUCC: 0x300C0300                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of posted credits that a given channel and flow class is allowed to utilize within the InboundTraffic Controller, for channels 0-5
*/


#define ITCDATTOTCRDTS_P0_N0_IIO_VTD_REG 0x11020DB8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch00_p_max : 10;

                            /* Bits[9:0], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to posteds
                               on channel 0
                            */
    UINT32 ch01_p_max : 10;

                            /* Bits[19:10], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to
                               completions on channel 1
                            */
    UINT32 ch02_p_max : 10;

                            /* Bits[29:20], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to posted on
                               channel 2
                            */
    UINT32 ch03_p_max : 2;

                            /* Bits[31:30], Access Type=RW/P, default=0x00000000*/

                            /*
                               Maximum number of credits available to posted on
                               channel 3
                            */

  } Bits;
  UINT32 Data;

} ITCDATTOTCRDTS_P0_N0_IIO_VTD_STRUCT;

/* ITCDATTOTCRDTS_P0_N1_IIO_VTD_REG supported on:                               */
/*      SPRA0 (0x20800dbc)                                                      */
/*      SPRB0 (0x20800dbc)                                                      */
/*      SPRHBM (0x20800dbc)                                                     */
/*      SPRC0 (0x20800dbc)                                                      */
/*      SPRMCC (0x20800dbc)                                                     */
/*      SPRUCC (0x20800dbc)                                                     */
/* Register default value on SPRA0: 0x0C0300C0                                  */
/* Register default value on SPRB0: 0x0C0300C0                                  */
/* Register default value on SPRHBM: 0x0C0300C0                                 */
/* Register default value on SPRC0: 0x0C0300C0                                  */
/* Register default value on SPRMCC: 0x0C0300C0                                 */
/* Register default value on SPRUCC: 0x0C0300C0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of posted credits that a given channel and flow class is allowed to utilize within the InboundTraffic Controller, for channels 0-5
*/


#define ITCDATTOTCRDTS_P0_N1_IIO_VTD_REG 0x11020DBC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch03_p_max : 8;

                            /* Bits[7:0], Access Type=RW/P, default=0x000000C0*/

                            /*
                               Maximum number of credits available to posted on
                               channel 3
                            */
    UINT32 ch04_p_max : 10;

                            /* Bits[17:8], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to posted on
                               channel 4
                            */
    UINT32 ch05_p_max : 10;

                            /* Bits[27:18], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to posted on
                               channel 5
                            */
    UINT32 rsvd : 4;

                            /* Bits[31:28], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCDATTOTCRDTS_P0_N1_IIO_VTD_STRUCT;

/* OB_CREDITS_CH_00_01_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x20800dc0)                                                      */
/*      SPRB0 (0x20800dc0)                                                      */
/*      SPRHBM (0x20800dc0)                                                     */
/*      SPRC0 (0x20800dc0)                                                      */
/*      SPRMCC (0x20800dc0)                                                     */
/*      SPRUCC (0x20800dc0)                                                     */
/* Register default value on SPRA0: 0x1086210C                                  */
/* Register default value on SPRB0: 0x1086210C                                  */
/* Register default value on SPRHBM: 0x1086210C                                 */
/* Register default value on SPRC0: 0x1087A10F                                  */
/* Register default value on SPRMCC: 0x1087A10F                                 */
/* Register default value on SPRUCC: 0x1087A10F                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the number of Output buffer credits for OTC Hdr Pipe.

*/


#define OB_CREDITS_CH_00_01_IIO_VTD_REG 0x11020DC0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch00_c_credits : 5;

                            /* Bits[4:0], Access Type=RW/P, default=0x0000000C*/

                            /*
                               Number of completion request credits advertised
                               on channel 0. The reset default value represents
                               the depth of the request buffer in hardware.
                               Behavior is undefined if programming a value
                               that is greater than the reset default value.
                            */
    UINT32 ch00_p_credits : 5;

                            /* Bits[9:5], Access Type=RW/P, default=0x00000008*/

                            /*
                               Number of posted request credits advertised on
                               channel 0. The reset default value represents
                               the depth of the request buffer in hardware.
                               Behavior is undefined if programming a value
                               that is greater than the reset default value.
                            */
    UINT32 ch00_np_credits : 5;

                            /* Bits[14:10], Access Type=RW/P, default=0x00000008*/

                            /*
                               Number of non-posted request credits advertised
                               on channel 0. The reset default value represents
                               the depth of the request buffer in hardware.
                               Behavior is undefined if programming a value
                               that is greater than the reset default value.
                            */
    UINT32 ch01_c_credits : 5;

                            /* Bits[19:15], Access Type=RW/P, default=0x0000000C*/

                            /*
                               Number of completion request credits advertised
                               on channel 1. The reset default value represents
                               the depth of the request buffer in hardware.
                               Behavior is undefined if programming a value
                               that is greater than the reset default value.
                            */
    UINT32 ch01_p_credits : 5;

                            /* Bits[24:20], Access Type=RW/P, default=0x00000008*/

                            /*
                               Number of posted request credits advertised on
                               channel 1. The reset default value represents
                               the depth of the request buffer in hardware.
                               Behavior is undefined if programming a value
                               that is greater than the reset default value.
                            */
    UINT32 ch01_np_credits : 5;

                            /* Bits[29:25], Access Type=RW/P, default=0x00000008*/

                            /*
                               Number of non-posted request credits advertised
                               on channel 1. The reset default value represents
                               the depth of the request buffer in hardware.
                               Behavior is undefined if programming a value
                               that is greater than the reset default value.
                            */
    UINT32 rsvd : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} OB_CREDITS_CH_00_01_IIO_VTD_STRUCT;

/* OB_CREDITS_CH_02_03_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x20800dc4)                                                      */
/*      SPRB0 (0x20800dc4)                                                      */
/*      SPRHBM (0x20800dc4)                                                     */
/*      SPRC0 (0x20800dc4)                                                      */
/*      SPRMCC (0x20800dc4)                                                     */
/*      SPRUCC (0x20800dc4)                                                     */
/* Register default value on SPRA0: 0x1086210C                                  */
/* Register default value on SPRB0: 0x1086210C                                  */
/* Register default value on SPRHBM: 0x1086210C                                 */
/* Register default value on SPRC0: 0x1087A10F                                  */
/* Register default value on SPRMCC: 0x1087A10F                                 */
/* Register default value on SPRUCC: 0x1087A10F                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the number of Output buffer credits for OTC Hdr Pipe.

*/


#define OB_CREDITS_CH_02_03_IIO_VTD_REG 0x11020DC4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch02_c_credits : 5;

                            /* Bits[4:0], Access Type=RW/P, default=0x0000000C*/

                            /*
                               Number of completion request credits advertised
                               on channel 2. The reset default value represents
                               the depth of the request buffer in hardware.
                               Behavior is undefined if programming a value
                               that is greater than the reset default value.
                            */
    UINT32 ch02_p_credits : 5;

                            /* Bits[9:5], Access Type=RW/P, default=0x00000008*/

                            /*
                               Number of posted request credits advertised on
                               channel 2. The reset default value represents
                               the depth of the request buffer in hardware.
                               Behavior is undefined if programming a value
                               that is greater than the reset default value.
                            */
    UINT32 ch02_np_credits : 5;

                            /* Bits[14:10], Access Type=RW/P, default=0x00000008*/

                            /*
                               Number of non-posted request credits advertised
                               on channel 2. The reset default value represents
                               the depth of the request buffer in hardware.
                               Behavior is undefined if programming a value
                               that is greater than the reset default value.
                            */
    UINT32 ch03_c_credits : 5;

                            /* Bits[19:15], Access Type=RW/P, default=0x0000000C*/

                            /*
                               Number of completion request credits advertised
                               on channel 3. The reset default value represents
                               the depth of the request buffer in hardware.
                               Behavior is undefined if programming a value
                               that is greater than the reset default value.
                            */
    UINT32 ch03_p_credits : 5;

                            /* Bits[24:20], Access Type=RW/P, default=0x00000008*/

                            /*
                               Number of posted request credits advertised on
                               channel 3. The reset default value represents
                               the depth of the request buffer in hardware.
                               Behavior is undefined if programming a value
                               that is greater than the reset default value.
                            */
    UINT32 ch03_np_credits : 5;

                            /* Bits[29:25], Access Type=RW/P, default=0x00000008*/

                            /*
                               Number of non-posted request credits advertised
                               on channel 3. The reset default value represents
                               the depth of the request buffer in hardware.
                               Behavior is undefined if programming a value
                               that is greater than the reset default value.
                            */
    UINT32 rsvd : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} OB_CREDITS_CH_02_03_IIO_VTD_STRUCT;

/* OB_CREDITS_CH_04_05_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x20800dc8)                                                      */
/*      SPRB0 (0x20800dc8)                                                      */
/*      SPRHBM (0x20800dc8)                                                     */
/*      SPRC0 (0x20800dc8)                                                      */
/*      SPRMCC (0x20800dc8)                                                     */
/*      SPRUCC (0x20800dc8)                                                     */
/* Register default value on SPRA0: 0x1086210C                                  */
/* Register default value on SPRB0: 0x1086210C                                  */
/* Register default value on SPRHBM: 0x1086210C                                 */
/* Register default value on SPRC0: 0x1087A10F                                  */
/* Register default value on SPRMCC: 0x1087A10F                                 */
/* Register default value on SPRUCC: 0x1087A10F                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the number of Output buffer credits for OTC Hdr Pipe.

*/


#define OB_CREDITS_CH_04_05_IIO_VTD_REG 0x11020DC8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch04_c_credits : 5;

                            /* Bits[4:0], Access Type=RW/P, default=0x0000000C*/

                            /*
                               Number of completion request credits advertised
                               on channel 4. The reset default value represents
                               the depth of the request buffer in hardware.
                               Behavior is undefined if programming a value
                               that is greater than the reset default value.
                            */
    UINT32 ch04_p_credits : 5;

                            /* Bits[9:5], Access Type=RW/P, default=0x00000008*/

                            /*
                               Number of posted request credits advertised on
                               channel 4. The reset default value represents
                               the depth of the request buffer in hardware.
                               Behavior is undefined if programming a value
                               that is greater than the reset default value.
                            */
    UINT32 ch04_np_credits : 5;

                            /* Bits[14:10], Access Type=RW/P, default=0x00000008*/

                            /*
                               Number of non-posted request credits advertised
                               on channel 4. The reset default value represents
                               the depth of the request buffer in hardware.
                               Behavior is undefined if programming a value
                               that is greater than the reset default value.
                            */
    UINT32 ch05_c_credits : 5;

                            /* Bits[19:15], Access Type=RW/P, default=0x0000000C*/

                            /*
                               Number of completion request credits advertised
                               on channel 5. The reset default value represents
                               the depth of the request buffer in hardware.
                               Behavior is undefined if programming a value
                               that is greater than the reset default value.
                            */
    UINT32 ch05_p_credits : 5;

                            /* Bits[24:20], Access Type=RW/P, default=0x00000008*/

                            /*
                               Number of posted request credits advertised on
                               channel 5. The reset default value represents
                               the depth of the request buffer in hardware.
                               Behavior is undefined if programming a value
                               that is greater than the reset default value.
                            */
    UINT32 ch05_np_credits : 5;

                            /* Bits[29:25], Access Type=RW/P, default=0x00000008*/

                            /*
                               Number of non-posted request credits advertised
                               on channel 5. The reset default value represents
                               the depth of the request buffer in hardware.
                               Behavior is undefined if programming a value
                               that is greater than the reset default value.
                            */
    UINT32 rsvd : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} OB_CREDITS_CH_04_05_IIO_VTD_STRUCT;

/* OB_CREDITS_CH_06_07_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x20800dcc)                                                      */
/*      SPRB0 (0x20800dcc)                                                      */
/*      SPRHBM (0x20800dcc)                                                     */
/*      SPRC0 (0x20800dcc)                                                      */
/*      SPRMCC (0x20800dcc)                                                     */
/*      SPRUCC (0x20800dcc)                                                     */
/* Register default value on SPRA0: 0x1086210C                                  */
/* Register default value on SPRB0: 0x1086210C                                  */
/* Register default value on SPRHBM: 0x1086210C                                 */
/* Register default value on SPRC0: 0x1087A10F                                  */
/* Register default value on SPRMCC: 0x1087A10F                                 */
/* Register default value on SPRUCC: 0x1087A10F                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the number of Output buffer credits for OTC Hdr Pipe.

*/


#define OB_CREDITS_CH_06_07_IIO_VTD_REG 0x11020DCC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch06_c_credits : 5;

                            /* Bits[4:0], Access Type=RW/P, default=0x0000000C*/

                            /*
                               Number of completion request credits advertised
                               on channel 6. The reset default value represents
                               the depth of the request buffer in hardware.
                               Behavior is undefined if programming a value
                               that is greater than the reset default value.
                            */
    UINT32 ch06_p_credits : 5;

                            /* Bits[9:5], Access Type=RW/P, default=0x00000008*/

                            /*
                               Number of posted request credits advertised on
                               channel 6. The reset default value represents
                               the depth of the request buffer in hardware.
                               Behavior is undefined if programming a value
                               that is greater than the reset default value.
                            */
    UINT32 ch06_np_credits : 5;

                            /* Bits[14:10], Access Type=RW/P, default=0x00000008*/

                            /*
                               Number of non-posted request credits advertised
                               on channel 6. The reset default value represents
                               the depth of the request buffer in hardware.
                               Behavior is undefined if programming a value
                               that is greater than the reset default value.
                            */
    UINT32 ch07_c_credits : 5;

                            /* Bits[19:15], Access Type=RW/P, default=0x0000000C*/

                            /*
                               Number of completion request credits advertised
                               on channel 7. The reset default value represents
                               the depth of the request buffer in hardware.
                               Behavior is undefined if programming a value
                               that is greater than the reset default value.
                            */
    UINT32 ch07_p_credits : 5;

                            /* Bits[24:20], Access Type=RW/P, default=0x00000008*/

                            /*
                               Number of posted request credits advertised on
                               channel 7. The reset default value represents
                               the depth of the request buffer in hardware.
                               Behavior is undefined if programming a value
                               that is greater than the reset default value.
                            */
    UINT32 ch07_np_credits : 5;

                            /* Bits[29:25], Access Type=RW/P, default=0x00000008*/

                            /*
                               Number of non-posted request credits advertised
                               on channel 7. The reset default value represents
                               the depth of the request buffer in hardware.
                               Behavior is undefined if programming a value
                               that is greater than the reset default value.
                            */
    UINT32 rsvd : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} OB_CREDITS_CH_06_07_IIO_VTD_STRUCT;

/* OB_CREDITS_CH_08_09_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x20800dd0)                                                      */
/*      SPRB0 (0x20800dd0)                                                      */
/*      SPRHBM (0x20800dd0)                                                     */
/*      SPRC0 (0x20800dd0)                                                      */
/*      SPRMCC (0x20800dd0)                                                     */
/*      SPRUCC (0x20800dd0)                                                     */
/* Register default value on SPRA0: 0x1086210C                                  */
/* Register default value on SPRB0: 0x1086210C                                  */
/* Register default value on SPRHBM: 0x1086210C                                 */
/* Register default value on SPRC0: 0x1086210C                                  */
/* Register default value on SPRMCC: 0x1086210C                                 */
/* Register default value on SPRUCC: 0x1086210C                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the number of Output buffer credits for OTC Hdr Pipe.

*/


#define OB_CREDITS_CH_08_09_IIO_VTD_REG 0x11020DD0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch08_c_credits : 5;

                            /* Bits[4:0], Access Type=RW/P, default=0x0000000C*/

                            /*
                               Number of completion request credits advertised
                               on channel 8. The reset default value represents
                               the depth of the request buffer in hardware.
                               Behavior is undefined if programming a value
                               that is greater than the reset default value.
                            */
    UINT32 ch08_p_credits : 5;

                            /* Bits[9:5], Access Type=RW/P, default=0x00000008*/

                            /*
                               Number of posted request credits advertised on
                               channel 8. The reset default value represents
                               the depth of the request buffer in hardware.
                               Behavior is undefined if programming a value
                               that is greater than the reset default value.
                            */
    UINT32 ch08_np_credits : 5;

                            /* Bits[14:10], Access Type=RW/P, default=0x00000008*/

                            /*
                               Number of non-posted request credits advertised
                               on channel 8. The reset default value represents
                               the depth of the request buffer in hardware.
                               Behavior is undefined if programming a value
                               that is greater than the reset default value.
                            */
    UINT32 ch09_c_credits : 5;

                            /* Bits[19:15], Access Type=RW/P, default=0x0000000C*/

                            /*
                               Number of completion request credits advertised
                               on channel 9. The reset default value represents
                               the depth of the request buffer in hardware.
                               Behavior is undefined if programming a value
                               that is greater than the reset default value.
                            */
    UINT32 ch09_p_credits : 5;

                            /* Bits[24:20], Access Type=RW/P, default=0x00000008*/

                            /*
                               Number of posted request credits advertised on
                               channel 9. The reset default value represents
                               the depth of the request buffer in hardware.
                               Behavior is undefined if programming a value
                               that is greater than the reset default value.
                            */
    UINT32 ch09_np_credits : 5;

                            /* Bits[29:25], Access Type=RW/P, default=0x00000008*/

                            /*
                               Number of non-posted request credits advertised
                               on channel 9. The reset default value represents
                               the depth of the request buffer in hardware.
                               Behavior is undefined if programming a value
                               that is greater than the reset default value.
                            */
    UINT32 rsvd : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} OB_CREDITS_CH_08_09_IIO_VTD_STRUCT;

/* OB_CREDITS_CH_10_11_IIO_VTD_REG supported on:                                */
/*      SPRA0 (0x20800dd4)                                                      */
/*      SPRB0 (0x20800dd4)                                                      */
/*      SPRHBM (0x20800dd4)                                                     */
/*      SPRC0 (0x20800dd4)                                                      */
/*      SPRMCC (0x20800dd4)                                                     */
/*      SPRUCC (0x20800dd4)                                                     */
/* Register default value on SPRA0: 0x1086210C                                  */
/* Register default value on SPRB0: 0x1086210C                                  */
/* Register default value on SPRHBM: 0x1086210C                                 */
/* Register default value on SPRC0: 0x1086210C                                  */
/* Register default value on SPRMCC: 0x1086210C                                 */
/* Register default value on SPRUCC: 0x1086210C                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the number of Output buffer credits for OTC Hdr Pipe.
*/


#define OB_CREDITS_CH_10_11_IIO_VTD_REG 0x11020DD4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch10_c_credits : 5;

                            /* Bits[4:0], Access Type=RW/P, default=0x0000000C*/

                            /*
                               Number of completion request credits advertised
                               on channel 10. The reset default value
                               represents the depth of the request buffer in
                               hardware. Behavior is undefined if programming a
                               value that is greater than the reset default
                               value.
                            */
    UINT32 ch10_p_credits : 5;

                            /* Bits[9:5], Access Type=RW/P, default=0x00000008*/

                            /*
                               Number of posted request credits advertised on
                               channel 10. The reset default value represents
                               the depth of the request buffer in hardware.
                               Behavior is undefined if programming a value
                               that is greater than the reset default value.
                            */
    UINT32 ch10_np_credits : 5;

                            /* Bits[14:10], Access Type=RW/P, default=0x00000008*/

                            /*
                               Number of non-posted request credits advertised
                               on channel 10. The reset default value
                               represents the depth of the request buffer in
                               hardware. Behavior is undefined if programming a
                               value that is greater than the reset default
                               value.
                            */
    UINT32 ch11_c_credits : 5;

                            /* Bits[19:15], Access Type=RW/P, default=0x0000000C*/

                            /*
                               Number of completion request credits advertised
                               on channel 11. The reset default value
                               represents the depth of the request buffer in
                               hardware. Behavior is undefined if programming a
                               value that is greater than the reset default
                               value.
                            */
    UINT32 ch11_p_credits : 5;

                            /* Bits[24:20], Access Type=RW/P, default=0x00000008*/

                            /*
                               Number of posted request credits advertised on
                               channel 11. The reset default value represents
                               the depth of the request buffer in hardware.
                               Behavior is undefined if programming a value
                               that is greater than the reset default value.
                            */
    UINT32 ch11_np_credits : 5;

                            /* Bits[29:25], Access Type=RW/P, default=0x00000008*/

                            /*
                               Number of non-posted request credits advertised
                               on channel 11. The reset default value
                               represents the depth of the request buffer in
                               hardware. Behavior is undefined if programming a
                               value that is greater than the reset default
                               value.
                            */
    UINT32 rsvd : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} OB_CREDITS_CH_10_11_IIO_VTD_STRUCT;

/* ITCHDRTOTCRDTS_P0_N0_IIO_VTD_REG supported on:                               */
/*      SPRA0 (0x20800dd8)                                                      */
/*      SPRB0 (0x20800dd8)                                                      */
/*      SPRHBM (0x20800dd8)                                                     */
/*      SPRC0 (0x20800dd8)                                                      */
/*      SPRMCC (0x20800dd8)                                                     */
/*      SPRUCC (0x20800dd8)                                                     */
/* Register default value on SPRA0: 0x300C0300                                  */
/* Register default value on SPRB0: 0x300C0300                                  */
/* Register default value on SPRHBM: 0x300C0300                                 */
/* Register default value on SPRC0: 0x300C0300                                  */
/* Register default value on SPRMCC: 0x300C0300                                 */
/* Register default value on SPRUCC: 0x300C0300                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of posted credits that a given channel and flow class is allowed to utilize within the InboundTraffic Controller, for channels 0-5
*/


#define ITCHDRTOTCRDTS_P0_N0_IIO_VTD_REG 0x11020DD8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch00_p_max : 10;

                            /* Bits[9:0], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to posteds
                               on channel 0
                            */
    UINT32 ch01_p_max : 10;

                            /* Bits[19:10], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to
                               completions on channel 1
                            */
    UINT32 ch02_p_max : 10;

                            /* Bits[29:20], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to posted on
                               channel 2
                            */
    UINT32 ch03_p_max : 2;

                            /* Bits[31:30], Access Type=RW/P, default=0x00000000*/

                            /*
                               Maximum number of credits available to posted on
                               channel 3
                            */

  } Bits;
  UINT32 Data;

} ITCHDRTOTCRDTS_P0_N0_IIO_VTD_STRUCT;

/* ITCHDRTOTCRDTS_P0_N1_IIO_VTD_REG supported on:                               */
/*      SPRA0 (0x20800ddc)                                                      */
/*      SPRB0 (0x20800ddc)                                                      */
/*      SPRHBM (0x20800ddc)                                                     */
/*      SPRC0 (0x20800ddc)                                                      */
/*      SPRMCC (0x20800ddc)                                                     */
/*      SPRUCC (0x20800ddc)                                                     */
/* Register default value on SPRA0: 0x0C0300C0                                  */
/* Register default value on SPRB0: 0x0C0300C0                                  */
/* Register default value on SPRHBM: 0x0C0300C0                                 */
/* Register default value on SPRC0: 0x0C0300C0                                  */
/* Register default value on SPRMCC: 0x0C0300C0                                 */
/* Register default value on SPRUCC: 0x0C0300C0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of posted credits that a given channel and flow class is allowed to utilize within the InboundTraffic Controller, for channels 0-5
*/


#define ITCHDRTOTCRDTS_P0_N1_IIO_VTD_REG 0x11020DDC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch03_p_max : 8;

                            /* Bits[7:0], Access Type=RW/P, default=0x000000C0*/

                            /*
                               Maximum number of credits available to posted on
                               channel 3
                            */
    UINT32 ch04_p_max : 10;

                            /* Bits[17:8], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to posted on
                               channel 4
                            */
    UINT32 ch05_p_max : 10;

                            /* Bits[27:18], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to posted on
                               channel 5
                            */
    UINT32 rsvd : 4;

                            /* Bits[31:28], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCHDRTOTCRDTS_P0_N1_IIO_VTD_STRUCT;

/* ITCHDRTOTCRDTS_P1_N0_IIO_VTD_REG supported on:                               */
/*      SPRA0 (0x20800de0)                                                      */
/*      SPRB0 (0x20800de0)                                                      */
/*      SPRHBM (0x20800de0)                                                     */
/*      SPRC0 (0x20800de0)                                                      */
/*      SPRMCC (0x20800de0)                                                     */
/*      SPRUCC (0x20800de0)                                                     */
/* Register default value on SPRA0: 0x000C0300                                  */
/* Register default value on SPRB0: 0x000C0300                                  */
/* Register default value on SPRHBM: 0x000C0300                                 */
/* Register default value on SPRC0: 0x000C0300                                  */
/* Register default value on SPRMCC: 0x000C0300                                 */
/* Register default value on SPRUCC: 0x000C0300                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of completion credits that a given channel and flow class is allowed to utilize within the Inbound Traffic Controller, for channels 6-7
*/


#define ITCHDRTOTCRDTS_P1_N0_IIO_VTD_REG 0x11020DE0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch06_p_max : 10;

                            /* Bits[9:0], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to posted on
                               channel 6
                            */
    UINT32 ch07_p_max : 10;

                            /* Bits[19:10], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to posteds
                               on channel 7
                            */
    UINT32 rsvd : 12;

                            /* Bits[31:20], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCHDRTOTCRDTS_P1_N0_IIO_VTD_STRUCT;

/* ITCHDRTOTCRDTS_P1_N1_IIO_VTD_REG supported on:                               */
/*      SPRA0 (0x20800de4)                                                      */
/*      SPRB0 (0x20800de4)                                                      */
/*      SPRHBM (0x20800de4)                                                     */
/*      SPRC0 (0x20800de4)                                                      */
/*      SPRMCC (0x20800de4)                                                     */
/*      SPRUCC (0x20800de4)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of completion credits that a given channel and flow class is allowed to utilize within the Inbound Traffic Controller, for channels 6-7
*/


#define ITCHDRTOTCRDTS_P1_N1_IIO_VTD_REG 0x11020DE4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 32;

                            /* Bits[31:0], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCHDRTOTCRDTS_P1_N1_IIO_VTD_STRUCT;

/* ITCHDRTOTCRDTS_NP0_N0_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800de8)                                                      */
/*      SPRB0 (0x20800de8)                                                      */
/*      SPRHBM (0x20800de8)                                                     */
/*      SPRC0 (0x20800de8)                                                      */
/*      SPRMCC (0x20800de8)                                                     */
/*      SPRUCC (0x20800de8)                                                     */
/* Register default value on SPRA0: 0x300C0300                                  */
/* Register default value on SPRB0: 0x300C0300                                  */
/* Register default value on SPRHBM: 0x300C0300                                 */
/* Register default value on SPRC0: 0x300C0300                                  */
/* Register default value on SPRMCC: 0x300C0300                                 */
/* Register default value on SPRUCC: 0x300C0300                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of non-posted credits that a given channel and flow class is allowed to utilize within the InboundTraffic Controller, for channels 0-5
*/


#define ITCHDRTOTCRDTS_NP0_N0_IIO_VTD_REG 0x11020DE8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch00_np_max : 10;

                            /* Bits[9:0], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to non-
                               posteds on channel 0
                            */
    UINT32 ch01_np_max : 10;

                            /* Bits[19:10], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to
                               completions on channel 1
                            */
    UINT32 ch02_np_max : 10;

                            /* Bits[29:20], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to non-
                               posteds on channel 2
                            */
    UINT32 ch03_np_max : 2;

                            /* Bits[31:30], Access Type=RW/P, default=0x00000000*/

                            /*
                               Maximum number of credits available to non-
                               posteds on channel 3
                            */

  } Bits;
  UINT32 Data;

} ITCHDRTOTCRDTS_NP0_N0_IIO_VTD_STRUCT;

/* ITCHDRTOTCRDTS_NP0_N1_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800dec)                                                      */
/*      SPRB0 (0x20800dec)                                                      */
/*      SPRHBM (0x20800dec)                                                     */
/*      SPRC0 (0x20800dec)                                                      */
/*      SPRMCC (0x20800dec)                                                     */
/*      SPRUCC (0x20800dec)                                                     */
/* Register default value on SPRA0: 0x0C0300C0                                  */
/* Register default value on SPRB0: 0x0C0300C0                                  */
/* Register default value on SPRHBM: 0x0C0300C0                                 */
/* Register default value on SPRC0: 0x0C0300C0                                  */
/* Register default value on SPRMCC: 0x0C0300C0                                 */
/* Register default value on SPRUCC: 0x0C0300C0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of non-posted credits that a given channel and flow class is allowed to utilize within the InboundTraffic Controller, for channels 0-5
*/


#define ITCHDRTOTCRDTS_NP0_N1_IIO_VTD_REG 0x11020DEC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch03_np_max : 8;

                            /* Bits[7:0], Access Type=RW/P, default=0x000000C0*/

                            /*
                               Maximum number of credits available to non-
                               posteds on channel 3
                            */
    UINT32 ch04_np_max : 10;

                            /* Bits[17:8], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to non-
                               posteds on channel 4
                            */
    UINT32 ch05_np_max : 10;

                            /* Bits[27:18], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to non-
                               posteds on channel 5
                            */
    UINT32 rsvd : 4;

                            /* Bits[31:28], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCHDRTOTCRDTS_NP0_N1_IIO_VTD_STRUCT;

/* ITCHDRTOTCRDTS_NP1_N0_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800df0)                                                      */
/*      SPRB0 (0x20800df0)                                                      */
/*      SPRHBM (0x20800df0)                                                     */
/*      SPRC0 (0x20800df0)                                                      */
/*      SPRMCC (0x20800df0)                                                     */
/*      SPRUCC (0x20800df0)                                                     */
/* Register default value on SPRA0: 0x000C0300                                  */
/* Register default value on SPRB0: 0x000C0300                                  */
/* Register default value on SPRHBM: 0x000C0300                                 */
/* Register default value on SPRC0: 0x000C0300                                  */
/* Register default value on SPRMCC: 0x000C0300                                 */
/* Register default value on SPRUCC: 0x000C0300                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of non-posted credits that a given channel and flow class is allowed to utilize within the Inbound Traffic Controller, for channels 6-7
*/


#define ITCHDRTOTCRDTS_NP1_N0_IIO_VTD_REG 0x11020DF0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch06_np_max : 10;

                            /* Bits[9:0], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to non-
                               posteds on channel 6
                            */
    UINT32 ch07_np_max : 10;

                            /* Bits[19:10], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to non-
                               posteds on channel 7
                            */
    UINT32 rsvd : 12;

                            /* Bits[31:20], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCHDRTOTCRDTS_NP1_N0_IIO_VTD_STRUCT;

/* ITCHDRTOTCRDTS_NP1_N1_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800df4)                                                      */
/*      SPRB0 (0x20800df4)                                                      */
/*      SPRHBM (0x20800df4)                                                     */
/*      SPRC0 (0x20800df4)                                                      */
/*      SPRMCC (0x20800df4)                                                     */
/*      SPRUCC (0x20800df4)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of non-posted credits that a given channel and flow class is allowed to utilize within the Inbound Traffic Controller, for channels 6-7
*/


#define ITCHDRTOTCRDTS_NP1_N1_IIO_VTD_REG 0x11020DF4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 32;

                            /* Bits[31:0], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCHDRTOTCRDTS_NP1_N1_IIO_VTD_STRUCT;

/* ITCHDRTOTCRDTS_C0_N0_IIO_VTD_REG supported on:                               */
/*      SPRA0 (0x20800df8)                                                      */
/*      SPRB0 (0x20800df8)                                                      */
/*      SPRHBM (0x20800df8)                                                     */
/*      SPRC0 (0x20800df8)                                                      */
/*      SPRMCC (0x20800df8)                                                     */
/*      SPRUCC (0x20800df8)                                                     */
/* Register default value on SPRA0: 0x300C0300                                  */
/* Register default value on SPRB0: 0x300C0300                                  */
/* Register default value on SPRHBM: 0x300C0300                                 */
/* Register default value on SPRC0: 0x300C0300                                  */
/* Register default value on SPRMCC: 0x300C0300                                 */
/* Register default value on SPRUCC: 0x300C0300                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of completion credits that a given channel and flow class is allowed to utilize within the InboundTraffic Controller, for channels 0-5
*/


#define ITCHDRTOTCRDTS_C0_N0_IIO_VTD_REG 0x11020DF8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch00_c_max : 10;

                            /* Bits[9:0], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to
                               completions on channel 0
                            */
    UINT32 ch01_c_max : 10;

                            /* Bits[19:10], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to
                               completions on channel 1
                            */
    UINT32 ch02_c_max : 10;

                            /* Bits[29:20], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to
                               completions on channel 2
                            */
    UINT32 ch03_c_max : 2;

                            /* Bits[31:30], Access Type=RW/P, default=0x00000000*/

                            /*
                               Maximum number of credits available to
                               completions on channel 3
                            */

  } Bits;
  UINT32 Data;

} ITCHDRTOTCRDTS_C0_N0_IIO_VTD_STRUCT;

/* ITCHDRTOTCRDTS_C0_N1_IIO_VTD_REG supported on:                               */
/*      SPRA0 (0x20800dfc)                                                      */
/*      SPRB0 (0x20800dfc)                                                      */
/*      SPRHBM (0x20800dfc)                                                     */
/*      SPRC0 (0x20800dfc)                                                      */
/*      SPRMCC (0x20800dfc)                                                     */
/*      SPRUCC (0x20800dfc)                                                     */
/* Register default value on SPRA0: 0x0C0300C0                                  */
/* Register default value on SPRB0: 0x0C0300C0                                  */
/* Register default value on SPRHBM: 0x0C0300C0                                 */
/* Register default value on SPRC0: 0x0C0300C0                                  */
/* Register default value on SPRMCC: 0x0C0300C0                                 */
/* Register default value on SPRUCC: 0x0C0300C0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of completion credits that a given channel and flow class is allowed to utilize within the InboundTraffic Controller, for channels 0-5
*/


#define ITCHDRTOTCRDTS_C0_N1_IIO_VTD_REG 0x11020DFC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch03_c_max : 8;

                            /* Bits[7:0], Access Type=RW/P, default=0x000000C0*/

                            /*
                               Maximum number of credits available to
                               completions on channel 3
                            */
    UINT32 ch04_c_max : 10;

                            /* Bits[17:8], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to
                               completions on channel 4
                            */
    UINT32 ch05_c_max : 10;

                            /* Bits[27:18], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to
                               completions on channel 5
                            */
    UINT32 rsvd : 4;

                            /* Bits[31:28], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCHDRTOTCRDTS_C0_N1_IIO_VTD_STRUCT;

/* MMIOH_RULE0_N0_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x20800e00)                                                      */
/*      SPRB0 (0x20800e00)                                                      */
/*      SPRHBM (0x20800e00)                                                     */
/*      SPRC0 (0x20800e00)                                                      */
/*      SPRMCC (0x20800e00)                                                     */
/*      SPRUCC (0x20800e00)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE0_N0_IIO_VTD_REG 0x11020E00

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable this MMIO high rule */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 target : 5;

                            /* Bits[7:3], Access Type=RW, default=0x00000000*/

                            /*
                               This is the Target Node ID field. If the MSB is
                               clear, the target is a remote socket and the
                               lower 3 bits indicate the target socket ID. If
                               the MSB is set, the target is the local socket
                               and the lower 4 bits indicate the target MS2IOSF
                               instance ID.
                            */
    UINT32 baseaddress : 22;

                            /* Bits[29:8], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 limitaddress : 2;

                            /* Bits[31:30], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE0_N0_IIO_VTD_STRUCT;

/* MMIOH_RULE0_N1_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x20800e04)                                                      */
/*      SPRB0 (0x20800e04)                                                      */
/*      SPRHBM (0x20800e04)                                                     */
/*      SPRC0 (0x20800e04)                                                      */
/*      SPRMCC (0x20800e04)                                                     */
/*      SPRUCC (0x20800e04)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE0_N1_IIO_VTD_REG 0x11020E04

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 limitaddress : 20;

                            /* Bits[19:0], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 rsvd : 8;

                            /* Bits[27:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 remotestackid : 4;

                            /* Bits[31:28], Access Type=RW, default=0x00000000*/

                            /*
                               Field capturing stackID in case this rule is
                               assigned to remote socket
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE0_N1_IIO_VTD_STRUCT;

/* MMIOH_RULE1_N0_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x20800e08)                                                      */
/*      SPRB0 (0x20800e08)                                                      */
/*      SPRHBM (0x20800e08)                                                     */
/*      SPRC0 (0x20800e08)                                                      */
/*      SPRMCC (0x20800e08)                                                     */
/*      SPRUCC (0x20800e08)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE1_N0_IIO_VTD_REG 0x11020E08

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable this MMIO high rule */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 target : 5;

                            /* Bits[7:3], Access Type=RW, default=0x00000000*/

                            /*
                               This is the Target Node ID field. If the MSB is
                               clear, the target is a remote socket and the
                               lower 3 bits indicate the target socket ID. If
                               the MSB is set, the target is the local socket
                               and the lower 4 bits indicate the target MS2IOSF
                               instance ID.
                            */
    UINT32 baseaddress : 22;

                            /* Bits[29:8], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 limitaddress : 2;

                            /* Bits[31:30], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE1_N0_IIO_VTD_STRUCT;

/* MMIOH_RULE1_N1_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x20800e0c)                                                      */
/*      SPRB0 (0x20800e0c)                                                      */
/*      SPRHBM (0x20800e0c)                                                     */
/*      SPRC0 (0x20800e0c)                                                      */
/*      SPRMCC (0x20800e0c)                                                     */
/*      SPRUCC (0x20800e0c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE1_N1_IIO_VTD_REG 0x11020E0C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 limitaddress : 20;

                            /* Bits[19:0], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 rsvd : 8;

                            /* Bits[27:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 remotestackid : 4;

                            /* Bits[31:28], Access Type=RW, default=0x00000000*/

                            /*
                               Field capturing stackID in case this rule is
                               assigned to remote socket
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE1_N1_IIO_VTD_STRUCT;

/* MMIOH_RULE2_N0_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x20800e10)                                                      */
/*      SPRB0 (0x20800e10)                                                      */
/*      SPRHBM (0x20800e10)                                                     */
/*      SPRC0 (0x20800e10)                                                      */
/*      SPRMCC (0x20800e10)                                                     */
/*      SPRUCC (0x20800e10)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE2_N0_IIO_VTD_REG 0x11020E10

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable this MMIO high rule */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 target : 5;

                            /* Bits[7:3], Access Type=RW, default=0x00000000*/

                            /*
                               This is the Target Node ID field. If the MSB is
                               clear, the target is a remote socket and the
                               lower 3 bits indicate the target socket ID. If
                               the MSB is set, the target is the local socket
                               and the lower 4 bits indicate the target MS2IOSF
                               instance ID.
                            */
    UINT32 baseaddress : 22;

                            /* Bits[29:8], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 limitaddress : 2;

                            /* Bits[31:30], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE2_N0_IIO_VTD_STRUCT;

/* MMIOH_RULE2_N1_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x20800e14)                                                      */
/*      SPRB0 (0x20800e14)                                                      */
/*      SPRHBM (0x20800e14)                                                     */
/*      SPRC0 (0x20800e14)                                                      */
/*      SPRMCC (0x20800e14)                                                     */
/*      SPRUCC (0x20800e14)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE2_N1_IIO_VTD_REG 0x11020E14

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 limitaddress : 20;

                            /* Bits[19:0], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 rsvd : 8;

                            /* Bits[27:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 remotestackid : 4;

                            /* Bits[31:28], Access Type=RW, default=0x00000000*/

                            /*
                               Field capturing stackID in case this rule is
                               assigned to remote socket
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE2_N1_IIO_VTD_STRUCT;

/* MMIOH_RULE3_N0_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x20800e18)                                                      */
/*      SPRB0 (0x20800e18)                                                      */
/*      SPRHBM (0x20800e18)                                                     */
/*      SPRC0 (0x20800e18)                                                      */
/*      SPRMCC (0x20800e18)                                                     */
/*      SPRUCC (0x20800e18)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE3_N0_IIO_VTD_REG 0x11020E18

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable this MMIO high rule */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 target : 5;

                            /* Bits[7:3], Access Type=RW, default=0x00000000*/

                            /*
                               This is the Target Node ID field. If the MSB is
                               clear, the target is a remote socket and the
                               lower 3 bits indicate the target socket ID. If
                               the MSB is set, the target is the local socket
                               and the lower 4 bits indicate the target MS2IOSF
                               instance ID.
                            */
    UINT32 baseaddress : 22;

                            /* Bits[29:8], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 limitaddress : 2;

                            /* Bits[31:30], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE3_N0_IIO_VTD_STRUCT;

/* MMIOH_RULE3_N1_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x20800e1c)                                                      */
/*      SPRB0 (0x20800e1c)                                                      */
/*      SPRHBM (0x20800e1c)                                                     */
/*      SPRC0 (0x20800e1c)                                                      */
/*      SPRMCC (0x20800e1c)                                                     */
/*      SPRUCC (0x20800e1c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE3_N1_IIO_VTD_REG 0x11020E1C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 limitaddress : 20;

                            /* Bits[19:0], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 rsvd : 8;

                            /* Bits[27:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 remotestackid : 4;

                            /* Bits[31:28], Access Type=RW, default=0x00000000*/

                            /*
                               Field capturing stackID in case this rule is
                               assigned to remote socket
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE3_N1_IIO_VTD_STRUCT;

/* MMIOH_RULE4_N0_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x20800e20)                                                      */
/*      SPRB0 (0x20800e20)                                                      */
/*      SPRHBM (0x20800e20)                                                     */
/*      SPRC0 (0x20800e20)                                                      */
/*      SPRMCC (0x20800e20)                                                     */
/*      SPRUCC (0x20800e20)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE4_N0_IIO_VTD_REG 0x11020E20

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable this MMIO high rule */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 target : 5;

                            /* Bits[7:3], Access Type=RW, default=0x00000000*/

                            /*
                               This is the Target Node ID field. If the MSB is
                               clear, the target is a remote socket and the
                               lower 3 bits indicate the target socket ID. If
                               the MSB is set, the target is the local socket
                               and the lower 4 bits indicate the target MS2IOSF
                               instance ID.
                            */
    UINT32 baseaddress : 22;

                            /* Bits[29:8], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 limitaddress : 2;

                            /* Bits[31:30], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE4_N0_IIO_VTD_STRUCT;

/* MMIOH_RULE4_N1_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x20800e24)                                                      */
/*      SPRB0 (0x20800e24)                                                      */
/*      SPRHBM (0x20800e24)                                                     */
/*      SPRC0 (0x20800e24)                                                      */
/*      SPRMCC (0x20800e24)                                                     */
/*      SPRUCC (0x20800e24)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE4_N1_IIO_VTD_REG 0x11020E24

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 limitaddress : 20;

                            /* Bits[19:0], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 rsvd : 8;

                            /* Bits[27:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 remotestackid : 4;

                            /* Bits[31:28], Access Type=RW, default=0x00000000*/

                            /*
                               Field capturing stackID in case this rule is
                               assigned to remote socket
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE4_N1_IIO_VTD_STRUCT;

/* MMIOH_RULE5_N0_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x20800e28)                                                      */
/*      SPRB0 (0x20800e28)                                                      */
/*      SPRHBM (0x20800e28)                                                     */
/*      SPRC0 (0x20800e28)                                                      */
/*      SPRMCC (0x20800e28)                                                     */
/*      SPRUCC (0x20800e28)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE5_N0_IIO_VTD_REG 0x11020E28

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable this MMIO high rule */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 target : 5;

                            /* Bits[7:3], Access Type=RW, default=0x00000000*/

                            /*
                               This is the Target Node ID field. If the MSB is
                               clear, the target is a remote socket and the
                               lower 3 bits indicate the target socket ID. If
                               the MSB is set, the target is the local socket
                               and the lower 4 bits indicate the target MS2IOSF
                               instance ID.
                            */
    UINT32 baseaddress : 22;

                            /* Bits[29:8], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 limitaddress : 2;

                            /* Bits[31:30], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE5_N0_IIO_VTD_STRUCT;

/* MMIOH_RULE5_N1_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x20800e2c)                                                      */
/*      SPRB0 (0x20800e2c)                                                      */
/*      SPRHBM (0x20800e2c)                                                     */
/*      SPRC0 (0x20800e2c)                                                      */
/*      SPRMCC (0x20800e2c)                                                     */
/*      SPRUCC (0x20800e2c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE5_N1_IIO_VTD_REG 0x11020E2C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 limitaddress : 20;

                            /* Bits[19:0], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 rsvd : 8;

                            /* Bits[27:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 remotestackid : 4;

                            /* Bits[31:28], Access Type=RW, default=0x00000000*/

                            /*
                               Field capturing stackID in case this rule is
                               assigned to remote socket
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE5_N1_IIO_VTD_STRUCT;

/* MMIOH_RULE6_N0_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x20800e30)                                                      */
/*      SPRB0 (0x20800e30)                                                      */
/*      SPRHBM (0x20800e30)                                                     */
/*      SPRC0 (0x20800e30)                                                      */
/*      SPRMCC (0x20800e30)                                                     */
/*      SPRUCC (0x20800e30)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE6_N0_IIO_VTD_REG 0x11020E30

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable this MMIO high rule */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 target : 5;

                            /* Bits[7:3], Access Type=RW, default=0x00000000*/

                            /*
                               This is the Target Node ID field. If the MSB is
                               clear, the target is a remote socket and the
                               lower 3 bits indicate the target socket ID. If
                               the MSB is set, the target is the local socket
                               and the lower 4 bits indicate the target MS2IOSF
                               instance ID.
                            */
    UINT32 baseaddress : 22;

                            /* Bits[29:8], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 limitaddress : 2;

                            /* Bits[31:30], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE6_N0_IIO_VTD_STRUCT;

/* MMIOH_RULE6_N1_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x20800e34)                                                      */
/*      SPRB0 (0x20800e34)                                                      */
/*      SPRHBM (0x20800e34)                                                     */
/*      SPRC0 (0x20800e34)                                                      */
/*      SPRMCC (0x20800e34)                                                     */
/*      SPRUCC (0x20800e34)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE6_N1_IIO_VTD_REG 0x11020E34

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 limitaddress : 20;

                            /* Bits[19:0], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 rsvd : 8;

                            /* Bits[27:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 remotestackid : 4;

                            /* Bits[31:28], Access Type=RW, default=0x00000000*/

                            /*
                               Field capturing stackID in case this rule is
                               assigned to remote socket
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE6_N1_IIO_VTD_STRUCT;

/* MMIOH_RULE7_N0_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x20800e38)                                                      */
/*      SPRB0 (0x20800e38)                                                      */
/*      SPRHBM (0x20800e38)                                                     */
/*      SPRC0 (0x20800e38)                                                      */
/*      SPRMCC (0x20800e38)                                                     */
/*      SPRUCC (0x20800e38)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE7_N0_IIO_VTD_REG 0x11020E38

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable this MMIO high rule */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 target : 5;

                            /* Bits[7:3], Access Type=RW, default=0x00000000*/

                            /*
                               This is the Target Node ID field. If the MSB is
                               clear, the target is a remote socket and the
                               lower 3 bits indicate the target socket ID. If
                               the MSB is set, the target is the local socket
                               and the lower 4 bits indicate the target MS2IOSF
                               instance ID.
                            */
    UINT32 baseaddress : 22;

                            /* Bits[29:8], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 limitaddress : 2;

                            /* Bits[31:30], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE7_N0_IIO_VTD_STRUCT;

/* MMIOH_RULE7_N1_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x20800e3c)                                                      */
/*      SPRB0 (0x20800e3c)                                                      */
/*      SPRHBM (0x20800e3c)                                                     */
/*      SPRC0 (0x20800e3c)                                                      */
/*      SPRMCC (0x20800e3c)                                                     */
/*      SPRUCC (0x20800e3c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE7_N1_IIO_VTD_REG 0x11020E3C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 limitaddress : 20;

                            /* Bits[19:0], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 rsvd : 8;

                            /* Bits[27:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 remotestackid : 4;

                            /* Bits[31:28], Access Type=RW, default=0x00000000*/

                            /*
                               Field capturing stackID in case this rule is
                               assigned to remote socket
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE7_N1_IIO_VTD_STRUCT;

/* MMIOH_RULE8_N0_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x20800e40)                                                      */
/*      SPRB0 (0x20800e40)                                                      */
/*      SPRHBM (0x20800e40)                                                     */
/*      SPRC0 (0x20800e40)                                                      */
/*      SPRMCC (0x20800e40)                                                     */
/*      SPRUCC (0x20800e40)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE8_N0_IIO_VTD_REG 0x11020E40

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable this MMIO high rule */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 target : 5;

                            /* Bits[7:3], Access Type=RW, default=0x00000000*/

                            /*
                               This is the Target Node ID field. If the MSB is
                               clear, the target is a remote socket and the
                               lower 3 bits indicate the target socket ID. If
                               the MSB is set, the target is the local socket
                               and the lower 4 bits indicate the target MS2IOSF
                               instance ID.
                            */
    UINT32 baseaddress : 22;

                            /* Bits[29:8], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 limitaddress : 2;

                            /* Bits[31:30], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE8_N0_IIO_VTD_STRUCT;

/* MMIOH_RULE8_N1_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x20800e44)                                                      */
/*      SPRB0 (0x20800e44)                                                      */
/*      SPRHBM (0x20800e44)                                                     */
/*      SPRC0 (0x20800e44)                                                      */
/*      SPRMCC (0x20800e44)                                                     */
/*      SPRUCC (0x20800e44)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE8_N1_IIO_VTD_REG 0x11020E44

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 limitaddress : 20;

                            /* Bits[19:0], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 rsvd : 8;

                            /* Bits[27:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 remotestackid : 4;

                            /* Bits[31:28], Access Type=RW, default=0x00000000*/

                            /*
                               Field capturing stackID in case this rule is
                               assigned to remote socket
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE8_N1_IIO_VTD_STRUCT;

/* MMIOH_RULE9_N0_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x20800e48)                                                      */
/*      SPRB0 (0x20800e48)                                                      */
/*      SPRHBM (0x20800e48)                                                     */
/*      SPRC0 (0x20800e48)                                                      */
/*      SPRMCC (0x20800e48)                                                     */
/*      SPRUCC (0x20800e48)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE9_N0_IIO_VTD_REG 0x11020E48

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable this MMIO high rule */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 target : 5;

                            /* Bits[7:3], Access Type=RW, default=0x00000000*/

                            /*
                               This is the Target Node ID field. If the MSB is
                               clear, the target is a remote socket and the
                               lower 3 bits indicate the target socket ID. If
                               the MSB is set, the target is the local socket
                               and the lower 4 bits indicate the target MS2IOSF
                               instance ID.
                            */
    UINT32 baseaddress : 22;

                            /* Bits[29:8], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 limitaddress : 2;

                            /* Bits[31:30], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE9_N0_IIO_VTD_STRUCT;

/* MMIOH_RULE9_N1_IIO_VTD_REG supported on:                                     */
/*      SPRA0 (0x20800e4c)                                                      */
/*      SPRB0 (0x20800e4c)                                                      */
/*      SPRHBM (0x20800e4c)                                                     */
/*      SPRC0 (0x20800e4c)                                                      */
/*      SPRMCC (0x20800e4c)                                                     */
/*      SPRUCC (0x20800e4c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE9_N1_IIO_VTD_REG 0x11020E4C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 limitaddress : 20;

                            /* Bits[19:0], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 rsvd : 8;

                            /* Bits[27:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 remotestackid : 4;

                            /* Bits[31:28], Access Type=RW, default=0x00000000*/

                            /*
                               Field capturing stackID in case this rule is
                               assigned to remote socket
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE9_N1_IIO_VTD_STRUCT;

/* MMIOH_RULE10_N0_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x20800e50)                                                      */
/*      SPRB0 (0x20800e50)                                                      */
/*      SPRHBM (0x20800e50)                                                     */
/*      SPRC0 (0x20800e50)                                                      */
/*      SPRMCC (0x20800e50)                                                     */
/*      SPRUCC (0x20800e50)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE10_N0_IIO_VTD_REG 0x11020E50

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable this MMIO high rule */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 target : 5;

                            /* Bits[7:3], Access Type=RW, default=0x00000000*/

                            /*
                               This is the Target Node ID field. If the MSB is
                               clear, the target is a remote socket and the
                               lower 3 bits indicate the target socket ID. If
                               the MSB is set, the target is the local socket
                               and the lower 4 bits indicate the target MS2IOSF
                               instance ID.
                            */
    UINT32 baseaddress : 22;

                            /* Bits[29:8], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 limitaddress : 2;

                            /* Bits[31:30], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE10_N0_IIO_VTD_STRUCT;

/* MMIOH_RULE10_N1_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x20800e54)                                                      */
/*      SPRB0 (0x20800e54)                                                      */
/*      SPRHBM (0x20800e54)                                                     */
/*      SPRC0 (0x20800e54)                                                      */
/*      SPRMCC (0x20800e54)                                                     */
/*      SPRUCC (0x20800e54)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE10_N1_IIO_VTD_REG 0x11020E54

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 limitaddress : 20;

                            /* Bits[19:0], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 rsvd : 8;

                            /* Bits[27:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 remotestackid : 4;

                            /* Bits[31:28], Access Type=RW, default=0x00000000*/

                            /*
                               Field capturing stackID in case this rule is
                               assigned to remote socket
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE10_N1_IIO_VTD_STRUCT;

/* MMIOH_RULE11_N0_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x20800e58)                                                      */
/*      SPRB0 (0x20800e58)                                                      */
/*      SPRHBM (0x20800e58)                                                     */
/*      SPRC0 (0x20800e58)                                                      */
/*      SPRMCC (0x20800e58)                                                     */
/*      SPRUCC (0x20800e58)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE11_N0_IIO_VTD_REG 0x11020E58

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable this MMIO high rule */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 target : 5;

                            /* Bits[7:3], Access Type=RW, default=0x00000000*/

                            /*
                               This is the Target Node ID field. If the MSB is
                               clear, the target is a remote socket and the
                               lower 3 bits indicate the target socket ID. If
                               the MSB is set, the target is the local socket
                               and the lower 4 bits indicate the target MS2IOSF
                               instance ID.
                            */
    UINT32 baseaddress : 22;

                            /* Bits[29:8], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 limitaddress : 2;

                            /* Bits[31:30], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE11_N0_IIO_VTD_STRUCT;

/* MMIOH_RULE11_N1_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x20800e5c)                                                      */
/*      SPRB0 (0x20800e5c)                                                      */
/*      SPRHBM (0x20800e5c)                                                     */
/*      SPRC0 (0x20800e5c)                                                      */
/*      SPRMCC (0x20800e5c)                                                     */
/*      SPRUCC (0x20800e5c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE11_N1_IIO_VTD_REG 0x11020E5C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 limitaddress : 20;

                            /* Bits[19:0], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 rsvd : 8;

                            /* Bits[27:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 remotestackid : 4;

                            /* Bits[31:28], Access Type=RW, default=0x00000000*/

                            /*
                               Field capturing stackID in case this rule is
                               assigned to remote socket
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE11_N1_IIO_VTD_STRUCT;

/* MMIOH_RULE12_N0_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x20800e60)                                                      */
/*      SPRB0 (0x20800e60)                                                      */
/*      SPRHBM (0x20800e60)                                                     */
/*      SPRC0 (0x20800e60)                                                      */
/*      SPRMCC (0x20800e60)                                                     */
/*      SPRUCC (0x20800e60)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE12_N0_IIO_VTD_REG 0x11020E60

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable this MMIO high rule */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 target : 5;

                            /* Bits[7:3], Access Type=RW, default=0x00000000*/

                            /*
                               This is the Target Node ID field. If the MSB is
                               clear, the target is a remote socket and the
                               lower 3 bits indicate the target socket ID. If
                               the MSB is set, the target is the local socket
                               and the lower 4 bits indicate the target MS2IOSF
                               instance ID.
                            */
    UINT32 baseaddress : 22;

                            /* Bits[29:8], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 limitaddress : 2;

                            /* Bits[31:30], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE12_N0_IIO_VTD_STRUCT;

/* MMIOH_RULE12_N1_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x20800e64)                                                      */
/*      SPRB0 (0x20800e64)                                                      */
/*      SPRHBM (0x20800e64)                                                     */
/*      SPRC0 (0x20800e64)                                                      */
/*      SPRMCC (0x20800e64)                                                     */
/*      SPRUCC (0x20800e64)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE12_N1_IIO_VTD_REG 0x11020E64

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 limitaddress : 20;

                            /* Bits[19:0], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 rsvd : 8;

                            /* Bits[27:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 remotestackid : 4;

                            /* Bits[31:28], Access Type=RW, default=0x00000000*/

                            /*
                               Field capturing stackID in case this rule is
                               assigned to remote socket
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE12_N1_IIO_VTD_STRUCT;

/* MMIOH_RULE13_N0_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x20800e68)                                                      */
/*      SPRB0 (0x20800e68)                                                      */
/*      SPRHBM (0x20800e68)                                                     */
/*      SPRC0 (0x20800e68)                                                      */
/*      SPRMCC (0x20800e68)                                                     */
/*      SPRUCC (0x20800e68)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE13_N0_IIO_VTD_REG 0x11020E68

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable this MMIO high rule */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 target : 5;

                            /* Bits[7:3], Access Type=RW, default=0x00000000*/

                            /*
                               This is the Target Node ID field. If the MSB is
                               clear, the target is a remote socket and the
                               lower 3 bits indicate the target socket ID. If
                               the MSB is set, the target is the local socket
                               and the lower 4 bits indicate the target MS2IOSF
                               instance ID.
                            */
    UINT32 baseaddress : 22;

                            /* Bits[29:8], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 limitaddress : 2;

                            /* Bits[31:30], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE13_N0_IIO_VTD_STRUCT;

/* MMIOH_RULE13_N1_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x20800e6c)                                                      */
/*      SPRB0 (0x20800e6c)                                                      */
/*      SPRHBM (0x20800e6c)                                                     */
/*      SPRC0 (0x20800e6c)                                                      */
/*      SPRMCC (0x20800e6c)                                                     */
/*      SPRUCC (0x20800e6c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE13_N1_IIO_VTD_REG 0x11020E6C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 limitaddress : 20;

                            /* Bits[19:0], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 rsvd : 8;

                            /* Bits[27:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 remotestackid : 4;

                            /* Bits[31:28], Access Type=RW, default=0x00000000*/

                            /*
                               Field capturing stackID in case this rule is
                               assigned to remote socket
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE13_N1_IIO_VTD_STRUCT;

/* MMIOH_RULE14_N0_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x20800e70)                                                      */
/*      SPRB0 (0x20800e70)                                                      */
/*      SPRHBM (0x20800e70)                                                     */
/*      SPRC0 (0x20800e70)                                                      */
/*      SPRMCC (0x20800e70)                                                     */
/*      SPRUCC (0x20800e70)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE14_N0_IIO_VTD_REG 0x11020E70

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable this MMIO high rule */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 target : 5;

                            /* Bits[7:3], Access Type=RW, default=0x00000000*/

                            /*
                               This is the Target Node ID field. If the MSB is
                               clear, the target is a remote socket and the
                               lower 3 bits indicate the target socket ID. If
                               the MSB is set, the target is the local socket
                               and the lower 4 bits indicate the target MS2IOSF
                               instance ID.
                            */
    UINT32 baseaddress : 22;

                            /* Bits[29:8], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 limitaddress : 2;

                            /* Bits[31:30], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE14_N0_IIO_VTD_STRUCT;

/* MMIOH_RULE14_N1_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x20800e74)                                                      */
/*      SPRB0 (0x20800e74)                                                      */
/*      SPRHBM (0x20800e74)                                                     */
/*      SPRC0 (0x20800e74)                                                      */
/*      SPRMCC (0x20800e74)                                                     */
/*      SPRUCC (0x20800e74)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE14_N1_IIO_VTD_REG 0x11020E74

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 limitaddress : 20;

                            /* Bits[19:0], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 rsvd : 8;

                            /* Bits[27:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 remotestackid : 4;

                            /* Bits[31:28], Access Type=RW, default=0x00000000*/

                            /*
                               Field capturing stackID in case this rule is
                               assigned to remote socket
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE14_N1_IIO_VTD_STRUCT;

/* MMIOH_RULE15_N0_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x20800e78)                                                      */
/*      SPRB0 (0x20800e78)                                                      */
/*      SPRHBM (0x20800e78)                                                     */
/*      SPRC0 (0x20800e78)                                                      */
/*      SPRMCC (0x20800e78)                                                     */
/*      SPRUCC (0x20800e78)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE15_N0_IIO_VTD_REG 0x11020E78

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable this MMIO high rule */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 target : 5;

                            /* Bits[7:3], Access Type=RW, default=0x00000000*/

                            /*
                               This is the Target Node ID field. If the MSB is
                               clear, the target is a remote socket and the
                               lower 3 bits indicate the target socket ID. If
                               the MSB is set, the target is the local socket
                               and the lower 4 bits indicate the target MS2IOSF
                               instance ID.
                            */
    UINT32 baseaddress : 22;

                            /* Bits[29:8], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 limitaddress : 2;

                            /* Bits[31:30], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE15_N0_IIO_VTD_STRUCT;

/* MMIOH_RULE15_N1_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x20800e7c)                                                      */
/*      SPRB0 (0x20800e7c)                                                      */
/*      SPRHBM (0x20800e7c)                                                     */
/*      SPRC0 (0x20800e7c)                                                      */
/*      SPRMCC (0x20800e7c)                                                     */
/*      SPRUCC (0x20800e7c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE15_N1_IIO_VTD_REG 0x11020E7C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 limitaddress : 20;

                            /* Bits[19:0], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 rsvd : 8;

                            /* Bits[27:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 remotestackid : 4;

                            /* Bits[31:28], Access Type=RW, default=0x00000000*/

                            /*
                               Field capturing stackID in case this rule is
                               assigned to remote socket
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE15_N1_IIO_VTD_STRUCT;

/* MMIOH_RULE16_N0_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x20800e80)                                                      */
/*      SPRB0 (0x20800e80)                                                      */
/*      SPRHBM (0x20800e80)                                                     */
/*      SPRC0 (0x20800e80)                                                      */
/*      SPRMCC (0x20800e80)                                                     */
/*      SPRUCC (0x20800e80)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE16_N0_IIO_VTD_REG 0x11020E80

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable this MMIO high rule */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 target : 5;

                            /* Bits[7:3], Access Type=RW, default=0x00000000*/

                            /*
                               This is the Target Node ID field. If the MSB is
                               clear, the target is a remote socket and the
                               lower 3 bits indicate the target socket ID. If
                               the MSB is set, the target is the local socket
                               and the lower 4 bits indicate the target MS2IOSF
                               instance ID.
                            */
    UINT32 baseaddress : 22;

                            /* Bits[29:8], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 limitaddress : 2;

                            /* Bits[31:30], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE16_N0_IIO_VTD_STRUCT;

/* MMIOH_RULE16_N1_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x20800e84)                                                      */
/*      SPRB0 (0x20800e84)                                                      */
/*      SPRHBM (0x20800e84)                                                     */
/*      SPRC0 (0x20800e84)                                                      */
/*      SPRMCC (0x20800e84)                                                     */
/*      SPRUCC (0x20800e84)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE16_N1_IIO_VTD_REG 0x11020E84

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 limitaddress : 20;

                            /* Bits[19:0], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 rsvd : 8;

                            /* Bits[27:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 remotestackid : 4;

                            /* Bits[31:28], Access Type=RW, default=0x00000000*/

                            /*
                               Field capturing stackID in case this rule is
                               assigned to remote socket
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE16_N1_IIO_VTD_STRUCT;

/* MMIOH_RULE17_N0_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x20800e88)                                                      */
/*      SPRB0 (0x20800e88)                                                      */
/*      SPRHBM (0x20800e88)                                                     */
/*      SPRC0 (0x20800e88)                                                      */
/*      SPRMCC (0x20800e88)                                                     */
/*      SPRUCC (0x20800e88)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE17_N0_IIO_VTD_REG 0x11020E88

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable this MMIO high rule */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 target : 5;

                            /* Bits[7:3], Access Type=RW, default=0x00000000*/

                            /*
                               This is the Target Node ID field. If the MSB is
                               clear, the target is a remote socket and the
                               lower 3 bits indicate the target socket ID. If
                               the MSB is set, the target is the local socket
                               and the lower 4 bits indicate the target MS2IOSF
                               instance ID.
                            */
    UINT32 baseaddress : 22;

                            /* Bits[29:8], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 limitaddress : 2;

                            /* Bits[31:30], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE17_N0_IIO_VTD_STRUCT;

/* MMIOH_RULE17_N1_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x20800e8c)                                                      */
/*      SPRB0 (0x20800e8c)                                                      */
/*      SPRHBM (0x20800e8c)                                                     */
/*      SPRC0 (0x20800e8c)                                                      */
/*      SPRMCC (0x20800e8c)                                                     */
/*      SPRUCC (0x20800e8c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE17_N1_IIO_VTD_REG 0x11020E8C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 limitaddress : 20;

                            /* Bits[19:0], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 rsvd : 8;

                            /* Bits[27:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 remotestackid : 4;

                            /* Bits[31:28], Access Type=RW, default=0x00000000*/

                            /*
                               Field capturing stackID in case this rule is
                               assigned to remote socket
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE17_N1_IIO_VTD_STRUCT;

/* M2IOSF_SCRATCHPAD_IIO_VTD_REG supported on:                                  */
/*      SPRA0 (0x20800e90)                                                      */
/*      SPRB0 (0x20800e90)                                                      */
/*      SPRHBM (0x20800e90)                                                     */
/*      SPRC0 (0x20800e90)                                                      */
/*      SPRMCC (0x20800e90)                                                     */
/*      SPRUCC (0x20800e90)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Read-write bits used for validation and debug.
*/


#define M2IOSF_SCRATCHPAD_IIO_VTD_REG 0x11020E90

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 scratchpad : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000000*/

                            /* Read-write bits used for validation and debug. */

  } Bits;
  UINT32 Data;

} M2IOSF_SCRATCHPAD_IIO_VTD_STRUCT;

/* MMIOH_RULE18_N0_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x20800e98)                                                      */
/*      SPRB0 (0x20800e98)                                                      */
/*      SPRHBM (0x20800e98)                                                     */
/*      SPRC0 (0x20800e98)                                                      */
/*      SPRMCC (0x20800e98)                                                     */
/*      SPRUCC (0x20800e98)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE18_N0_IIO_VTD_REG 0x11020E98

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable this MMIO high rule */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 target : 5;

                            /* Bits[7:3], Access Type=RW, default=0x00000000*/

                            /*
                               This is the Target Node ID field. If the MSB is
                               clear, the target is a remote socket and the
                               lower 3 bits indicate the target socket ID. If
                               the MSB is set, the target is the local socket
                               and the lower 4 bits indicate the target MS2IOSF
                               instance ID.
                            */
    UINT32 baseaddress : 22;

                            /* Bits[29:8], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 limitaddress : 2;

                            /* Bits[31:30], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE18_N0_IIO_VTD_STRUCT;

/* MMIOH_RULE18_N1_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x20800e9c)                                                      */
/*      SPRB0 (0x20800e9c)                                                      */
/*      SPRHBM (0x20800e9c)                                                     */
/*      SPRC0 (0x20800e9c)                                                      */
/*      SPRMCC (0x20800e9c)                                                     */
/*      SPRUCC (0x20800e9c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE18_N1_IIO_VTD_REG 0x11020E9C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 limitaddress : 20;

                            /* Bits[19:0], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 rsvd : 8;

                            /* Bits[27:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 remotestackid : 4;

                            /* Bits[31:28], Access Type=RW, default=0x00000000*/

                            /*
                               Field capturing stackID in case this rule is
                               assigned to remote socket
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE18_N1_IIO_VTD_STRUCT;

/* MMIOH_RULE19_N0_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x20800ea0)                                                      */
/*      SPRB0 (0x20800ea0)                                                      */
/*      SPRHBM (0x20800ea0)                                                     */
/*      SPRC0 (0x20800ea0)                                                      */
/*      SPRMCC (0x20800ea0)                                                     */
/*      SPRUCC (0x20800ea0)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE19_N0_IIO_VTD_REG 0x11020EA0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ruleenable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Enable this MMIO high rule */
    UINT32 serializerule : 2;

                            /* Bits[2:1], Access Type=RW, default=0x00000000*/

                            /*
                               Specifies the serialization rules for
                               ordering.[br] 00: Always Serialize[br] 01:
                               Serialize if the target of this transaction is
                               different from the target of the previous
                               transaction. MS2IOSF detects that the target has
                               changed based on Stack ID (in case of local P2P)
                               or Node ID (in case of remote P2P)[br] 10:
                               Serialize based on address match (address
                               crosses a granularity boundary) -
                               Recommended[br] 11: Serialize if hit different
                               rule or interleave
                            */
    UINT32 target : 5;

                            /* Bits[7:3], Access Type=RW, default=0x00000000*/

                            /*
                               This is the Target Node ID field. If the MSB is
                               clear, the target is a remote socket and the
                               lower 3 bits indicate the target socket ID. If
                               the MSB is set, the target is the local socket
                               and the lower 4 bits indicate the target MS2IOSF
                               instance ID.
                            */
    UINT32 baseaddress : 22;

                            /* Bits[29:8], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               base address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 limitaddress : 2;

                            /* Bits[31:30], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE19_N0_IIO_VTD_STRUCT;

/* MMIOH_RULE19_N1_IIO_VTD_REG supported on:                                    */
/*      SPRA0 (0x20800ea4)                                                      */
/*      SPRB0 (0x20800ea4)                                                      */
/*      SPRHBM (0x20800ea4)                                                     */
/*      SPRC0 (0x20800ea4)                                                      */
/*      SPRMCC (0x20800ea4)                                                     */
/*      SPRUCC (0x20800ea4)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Configures the address range in MMIO high space assigned to a specific local MS2IOSF instance, or a remote socket's MS2IOSFs.
*/


#define MMIOH_RULE19_N1_IIO_VTD_REG 0x11020EA4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 limitaddress : 20;

                            /* Bits[19:0], Access Type=RW, default=0x00000000*/

                            /*
                               This corresponds to Addr[51:30] of the MMIO rule
                               limit address. Both base and limit must match to
                               declare a match to this MMIO rule. The
                               granularity of MMIO rule is 1GB.
                            */
    UINT32 rsvd : 8;

                            /* Bits[27:20], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 remotestackid : 4;

                            /* Bits[31:28], Access Type=RW, default=0x00000000*/

                            /*
                               Field capturing stackID in case this rule is
                               assigned to remote socket
                            */

  } Bits;
  UINT32 Data;

} MMIOH_RULE19_N1_IIO_VTD_STRUCT;

/* ITCMINHDRTOTCRDTS0_N0_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800f30)                                                      */
/*      SPRB0 (0x20800f30)                                                      */
/*      SPRHBM (0x20800f30)                                                     */
/*      SPRC0 (0x20800f30)                                                      */
/*      SPRMCC (0x20800f30)                                                     */
/*      SPRUCC (0x20800f30)                                                     */
/* Register default value on SPRA0: 0x44444444                                  */
/* Register default value on SPRB0: 0x44444444                                  */
/* Register default value on SPRHBM: 0x44444444                                 */
/* Register default value on SPRC0: 0x44444444                                  */
/* Register default value on SPRMCC: 0x44444444                                 */
/* Register default value on SPRUCC: 0x44444444                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the low watermark for the number of credits that a given channel and flow class is guaranteed to have available at all times within the InboundTraffic Controller. [br]
*/


#define ITCMINHDRTOTCRDTS0_N0_IIO_VTD_REG 0x11020F30

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch00_p_min : 4;

                            /* Bits[3:0], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to posted
                               requests on channel 0
                            */
    UINT32 ch00_np_min : 4;

                            /* Bits[7:4], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to non-
                               posted requests on channel 0
                            */
    UINT32 ch00_c_min : 4;

                            /* Bits[11:8], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to posted
                               requests on channel 0
                            */
    UINT32 ch01_p_min : 4;

                            /* Bits[15:12], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to posted
                               requests on channel 1
                            */
    UINT32 ch01_np_min : 4;

                            /* Bits[19:16], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to posted
                               requests on channel 1. Encoding function:- Value
                               in min CSR Number of credits allocated 0 0
                               (channel disabled) 1 1 2 2 3 3 4 Floor(MIN/4) 5
                               Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN 5
                               Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN
                            */
    UINT32 ch01_c_min : 4;

                            /* Bits[23:20], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to
                               completion requests on channel 1. Encoding
                               function:- Value in min CSR Number of credits
                               allocated 0 0 (channel disabled) 1 1 2 2 3 3 4
                               Floor(MIN/4) 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7
                               MIN 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN
                            */
    UINT32 ch02_p_min : 4;

                            /* Bits[27:24], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to
                               completion requests on channel 1. Encoding
                               function:- Value in min CSR Number of credits
                               allocated 0 0 (channel disabled) 1 1 2 2 3 3 4
                               Floor(MIN/4) 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7
                               MIN 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN
                            */
    UINT32 ch02_np_min : 4;

                            /* Bits[31:28], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to non-
                               posted requests on channel 1. Encoding
                               function:- Value in min CSR Number of credits
                               allocated 0 0 (channel disabled) 1 1 2 2 3 3 4
                               Floor(MIN/4) 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7
                               MIN 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN
                            */

  } Bits;
  UINT32 Data;

} ITCMINHDRTOTCRDTS0_N0_IIO_VTD_STRUCT;

/* ITCMINHDRTOTCRDTS0_N1_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800f34)                                                      */
/*      SPRB0 (0x20800f34)                                                      */
/*      SPRHBM (0x20800f34)                                                     */
/*      SPRC0 (0x20800f34)                                                      */
/*      SPRMCC (0x20800f34)                                                     */
/*      SPRUCC (0x20800f34)                                                     */
/* Register default value on SPRA0: 0x04444444                                  */
/* Register default value on SPRB0: 0x04444444                                  */
/* Register default value on SPRHBM: 0x04444444                                 */
/* Register default value on SPRC0: 0x04444444                                  */
/* Register default value on SPRMCC: 0x04444444                                 */
/* Register default value on SPRUCC: 0x04444444                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the low watermark for the number of credits that a given channel and flow class is guaranteed to have available at all times within the InboundTraffic Controller. [br]
*/


#define ITCMINHDRTOTCRDTS0_N1_IIO_VTD_REG 0x11020F34

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch02_c_min : 4;

                            /* Bits[3:0], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to
                               completion requests on channel 2. Encoding
                               function:- Value in min CSR Number of credits
                               allocated 0 0 (channel disabled) 1 1 2 2 3 3 4
                               Floor(MIN/4) 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7
                               MIN 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN
                            */
    UINT32 ch03_p_min : 4;

                            /* Bits[7:4], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to posted
                               requests on channel 3 Encoding function:- Value
                               in min CSR Number of credits allocated 0 0
                               (channel disabled) 1 1 2 2 3 3 4 Floor(MIN/4) 5
                               Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN 5
                               Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN
                            */
    UINT32 ch03_np_min : 4;

                            /* Bits[11:8], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to
                               completion requests on channel 3. Encoding
                               function:- Value in min CSR Number of credits
                               allocated 0 0 (channel disabled) 1 1 2 2 3 3 4
                               Floor(MIN/4) 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7
                               MIN 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN
                            */
    UINT32 ch03_c_min : 4;

                            /* Bits[15:12], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to
                               completion requests on channel 1. Encoding
                               function:- Value in min CSR Number of credits
                               allocated 0 0 (channel disabled) 1 1 2 2 3 3 4
                               Floor(MIN/4) 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7
                               MIN 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN
                            */
    UINT32 ch04_p_min : 4;

                            /* Bits[19:16], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to posted
                               requests on channel 4 Encoding function:- Value
                               in min CSR Number of credits allocated 0 0
                               (channel disabled) 1 1 2 2 3 3 4 Floor(MIN/4) 5
                               Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN 5
                               Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN
                            */
    UINT32 ch04_np_min : 4;

                            /* Bits[23:20], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to non-
                               posted requests on channel 4. Encoding
                               function:- Value in min CSR Number of credits
                               allocated 0 0 (channel disabled) 1 1 2 2 3 3 4
                               Floor(MIN/4) 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7
                               MIN 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN
                            */
    UINT32 ch04_c_min : 4;

                            /* Bits[27:24], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to
                               completion requests on channel 1. Encoding
                               function:- Value in min CSR Number of credits
                               allocated 0 0 (channel disabled) 1 1 2 2 3 3 4
                               Floor(MIN/4) 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7
                               MIN 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN
                            */
    UINT32 rsvd : 4;

                            /* Bits[31:28], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCMINHDRTOTCRDTS0_N1_IIO_VTD_STRUCT;

/* ITCMINHDRTOTCRDTS1_N0_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800f38)                                                      */
/*      SPRB0 (0x20800f38)                                                      */
/*      SPRHBM (0x20800f38)                                                     */
/*      SPRC0 (0x20800f38)                                                      */
/*      SPRMCC (0x20800f38)                                                     */
/*      SPRUCC (0x20800f38)                                                     */
/* Register default value on SPRA0: 0x44444444                                  */
/* Register default value on SPRB0: 0x44444444                                  */
/* Register default value on SPRHBM: 0x44444444                                 */
/* Register default value on SPRC0: 0x44444444                                  */
/* Register default value on SPRMCC: 0x44444444                                 */
/* Register default value on SPRUCC: 0x44444444                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the low watermark for the number of credits that a given channel and flow class is guaranteed to have available at all times within the InboundTraffic Controller. [br]
*/


#define ITCMINHDRTOTCRDTS1_N0_IIO_VTD_REG 0x11020F38

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch05_p_min : 4;

                            /* Bits[3:0], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to
                               completion requests on channel 9. Encoding
                               function:- Value in min CSR Number of credits
                               allocated 0 0 (channel disabled) 1 1 2 2 3 3 4
                               Floor(MIN/4) 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7
                               MIN 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN
                            */
    UINT32 ch05_np_min : 4;

                            /* Bits[7:4], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to non-
                               posted requests on channel 9. Encoding
                               function:- Value in min CSR Number of credits
                               allocated 0 0 (channel disabled) 1 1 2 2 3 3 4
                               Floor(MIN/4) 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7
                               MIN 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN
                            */
    UINT32 ch05_c_min : 4;

                            /* Bits[11:8], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to
                               completion requests on channel 9 Encoding
                               function:- Value in min CSR Number of credits
                               allocated 0 0 (channel disabled) 1 1 2 2 3 3 4
                               Floor(MIN/4) 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7
                               MIN 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN
                            */
    UINT32 ch06_p_min : 4;

                            /* Bits[15:12], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to posted
                               requests on channel 10 Encoding function:- Value
                               in min CSR Number of credits allocated 0 0
                               (channel disabled) 1 1 2 2 3 3 4 Floor(MIN/4) 5
                               Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN 5
                               Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN
                            */
    UINT32 ch06_np_min : 4;

                            /* Bits[19:16], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to
                               completion requests on channel 10. Encoding
                               function:- Value in min CSR Number of credits
                               allocated 0 0 (channel disabled) 1 1 2 2 3 3 4
                               Floor(MIN/4) 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7
                               MIN 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN
                            */
    UINT32 ch06_c_min : 4;

                            /* Bits[23:20], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to
                               completion requests on channel 10 Encoding
                               function:- Value in min CSR Number of credits
                               allocated 0 0 (channel disabled) 1 1 2 2 3 3 4
                               Floor(MIN/4) 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7
                               MIN 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN
                            */
    UINT32 ch07_p_min : 4;

                            /* Bits[27:24], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to posted
                               requests on channel 7
                            */
    UINT32 ch07_np_min : 4;

                            /* Bits[31:28], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to non-
                               posted requests on channel 7
                            */

  } Bits;
  UINT32 Data;

} ITCMINHDRTOTCRDTS1_N0_IIO_VTD_STRUCT;

/* ITCMINHDRTOTCRDTS1_N1_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800f3c)                                                      */
/*      SPRB0 (0x20800f3c)                                                      */
/*      SPRHBM (0x20800f3c)                                                     */
/*      SPRC0 (0x20800f3c)                                                      */
/*      SPRMCC (0x20800f3c)                                                     */
/*      SPRUCC (0x20800f3c)                                                     */
/* Register default value on SPRA0: 0x00000004                                  */
/* Register default value on SPRB0: 0x00000004                                  */
/* Register default value on SPRHBM: 0x00000004                                 */
/* Register default value on SPRC0: 0x00000004                                  */
/* Register default value on SPRMCC: 0x00000004                                 */
/* Register default value on SPRUCC: 0x00000004                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the low watermark for the number of credits that a given channel and flow class is guaranteed to have available at all times within the InboundTraffic Controller. [br]
*/


#define ITCMINHDRTOTCRDTS1_N1_IIO_VTD_REG 0x11020F3C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch07_c_min : 4;

                            /* Bits[3:0], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to posted
                               requests on channel 0
                            */
    UINT32 rsvd : 28;

                            /* Bits[31:4], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCMINHDRTOTCRDTS1_N1_IIO_VTD_STRUCT;

/* ITCMINDATTOTCRDTS0_N0_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800f40)                                                      */
/*      SPRB0 (0x20800f40)                                                      */
/*      SPRHBM (0x20800f40)                                                     */
/*      SPRC0 (0x20800f40)                                                      */
/*      SPRMCC (0x20800f40)                                                     */
/*      SPRUCC (0x20800f40)                                                     */
/* Register default value on SPRA0: 0x08441088                                  */
/* Register default value on SPRB0: 0x48449089                                  */
/* Register default value on SPRHBM: 0x48449089                                 */
/* Register default value on SPRC0: 0x48449089                                  */
/* Register default value on SPRMCC: 0x48449089                                 */
/* Register default value on SPRUCC: 0x48449089                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the low watermark for the number of credits that a given channel and flow class is guaranteed to have available at all times within the InboundTraffic Controller. [br]
*/


#define ITCMINDATTOTCRDTS0_N0_IIO_VTD_REG 0x11020F40

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch00_p_min : 5;

                            /* Bits[4:0], Access Type=RW/P, default=0x00000008*/

                            /*
                               Minimum number of credits available to posted
                               requests on channel 0
                            */
    UINT32 ch00_np_min : 5;

                            /* Bits[9:5], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to non-
                               posted requests on channel 0
                            */
    UINT32 ch00_c_min : 5;

                            /* Bits[14:10], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to posted
                               requests on channel 0
                            */
    UINT32 ch01_p_min : 5;

                            /* Bits[19:15], Access Type=RW/P, default=0x00000008*/

                            /*
                               Minimum number of credits available to posted
                               requests on channel 1
                            */
    UINT32 ch01_np_min : 5;

                            /* Bits[24:20], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to posted
                               requests on channel 1. Encoding function:- Value
                               in min CSR Number of credits allocated 0 0
                               (channel disabled) 1 1 2 2 3 3 4 Floor(MIN/4) 5
                               Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN 5
                               Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN
                            */
    UINT32 ch01_c_min : 5;

                            /* Bits[29:25], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to
                               completion requests on channel 1. Encoding
                               function:- Value in min CSR Number of credits
                               allocated 0 0 (channel disabled) 1 1 2 2 3 3 4
                               Floor(MIN/4) 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7
                               MIN 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN
                            */
    UINT32 ch02_p_min : 2;

                            /* Bits[31:30], Access Type=RW/P, default=0x00000000*/

                            /*
                               Minimum number of credits available to
                               completion requests on channel 1. Encoding
                               function:- Value in min CSR Number of credits
                               allocated 0 0 (channel disabled) 1 1 2 2 3 3 4
                               Floor(MIN/4) 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7
                               MIN 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN
                            */

  } Bits;
  UINT32 Data;

} ITCMINDATTOTCRDTS0_N0_IIO_VTD_STRUCT;

/* ITCMINDATTOTCRDTS0_N1_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800f44)                                                      */
/*      SPRB0 (0x20800f44)                                                      */
/*      SPRHBM (0x20800f44)                                                     */
/*      SPRC0 (0x20800f44)                                                      */
/*      SPRMCC (0x20800f44)                                                     */
/*      SPRUCC (0x20800f44)                                                     */
/* Register default value on SPRA0: 0x02110422                                  */
/* Register default value on SPRB0: 0x02112422                                  */
/* Register default value on SPRHBM: 0x02112422                                 */
/* Register default value on SPRC0: 0x02112422                                  */
/* Register default value on SPRMCC: 0x02112422                                 */
/* Register default value on SPRUCC: 0x02112422                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the low watermark for the number of credits that a given channel and flow class is guaranteed to have available at all times within the InboundTraffic Controller. [br]
*/


#define ITCMINDATTOTCRDTS0_N1_IIO_VTD_REG 0x11020F44

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch02_p_min : 3;

                            /* Bits[2:0], Access Type=RW/P, default=0x00000002*/

                            /*
                               Minimum number of credits available to
                               completion requests on channel 1. Encoding
                               function:- Value in min CSR Number of credits
                               allocated 0 0 (channel disabled) 1 1 2 2 3 3 4
                               Floor(MIN/4) 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7
                               MIN 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN
                            */
    UINT32 ch02_np_min : 5;

                            /* Bits[7:3], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to non-
                               posted requests on channel 1. Encoding
                               function:- Value in min CSR Number of credits
                               allocated 0 0 (channel disabled) 1 1 2 2 3 3 4
                               Floor(MIN/4) 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7
                               MIN 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN
                            */
    UINT32 ch02_c_min : 5;

                            /* Bits[12:8], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to
                               completion requests on channel 2. Encoding
                               function:- Value in min CSR Number of credits
                               allocated 0 0 (channel disabled) 1 1 2 2 3 3 4
                               Floor(MIN/4) 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7
                               MIN 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN
                            */
    UINT32 ch03_p_min : 5;

                            /* Bits[17:13], Access Type=RW/P, default=0x00000008*/

                            /*
                               Minimum number of credits available to posted
                               requests on channel 3 Encoding function:- Value
                               in min CSR Number of credits allocated 0 0
                               (channel disabled) 1 1 2 2 3 3 4 Floor(MIN/4) 5
                               Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN 5
                               Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN
                            */
    UINT32 ch03_np_min : 5;

                            /* Bits[22:18], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to
                               completion requests on channel 3. Encoding
                               function:- Value in min CSR Number of credits
                               allocated 0 0 (channel disabled) 1 1 2 2 3 3 4
                               Floor(MIN/4) 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7
                               MIN 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN
                            */
    UINT32 ch03_c_min : 5;

                            /* Bits[27:23], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to
                               completion requests on channel 1. Encoding
                               function:- Value in min CSR Number of credits
                               allocated 0 0 (channel disabled) 1 1 2 2 3 3 4
                               Floor(MIN/4) 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7
                               MIN 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN
                            */
    UINT32 rsvd : 4;

                            /* Bits[31:28], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCMINDATTOTCRDTS0_N1_IIO_VTD_STRUCT;

/* ITCMINDATTOTCRDTS1_N0_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800f48)                                                      */
/*      SPRB0 (0x20800f48)                                                      */
/*      SPRHBM (0x20800f48)                                                     */
/*      SPRC0 (0x20800f48)                                                      */
/*      SPRMCC (0x20800f48)                                                     */
/*      SPRUCC (0x20800f48)                                                     */
/* Register default value on SPRA0: 0x08441088                                  */
/* Register default value on SPRB0: 0x48449089                                  */
/* Register default value on SPRHBM: 0x48449089                                 */
/* Register default value on SPRC0: 0x48449089                                  */
/* Register default value on SPRMCC: 0x48449089                                 */
/* Register default value on SPRUCC: 0x48449089                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the low watermark for the number of credits that a given channel and flow class is guaranteed to have available at all times within the InboundTraffic Controller. [br]
*/


#define ITCMINDATTOTCRDTS1_N0_IIO_VTD_REG 0x11020F48

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch04_p_min : 5;

                            /* Bits[4:0], Access Type=RW/P, default=0x00000008*/

                            /*
                               Minimum number of credits available to
                               completion requests on channel 9. Encoding
                               function:- Value in min CSR Number of credits
                               allocated 0 0 (channel disabled) 1 1 2 2 3 3 4
                               Floor(MIN/4) 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7
                               MIN 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN
                            */
    UINT32 ch04_np_min : 5;

                            /* Bits[9:5], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to non-
                               posted requests on channel 9. Encoding
                               function:- Value in min CSR Number of credits
                               allocated 0 0 (channel disabled) 1 1 2 2 3 3 4
                               Floor(MIN/4) 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7
                               MIN 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN
                            */
    UINT32 ch04_c_min : 5;

                            /* Bits[14:10], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to
                               completion requests on channel 9 Encoding
                               function:- Value in min CSR Number of credits
                               allocated 0 0 (channel disabled) 1 1 2 2 3 3 4
                               Floor(MIN/4) 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7
                               MIN 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN
                            */
    UINT32 ch05_p_min : 5;

                            /* Bits[19:15], Access Type=RW/P, default=0x00000008*/

                            /*
                               Minimum number of credits available to
                               completion requests on channel 9. Encoding
                               function:- Value in min CSR Number of credits
                               allocated 0 0 (channel disabled) 1 1 2 2 3 3 4
                               Floor(MIN/4) 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7
                               MIN 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN
                            */
    UINT32 ch05_np_min : 5;

                            /* Bits[24:20], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to non-
                               posted requests on channel 9. Encoding
                               function:- Value in min CSR Number of credits
                               allocated 0 0 (channel disabled) 1 1 2 2 3 3 4
                               Floor(MIN/4) 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7
                               MIN 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN
                            */
    UINT32 ch05_c_min : 5;

                            /* Bits[29:25], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to
                               completion requests on channel 9 Encoding
                               function:- Value in min CSR Number of credits
                               allocated 0 0 (channel disabled) 1 1 2 2 3 3 4
                               Floor(MIN/4) 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7
                               MIN 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN
                            */
    UINT32 ch06_p_min : 2;

                            /* Bits[31:30], Access Type=RW/P, default=0x00000000*/

                            /*
                               Minimum number of credits available to posted
                               requests on channel 10 Encoding function:- Value
                               in min CSR Number of credits allocated 0 0
                               (channel disabled) 1 1 2 2 3 3 4 Floor(MIN/4) 5
                               Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN 5
                               Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN
                            */

  } Bits;
  UINT32 Data;

} ITCMINDATTOTCRDTS1_N0_IIO_VTD_STRUCT;

/* ITCMINDATTOTCRDTS1_N1_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800f4c)                                                      */
/*      SPRB0 (0x20800f4c)                                                      */
/*      SPRHBM (0x20800f4c)                                                     */
/*      SPRC0 (0x20800f4c)                                                      */
/*      SPRMCC (0x20800f4c)                                                     */
/*      SPRUCC (0x20800f4c)                                                     */
/* Register default value on SPRA0: 0x02110422                                  */
/* Register default value on SPRB0: 0x02112422                                  */
/* Register default value on SPRHBM: 0x02112422                                 */
/* Register default value on SPRC0: 0x02112422                                  */
/* Register default value on SPRMCC: 0x02112422                                 */
/* Register default value on SPRUCC: 0x02112422                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the low watermark for the number of credits that a given channel and flow class is guaranteed to have available at all times within the InboundTraffic Controller. [br]
*/


#define ITCMINDATTOTCRDTS1_N1_IIO_VTD_REG 0x11020F4C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch06_p_min : 3;

                            /* Bits[2:0], Access Type=RW/P, default=0x00000002*/

                            /*
                               Minimum number of credits available to posted
                               requests on channel 10 Encoding function:- Value
                               in min CSR Number of credits allocated 0 0
                               (channel disabled) 1 1 2 2 3 3 4 Floor(MIN/4) 5
                               Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN 5
                               Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN
                            */
    UINT32 ch06_np_min : 5;

                            /* Bits[7:3], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to
                               completion requests on channel 10. Encoding
                               function:- Value in min CSR Number of credits
                               allocated 0 0 (channel disabled) 1 1 2 2 3 3 4
                               Floor(MIN/4) 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7
                               MIN 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN
                            */
    UINT32 ch06_c_min : 5;

                            /* Bits[12:8], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to
                               completion requests on channel 10 Encoding
                               function:- Value in min CSR Number of credits
                               allocated 0 0 (channel disabled) 1 1 2 2 3 3 4
                               Floor(MIN/4) 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7
                               MIN 5 Floor(MIN/2) 6 Floor(3*MIN/4) 7 MIN
                            */
    UINT32 ch07_p_min : 5;

                            /* Bits[17:13], Access Type=RW/P, default=0x00000008*/

                            /*
                               Minimum number of credits available to posted
                               requests on channel 7
                            */
    UINT32 ch07_np_min : 5;

                            /* Bits[22:18], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to non-
                               posted requests on channel 7
                            */
    UINT32 ch07_c_min : 5;

                            /* Bits[27:23], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to posted
                               requests on channel 0
                            */
    UINT32 rsvd : 4;

                            /* Bits[31:28], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCMINDATTOTCRDTS1_N1_IIO_VTD_STRUCT;

/* ITCMAXHDRTOTCRDTS0_N0_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800f50)                                                      */
/*      SPRB0 (0x20800f50)                                                      */
/*      SPRHBM (0x20800f50)                                                     */
/*      SPRC0 (0x20800f50)                                                      */
/*      SPRMCC (0x20800f50)                                                     */
/*      SPRUCC (0x20800f50)                                                     */
/* Register default value on SPRA0: 0x44444444                                  */
/* Register default value on SPRB0: 0x44444444                                  */
/* Register default value on SPRHBM: 0x44444444                                 */
/* Register default value on SPRC0: 0x44444444                                  */
/* Register default value on SPRMCC: 0x44444444                                 */
/* Register default value on SPRUCC: 0x44444444                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of credits that a given channel and flow class is guaranteed to have available at all times within the InboundTraffic Controller. [br]
*/


#define ITCMAXHDRTOTCRDTS0_N0_IIO_VTD_REG 0x11020F50

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch00_p_max : 4;

                            /* Bits[3:0], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to posted
                               requests on channel 0
                            */
    UINT32 ch00_np_max : 4;

                            /* Bits[7:4], Access Type=RW/P, default=0x00000004*/

                            /*
                               Max number of credits available to non-posted
                               requests on channel 0
                            */
    UINT32 ch00_c_max : 4;

                            /* Bits[11:8], Access Type=RW/P, default=0x00000004*/

                            /*
                               Max number of credits available to posted
                               requests on channel 0
                            */
    UINT32 ch01_p_max : 4;

                            /* Bits[15:12], Access Type=RW/P, default=0x00000004*/

                            /*
                               Max number of credits available to posted
                               requests on channel 1
                            */
    UINT32 ch01_np_max : 4;

                            /* Bits[19:16], Access Type=RW/P, default=0x00000004*/

                            /*
                               Max number of credits available to posted
                               requests on channel 1.
                            */
    UINT32 ch01_c_max : 4;

                            /* Bits[23:20], Access Type=RW/P, default=0x00000004*/

                            /*
                               Max number of credits available to completion
                               requests on channel 1.
                            */
    UINT32 ch02_p_max : 4;

                            /* Bits[27:24], Access Type=RW/P, default=0x00000004*/

                            /*
                               Max number of credits available to completion
                               requests on channel 1.
                            */
    UINT32 ch02_np_max : 4;

                            /* Bits[31:28], Access Type=RW/P, default=0x00000004*/

                            /*
                               Max number of credits available to non-posted
                               requests on channel 1.
                            */

  } Bits;
  UINT32 Data;

} ITCMAXHDRTOTCRDTS0_N0_IIO_VTD_STRUCT;

/* ITCMAXHDRTOTCRDTS0_N1_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800f54)                                                      */
/*      SPRB0 (0x20800f54)                                                      */
/*      SPRHBM (0x20800f54)                                                     */
/*      SPRC0 (0x20800f54)                                                      */
/*      SPRMCC (0x20800f54)                                                     */
/*      SPRUCC (0x20800f54)                                                     */
/* Register default value on SPRA0: 0x04444444                                  */
/* Register default value on SPRB0: 0x04444444                                  */
/* Register default value on SPRHBM: 0x04444444                                 */
/* Register default value on SPRC0: 0x04444444                                  */
/* Register default value on SPRMCC: 0x04444444                                 */
/* Register default value on SPRUCC: 0x04444444                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of credits that a given channel and flow class is guaranteed to have available at all times within the InboundTraffic Controller. [br]
*/


#define ITCMAXHDRTOTCRDTS0_N1_IIO_VTD_REG 0x11020F54

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch02_c_max : 4;

                            /* Bits[3:0], Access Type=RW/P, default=0x00000004*/

                            /*
                               Max number of credits available to completion
                               requests on channel 2.
                            */
    UINT32 ch03_p_max : 4;

                            /* Bits[7:4], Access Type=RW/P, default=0x00000004*/

                            /*
                               Max number of credits available to posted
                               requests on channel 3
                            */
    UINT32 ch03_np_max : 4;

                            /* Bits[11:8], Access Type=RW/P, default=0x00000004*/

                            /*
                               Max number of credits available to completion
                               requests on channel 3.
                            */
    UINT32 ch03_c_max : 4;

                            /* Bits[15:12], Access Type=RW/P, default=0x00000004*/

                            /*
                               Max number of credits available to completion
                               requests on channel 1.
                            */
    UINT32 ch04_p_max : 4;

                            /* Bits[19:16], Access Type=RW/P, default=0x00000004*/

                            /*
                               Max number of credits available to posted
                               requests on channel 4
                            */
    UINT32 ch04_np_max : 4;

                            /* Bits[23:20], Access Type=RW/P, default=0x00000004*/

                            /*
                               Max number of credits available to non-posted
                               requests on channel 4.
                            */
    UINT32 ch04_c_max : 4;

                            /* Bits[27:24], Access Type=RW/P, default=0x00000004*/

                            /*
                               Max number of credits available to completion
                               requests on channel 1.
                            */
    UINT32 rsvd : 4;

                            /* Bits[31:28], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCMAXHDRTOTCRDTS0_N1_IIO_VTD_STRUCT;

/* ITCMAXHDRTOTCRDTS1_N0_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800f58)                                                      */
/*      SPRB0 (0x20800f58)                                                      */
/*      SPRHBM (0x20800f58)                                                     */
/*      SPRC0 (0x20800f58)                                                      */
/*      SPRMCC (0x20800f58)                                                     */
/*      SPRUCC (0x20800f58)                                                     */
/* Register default value on SPRA0: 0x44444444                                  */
/* Register default value on SPRB0: 0x44444444                                  */
/* Register default value on SPRHBM: 0x44444444                                 */
/* Register default value on SPRC0: 0x44444444                                  */
/* Register default value on SPRMCC: 0x44444444                                 */
/* Register default value on SPRUCC: 0x44444444                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of credits that a given channel and flow class is guaranteed to have available at all times within the InboundTraffic Controller. [br]
*/


#define ITCMAXHDRTOTCRDTS1_N0_IIO_VTD_REG 0x11020F58

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch05_p_max : 4;

                            /* Bits[3:0], Access Type=RW/P, default=0x00000004*/

                            /*
                               Minimum number of credits available to posted
                               requests on channel 0
                            */
    UINT32 ch05_np_max : 4;

                            /* Bits[7:4], Access Type=RW/P, default=0x00000004*/

                            /*
                               Max number of credits available to non-posted
                               requests on channel 5
                            */
    UINT32 ch05_c_max : 4;

                            /* Bits[11:8], Access Type=RW/P, default=0x00000004*/

                            /*
                               Max number of credits available to completions
                               requests on channel 5
                            */
    UINT32 ch06_p_max : 4;

                            /* Bits[15:12], Access Type=RW/P, default=0x00000004*/

                            /*
                               Max number of credits available to posted
                               requests on channel 6
                            */
    UINT32 ch06_np_max : 4;

                            /* Bits[19:16], Access Type=RW/P, default=0x00000004*/

                            /*
                               Max number of credits available to posted
                               requests on channel 6.
                            */
    UINT32 ch06_c_max : 4;

                            /* Bits[23:20], Access Type=RW/P, default=0x00000004*/

                            /*
                               Max number of credits available to completion
                               requests on channel 6
                            */
    UINT32 ch07_p_max : 4;

                            /* Bits[27:24], Access Type=RW/P, default=0x00000004*/

                            /*
                               Max number of credits available to completion
                               requests on channel 7
                            */
    UINT32 ch07_np_max : 4;

                            /* Bits[31:28], Access Type=RW/P, default=0x00000004*/

                            /*
                               Max number of credits available to non-posted
                               requests on channel 7
                            */

  } Bits;
  UINT32 Data;

} ITCMAXHDRTOTCRDTS1_N0_IIO_VTD_STRUCT;

/* ITCMAXHDRTOTCRDTS1_N1_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800f5c)                                                      */
/*      SPRB0 (0x20800f5c)                                                      */
/*      SPRHBM (0x20800f5c)                                                     */
/*      SPRC0 (0x20800f5c)                                                      */
/*      SPRMCC (0x20800f5c)                                                     */
/*      SPRUCC (0x20800f5c)                                                     */
/* Register default value on SPRA0: 0x00000004                                  */
/* Register default value on SPRB0: 0x00000004                                  */
/* Register default value on SPRHBM: 0x00000004                                 */
/* Register default value on SPRC0: 0x00000004                                  */
/* Register default value on SPRMCC: 0x00000004                                 */
/* Register default value on SPRUCC: 0x00000004                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of credits that a given channel and flow class is guaranteed to have available at all times within the InboundTraffic Controller. [br]
*/


#define ITCMAXHDRTOTCRDTS1_N1_IIO_VTD_REG 0x11020F5C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch07_c_max : 4;

                            /* Bits[3:0], Access Type=RW/P, default=0x00000004*/

                            /*
                               Max number of credits available to completion
                               requests on channel 7
                            */
    UINT32 rsvd : 28;

                            /* Bits[31:4], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCMAXHDRTOTCRDTS1_N1_IIO_VTD_STRUCT;

/* ITCMAXDATTOTCRDTS0_N0_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800f60)                                                      */
/*      SPRB0 (0x20800f60)                                                      */
/*      SPRHBM (0x20800f60)                                                     */
/*      SPRC0 (0x20800f60)                                                      */
/*      SPRMCC (0x20800f60)                                                     */
/*      SPRUCC (0x20800f60)                                                     */
/* Register default value on SPRA0: 0x08441088                                  */
/* Register default value on SPRB0: 0x48449089                                  */
/* Register default value on SPRHBM: 0x48449089                                 */
/* Register default value on SPRC0: 0x48449089                                  */
/* Register default value on SPRMCC: 0x48449089                                 */
/* Register default value on SPRUCC: 0x48449089                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of credits that a given channel and flow class is guaranteed to have available at all times within the InboundTraffic Controller. [br]
*/


#define ITCMAXDATTOTCRDTS0_N0_IIO_VTD_REG 0x11020F60

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch00_p_max : 5;

                            /* Bits[4:0], Access Type=RW/P, default=0x00000008*/

                            /*
                               Minimum number of credits available to posted
                               requests on channel 0
                            */
    UINT32 ch00_np_max : 5;

                            /* Bits[9:5], Access Type=RW/P, default=0x00000004*/

                            /*
                               Max number of credits available to non-posted
                               requests on channel 0
                            */
    UINT32 ch00_c_max : 5;

                            /* Bits[14:10], Access Type=RW/P, default=0x00000004*/

                            /*
                               Max number of credits available to posted
                               requests on channel 0
                            */
    UINT32 ch01_p_max : 5;

                            /* Bits[19:15], Access Type=RW/P, default=0x00000008*/

                            /*
                               Max number of credits available to posted
                               requests on channel 1
                            */
    UINT32 ch01_np_max : 5;

                            /* Bits[24:20], Access Type=RW/P, default=0x00000004*/

                            /*
                               Max number of credits available to posted
                               requests on channel 1.
                            */
    UINT32 ch01_c_max : 5;

                            /* Bits[29:25], Access Type=RW/P, default=0x00000004*/

                            /*
                               Max number of credits available to completion
                               requests on channel 1.
                            */
    UINT32 ch02_p_max : 2;

                            /* Bits[31:30], Access Type=RW/P, default=0x00000000*/

                            /*
                               Max number of credits available to completion
                               requests on channel 1.
                            */

  } Bits;
  UINT32 Data;

} ITCMAXDATTOTCRDTS0_N0_IIO_VTD_STRUCT;

/* ITCMAXDATTOTCRDTS0_N1_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800f64)                                                      */
/*      SPRB0 (0x20800f64)                                                      */
/*      SPRHBM (0x20800f64)                                                     */
/*      SPRC0 (0x20800f64)                                                      */
/*      SPRMCC (0x20800f64)                                                     */
/*      SPRUCC (0x20800f64)                                                     */
/* Register default value on SPRA0: 0x02110422                                  */
/* Register default value on SPRB0: 0x02112422                                  */
/* Register default value on SPRHBM: 0x02112422                                 */
/* Register default value on SPRC0: 0x02112422                                  */
/* Register default value on SPRMCC: 0x02112422                                 */
/* Register default value on SPRUCC: 0x02112422                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of credits that a given channel and flow class is guaranteed to have available at all times within the InboundTraffic Controller. [br]
*/


#define ITCMAXDATTOTCRDTS0_N1_IIO_VTD_REG 0x11020F64

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch02_p_max : 3;

                            /* Bits[2:0], Access Type=RW/P, default=0x00000002*/

                            /*
                               Max number of credits available to completion
                               requests on channel 1.
                            */
    UINT32 ch02_np_max : 5;

                            /* Bits[7:3], Access Type=RW/P, default=0x00000004*/

                            /*
                               Max number of credits available to non-posted
                               requests on channel 1.
                            */
    UINT32 ch02_c_max : 5;

                            /* Bits[12:8], Access Type=RW/P, default=0x00000004*/

                            /*
                               Max number of credits available to completion
                               requests on channel 2.
                            */
    UINT32 ch03_p_max : 5;

                            /* Bits[17:13], Access Type=RW/P, default=0x00000008*/

                            /*
                               Max number of credits available to posted
                               requests on channel 3
                            */
    UINT32 ch03_np_max : 5;

                            /* Bits[22:18], Access Type=RW/P, default=0x00000004*/

                            /*
                               Max number of credits available to completion
                               requests on channel 3.
                            */
    UINT32 ch03_c_max : 5;

                            /* Bits[27:23], Access Type=RW/P, default=0x00000004*/

                            /*
                               Max number of credits available to completion
                               requests on channel 1.
                            */
    UINT32 rsvd : 4;

                            /* Bits[31:28], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCMAXDATTOTCRDTS0_N1_IIO_VTD_STRUCT;

/* ITCMAXDATTOTCRDTS1_N0_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800f68)                                                      */
/*      SPRB0 (0x20800f68)                                                      */
/*      SPRHBM (0x20800f68)                                                     */
/*      SPRC0 (0x20800f68)                                                      */
/*      SPRMCC (0x20800f68)                                                     */
/*      SPRUCC (0x20800f68)                                                     */
/* Register default value on SPRA0: 0x08441088                                  */
/* Register default value on SPRB0: 0x48449089                                  */
/* Register default value on SPRHBM: 0x48449089                                 */
/* Register default value on SPRC0: 0x48449089                                  */
/* Register default value on SPRMCC: 0x48449089                                 */
/* Register default value on SPRUCC: 0x48449089                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of credits that a given channel and flow class is guaranteed to have available at all times within the InboundTraffic Controller. [br]
*/


#define ITCMAXDATTOTCRDTS1_N0_IIO_VTD_REG 0x11020F68

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch04_p_max : 5;

                            /* Bits[4:0], Access Type=RW/P, default=0x00000008*/

                            /*
                               Minimum number of credits available to posted
                               requests on channel 0
                            */
    UINT32 ch04_np_max : 5;

                            /* Bits[9:5], Access Type=RW/P, default=0x00000004*/

                            /*
                               Max number of credits available to non-posted
                               requests on channel 5
                            */
    UINT32 ch04_c_max : 5;

                            /* Bits[14:10], Access Type=RW/P, default=0x00000004*/

                            /*
                               Max number of credits available to completions
                               requests on channel 5
                            */
    UINT32 ch05_p_max : 5;

                            /* Bits[19:15], Access Type=RW/P, default=0x00000008*/

                            /*
                               Minimum number of credits available to posted
                               requests on channel 0
                            */
    UINT32 ch05_np_max : 5;

                            /* Bits[24:20], Access Type=RW/P, default=0x00000004*/

                            /*
                               Max number of credits available to non-posted
                               requests on channel 5
                            */
    UINT32 ch05_c_max : 5;

                            /* Bits[29:25], Access Type=RW/P, default=0x00000004*/

                            /*
                               Max number of credits available to completions
                               requests on channel 5
                            */
    UINT32 ch06_p_max : 2;

                            /* Bits[31:30], Access Type=RW/P, default=0x00000000*/

                            /*
                               Max number of credits available to posted
                               requests on channel 6
                            */

  } Bits;
  UINT32 Data;

} ITCMAXDATTOTCRDTS1_N0_IIO_VTD_STRUCT;

/* ITCMAXDATTOTCRDTS1_N1_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800f6c)                                                      */
/*      SPRB0 (0x20800f6c)                                                      */
/*      SPRHBM (0x20800f6c)                                                     */
/*      SPRC0 (0x20800f6c)                                                      */
/*      SPRMCC (0x20800f6c)                                                     */
/*      SPRUCC (0x20800f6c)                                                     */
/* Register default value on SPRA0: 0x02110422                                  */
/* Register default value on SPRB0: 0x02112422                                  */
/* Register default value on SPRHBM: 0x02112422                                 */
/* Register default value on SPRC0: 0x02112422                                  */
/* Register default value on SPRMCC: 0x02112422                                 */
/* Register default value on SPRUCC: 0x02112422                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of credits that a given channel and flow class is guaranteed to have available at all times within the InboundTraffic Controller. [br]
*/


#define ITCMAXDATTOTCRDTS1_N1_IIO_VTD_REG 0x11020F6C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch06_p_max : 3;

                            /* Bits[2:0], Access Type=RW/P, default=0x00000002*/

                            /*
                               Max number of credits available to posted
                               requests on channel 6
                            */
    UINT32 ch06_np_max : 5;

                            /* Bits[7:3], Access Type=RW/P, default=0x00000004*/

                            /*
                               Max number of credits available to posted
                               requests on channel 6.
                            */
    UINT32 ch06_c_max : 5;

                            /* Bits[12:8], Access Type=RW/P, default=0x00000004*/

                            /*
                               Max number of credits available to completion
                               requests on channel 6
                            */
    UINT32 ch07_p_max : 5;

                            /* Bits[17:13], Access Type=RW/P, default=0x00000008*/

                            /*
                               Max number of credits available to completion
                               requests on channel 7
                            */
    UINT32 ch07_np_max : 5;

                            /* Bits[22:18], Access Type=RW/P, default=0x00000004*/

                            /*
                               Max number of credits available to non-posted
                               requests on channel 7
                            */
    UINT32 ch07_c_max : 5;

                            /* Bits[27:23], Access Type=RW/P, default=0x00000004*/

                            /*
                               Max number of credits available to completion
                               requests on channel 7
                            */
    UINT32 rsvd : 4;

                            /* Bits[31:28], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCMAXDATTOTCRDTS1_N1_IIO_VTD_STRUCT;

/* ITC_MISC_HDR_CRDT_CH_08_09_IIO_VTD_REG supported on:                         */
/*      SPRA0 (0x20800f80)                                                      */
/*      SPRB0 (0x20800f80)                                                      */
/*      SPRHBM (0x20800f80)                                                     */
/*      SPRC0 (0x20800f80)                                                      */
/*      SPRMCC (0x20800f80)                                                     */
/*      SPRUCC (0x20800f80)                                                     */
/* Register default value on SPRA0: 0x080008A2                                  */
/* Register default value on SPRB0: 0x080008A2                                  */
/* Register default value on SPRHBM: 0x080008A2                                 */
/* Register default value on SPRC0: 0x120004A2                                  */
/* Register default value on SPRMCC: 0x120004A2                                 */
/* Register default value on SPRUCC: 0x120004A2                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the number of ITC Hdr credits assingned to Misc channels 8 and 9
*/


#define ITC_MISC_HDR_CRDT_CH_08_09_IIO_VTD_REG 0x11020F80

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch08_c_credits : 5;

                            /* Bits[4:0], Access Type=RW/P, default=0x00000002*/

                            /*
                               Number of ITC completion header credits assigned
                               on Misc channel 8.
                            */
    UINT32 ch08_p_credits : 5;

                            /* Bits[9:5], Access Type=RW/P, default=0x00000005*/

                            /*
                               Number of ITC posted Hdr credits advertised on
                               Misc channel 8
                            */
    UINT32 ch08_np_credits : 5;

                            /* Bits[14:10], Access Type=RW/P, default=0x00000002*/

                            /*
                               Number of ITC non-posted hdr credits advertised
                               on Misc channel 8
                            */
    UINT32 ch09_c_credits : 5;

                            /* Bits[19:15], Access Type=RW/P, default=0x00000000*/

                            /*
                               Number of ITC completion Hdr credits advertised
                               on Misc channel 9
                            */
    UINT32 ch09_p_credits : 5;

                            /* Bits[24:20], Access Type=RW/P, default=0x00000000*/

                            /*
                               Number of ITC posted Hdr credits advertised on
                               Misc channel 9
                            */
    UINT32 ch09_np_credits : 5;

                            /* Bits[29:25], Access Type=RW/P, default=0x00000004*/

                            /*
                               Number of ITC non-posted Hdr credits advertised
                               on Misc channel 9
                            */
    UINT32 rsvd : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITC_MISC_HDR_CRDT_CH_08_09_IIO_VTD_STRUCT;

/* ITC_MISC_HDR_CRDT_CH_10_11_IIO_VTD_REG supported on:                         */
/*      SPRA0 (0x20800f88)                                                      */
/*      SPRB0 (0x20800f88)                                                      */
/*      SPRHBM (0x20800f88)                                                     */
/*      SPRC0 (0x20800f88)                                                      */
/*      SPRMCC (0x20800f88)                                                     */
/*      SPRUCC (0x20800f88)                                                     */
/* Register default value on SPRA0: 0x00000D00                                  */
/* Register default value on SPRB0: 0x00000D00                                  */
/* Register default value on SPRHBM: 0x00000D00                                 */
/* Register default value on SPRC0: 0x00000C61                                  */
/* Register default value on SPRMCC: 0x00000C61                                 */
/* Register default value on SPRUCC: 0x00000C61                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the number of ITC Hdr credits assingned to Misc channels 10 and 11
*/


#define ITC_MISC_HDR_CRDT_CH_10_11_IIO_VTD_REG 0x11020F88

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch10_c_credits : 5;

                            /* Bits[4:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               Number of ITC completion header credits assigned
                               on Misc channel 10.
                            */
    UINT32 ch10_p_credits : 5;

                            /* Bits[9:5], Access Type=RW/P, default=0x00000008*/

                            /*
                               Number of ITC posted Hdr credits advertised on
                               Misc channel 10
                            */
    UINT32 ch10_np_credits : 5;

                            /* Bits[14:10], Access Type=RW/P, default=0x00000003*/

                            /*
                               Number of ITC non-posted hdr credits advertised
                               on Misc channel 10
                            */
    UINT32 ch11_c_credits : 5;

                            /* Bits[19:15], Access Type=RW/P, default=0x00000000*/

                            /*
                               Number of ITC completion Hdr credits advertised
                               on Misc channel 11
                            */
    UINT32 ch11_p_credits : 5;

                            /* Bits[24:20], Access Type=RW/P, default=0x00000000*/

                            /*
                               Number of ITC posted Hdr credits advertised on
                               Misc channel 11
                            */
    UINT32 ch11_np_credits : 5;

                            /* Bits[29:25], Access Type=RW/P, default=0x00000000*/

                            /*
                               Number of ITC Non-posted Hdr credits advertised
                               on Misc channel 11
                            */
    UINT32 rsvd : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITC_MISC_HDR_CRDT_CH_10_11_IIO_VTD_STRUCT;

/* ITC_MISC_DAT_CRDT_CH_08_09_IIO_VTD_REG supported on:                         */
/*      SPRA0 (0x20800f90)                                                      */
/*      SPRB0 (0x20800f90)                                                      */
/*      SPRHBM (0x20800f90)                                                     */
/*      SPRC0 (0x20800f90)                                                      */
/*      SPRMCC (0x20800f90)                                                     */
/*      SPRUCC (0x20800f90)                                                     */
/* Register default value on SPRA0: 0x080008A2                                  */
/* Register default value on SPRB0: 0x080008A2                                  */
/* Register default value on SPRHBM: 0x080008A2                                 */
/* Register default value on SPRC0: 0x120004A2                                  */
/* Register default value on SPRMCC: 0x120004A2                                 */
/* Register default value on SPRUCC: 0x120004A2                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the number of ITC Hdr credits assingned to Misc channels 8 and 9
*/


#define ITC_MISC_DAT_CRDT_CH_08_09_IIO_VTD_REG 0x11020F90

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch08_c_credits : 5;

                            /* Bits[4:0], Access Type=RW/P, default=0x00000002*/

                            /*
                               Number of ITC completion header credits assigned
                               on Misc channel 8.
                            */
    UINT32 ch08_p_credits : 5;

                            /* Bits[9:5], Access Type=RW/P, default=0x00000005*/

                            /*
                               Number of ITC posted Hdr credits advertised on
                               Misc channel 8
                            */
    UINT32 ch08_np_credits : 5;

                            /* Bits[14:10], Access Type=RW/P, default=0x00000002*/

                            /*
                               Number of ITC non-posted hdr credits advertised
                               on Misc channel 8
                            */
    UINT32 ch09_c_credits : 5;

                            /* Bits[19:15], Access Type=RW/P, default=0x00000000*/

                            /*
                               Number of ITC completion Hdr credits advertised
                               on Misc channel 9
                            */
    UINT32 ch09_p_credits : 5;

                            /* Bits[24:20], Access Type=RW/P, default=0x00000000*/

                            /*
                               Number of ITC posted Hdr credits advertised on
                               Misc channel 9
                            */
    UINT32 ch09_np_credits : 5;

                            /* Bits[29:25], Access Type=RW/P, default=0x00000004*/

                            /*
                               Number of ITC non-posted Hdr credits advertised
                               on Misc channel 9
                            */
    UINT32 rsvd : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITC_MISC_DAT_CRDT_CH_08_09_IIO_VTD_STRUCT;

/* ITC_MISC_DAT_CRDT_CH_10_11_IIO_VTD_REG supported on:                         */
/*      SPRA0 (0x20800f98)                                                      */
/*      SPRB0 (0x20800f98)                                                      */
/*      SPRHBM (0x20800f98)                                                     */
/*      SPRC0 (0x20800f98)                                                      */
/*      SPRMCC (0x20800f98)                                                     */
/*      SPRUCC (0x20800f98)                                                     */
/* Register default value on SPRA0: 0x00000D00                                  */
/* Register default value on SPRB0: 0x00000D00                                  */
/* Register default value on SPRHBM: 0x00000D00                                 */
/* Register default value on SPRC0: 0x00000C61                                  */
/* Register default value on SPRMCC: 0x00000C61                                 */
/* Register default value on SPRUCC: 0x00000C61                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the number of ITC Hdr credits assingned to Misc channels 10 and 11
*/


#define ITC_MISC_DAT_CRDT_CH_10_11_IIO_VTD_REG 0x11020F98

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch10_c_credits : 5;

                            /* Bits[4:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               Number of ITC completion header credits assigned
                               on Misc channel 10.
                            */
    UINT32 ch10_p_credits : 5;

                            /* Bits[9:5], Access Type=RW/P, default=0x00000008*/

                            /*
                               Number of ITC posted Hdr credits advertised on
                               Misc channel 10
                            */
    UINT32 ch10_np_credits : 5;

                            /* Bits[14:10], Access Type=RW/P, default=0x00000003*/

                            /*
                               Number of ITC non-posted hdr credits advertised
                               on Misc channel 10
                            */
    UINT32 ch11_c_credits : 5;

                            /* Bits[19:15], Access Type=RW/P, default=0x00000000*/

                            /*
                               Number of ITC completion Hdr credits advertised
                               on Misc channel 11
                            */
    UINT32 ch11_p_credits : 5;

                            /* Bits[24:20], Access Type=RW/P, default=0x00000000*/

                            /*
                               Number of ITC posted Hdr credits advertised on
                               Misc channel 11
                            */
    UINT32 ch11_np_credits : 5;

                            /* Bits[29:25], Access Type=RW/P, default=0x00000000*/

                            /*
                               Number of ITC Non-posted Hdr credits advertised
                               on Misc channel 11
                            */
    UINT32 rsvd : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITC_MISC_DAT_CRDT_CH_10_11_IIO_VTD_STRUCT;

/* ITCDATTOTCRDTS_P1_N0_IIO_VTD_REG supported on:                               */
/*      SPRA0 (0x20800fa0)                                                      */
/*      SPRB0 (0x20800fa0)                                                      */
/*      SPRHBM (0x20800fa0)                                                     */
/*      SPRC0 (0x20800fa0)                                                      */
/*      SPRMCC (0x20800fa0)                                                     */
/*      SPRUCC (0x20800fa0)                                                     */
/* Register default value on SPRA0: 0x000C0300                                  */
/* Register default value on SPRB0: 0x000C0300                                  */
/* Register default value on SPRHBM: 0x000C0300                                 */
/* Register default value on SPRC0: 0x000C0300                                  */
/* Register default value on SPRMCC: 0x000C0300                                 */
/* Register default value on SPRUCC: 0x000C0300                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of completion credits that a given channel and flow class is allowed to utilize within the Inbound Traffic Controller, for channels 6-7
*/


#define ITCDATTOTCRDTS_P1_N0_IIO_VTD_REG 0x11020FA0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch06_p_max : 10;

                            /* Bits[9:0], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to posted on
                               channel 6
                            */
    UINT32 ch07_p_max : 10;

                            /* Bits[19:10], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to posteds
                               on channel 7
                            */
    UINT32 rsvd : 12;

                            /* Bits[31:20], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCDATTOTCRDTS_P1_N0_IIO_VTD_STRUCT;

/* ITCDATTOTCRDTS_P1_N1_IIO_VTD_REG supported on:                               */
/*      SPRA0 (0x20800fa4)                                                      */
/*      SPRB0 (0x20800fa4)                                                      */
/*      SPRHBM (0x20800fa4)                                                     */
/*      SPRC0 (0x20800fa4)                                                      */
/*      SPRMCC (0x20800fa4)                                                     */
/*      SPRUCC (0x20800fa4)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of completion credits that a given channel and flow class is allowed to utilize within the Inbound Traffic Controller, for channels 6-7
*/


#define ITCDATTOTCRDTS_P1_N1_IIO_VTD_REG 0x11020FA4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 32;

                            /* Bits[31:0], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCDATTOTCRDTS_P1_N1_IIO_VTD_STRUCT;

/* ITCDATTOTCRDTS_NP0_N0_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800fa8)                                                      */
/*      SPRB0 (0x20800fa8)                                                      */
/*      SPRHBM (0x20800fa8)                                                     */
/*      SPRC0 (0x20800fa8)                                                      */
/*      SPRMCC (0x20800fa8)                                                     */
/*      SPRUCC (0x20800fa8)                                                     */
/* Register default value on SPRA0: 0x300C0300                                  */
/* Register default value on SPRB0: 0x300C0300                                  */
/* Register default value on SPRHBM: 0x300C0300                                 */
/* Register default value on SPRC0: 0x300C0300                                  */
/* Register default value on SPRMCC: 0x300C0300                                 */
/* Register default value on SPRUCC: 0x300C0300                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of non-posted credits that a given channel and flow class is allowed to utilize within the InboundTraffic Controller, for channels 0-5
*/


#define ITCDATTOTCRDTS_NP0_N0_IIO_VTD_REG 0x11020FA8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch00_np_max : 10;

                            /* Bits[9:0], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to non-
                               posteds on channel 0
                            */
    UINT32 ch01_np_max : 10;

                            /* Bits[19:10], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to
                               completions on channel 1
                            */
    UINT32 ch02_np_max : 10;

                            /* Bits[29:20], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to non-
                               posteds on channel 2
                            */
    UINT32 ch03_np_max : 2;

                            /* Bits[31:30], Access Type=RW/P, default=0x00000000*/

                            /*
                               Maximum number of credits available to non-
                               posteds on channel 3
                            */

  } Bits;
  UINT32 Data;

} ITCDATTOTCRDTS_NP0_N0_IIO_VTD_STRUCT;

/* ITCDATTOTCRDTS_NP0_N1_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800fac)                                                      */
/*      SPRB0 (0x20800fac)                                                      */
/*      SPRHBM (0x20800fac)                                                     */
/*      SPRC0 (0x20800fac)                                                      */
/*      SPRMCC (0x20800fac)                                                     */
/*      SPRUCC (0x20800fac)                                                     */
/* Register default value on SPRA0: 0x0C0300C0                                  */
/* Register default value on SPRB0: 0x0C0300C0                                  */
/* Register default value on SPRHBM: 0x0C0300C0                                 */
/* Register default value on SPRC0: 0x0C0300C0                                  */
/* Register default value on SPRMCC: 0x0C0300C0                                 */
/* Register default value on SPRUCC: 0x0C0300C0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of non-posted credits that a given channel and flow class is allowed to utilize within the InboundTraffic Controller, for channels 0-5
*/


#define ITCDATTOTCRDTS_NP0_N1_IIO_VTD_REG 0x11020FAC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch03_np_max : 8;

                            /* Bits[7:0], Access Type=RW/P, default=0x000000C0*/

                            /*
                               Maximum number of credits available to non-
                               posteds on channel 3
                            */
    UINT32 ch04_np_max : 10;

                            /* Bits[17:8], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to non-
                               posteds on channel 4
                            */
    UINT32 ch05_np_max : 10;

                            /* Bits[27:18], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to non-
                               posteds on channel 5
                            */
    UINT32 rsvd : 4;

                            /* Bits[31:28], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCDATTOTCRDTS_NP0_N1_IIO_VTD_STRUCT;

/* ITCDATTOTCRDTS_NP1_N0_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800fb0)                                                      */
/*      SPRB0 (0x20800fb0)                                                      */
/*      SPRHBM (0x20800fb0)                                                     */
/*      SPRC0 (0x20800fb0)                                                      */
/*      SPRMCC (0x20800fb0)                                                     */
/*      SPRUCC (0x20800fb0)                                                     */
/* Register default value on SPRA0: 0x000C0300                                  */
/* Register default value on SPRB0: 0x000C0300                                  */
/* Register default value on SPRHBM: 0x000C0300                                 */
/* Register default value on SPRC0: 0x000C0300                                  */
/* Register default value on SPRMCC: 0x000C0300                                 */
/* Register default value on SPRUCC: 0x000C0300                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of non-posted credits that a given channel and flow class is allowed to utilize within the Inbound Traffic Controller, for channels 6-7
*/


#define ITCDATTOTCRDTS_NP1_N0_IIO_VTD_REG 0x11020FB0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch06_np_max : 10;

                            /* Bits[9:0], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to non-
                               posteds on channel 6
                            */
    UINT32 ch07_np_max : 10;

                            /* Bits[19:10], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to non-
                               posteds on channel 7
                            */
    UINT32 rsvd : 12;

                            /* Bits[31:20], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCDATTOTCRDTS_NP1_N0_IIO_VTD_STRUCT;

/* ITCDATTOTCRDTS_NP1_N1_IIO_VTD_REG supported on:                              */
/*      SPRA0 (0x20800fb4)                                                      */
/*      SPRB0 (0x20800fb4)                                                      */
/*      SPRHBM (0x20800fb4)                                                     */
/*      SPRC0 (0x20800fb4)                                                      */
/*      SPRMCC (0x20800fb4)                                                     */
/*      SPRUCC (0x20800fb4)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of non-posted credits that a given channel and flow class is allowed to utilize within the Inbound Traffic Controller, for channels 6-7
*/


#define ITCDATTOTCRDTS_NP1_N1_IIO_VTD_REG 0x11020FB4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 32;

                            /* Bits[31:0], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCDATTOTCRDTS_NP1_N1_IIO_VTD_STRUCT;

/* ITCDATTOTCRDTS_C0_N0_IIO_VTD_REG supported on:                               */
/*      SPRA0 (0x20800fb8)                                                      */
/*      SPRB0 (0x20800fb8)                                                      */
/*      SPRHBM (0x20800fb8)                                                     */
/*      SPRC0 (0x20800fb8)                                                      */
/*      SPRMCC (0x20800fb8)                                                     */
/*      SPRUCC (0x20800fb8)                                                     */
/* Register default value on SPRA0: 0x300C0300                                  */
/* Register default value on SPRB0: 0x300C0300                                  */
/* Register default value on SPRHBM: 0x300C0300                                 */
/* Register default value on SPRC0: 0x300C0300                                  */
/* Register default value on SPRMCC: 0x300C0300                                 */
/* Register default value on SPRUCC: 0x300C0300                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of completion credits that a given channel and flow class is allowed to utilize within the InboundTraffic Controller, for channels 0-5
*/


#define ITCDATTOTCRDTS_C0_N0_IIO_VTD_REG 0x11020FB8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch00_c_max : 10;

                            /* Bits[9:0], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to
                               completions on channel 0
                            */
    UINT32 ch01_c_max : 10;

                            /* Bits[19:10], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to
                               completions on channel 1
                            */
    UINT32 ch02_c_max : 10;

                            /* Bits[29:20], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to
                               completions on channel 2
                            */
    UINT32 ch03_c_max : 2;

                            /* Bits[31:30], Access Type=RW/P, default=0x00000000*/

                            /*
                               Maximum number of credits available to
                               completions on channel 3
                            */

  } Bits;
  UINT32 Data;

} ITCDATTOTCRDTS_C0_N0_IIO_VTD_STRUCT;

/* ITCDATTOTCRDTS_C0_N1_IIO_VTD_REG supported on:                               */
/*      SPRA0 (0x20800fbc)                                                      */
/*      SPRB0 (0x20800fbc)                                                      */
/*      SPRHBM (0x20800fbc)                                                     */
/*      SPRC0 (0x20800fbc)                                                      */
/*      SPRMCC (0x20800fbc)                                                     */
/*      SPRUCC (0x20800fbc)                                                     */
/* Register default value on SPRA0: 0x0C0300C0                                  */
/* Register default value on SPRB0: 0x0C0300C0                                  */
/* Register default value on SPRHBM: 0x0C0300C0                                 */
/* Register default value on SPRC0: 0x0C0300C0                                  */
/* Register default value on SPRMCC: 0x0C0300C0                                 */
/* Register default value on SPRUCC: 0x0C0300C0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of completion credits that a given channel and flow class is allowed to utilize within the InboundTraffic Controller, for channels 0-5
*/


#define ITCDATTOTCRDTS_C0_N1_IIO_VTD_REG 0x11020FBC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch03_c_max : 8;

                            /* Bits[7:0], Access Type=RW/P, default=0x000000C0*/

                            /*
                               Maximum number of credits available to
                               completions on channel 3
                            */
    UINT32 ch04_c_max : 10;

                            /* Bits[17:8], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to
                               completions on channel 4
                            */
    UINT32 ch05_c_max : 10;

                            /* Bits[27:18], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to
                               completions on channel 5
                            */
    UINT32 rsvd : 4;

                            /* Bits[31:28], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCDATTOTCRDTS_C0_N1_IIO_VTD_STRUCT;

/* ITCDATTOTCRDTS_C1_N0_IIO_VTD_REG supported on:                               */
/*      SPRA0 (0x20800fc0)                                                      */
/*      SPRB0 (0x20800fc0)                                                      */
/*      SPRHBM (0x20800fc0)                                                     */
/*      SPRC0 (0x20800fc0)                                                      */
/*      SPRMCC (0x20800fc0)                                                     */
/*      SPRUCC (0x20800fc0)                                                     */
/* Register default value on SPRA0: 0x000C0300                                  */
/* Register default value on SPRB0: 0x000C0300                                  */
/* Register default value on SPRHBM: 0x000C0300                                 */
/* Register default value on SPRC0: 0x000C0300                                  */
/* Register default value on SPRMCC: 0x000C0300                                 */
/* Register default value on SPRUCC: 0x000C0300                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of completion credits that a given channel and flow class is allowed to utilize within the Inbound Traffic Controller, for channels 6-7
*/


#define ITCDATTOTCRDTS_C1_N0_IIO_VTD_REG 0x11020FC0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ch06_c_max : 10;

                            /* Bits[9:0], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to
                               completions on channel 6
                            */
    UINT32 ch07_c_max : 10;

                            /* Bits[19:10], Access Type=RW/P, default=0x00000300*/

                            /*
                               Maximum number of credits available to
                               completions on channel 7
                            */
    UINT32 rsvd : 12;

                            /* Bits[31:20], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCDATTOTCRDTS_C1_N0_IIO_VTD_STRUCT;

/* ITCDATTOTCRDTS_C1_N1_IIO_VTD_REG supported on:                               */
/*      SPRA0 (0x20800fc4)                                                      */
/*      SPRB0 (0x20800fc4)                                                      */
/*      SPRHBM (0x20800fc4)                                                     */
/*      SPRC0 (0x20800fc4)                                                      */
/*      SPRMCC (0x20800fc4)                                                     */
/*      SPRUCC (0x20800fc4)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* This register configures the high watermark for the number of completion credits that a given channel and flow class is allowed to utilize within the Inbound Traffic Controller, for channels 6-7
*/


#define ITCDATTOTCRDTS_C1_N1_IIO_VTD_REG 0x11020FC4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 32;

                            /* Bits[31:0], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCDATTOTCRDTS_C1_N1_IIO_VTD_STRUCT;

/* ITCIOSF_HDR_CRDT_CTL_IIO_VTD_REG supported on:                               */
/*      SPRA0 (0x20800fc8)                                                      */
/*      SPRB0 (0x20800fc8)                                                      */
/*      SPRHBM (0x20800fc8)                                                     */
/*      SPRC0 (0x20800fc8)                                                      */
/*      SPRMCC (0x20800fc8)                                                     */
/*      SPRUCC (0x20800fc8)                                                     */
/* Register default value on SPRA0: 0x0C120056                                  */
/* Register default value on SPRB0: 0x0C120056                                  */
/* Register default value on SPRHBM: 0x0C120056                                 */
/* Register default value on SPRC0: 0x00120056                                  */
/* Register default value on SPRMCC: 0x00120056                                 */
/* Register default value on SPRUCC: 0x00120056                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Throttle credit returns to IOSF
*/


#define ITCIOSF_HDR_CRDT_CTL_IIO_VTD_REG 0x11020FC8

#if defined(SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 itc_throt_occ_knob : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000006*/

                            /*
                               Based on this knob, we start throtting credit
                               returns after a certain occupancy is reached.
                            */
    UINT32 itc_throt_dly_knob : 3;

                            /* Bits[5:3], Access Type=RW, default=0x00000002*/

                            /*
                               Based on this knob, we decide how many clock
                               cycles to throttle credit returns.
                            */
    UINT32 itc_throt_disable : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000001*/

                            /*
                               Disable Occupancy based ITC credit return
                               throttling.
                            */
    UINT32 itc_dis_c_borrow : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /* Disable borrowing for C pools */
    UINT32 itc_dis_np_borrow : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /* Disable borrowing for NP pools */
    UINT32 itc_dis_p_borrow : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* Disable borrowing for P pools */
    UINT32 itc_throt_visa_iitc : 4;

                            /* Bits[13:10], Access Type=RW, default=0x00000000*/

                            /* Visa select */
    UINT32 itc_hdr_rsvd_crdt : 9;

                            /* Bits[22:14], Access Type=RW, default=0x00000048*/

                            /* Define the number of reserved credits in ITC */
    UINT32 itc_dat_rsvd_crdt : 9;

                            /* Bits[31:23], Access Type=RW, default=0x00000018*/

                            /*
                               Define the number of reserved data credits in
                               ITC
                            */

  } Bits;
  UINT32 Data;

} ITCIOSF_HDR_CRDT_CTL_IIO_VTD_SPRA0_SPRB0_SPRHBM_STRUCT;
#endif /* (SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) */

#if defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 itc_throt_occ_knob : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000006*/

                            /*
                               Based on this knob, we start throtting credit
                               returns after a certain occupancy is reached.
                            */
    UINT32 itc_throt_dly_knob : 3;

                            /* Bits[5:3], Access Type=RW, default=0x00000002*/

                            /*
                               Based on this knob, we decide how many clock
                               cycles to throttle credit returns.
                            */
    UINT32 itc_throt_disable : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000001*/

                            /*
                               Disable Occupancy based ITC credit return
                               throttling.
                            */
    UINT32 itc_dis_c_borrow : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /* Disable borrowing for C pools */
    UINT32 itc_dis_np_borrow : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /* Disable borrowing for NP pools */
    UINT32 itc_dis_p_borrow : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* Disable borrowing for P pools */
    UINT32 itc_throt_visa_iitc : 4;

                            /* Bits[13:10], Access Type=RW, default=0x00000000*/

                            /* Visa select */
    UINT32 itc_hdr_rsvd_crdt : 9;

                            /* Bits[22:14], Access Type=RW/P, default=0x00000048*/

                            /* Define the number of reserved credits in ITC */
    UINT32 spare : 9;

                            /* Bits[31:23], Access Type=RW/P, default=0x00000000*/

                            /* spare bits */

  } Bits;
  UINT32 Data;

} ITCIOSF_HDR_CRDT_CTL_IIO_VTD_SPRC0_SPRMCC_SPRUCC_STRUCT;
#endif /* (SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 itc_throt_occ_knob : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000006*/

                            /*
                               Based on this knob, we start throtting credit
                               returns after a certain occupancy is reached.
                            */
    UINT32 itc_throt_dly_knob : 3;

                            /* Bits[5:3], Access Type=RW, default=0x00000002*/

                            /*
                               Based on this knob, we decide how many clock
                               cycles to throttle credit returns.
                            */
    UINT32 itc_throt_disable : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000001*/

                            /*
                               Disable Occupancy based ITC credit return
                               throttling.
                            */
    UINT32 itc_dis_c_borrow : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /* Disable borrowing for C pools */
    UINT32 itc_dis_np_borrow : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /* Disable borrowing for NP pools */
    UINT32 itc_dis_p_borrow : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* Disable borrowing for P pools */
    UINT32 itc_throt_visa_iitc : 4;

                            /* Bits[13:10], Access Type=RW, default=0x00000000*/

                            /* Visa select */
    UINT32 itc_hdr_rsvd_crdt : 9;

                            /* Bits[22:14], Access Type=RW, default=0x00000048*/

                            /* Define the number of reserved credits in ITC */
    UINT32 rsvd : 9;

                            /* Bits[31:23], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCIOSF_HDR_CRDT_CTL_IIO_VTD_STRUCT;

/* ITCIOSF_DAT_CRDT_CTL_IIO_VTD_REG supported on:                               */
/*      SPRA0 (0x20800fcc)                                                      */
/*      SPRB0 (0x20800fcc)                                                      */
/*      SPRHBM (0x20800fcc)                                                     */
/*      SPRC0 (0x20800fcc)                                                      */
/*      SPRMCC (0x20800fcc)                                                     */
/*      SPRUCC (0x20800fcc)                                                     */
/* Register default value on SPRA0: 0x0C120056                                  */
/* Register default value on SPRB0: 0x0C120056                                  */
/* Register default value on SPRHBM: 0x0C120056                                 */
/* Register default value on SPRC0: 0x00800056                                  */
/* Register default value on SPRMCC: 0x00800056                                 */
/* Register default value on SPRUCC: 0x00800056                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Throttle credit returns to IOSF
*/


#define ITCIOSF_DAT_CRDT_CTL_IIO_VTD_REG 0x11020FCC

#if defined(SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 itc_throt_occ_knob : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000006*/

                            /*
                               Based on this knob, we start throtting credit
                               returns after a certain occupancy is reached.
                            */
    UINT32 itc_throt_dly_knob : 3;

                            /* Bits[5:3], Access Type=RW, default=0x00000002*/

                            /*
                               Based on this knob, we decide how many clock
                               cycles to throttle credit returns.
                            */
    UINT32 itc_throt_disable : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000001*/

                            /*
                               Disable Occupancy based ITC credit return
                               throttling.
                            */
    UINT32 itc_dis_c_borrow : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /* Disable borrowing for C pools */
    UINT32 itc_dis_np_borrow : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /* Disable borrowing for NP pools */
    UINT32 itc_dis_p_borrow : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* Disable borrowing for P pools */
    UINT32 itc_throt_visa_iitc : 4;

                            /* Bits[13:10], Access Type=RW, default=0x00000000*/

                            /* Visa select */
    UINT32 itc_hdr_rsvd_crdt : 9;

                            /* Bits[22:14], Access Type=RW, default=0x00000048*/

                            /* Define the number of reserved credits in ITC */
    UINT32 itc_dat_rsvd_crdt : 9;

                            /* Bits[31:23], Access Type=RW, default=0x00000018*/

                            /*
                               Define the number of reserved data credits in
                               ITC
                            */

  } Bits;
  UINT32 Data;

} ITCIOSF_DAT_CRDT_CTL_IIO_VTD_SPRA0_SPRB0_SPRHBM_STRUCT;
#endif /* (SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) */

#if defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 itc_throt_occ_knob : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000006*/

                            /*
                               Based on this knob, we start throtting credit
                               returns after a certain occupancy is reached.
                            */
    UINT32 itc_throt_dly_knob : 3;

                            /* Bits[5:3], Access Type=RW, default=0x00000002*/

                            /*
                               Based on this knob, we decide how many clock
                               cycles to throttle credit returns.
                            */
    UINT32 itc_throt_disable : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000001*/

                            /*
                               Disable Occupancy based ITC credit return
                               throttling.
                            */
    UINT32 itc_dis_c_borrow : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /* Disable borrowing for C pools */
    UINT32 itc_dis_np_borrow : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /* Disable borrowing for NP pools */
    UINT32 itc_dis_p_borrow : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* Disable borrowing for P pools */
    UINT32 itc_throt_visa_iitc : 4;

                            /* Bits[13:10], Access Type=RW, default=0x00000000*/

                            /* Visa select */
    UINT32 itc_dat_rsvd_crdt : 9;

                            /* Bits[22:14], Access Type=RW/P, default=0x00000000*/

                            /*
                               Define the number of reserved data credits in
                               ITC
                            */
    UINT32 itc_en_misc_q_rsv : 1;

                            /* Bits[23:23], Access Type=RW/P, default=0x00000001*/

                            /*
                               Chicken bit to enable data entry reservation for
                               misc channel queues
                            */
    UINT32 rsvd : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCIOSF_DAT_CRDT_CTL_IIO_VTD_SPRC0_SPRMCC_SPRUCC_STRUCT;
#endif /* (SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 itc_throt_occ_knob : 3;

                            /* Bits[2:0], Access Type=RW, default=0x00000006*/

                            /*
                               Based on this knob, we start throtting credit
                               returns after a certain occupancy is reached.
                            */
    UINT32 itc_throt_dly_knob : 3;

                            /* Bits[5:3], Access Type=RW, default=0x00000002*/

                            /*
                               Based on this knob, we decide how many clock
                               cycles to throttle credit returns.
                            */
    UINT32 itc_throt_disable : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000001*/

                            /*
                               Disable Occupancy based ITC credit return
                               throttling.
                            */
    UINT32 itc_dis_c_borrow : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /* Disable borrowing for C pools */
    UINT32 itc_dis_np_borrow : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /* Disable borrowing for NP pools */
    UINT32 itc_dis_p_borrow : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /* Disable borrowing for P pools */
    UINT32 itc_throt_visa_iitc : 4;

                            /* Bits[13:10], Access Type=RW, default=0x00000000*/

                            /* Visa select */
    UINT32 rsvd : 18;

                            /* Bits[31:14], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCIOSF_DAT_CRDT_CTL_IIO_VTD_STRUCT;

/* ITCBUFFCTRL_IIO_VTD_REG supported on:                                        */
/*      SPRA0 (0x20800fd0)                                                      */
/*      SPRB0 (0x20800fd0)                                                      */
/*      SPRHBM (0x20800fd0)                                                     */
/*      SPRC0 (0x20800fd0)                                                      */
/*      SPRMCC (0x20800fd0)                                                     */
/*      SPRUCC (0x20800fd0)                                                     */
/* Register default value on SPRA0: 0x03FF5CC0                                  */
/* Register default value on SPRB0: 0x03FF5CC0                                  */
/* Register default value on SPRHBM: 0x03FF5CC0                                 */
/* Register default value on SPRC0: 0x03FF68C0                                  */
/* Register default value on SPRMCC: 0x03FF68C0                                 */
/* Register default value on SPRUCC: 0x03FF68C0                                 */
/* SPRA0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRB0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRHBM Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRA0 BDF: 8_0_0                                       */
/* SPRA0 Security PolicyGroup: DFX                                              */
/* SPRB0 Security PolicyGroup: DFX                                              */
/* SPRHBM Security PolicyGroup: DFX                                             */
/* SPRC0 Security PolicyGroup: DFX                                              */
/* SPRMCC Security PolicyGroup: DFX                                             */
/* SPRUCC Security PolicyGroup: DFX                                             */
/* ITC Header, data and prphpend buffer control
*/


#define ITCBUFFCTRL_IIO_VTD_REG 0x11020FD0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 itc_num_hdr : 8;

                            /* Bits[7:0], Access Type=RW/P, default=0x000000C0*/

                            /*
                               Number of header blocks used by ITC. Maximum
                               value allowed is 192
                            */
    UINT32 itc_num_dat : 9;

                            /* Bits[16:8], Access Type=RW/P, default=0x0000015C*/

                            /*
                               Number of data blocks used by ITC. Maximum value
                               allowed is 348
                            */
    UINT32 itc_num_prhpend : 10;

                            /* Bits[26:17], Access Type=RW/P, default=0x000001FF*/

                            /*
                               Number of prhpend entries used by ITC. Maximum
                               value allowed is 511
                            */
    UINT32 rsvd : 5;

                            /* Bits[31:27], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} ITCBUFFCTRL_IIO_VTD_STRUCT;

#if defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
/* SRCTHROTTLECFG_IIO_VTD_REG supported on:                                     */
/*      SPRC0 (0x20800fe0)                                                      */
/*      SPRMCC (0x20800fe0)                                                     */
/*      SPRUCC (0x20800fe0)                                                     */
/* Register default value on SPRC0: 0x0000021C                                  */
/* Register default value on SPRMCC: 0x0000021C                                 */
/* Register default value on SPRUCC: 0x0000021C                                 */
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRC0 BDF: 8_0_0                                       */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Controls for source throttling requests targeting CHA.
*/


#define SRCTHROTTLECFG_IIO_VTD_REG 0x11020FE0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 enablesrcthrottle : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               Enable source throttling for requests targeting
                               CHA.
                            */
    UINT32 basewindowsize : 10;

                            /* Bits[10:1], Access Type=RW, default=0x0000010E*/

                            /*
                               Base window size that looks at writeback
                               rate/occupancy to count it as a good window or a
                               bad window.
                            */
    UINT32 rsvd : 21;

                            /* Bits[31:11], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} SRCTHROTTLECFG_IIO_VTD_STRUCT;
#endif /* (SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

#if defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
/* SRCTHROTTLENUMBASEWINDOW_IIO_VTD_REG supported on:                           */
/*      SPRC0 (0x20800fe4)                                                      */
/*      SPRMCC (0x20800fe4)                                                     */
/*      SPRUCC (0x20800fe4)                                                     */
/* Register default value on SPRC0: 0x00090010                                  */
/* Register default value on SPRMCC: 0x00090010                                 */
/* Register default value on SPRUCC: 0x00090010                                 */
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRC0 BDF: 8_0_0                                       */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Number of base windows to wait before increasing or decreasing source throttling requests targeting CHA.
*/


#define SRCTHROTTLENUMBASEWINDOW_IIO_VTD_REG 0x11020FE4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 numbasewindowright : 16;

                            /* Bits[15:0], Access Type=RW, default=0x00000010*/

                            /*
                               Number of base windows to wait before increasing
                               source throttling requests targeting CHA. (Move
                               right.)
                            */
    UINT32 numbasewindowleft : 16;

                            /* Bits[31:16], Access Type=RW, default=0x00000009*/

                            /*
                               Number of base windows to wait before decreasing
                               source throttling requests targeting CHA. (Move
                               left.)
                            */

  } Bits;
  UINT32 Data;

} SRCTHROTTLENUMBASEWINDOW_IIO_VTD_STRUCT;
#endif /* (SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

#if defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
/* SRCTHROTTLETHRESHOLDS_IIO_VTD_REG supported on:                              */
/*      SPRC0 (0x20800fe8)                                                      */
/*      SPRMCC (0x20800fe8)                                                     */
/*      SPRUCC (0x20800fe8)                                                     */
/* Register default value on SPRC0: 0xB41340A0                                  */
/* Register default value on SPRMCC: 0xB41340A0                                 */
/* Register default value on SPRUCC: 0xB41340A0                                 */
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRC0 BDF: 8_0_0                                       */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Thresholds for source throttling requests targeting CHA.
*/


#define SRCTHROTTLETHRESHOLDS_IIO_VTD_REG 0x11020FE8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 itcprefetchthreshold : 9;

                            /* Bits[8:0], Access Type=RW, default=0x000000A0*/

                            /*
                               Threshold of of ITC prefetches outstanding
                               before enabling source throttling requests
                               targeting CHA.
                            */
    UINT32 itcfetchratethreshold : 8;

                            /* Bits[16:9], Access Type=RW, default=0x000000A0*/

                            /*
                               When ITC fetch rate falls below threshold,
                               enable source throttling requests targeting CHA.
                            */
    UINT32 wbqoccthreshold : 8;

                            /* Bits[24:17], Access Type=RW, default=0x00000009*/

                            /*
                               Treshold of write back queue occupancy before
                               enabling source throttling requests targeting
                               CHA.
                            */
    UINT32 maxthrottle : 7;

                            /* Bits[31:25], Access Type=RW, default=0x0000005A*/

                            /*
                               Maximum source throttling rate of requests
                               targeting CHA.
                            */

  } Bits;
  UINT32 Data;

} SRCTHROTTLETHRESHOLDS_IIO_VTD_STRUCT;
#endif /* (SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

#if defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
/* SRCTHROTTLEBADWINDOWTHRESHOLD_IIO_VTD_REG supported on:                      */
/*      SPRC0 (0x20800fec)                                                      */
/*      SPRMCC (0x20800fec)                                                     */
/*      SPRUCC (0x20800fec)                                                     */
/* Register default value on SPRC0: 0x00010001                                  */
/* Register default value on SPRMCC: 0x00010001                                 */
/* Register default value on SPRUCC: 0x00010001                                 */
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRC0 BDF: 8_0_0                                       */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Threshold for number of bad windows before increasing or decreasing source throttling requests targeting CHA.
*/


#define SRCTHROTTLEBADWINDOWTHRESHOLD_IIO_VTD_REG 0x11020FEC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 badwindowthresholdhigh : 16;

                            /* Bits[15:0], Access Type=RW, default=0x00000001*/

                            /*
                               Upper threshold of number of bad windows before
                               increasing source throttling requests targeting
                               CHA.
                            */
    UINT32 badwindowthresholdlow : 16;

                            /* Bits[31:16], Access Type=RW, default=0x00000001*/

                            /*
                               Lower threshold of number of bad windows before
                               decreasing source throttling requests targeting
                               CHA.
                            */

  } Bits;
  UINT32 Data;

} SRCTHROTTLEBADWINDOWTHRESHOLD_IIO_VTD_STRUCT;
#endif /* (SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

#if defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
/* SRCTHROTTLERIGHTSTEP_0_IIO_VTD_REG supported on:                             */
/*      SPRC0 (0x800ff0)                                                        */
/*      SPRMCC (0x800ff0)                                                       */
/*      SPRUCC (0x800ff0)                                                       */
/* Register default value on SPRC0: 0x00000001                                  */
/* Register default value on SPRMCC: 0x00000001                                 */
/* Register default value on SPRUCC: 0x00000001                                 */
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRC0 BDF: 8_0_0                                       */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Step size for increasing source throttling requests targeting CHA. (Move right.)
*/


#define SRCTHROTTLERIGHTSTEP_0_IIO_VTD_REG 0x11000FF0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 throttlerightstep : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000001*/

                            /*
                               Step size for increasing source throttling
                               requests targeting CHA. (Move right.)
                            */
    UINT8 rsvd : 2;

                            /* Bits[7:6], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT8 Data;

} SRCTHROTTLERIGHTSTEP_0_IIO_VTD_STRUCT;
#endif /* (SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

#if defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
/* SRCTHROTTLERIGHTSTEP_1_IIO_VTD_REG supported on:                             */
/*      SPRC0 (0x800ff1)                                                        */
/*      SPRMCC (0x800ff1)                                                       */
/*      SPRUCC (0x800ff1)                                                       */
/* Register default value on SPRC0: 0x00000002                                  */
/* Register default value on SPRMCC: 0x00000002                                 */
/* Register default value on SPRUCC: 0x00000002                                 */
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRC0 BDF: 8_0_0                                       */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Step size for increasing source throttling requests targeting CHA. (Move right.)
*/


#define SRCTHROTTLERIGHTSTEP_1_IIO_VTD_REG 0x11000FF1

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 throttlerightstep : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000002*/

                            /*
                               Step size for increasing source throttling
                               requests targeting CHA. (Move right.)
                            */
    UINT8 rsvd : 2;

                            /* Bits[7:6], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT8 Data;

} SRCTHROTTLERIGHTSTEP_1_IIO_VTD_STRUCT;
#endif /* (SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

#if defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
/* SRCTHROTTLERIGHTSTEP_2_IIO_VTD_REG supported on:                             */
/*      SPRC0 (0x800ff2)                                                        */
/*      SPRMCC (0x800ff2)                                                       */
/*      SPRUCC (0x800ff2)                                                       */
/* Register default value on SPRC0: 0x00000003                                  */
/* Register default value on SPRMCC: 0x00000003                                 */
/* Register default value on SPRUCC: 0x00000003                                 */
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRC0 BDF: 8_0_0                                       */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Step size for increasing source throttling requests targeting CHA. (Move right.)
*/


#define SRCTHROTTLERIGHTSTEP_2_IIO_VTD_REG 0x11000FF2

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 throttlerightstep : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000003*/

                            /*
                               Step size for increasing source throttling
                               requests targeting CHA. (Move right.)
                            */
    UINT8 rsvd : 2;

                            /* Bits[7:6], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT8 Data;

} SRCTHROTTLERIGHTSTEP_2_IIO_VTD_STRUCT;
#endif /* (SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

#if defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
/* SRCTHROTTLERIGHTSTEP_3_IIO_VTD_REG supported on:                             */
/*      SPRC0 (0x800ff3)                                                        */
/*      SPRMCC (0x800ff3)                                                       */
/*      SPRUCC (0x800ff3)                                                       */
/* Register default value on SPRC0: 0x00000004                                  */
/* Register default value on SPRMCC: 0x00000004                                 */
/* Register default value on SPRUCC: 0x00000004                                 */
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRC0 BDF: 8_0_0                                       */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Step size for increasing source throttling requests targeting CHA. (Move right.)
*/


#define SRCTHROTTLERIGHTSTEP_3_IIO_VTD_REG 0x11000FF3

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 throttlerightstep : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000004*/

                            /*
                               Step size for increasing source throttling
                               requests targeting CHA. (Move right.)
                            */
    UINT8 rsvd : 2;

                            /* Bits[7:6], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT8 Data;

} SRCTHROTTLERIGHTSTEP_3_IIO_VTD_STRUCT;
#endif /* (SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

#if defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
/* SRCTHROTTLERIGHTSTEP_4_IIO_VTD_REG supported on:                             */
/*      SPRC0 (0x800ff4)                                                        */
/*      SPRMCC (0x800ff4)                                                       */
/*      SPRUCC (0x800ff4)                                                       */
/* Register default value on SPRC0: 0x00000005                                  */
/* Register default value on SPRMCC: 0x00000005                                 */
/* Register default value on SPRUCC: 0x00000005                                 */
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRC0 BDF: 8_0_0                                       */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Step size for increasing source throttling requests targeting CHA. (Move right.)
*/


#define SRCTHROTTLERIGHTSTEP_4_IIO_VTD_REG 0x11000FF4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 throttlerightstep : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000005*/

                            /*
                               Step size for increasing source throttling
                               requests targeting CHA. (Move right.)
                            */
    UINT8 rsvd : 2;

                            /* Bits[7:6], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT8 Data;

} SRCTHROTTLERIGHTSTEP_4_IIO_VTD_STRUCT;
#endif /* (SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

#if defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
/* SRCTHROTTLERIGHTSTEP_5_IIO_VTD_REG supported on:                             */
/*      SPRC0 (0x800ff5)                                                        */
/*      SPRMCC (0x800ff5)                                                       */
/*      SPRUCC (0x800ff5)                                                       */
/* Register default value on SPRC0: 0x00000006                                  */
/* Register default value on SPRMCC: 0x00000006                                 */
/* Register default value on SPRUCC: 0x00000006                                 */
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRC0 BDF: 8_0_0                                       */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Step size for increasing source throttling requests targeting CHA. (Move right.)
*/


#define SRCTHROTTLERIGHTSTEP_5_IIO_VTD_REG 0x11000FF5

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 throttlerightstep : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000006*/

                            /*
                               Step size for increasing source throttling
                               requests targeting CHA. (Move right.)
                            */
    UINT8 rsvd : 2;

                            /* Bits[7:6], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT8 Data;

} SRCTHROTTLERIGHTSTEP_5_IIO_VTD_STRUCT;
#endif /* (SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

#if defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
/* SRCTHROTTLERIGHTSTEP_6_IIO_VTD_REG supported on:                             */
/*      SPRC0 (0x800ff6)                                                        */
/*      SPRMCC (0x800ff6)                                                       */
/*      SPRUCC (0x800ff6)                                                       */
/* Register default value on SPRC0: 0x00000007                                  */
/* Register default value on SPRMCC: 0x00000007                                 */
/* Register default value on SPRUCC: 0x00000007                                 */
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRC0 BDF: 8_0_0                                       */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Step size for increasing source throttling requests targeting CHA. (Move right.)
*/


#define SRCTHROTTLERIGHTSTEP_6_IIO_VTD_REG 0x11000FF6

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 throttlerightstep : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000007*/

                            /*
                               Step size for increasing source throttling
                               requests targeting CHA. (Move right.)
                            */
    UINT8 rsvd : 2;

                            /* Bits[7:6], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT8 Data;

} SRCTHROTTLERIGHTSTEP_6_IIO_VTD_STRUCT;
#endif /* (SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

#if defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
/* SRCTHROTTLERIGHTSTEP_7_IIO_VTD_REG supported on:                             */
/*      SPRC0 (0x800ff7)                                                        */
/*      SPRMCC (0x800ff7)                                                       */
/*      SPRUCC (0x800ff7)                                                       */
/* Register default value on SPRC0: 0x00000008                                  */
/* Register default value on SPRMCC: 0x00000008                                 */
/* Register default value on SPRUCC: 0x00000008                                 */
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRC0 BDF: 8_0_0                                       */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Step size for increasing source throttling requests targeting CHA. (Move right.)
*/


#define SRCTHROTTLERIGHTSTEP_7_IIO_VTD_REG 0x11000FF7

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 throttlerightstep : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000008*/

                            /*
                               Step size for increasing source throttling
                               requests targeting CHA. (Move right.)
                            */
    UINT8 rsvd : 2;

                            /* Bits[7:6], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT8 Data;

} SRCTHROTTLERIGHTSTEP_7_IIO_VTD_STRUCT;
#endif /* (SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

#if defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
/* SRCTHROTTLELEFTSTEP_IIO_VTD_REG supported on:                                */
/*      SPRC0 (0x800ff8)                                                        */
/*      SPRMCC (0x800ff8)                                                       */
/*      SPRUCC (0x800ff8)                                                       */
/* Register default value on SPRC0: 0x00000001                                  */
/* Register default value on SPRMCC: 0x00000001                                 */
/* Register default value on SPRUCC: 0x00000001                                 */
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRC0 BDF: 8_0_0                                       */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Step size for decreasing source throttling requests targeting CHA. (Move left.)
*/


#define SRCTHROTTLELEFTSTEP_IIO_VTD_REG 0x11000FF8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 throttleleftstep : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000001*/

                            /*
                               Step size for decreasing source throttling
                               requests targeting CHA. (Move left.)
                            */
    UINT8 rsvd : 2;

                            /* Bits[7:6], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT8 Data;

} SRCTHROTTLELEFTSTEP_IIO_VTD_STRUCT;
#endif /* (SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

#if defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
/* SRCTHROTTLEVALUEERRORCFG_IIO_VTD_REG supported on:                           */
/*      SPRC0 (0x20800ffc)                                                      */
/*      SPRMCC (0x20800ffc)                                                     */
/*      SPRUCC (0x20800ffc)                                                     */
/* Register default value on SPRC0: 0x0001FFFF                                  */
/* Register default value on SPRMCC: 0x0001FFFF                                 */
/* Register default value on SPRUCC: 0x0001FFFF                                 */
/* SPRC0 Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG */
/* SPRMCC Register File:    sprsp_top/m2iosf_top[3]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* SPRUCC Register File:    sprsp_top/m2iosf_top[0]/m2iosf_reg/CFG_BDF_1_0_0_CFG*/
/* Struct generated from SPRC0 BDF: 8_0_0                                       */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* Mask and shift right value for source throttling value error calculation.
*/


#define SRCTHROTTLEVALUEERRORCFG_IIO_VTD_REG 0x11020FFC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 throttlevalueerrormask : 16;

                            /* Bits[15:0], Access Type=RW, default=0x0000FFFF*/

                            /* Mask for throttle value error calculation. */
    UINT32 throttlevalueerrorshiftright : 4;

                            /* Bits[19:16], Access Type=RW, default=0x00000001*/

                            /*
                               Shift right value for throttle value error
                               calculation.
                            */
    UINT32 rsvd : 12;

                            /* Bits[31:20], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} SRCTHROTTLEVALUEERRORCFG_IIO_VTD_STRUCT;
#endif /* (SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */
#endif /* _IIO_VTD_h */
