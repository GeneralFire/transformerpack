
/** @file
  KTI_LLPMON.h

  @copyright
  INTEL CONFIDENTIAL
  Copyright 2007 - 2020 Intel Corporation. <BR>
  
  The source code contained or described herein and all documents related to the
  source code ("Material") are owned by Intel Corporation or its suppliers or
  licensors. Title to the Material remains with Intel Corporation or its suppliers
  and licensors. The Material may contain trade secrets and proprietary    and
  confidential information of Intel Corporation and its suppliers and licensors,
  and is protected by worldwide copyright and trade secret laws and treaty
  provisions. No part of the Material may be used, copied, reproduced, modified,
  published, uploaded, posted, transmitted, distributed, or disclosed in any way
  without Intel's prior express written permission.
  
  No license under any patent, copyright, trade secret or other intellectual
  property right is granted to or conferred upon you by disclosure or delivery
  of the Materials, either expressly, by implication, inducement, estoppel or
  otherwise. Any license under such intellectual property rights must be
  express and approved by Intel in writing.
  
  Unless otherwise agreed by Intel in writing, you may not remove or alter
  this notice or any other notice embedded in Materials by Intel or
  Intel's suppliers or licensors in any way.
  
  This file contains Silicon register definitions.
  
  This is a generated file; please do not modify it directly.
  
**/

/* The following security policy groups are used by registers in this file:     */

/* SPRA0 Security Policy Groups:                                                */
/* COR_CNT                                                                      */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_SUNPASS_SAI | HOSTIA_UCODE_SAI |             */
/*    HOSTIA_SMM_SAI | HOSTIA_BOOT_SAI | OOB_MSM_SAI | PM_PCS_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | UNCORE_PMA_SAI | */
/*    DFX_THIRDPARTY_SAI | DFX_UNTRUSTED_SAI                                    */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_SUNPASS_SAI | HOSTIA_UCODE_SAI |             */
/*    HOSTIA_SMM_SAI | HOSTIA_BOOT_SAI | OOB_MSM_SAI | PM_PCS_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI |                  */
/*    DFX_THIRDPARTY_SAI | DFX_UNTRUSTED_SAI                                    */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* DFX                                                                          */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* LB_MCHECK_W                                                                  */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | HOSTIA_BOOT_SAI  */
/*    | HOSTIA_SMM_SAI | OOB_MSM_SAI                                            */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* LB_W                                                                         */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | HOSTIA_BOOT_SAI  */
/*    | HOSTIA_SMM_SAI | OOB_MSM_SAI                                            */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* OS_W                                                                         */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | PM_PCS_SAI |                       */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI |                  */
/*    DFX_UNTRUSTED_SAI | OOB_MSM_SAI | DFX_THIRDPARTY_SAI                      */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* P_U_CODE                                                                     */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */

/* SPRB0 Security Policy Groups:                                                */
/* BIOS_W                                                                       */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* COR_CNT                                                                      */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_SUNPASS_SAI | HOSTIA_UCODE_SAI |             */
/*    HOSTIA_SMM_SAI | HOSTIA_BOOT_SAI | OOB_MSM_SAI | PM_PCS_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | UNCORE_PMA_SAI | */
/*    DFX_THIRDPARTY_SAI | DFX_UNTRUSTED_SAI                                    */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_SUNPASS_SAI | HOSTIA_UCODE_SAI |             */
/*    HOSTIA_SMM_SAI | HOSTIA_BOOT_SAI | OOB_MSM_SAI | PM_PCS_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI |                  */
/*    DFX_THIRDPARTY_SAI | DFX_UNTRUSTED_SAI                                    */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* DFX                                                                          */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* LB_MCHECK_W                                                                  */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | HOSTIA_BOOT_SAI  */
/*    | HOSTIA_SMM_SAI | OOB_MSM_SAI                                            */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* LB_W                                                                         */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | HOSTIA_BOOT_SAI  */
/*    | HOSTIA_SMM_SAI | OOB_MSM_SAI                                            */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* OS_W                                                                         */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | PM_PCS_SAI |                       */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI |                  */
/*    DFX_UNTRUSTED_SAI | OOB_MSM_SAI | DFX_THIRDPARTY_SAI                      */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* P_U_CODE                                                                     */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */

/* SPRHBM Security Policy Groups:                                               */
/* BIOS_W                                                                       */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* COR_CNT                                                                      */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_SUNPASS_SAI | HOSTIA_UCODE_SAI |             */
/*    HOSTIA_SMM_SAI | HOSTIA_BOOT_SAI | OOB_MSM_SAI | PM_PCS_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | UNCORE_PMA_SAI | */
/*    DFX_THIRDPARTY_SAI | DFX_UNTRUSTED_SAI                                    */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_SUNPASS_SAI | HOSTIA_UCODE_SAI |             */
/*    HOSTIA_SMM_SAI | HOSTIA_BOOT_SAI | OOB_MSM_SAI | PM_PCS_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI |                  */
/*    DFX_THIRDPARTY_SAI | DFX_UNTRUSTED_SAI                                    */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* DFX                                                                          */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* LB_MCHECK_W                                                                  */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | HOSTIA_BOOT_SAI  */
/*    | HOSTIA_SMM_SAI | OOB_MSM_SAI                                            */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* LB_W                                                                         */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | HOSTIA_BOOT_SAI  */
/*    | HOSTIA_SMM_SAI | OOB_MSM_SAI                                            */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* OS_W                                                                         */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | PM_PCS_SAI |                       */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI |                  */
/*    DFX_UNTRUSTED_SAI | OOB_MSM_SAI | DFX_THIRDPARTY_SAI                      */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* P_U_CODE                                                                     */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */

/* SPRC0 Security Policy Groups:                                                */
/* BIOS_W                                                                       */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* COR_CNT                                                                      */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_SUNPASS_SAI | HOSTIA_UCODE_SAI |             */
/*    HOSTIA_SMM_SAI | HOSTIA_BOOT_SAI | OOB_MSM_SAI | PM_PCS_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | UNCORE_PMA_SAI | */
/*    DFX_THIRDPARTY_SAI | DFX_UNTRUSTED_SAI                                    */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_SUNPASS_SAI | HOSTIA_UCODE_SAI |             */
/*    HOSTIA_SMM_SAI | HOSTIA_BOOT_SAI | OOB_MSM_SAI | PM_PCS_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI |                  */
/*    DFX_THIRDPARTY_SAI | DFX_UNTRUSTED_SAI                                    */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* DFX                                                                          */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* LB_MCHECK_W                                                                  */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | HOSTIA_BOOT_SAI  */
/*    | HOSTIA_SMM_SAI | OOB_MSM_SAI                                            */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* LB_W                                                                         */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | HOSTIA_BOOT_SAI  */
/*    | HOSTIA_SMM_SAI | OOB_MSM_SAI                                            */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* OS_W                                                                         */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | PM_PCS_SAI |                       */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI |                  */
/*    DFX_UNTRUSTED_SAI | OOB_MSM_SAI | DFX_THIRDPARTY_SAI                      */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* P_U_CODE                                                                     */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */

/* SPRMCC Security Policy Groups:                                               */
/* BIOS_W                                                                       */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* COR_CNT                                                                      */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_SUNPASS_SAI | HOSTIA_UCODE_SAI |             */
/*    HOSTIA_SMM_SAI | HOSTIA_BOOT_SAI | OOB_MSM_SAI | PM_PCS_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | UNCORE_PMA_SAI | */
/*    DFX_THIRDPARTY_SAI | DFX_UNTRUSTED_SAI                                    */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_SUNPASS_SAI | HOSTIA_UCODE_SAI |             */
/*    HOSTIA_SMM_SAI | HOSTIA_BOOT_SAI | OOB_MSM_SAI | PM_PCS_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI |                  */
/*    DFX_THIRDPARTY_SAI | DFX_UNTRUSTED_SAI                                    */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* DFX                                                                          */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* LB_MCHECK_W                                                                  */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | HOSTIA_BOOT_SAI  */
/*    | HOSTIA_SMM_SAI | OOB_MSM_SAI                                            */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* LB_W                                                                         */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | HOSTIA_BOOT_SAI  */
/*    | HOSTIA_SMM_SAI | OOB_MSM_SAI                                            */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* OS_W                                                                         */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | PM_PCS_SAI |                       */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI |                  */
/*    DFX_UNTRUSTED_SAI | OOB_MSM_SAI | DFX_THIRDPARTY_SAI                      */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* P_U_CODE                                                                     */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */

/* SPRUCC Security Policy Groups:                                               */
/* BIOS_W                                                                       */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* COR_CNT                                                                      */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_SUNPASS_SAI | HOSTIA_UCODE_SAI |             */
/*    HOSTIA_SMM_SAI | HOSTIA_BOOT_SAI | OOB_MSM_SAI | PM_PCS_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | UNCORE_PMA_SAI | */
/*    DFX_THIRDPARTY_SAI | DFX_UNTRUSTED_SAI                                    */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_SUNPASS_SAI | HOSTIA_UCODE_SAI |             */
/*    HOSTIA_SMM_SAI | HOSTIA_BOOT_SAI | OOB_MSM_SAI | PM_PCS_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI |                  */
/*    DFX_THIRDPARTY_SAI | DFX_UNTRUSTED_SAI                                    */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* DFX                                                                          */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* LB_MCHECK_W                                                                  */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | HOSTIA_BOOT_SAI  */
/*    | HOSTIA_SMM_SAI | OOB_MSM_SAI                                            */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* LB_W                                                                         */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_UCODE_SAI | HOSTIA_SUNPASS_SAI | PM_PCS_SAI |                      */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI | HOSTIA_BOOT_SAI  */
/*    | HOSTIA_SMM_SAI | OOB_MSM_SAI                                            */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* OS_W                                                                         */
/*  Security_ReadAccess_Str:                                                    */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | SAI_Reserved_5 | SAI_Reserved_6 |  */
/*    SAI_Reserved_7 | GT_SAI | PM_PCS_SAI | HW_CPU_SAI | MEM_CPL_SAI | VTD_SAI */
/*    | PM_DIE_TO_DIE_SAI | OOB_MSM_UNTRUSTED_SAI | HOSTCP_PMA_SAI |            */
/*    CSE_INTEL_SAI | CSE_OEM_SAI | FUSE_CTRL_SAI | FUSE_PULLER_SAI |           */
/*    PECI_MSM_SAI | PM_IOSS_SAI | CSE_DNX_SAI | FXR_INTERNAL_SAI |             */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_UNTRUSTED_SAI | SAI_Reserved_26 |       */
/*    IRC_SAI | NPK_SAI | DISPLAY2_SAI | DISPLAY3_SAI | HW_PCH_SAI |            */
/*    SAI_Reserved_32 | SAI_Reserved_33 | SAI_Reserved_34 | GT_PMA_SAI |        */
/*    HSP_SAI | SAI_Reserved_37 | SAI_Reserved_38 | SAI_Reserved_39 |           */
/*    UNCORE_PMA_SAI | RC_MORPHED_SAI | DFX_INTEL_PRODUCTION_SAI |              */
/*    DFX_THIRDPARTY_SAI | DISPLAY_SAI | SAI_Reserved_45 | SAI_Reserved_46 |    */
/*    DISPLAY_KVM_SAI | GT2_SAI | SAI_Reserved_49 | DEVICE_UNTRUSTED_IAL_SAI |  */
/*    SAI_Reserved_51 | CORE_EVENT_PROXY_SAI | DEVICE_ABORT_SAI |               */
/*    RCIOMMU_BYPASS_SAI | SAI_Reserved_55 | SAI_Reserved_56 | IE_CSE_SAI |     */
/*    SAI_Reserved_58 | SAI_Reserved_59 | CPM_SAI | OOB_MSM_SAI | XGBE_SAI |    */
/*    DEVICE_UNTRUSTED_SAI                                                      */
/*  Security_WriteAccess_Str:                                                   */
/*    HOSTIA_POSTBOOT_SAI | HOSTIA_UCODE_SAI | HOSTIA_SMM_SAI |                 */
/*    HOSTIA_SUNPASS_SAI | HOSTIA_BOOT_SAI | PM_PCS_SAI |                       */
/*    DFX_INTEL_MANUFACTURING_SAI | DFX_INTEL_PRODUCTION_SAI |                  */
/*    DFX_UNTRUSTED_SAI | OOB_MSM_SAI | DFX_THIRDPARTY_SAI                      */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */
/* P_U_CODE                                                                     */
/*  Security_Read_CP_Secured:                                                   */
/*    0                                                                         */


#ifndef _KTI_LLPMON_h
#define _KTI_LLPMON_h
#include <Base.h>

/* VID_KTI_LLPMON_REG supported on:                                             */
/*      SPRA0 (0x11e09000)                                                      */
/*      SPRB0 (0x11e09000)                                                      */
/*      SPRHBM (0x11e09000)                                                     */
/*      SPRC0 (0x11e09000)                                                      */
/*      SPRMCC (0x11e09000)                                                     */
/*      SPRUCC (0x11e48000)                                                     */
/* Register default value on SPRA0: 0x00008086                                  */
/* Register default value on SPRB0: 0x00008086                                  */
/* Register default value on SPRHBM: 0x00008086                                 */
/* Register default value on SPRC0: 0x00008086                                  */
/* Register default value on SPRMCC: 0x00008086                                 */
/* Register default value on SPRUCC: 0x00008086                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* PCI Vendor ID Register
*/


#define VID_KTI_LLPMON_REG 0x09010000

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 vendor_identification_number : 16;

                            /* Bits[15:0], Access Type=RO, default=0x00008086*/

                            /* The value is assigned by PCI-SIG to Intel. */

  } Bits;
  UINT16 Data;

} VID_KTI_LLPMON_STRUCT;

/* DID_0_KTI_LLPMON_REG supported on:                                           */
/*      SPRA0 (0x11e09002)                                                      */
/*      SPRB0 (0x11e09002)                                                      */
/*      SPRHBM (0x11e09002)                                                     */
/*      SPRC0 (0x11e09002)                                                      */
/*      SPRMCC (0x11e09002)                                                     */
/*      SPRUCC (0x11e48002)                                                     */
/* Register default value on SPRA0: 0x00003241                                  */
/* Register default value on SPRB0: 0x00003241                                  */
/* Register default value on SPRHBM: 0x00003241                                 */
/* Register default value on SPRC0: 0x00003241                                  */
/* Register default value on SPRMCC: 0x00003241                                 */
/* Register default value on SPRUCC: 0x00003241                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* PCI Device Identification Number
*/


#define DID_0_KTI_LLPMON_REG 0x09010002

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 device_identification_number : 16;

                            /* Bits[15:0], Access Type=RO, default=0x00003241*/

                            /*
                               The value is assigned by each IP/function owner
                               as a unique identifier.
                            */

  } Bits;
  UINT16 Data;

} DID_0_KTI_LLPMON_STRUCT;

/* PCICMD_0_KTI_LLPMON_REG supported on:                                        */
/*      SPRA0 (0x11e09004)                                                      */
/*      SPRB0 (0x11e09004)                                                      */
/*      SPRHBM (0x11e09004)                                                     */
/*      SPRC0 (0x11e09004)                                                      */
/*      SPRMCC (0x11e09004)                                                     */
/*      SPRUCC (0x11e48004)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* PCI Command Register
*/


#define PCICMD_0_KTI_LLPMON_REG 0x09010004

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 io_space_enable : 1;

                            /* Bits[0:0], Access Type=RO, default=0x00000000*/

                            /*
                               Hardwired to 0 since these devices dont decode
                               any IO BARs
                            */
    UINT16 memory_space_enable : 1;

                            /* Bits[1:1], Access Type=RO, default=0x00000000*/

                            /*
                               Hardwired to 0 since these devices dont decode
                               any memory BARs
                            */
    UINT16 bus_master_enable : 1;

                            /* Bits[2:2], Access Type=RO, default=0x00000000*/

                            /*
                               Hardwired to 0 since these devices dont generate
                               any transactions
                            */
    UINT16 special_cycle_enable : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000000*/

                            /* Not applicable. Hardwired to 0. */
    UINT16 memory_write_and_invalidate_enable : 1;

                            /* Bits[4:4], Access Type=RO, default=0x00000000*/

                            /*
                               Not applicable to internal devices. Hardwired to
                               0.
                            */
    UINT16 vga_palette_snoop_enable : 1;

                            /* Bits[5:5], Access Type=RO, default=0x00000000*/

                            /*
                               Not applicable to internal devices. Hardwired to
                               0.
                            */
    UINT16 parity_error_response : 1;

                            /* Bits[6:6], Access Type=RO, default=0x00000000*/

                            /*
                               This bit has no impact on error reporting from
                               these devices
                            */
    UINT16 idsel_stepping_wait_cycle_control : 1;

                            /* Bits[7:7], Access Type=RO, default=0x00000000*/

                            /*
                               Not applicable to internal devices. Hardwired to
                               0.
                            */
    UINT16 serr_enable : 1;

                            /* Bits[8:8], Access Type=RO, default=0x00000000*/

                            /*
                               This bit has no impact on error reporting from
                               these devices
                            */
    UINT16 fast_back_to_back_enable : 1;

                            /* Bits[9:9], Access Type=RO, default=0x00000000*/

                            /*
                               Not applicable to PCI Express and is hardwired
                               to 0
                            */
    UINT16 intx_disable : 1;

                            /* Bits[10:10], Access Type=RO, default=0x00000000*/

                            /* N/A for these devices */
    UINT16 rsvd : 5;

                            /* Bits[15:11], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT16 Data;

} PCICMD_0_KTI_LLPMON_STRUCT;

/* PCISTS_0_KTI_LLPMON_REG supported on:                                        */
/*      SPRA0 (0x11e09006)                                                      */
/*      SPRB0 (0x11e09006)                                                      */
/*      SPRHBM (0x11e09006)                                                     */
/*      SPRC0 (0x11e09006)                                                      */
/*      SPRMCC (0x11e09006)                                                     */
/*      SPRUCC (0x11e48006)                                                     */
/* Register default value on SPRA0: 0x00000010                                  */
/* Register default value on SPRB0: 0x00000010                                  */
/* Register default value on SPRHBM: 0x00000010                                 */
/* Register default value on SPRC0: 0x00000010                                  */
/* Register default value on SPRMCC: 0x00000010                                 */
/* Register default value on SPRUCC: 0x00000010                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* PCI Status Register
*/


#define PCISTS_0_KTI_LLPMON_REG 0x09010006

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 rsvd : 3;

                            /* Bits[2:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT16 intx_status : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000000*/

                            /*
                               Reflects the state of the INTA# signal at the
                               input of the enable/disable circuit. This bit is
                               set by HW to 1 when the INTA# is asserted. This
                               bit is reset by HW to 0 after the interrupt is
                               cleared (independent of the state of the
                               Interrupt Disable bit in the PCICMD register).
                               Hardwired to 0 on the processor
                            */
    UINT16 capabilities_list : 1;

                            /* Bits[4:4], Access Type=RO, default=0x00000001*/

                            /*
                               This bit indicates the presence of a
                               capabilities list structure. When set to 1,
                               indicates the register at 34h provides an offset
                               into the function.
                            */
    UINT16 x66mhz_capable : 1;

                            /* Bits[5:5], Access Type=RO, default=0x00000000*/

                            /* Not applicable to PCI Express. Hardwired to 0. */
    UINT16 reserved : 1;

                            /* Bits[6:6], Access Type=RO, default=0x00000000*/

                            /* Reserved */
    UINT16 fast_back_to_back : 1;

                            /* Bits[7:7], Access Type=RO, default=0x00000000*/

                            /* Not applicable to PCI Express. Hardwired to 0. */
    UINT16 master_data_parity_error : 1;

                            /* Bits[8:8], Access Type=RO, default=0x00000000*/

                            /* Hardwired to 0 */
    UINT16 devsel_timing : 2;

                            /* Bits[10:9], Access Type=RO, default=0x00000000*/

                            /* Not applicable to PCI Express. Hardwired to 0. */
    UINT16 signaled_target_abort : 1;

                            /* Bits[11:11], Access Type=RO, default=0x00000000*/

                            /* Hardwired to 0 */
    UINT16 received_target_abort : 1;

                            /* Bits[12:12], Access Type=RO, default=0x00000000*/

                            /* Hardwired to 0 */
    UINT16 received_master_abort : 1;

                            /* Bits[13:13], Access Type=RO, default=0x00000000*/

                            /* Hardwired to 0 */
    UINT16 signaled_system_error : 1;

                            /* Bits[14:14], Access Type=RO, default=0x00000000*/

                            /* Hardwired to 0 */
    UINT16 detected_parity_error : 1;

                            /* Bits[15:15], Access Type=RO, default=0x00000000*/

                            /*
                               This bit is set when the device receives a
                               packet on the primary side with an uncorrectable
                               data error (including a packet with poison bit
                               set) or an uncorrectable address/control parity
                               error. The setting of this bit is regardless of
                               the Parity Error Response bit (PERRE) in the
                               PCICMD register.
                            */

  } Bits;
  UINT16 Data;

} PCISTS_0_KTI_LLPMON_STRUCT;

/* RID_CCR_0_KTI_LLPMON_REG supported on:                                       */
/*      SPRA0 (0x21e09008)                                                      */
/*      SPRB0 (0x21e09008)                                                      */
/*      SPRHBM (0x21e09008)                                                     */
/*      SPRC0 (0x21e09008)                                                      */
/*      SPRMCC (0x21e09008)                                                     */
/*      SPRUCC (0x21e48008)                                                     */
/* Register default value on SPRA0: 0x08800000                                  */
/* Register default value on SPRB0: 0x08800000                                  */
/* Register default value on SPRHBM: 0x08800000                                 */
/* Register default value on SPRC0: 0x08800000                                  */
/* Register default value on SPRMCC: 0x08800000                                 */
/* Register default value on SPRUCC: 0x08800000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* PCIe header Revision ID register and Class Code register
*/


#define RID_CCR_0_KTI_LLPMON_REG 0x09020008

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 revision_id : 8;

                            /* Bits[7:0], Access Type=RO/V, default=0x00000000*/

                            /*
                               Reflects the Uncore Revision ID after reset.
                               Reflects the Compatibility Revision ID if BIOS
                               updates.
                            */
    UINT32 register_level_programming_interface : 8;

                            /* Bits[15:8], Access Type=RO, default=0x00000000*/

                            /* Register Level Programming Interface */
    UINT32 sub_class : 8;

                            /* Bits[23:16], Access Type=RO, default=0x00000080*/

                            /* Sub class code */
    UINT32 base_class : 8;

                            /* Bits[31:24], Access Type=RO, default=0x00000008*/

                            /* Base class code */

  } Bits;
  UINT32 Data;

} RID_CCR_0_KTI_LLPMON_STRUCT;

/* CLSR_0_KTI_LLPMON_REG supported on:                                          */
/*      SPRA0 (0x1e0900c)                                                       */
/*      SPRB0 (0x1e0900c)                                                       */
/*      SPRHBM (0x1e0900c)                                                      */
/*      SPRC0 (0x1e0900c)                                                       */
/*      SPRMCC (0x1e0900c)                                                      */
/*      SPRUCC (0x1e4800c)                                                      */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* PCI Cache Line Size Register
*/


#define CLSR_0_KTI_LLPMON_REG 0x0900000C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 cacheline_size : 8;

                            /* Bits[7:0], Access Type=RO, default=0x00000000*/

                            /* Size of Cacheline */

  } Bits;
  UINT8 Data;

} CLSR_0_KTI_LLPMON_STRUCT;

/* PLAT_0_KTI_LLPMON_REG supported on:                                          */
/*      SPRA0 (0x1e0900d)                                                       */
/*      SPRB0 (0x1e0900d)                                                       */
/*      SPRHBM (0x1e0900d)                                                      */
/*      SPRC0 (0x1e0900d)                                                       */
/*      SPRMCC (0x1e0900d)                                                      */
/*      SPRUCC (0x1e4800d)                                                      */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* PCI Latency Timer
*/


#define PLAT_0_KTI_LLPMON_REG 0x0900000D

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 primary_latency_timer : 8;

                            /* Bits[7:0], Access Type=RO, default=0x00000000*/

                            /* Not applicable to PCI-Express. Hardwired to 00h. */

  } Bits;
  UINT8 Data;

} PLAT_0_KTI_LLPMON_STRUCT;

/* HDR_0_KTI_LLPMON_REG supported on:                                           */
/*      SPRA0 (0x1e0900e)                                                       */
/*      SPRB0 (0x1e0900e)                                                       */
/*      SPRHBM (0x1e0900e)                                                      */
/*      SPRC0 (0x1e0900e)                                                       */
/*      SPRMCC (0x1e0900e)                                                      */
/*      SPRUCC (0x1e4800e)                                                      */
/* Register default value on SPRA0: 0x00000080                                  */
/* Register default value on SPRB0: 0x00000080                                  */
/* Register default value on SPRHBM: 0x00000080                                 */
/* Register default value on SPRC0: 0x00000080                                  */
/* Register default value on SPRMCC: 0x00000080                                 */
/* Register default value on SPRUCC: 0x00000080                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* PCI Header Type
*/


#define HDR_0_KTI_LLPMON_REG 0x0900000E

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 configuration_layout : 7;

                            /* Bits[6:0], Access Type=RO, default=0x00000000*/

                            /* Type 0 header */
    UINT8 multi_function_device : 1;

                            /* Bits[7:7], Access Type=RO, default=0x00000001*/

                            /*
                               This bit defaults to 1b since all these devices
                               are multi-function
                            */

  } Bits;
  UINT8 Data;

} HDR_0_KTI_LLPMON_STRUCT;

/* BIST_0_KTI_LLPMON_REG supported on:                                          */
/*      SPRA0 (0x1e0900f)                                                       */
/*      SPRB0 (0x1e0900f)                                                       */
/*      SPRHBM (0x1e0900f)                                                      */
/*      SPRC0 (0x1e0900f)                                                       */
/*      SPRMCC (0x1e0900f)                                                      */
/*      SPRUCC (0x1e4800f)                                                      */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* PCI BIST Register
*/


#define BIST_0_KTI_LLPMON_REG 0x0900000F

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 bist_tests : 8;

                            /* Bits[7:0], Access Type=RO, default=0x00000000*/

                            /* Not supported. Hardwired to 00h */

  } Bits;
  UINT8 Data;

} BIST_0_KTI_LLPMON_STRUCT;

/* SVID_KTI_LLPMON_REG supported on:                                            */
/*      SPRA0 (0x11e0902c)                                                      */
/*      SPRB0 (0x11e0902c)                                                      */
/*      SPRHBM (0x11e0902c)                                                     */
/*      SPRC0 (0x11e0902c)                                                      */
/*      SPRMCC (0x11e0902c)                                                     */
/*      SPRUCC (0x11e4802c)                                                     */
/* Register default value on SPRA0: 0x00008086                                  */
/* Register default value on SPRB0: 0x00008086                                  */
/* Register default value on SPRHBM: 0x00008086                                 */
/* Register default value on SPRC0: 0x00008086                                  */
/* Register default value on SPRMCC: 0x00008086                                 */
/* Register default value on SPRUCC: 0x00008086                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Subsystem Vendor ID Register
*/


#define SVID_KTI_LLPMON_REG 0x0901002C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 subsystem_vendor_identification_number : 16;

                            /* Bits[15:0], Access Type=RW/O, default=0x00008086*/

                            /*
                               The default value specifies Intel but can be set
                               to any value once after reset.
                            */

  } Bits;
  UINT16 Data;

} SVID_KTI_LLPMON_STRUCT;

/* SDID_0_KTI_LLPMON_REG supported on:                                          */
/*      SPRA0 (0x11e0902e)                                                      */
/*      SPRB0 (0x11e0902e)                                                      */
/*      SPRHBM (0x11e0902e)                                                     */
/*      SPRC0 (0x11e0902e)                                                      */
/*      SPRMCC (0x11e0902e)                                                     */
/*      SPRUCC (0x11e4802e)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Subsystem ID Register
*/


#define SDID_0_KTI_LLPMON_REG 0x0901002E

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT16 subsystem_identification_number : 16;

                            /* Bits[15:0], Access Type=RW/O, default=0x00000000*/

                            /*
                               Assigned by the subsystem vendor to uniquely
                               identify the subsystem
                            */

  } Bits;
  UINT16 Data;

} SDID_0_KTI_LLPMON_STRUCT;

/* CAPPTR_0_KTI_LLPMON_REG supported on:                                        */
/*      SPRA0 (0x1e09034)                                                       */
/*      SPRB0 (0x1e09034)                                                       */
/*      SPRHBM (0x1e09034)                                                      */
/*      SPRC0 (0x1e09034)                                                       */
/*      SPRMCC (0x1e09034)                                                      */
/*      SPRUCC (0x1e48034)                                                      */
/* Register default value on SPRA0: 0x00000040                                  */
/* Register default value on SPRB0: 0x00000040                                  */
/* Register default value on SPRHBM: 0x00000040                                 */
/* Register default value on SPRC0: 0x00000040                                  */
/* Register default value on SPRMCC: 0x00000040                                 */
/* Register default value on SPRUCC: 0x00000040                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* PCI Capability Pointer Register
*/


#define CAPPTR_0_KTI_LLPMON_REG 0x09000034

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 capability_pointer : 8;

                            /* Bits[7:0], Access Type=RO, default=0x00000040*/

                            /*
                               Points to the first capability structure for the
                               device which is the PCIe capability.
                            */

  } Bits;
  UINT8 Data;

} CAPPTR_0_KTI_LLPMON_STRUCT;

/* INTL_0_KTI_LLPMON_REG supported on:                                          */
/*      SPRA0 (0x1e0903c)                                                       */
/*      SPRB0 (0x1e0903c)                                                       */
/*      SPRHBM (0x1e0903c)                                                      */
/*      SPRC0 (0x1e0903c)                                                       */
/*      SPRMCC (0x1e0903c)                                                      */
/*      SPRUCC (0x1e4803c)                                                      */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* PCI Interrupt Line Register
*/


#define INTL_0_KTI_LLPMON_REG 0x0900003C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 interrupt_line : 8;

                            /* Bits[7:0], Access Type=RO, default=0x00000000*/

                            /* N/A for these devices */

  } Bits;
  UINT8 Data;

} INTL_0_KTI_LLPMON_STRUCT;

/* INTPIN_0_KTI_LLPMON_REG supported on:                                        */
/*      SPRA0 (0x1e0903d)                                                       */
/*      SPRB0 (0x1e0903d)                                                       */
/*      SPRHBM (0x1e0903d)                                                      */
/*      SPRC0 (0x1e0903d)                                                       */
/*      SPRMCC (0x1e0903d)                                                      */
/*      SPRUCC (0x1e4803d)                                                      */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* PCI Interrupt Pin Register
*/


#define INTPIN_0_KTI_LLPMON_REG 0x0900003D

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 interrupt_pin : 8;

                            /* Bits[7:0], Access Type=RO, default=0x00000000*/

                            /*
                               N/A since these devices do not generate any
                               interrupt on their own
                            */

  } Bits;
  UINT8 Data;

} INTPIN_0_KTI_LLPMON_STRUCT;

/* MINGNT_0_KTI_LLPMON_REG supported on:                                        */
/*      SPRA0 (0x1e0903e)                                                       */
/*      SPRB0 (0x1e0903e)                                                       */
/*      SPRHBM (0x1e0903e)                                                      */
/*      SPRC0 (0x1e0903e)                                                       */
/*      SPRMCC (0x1e0903e)                                                      */
/*      SPRUCC (0x1e4803e)                                                      */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* PCI Min Grant Register
*/


#define MINGNT_0_KTI_LLPMON_REG 0x0900003E

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 mgv : 8;

                            /* Bits[7:0], Access Type=RO, default=0x00000000*/

                            /*
                               The device does not burst as a PCI compliant
                               master.
                            */

  } Bits;
  UINT8 Data;

} MINGNT_0_KTI_LLPMON_STRUCT;

/* MAXLAT_0_KTI_LLPMON_REG supported on:                                        */
/*      SPRA0 (0x1e0903f)                                                       */
/*      SPRB0 (0x1e0903f)                                                       */
/*      SPRHBM (0x1e0903f)                                                      */
/*      SPRC0 (0x1e0903f)                                                       */
/*      SPRMCC (0x1e0903f)                                                      */
/*      SPRUCC (0x1e4803f)                                                      */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* PCI Max Latency Register
*/


#define MAXLAT_0_KTI_LLPMON_REG 0x0900003F

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT8 mlv : 8;

                            /* Bits[7:0], Access Type=RO, default=0x00000000*/

                            /*
                               The device has no specific requirements for how
                               often it needs to access the PCI bus.
                            */

  } Bits;
  UINT8 Data;

} MAXLAT_0_KTI_LLPMON_STRUCT;

/* PXPCAP_0_KTI_LLPMON_REG supported on:                                        */
/*      SPRA0 (0x21e09040)                                                      */
/*      SPRB0 (0x21e09040)                                                      */
/*      SPRHBM (0x21e09040)                                                     */
/*      SPRC0 (0x21e09040)                                                      */
/*      SPRMCC (0x21e09040)                                                     */
/*      SPRUCC (0x21e48040)                                                     */
/* Register default value on SPRA0: 0x00920010                                  */
/* Register default value on SPRB0: 0x00920010                                  */
/* Register default value on SPRHBM: 0x00920010                                 */
/* Register default value on SPRC0: 0x00920010                                  */
/* Register default value on SPRMCC: 0x00920010                                 */
/* Register default value on SPRUCC: 0x00920010                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* PCI Express Capability
*/


#define PXPCAP_0_KTI_LLPMON_REG 0x09020040

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 capability_id : 8;

                            /* Bits[7:0], Access Type=RO, default=0x00000010*/

                            /*
                               Identifies the PCI Express capability assigned
                               by PCI-SIG.
                            */
    UINT32 next_ptr : 8;

                            /* Bits[15:8], Access Type=RO, default=0x00000000*/

                            /*
                               Pointer to the next capability. Set to 0 to
                               indicate there are no more capability
                               structures.
                            */
    UINT32 capability_version : 4;

                            /* Bits[19:16], Access Type=RO, default=0x00000002*/

                            /*
                               PCI Express Capability is Compliant with Version
                               2.0 of the PCI Express Spec.
                            */
    UINT32 device_port_type : 4;

                            /* Bits[23:20], Access Type=RO, default=0x00000009*/

                            /* Device type is Root Complex Integrated Endpoint */
    UINT32 slot_implemented : 1;

                            /* Bits[24:24], Access Type=RO, default=0x00000000*/

                            /* Not valid for PCIe integrated Endpoints */
    UINT32 interrupt_message_number : 5;

                            /* Bits[29:25], Access Type=RO, default=0x00000000*/

                            /*
                               Not valid for this device, since the device does
                               not generate interrupts
                            */
    UINT32 rsvd : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} PXPCAP_0_KTI_LLPMON_STRUCT;

/* PCIE_RSVD0_0_KTI_LLPMON_REG supported on:                                    */
/*      SPRA0 (0x21e09044)                                                      */
/*      SPRB0 (0x21e09044)                                                      */
/*      SPRHBM (0x21e09044)                                                     */
/*      SPRC0 (0x21e09044)                                                      */
/*      SPRMCC (0x21e09044)                                                     */
/*      SPRUCC (0x21e48044)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Reserved space for PCIE header registers
*/


#define PCIE_RSVD0_0_KTI_LLPMON_REG 0x09020044

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 reserved : 32;

                            /* Bits[31:0], Access Type=RO, default=0x00000000*/

                            /* This space is reserved */

  } Bits;
  UINT32 Data;

} PCIE_RSVD0_0_KTI_LLPMON_STRUCT;

/* PCIE_RSVD1_0_N0_KTI_LLPMON_REG supported on:                                 */
/*      SPRA0 (0x21e09048)                                                      */
/*      SPRB0 (0x21e09048)                                                      */
/*      SPRHBM (0x21e09048)                                                     */
/*      SPRC0 (0x21e09048)                                                      */
/*      SPRMCC (0x21e09048)                                                     */
/*      SPRUCC (0x21e48048)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Reserved space for PCIE header registers
*/


#define PCIE_RSVD1_0_N0_KTI_LLPMON_REG 0x09020048

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 reserved : 32;

                            /* Bits[31:0], Access Type=RO, default=0x00000000*/

                            /* This space is reserved */

  } Bits;
  UINT32 Data;

} PCIE_RSVD1_0_N0_KTI_LLPMON_STRUCT;

/* PCIE_RSVD1_0_N1_KTI_LLPMON_REG supported on:                                 */
/*      SPRA0 (0x21e0904c)                                                      */
/*      SPRB0 (0x21e0904c)                                                      */
/*      SPRHBM (0x21e0904c)                                                     */
/*      SPRC0 (0x21e0904c)                                                      */
/*      SPRMCC (0x21e0904c)                                                     */
/*      SPRUCC (0x21e4804c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Reserved space for PCIE header registers
*/


#define PCIE_RSVD1_0_N1_KTI_LLPMON_REG 0x0902004C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 reserved : 32;

                            /* Bits[31:0], Access Type=RO, default=0x00000000*/

                            /* This space is reserved */

  } Bits;
  UINT32 Data;

} PCIE_RSVD1_0_N1_KTI_LLPMON_STRUCT;

/* PCIE_RSVD2_0_N0_KTI_LLPMON_REG supported on:                                 */
/*      SPRA0 (0x21e09050)                                                      */
/*      SPRB0 (0x21e09050)                                                      */
/*      SPRHBM (0x21e09050)                                                     */
/*      SPRC0 (0x21e09050)                                                      */
/*      SPRMCC (0x21e09050)                                                     */
/*      SPRUCC (0x21e48050)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Reserved space for PCIE header registers
*/


#define PCIE_RSVD2_0_N0_KTI_LLPMON_REG 0x09020050

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 reserved : 32;

                            /* Bits[31:0], Access Type=RO, default=0x00000000*/

                            /* This space is reserved */

  } Bits;
  UINT32 Data;

} PCIE_RSVD2_0_N0_KTI_LLPMON_STRUCT;

/* PCIE_RSVD2_0_N1_KTI_LLPMON_REG supported on:                                 */
/*      SPRA0 (0x21e09054)                                                      */
/*      SPRB0 (0x21e09054)                                                      */
/*      SPRHBM (0x21e09054)                                                     */
/*      SPRC0 (0x21e09054)                                                      */
/*      SPRMCC (0x21e09054)                                                     */
/*      SPRUCC (0x21e48054)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Reserved space for PCIE header registers
*/


#define PCIE_RSVD2_0_N1_KTI_LLPMON_REG 0x09020054

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 reserved : 32;

                            /* Bits[31:0], Access Type=RO, default=0x00000000*/

                            /* This space is reserved */

  } Bits;
  UINT32 Data;

} PCIE_RSVD2_0_N1_KTI_LLPMON_STRUCT;

/* PCIE_RSVD3_0_N0_KTI_LLPMON_REG supported on:                                 */
/*      SPRA0 (0x21e09058)                                                      */
/*      SPRB0 (0x21e09058)                                                      */
/*      SPRHBM (0x21e09058)                                                     */
/*      SPRC0 (0x21e09058)                                                      */
/*      SPRMCC (0x21e09058)                                                     */
/*      SPRUCC (0x21e48058)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Reserved space for PCIE header registers
*/


#define PCIE_RSVD3_0_N0_KTI_LLPMON_REG 0x09020058

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 reserved : 32;

                            /* Bits[31:0], Access Type=RO, default=0x00000000*/

                            /* This space is reserved */

  } Bits;
  UINT32 Data;

} PCIE_RSVD3_0_N0_KTI_LLPMON_STRUCT;

/* PCIE_RSVD3_0_N1_KTI_LLPMON_REG supported on:                                 */
/*      SPRA0 (0x21e0905c)                                                      */
/*      SPRB0 (0x21e0905c)                                                      */
/*      SPRHBM (0x21e0905c)                                                     */
/*      SPRC0 (0x21e0905c)                                                      */
/*      SPRMCC (0x21e0905c)                                                     */
/*      SPRUCC (0x21e4805c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Reserved space for PCIE header registers
*/


#define PCIE_RSVD3_0_N1_KTI_LLPMON_REG 0x0902005C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 reserved : 32;

                            /* Bits[31:0], Access Type=RO, default=0x00000000*/

                            /* This space is reserved */

  } Bits;
  UINT32 Data;

} PCIE_RSVD3_0_N1_KTI_LLPMON_STRUCT;

/* PCIE_RSVD4_0_N0_KTI_LLPMON_REG supported on:                                 */
/*      SPRA0 (0x21e09060)                                                      */
/*      SPRB0 (0x21e09060)                                                      */
/*      SPRHBM (0x21e09060)                                                     */
/*      SPRC0 (0x21e09060)                                                      */
/*      SPRMCC (0x21e09060)                                                     */
/*      SPRUCC (0x21e48060)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Reserved space for PCIE header registers
*/


#define PCIE_RSVD4_0_N0_KTI_LLPMON_REG 0x09020060

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 reserved : 32;

                            /* Bits[31:0], Access Type=RO, default=0x00000000*/

                            /* This space is reserved */

  } Bits;
  UINT32 Data;

} PCIE_RSVD4_0_N0_KTI_LLPMON_STRUCT;

/* PCIE_RSVD4_0_N1_KTI_LLPMON_REG supported on:                                 */
/*      SPRA0 (0x21e09064)                                                      */
/*      SPRB0 (0x21e09064)                                                      */
/*      SPRHBM (0x21e09064)                                                     */
/*      SPRC0 (0x21e09064)                                                      */
/*      SPRMCC (0x21e09064)                                                     */
/*      SPRUCC (0x21e48064)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Reserved space for PCIE header registers
*/


#define PCIE_RSVD4_0_N1_KTI_LLPMON_REG 0x09020064

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 reserved : 32;

                            /* Bits[31:0], Access Type=RO, default=0x00000000*/

                            /* This space is reserved */

  } Bits;
  UINT32 Data;

} PCIE_RSVD4_0_N1_KTI_LLPMON_STRUCT;

/* PCIE_RSVD5_0_N0_KTI_LLPMON_REG supported on:                                 */
/*      SPRA0 (0x21e09068)                                                      */
/*      SPRB0 (0x21e09068)                                                      */
/*      SPRHBM (0x21e09068)                                                     */
/*      SPRC0 (0x21e09068)                                                      */
/*      SPRMCC (0x21e09068)                                                     */
/*      SPRUCC (0x21e48068)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Reserved space for PCIE header registers
*/


#define PCIE_RSVD5_0_N0_KTI_LLPMON_REG 0x09020068

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 reserved : 32;

                            /* Bits[31:0], Access Type=RO, default=0x00000000*/

                            /* This space is reserved */

  } Bits;
  UINT32 Data;

} PCIE_RSVD5_0_N0_KTI_LLPMON_STRUCT;

/* PCIE_RSVD5_0_N1_KTI_LLPMON_REG supported on:                                 */
/*      SPRA0 (0x21e0906c)                                                      */
/*      SPRB0 (0x21e0906c)                                                      */
/*      SPRHBM (0x21e0906c)                                                     */
/*      SPRC0 (0x21e0906c)                                                      */
/*      SPRMCC (0x21e0906c)                                                     */
/*      SPRUCC (0x21e4806c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Reserved space for PCIE header registers
*/


#define PCIE_RSVD5_0_N1_KTI_LLPMON_REG 0x0902006C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 reserved : 32;

                            /* Bits[31:0], Access Type=RO, default=0x00000000*/

                            /* This space is reserved */

  } Bits;
  UINT32 Data;

} PCIE_RSVD5_0_N1_KTI_LLPMON_STRUCT;

/* PCIE_RSVD6_0_N0_KTI_LLPMON_REG supported on:                                 */
/*      SPRA0 (0x21e09070)                                                      */
/*      SPRB0 (0x21e09070)                                                      */
/*      SPRHBM (0x21e09070)                                                     */
/*      SPRC0 (0x21e09070)                                                      */
/*      SPRMCC (0x21e09070)                                                     */
/*      SPRUCC (0x21e48070)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Reserved space for PCIE header registers
*/


#define PCIE_RSVD6_0_N0_KTI_LLPMON_REG 0x09020070

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 reserved : 32;

                            /* Bits[31:0], Access Type=RO, default=0x00000000*/

                            /* This space is reserved */

  } Bits;
  UINT32 Data;

} PCIE_RSVD6_0_N0_KTI_LLPMON_STRUCT;

/* PCIE_RSVD6_0_N1_KTI_LLPMON_REG supported on:                                 */
/*      SPRA0 (0x21e09074)                                                      */
/*      SPRB0 (0x21e09074)                                                      */
/*      SPRHBM (0x21e09074)                                                     */
/*      SPRC0 (0x21e09074)                                                      */
/*      SPRMCC (0x21e09074)                                                     */
/*      SPRUCC (0x21e48074)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Reserved space for PCIE header registers
*/


#define PCIE_RSVD6_0_N1_KTI_LLPMON_REG 0x09020074

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 reserved : 32;

                            /* Bits[31:0], Access Type=RO, default=0x00000000*/

                            /* This space is reserved */

  } Bits;
  UINT32 Data;

} PCIE_RSVD6_0_N1_KTI_LLPMON_STRUCT;

/* PCIE_RSVD7_0_KTI_LLPMON_REG supported on:                                    */
/*      SPRA0 (0x21e09078)                                                      */
/*      SPRB0 (0x21e09078)                                                      */
/*      SPRHBM (0x21e09078)                                                     */
/*      SPRC0 (0x21e09078)                                                      */
/*      SPRMCC (0x21e09078)                                                     */
/*      SPRUCC (0x21e48078)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* Reserved space for PCIE header registers
*/


#define PCIE_RSVD7_0_KTI_LLPMON_REG 0x09020078

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 reserved : 32;

                            /* Bits[31:0], Access Type=RO, default=0x00000000*/

                            /* This space is reserved */

  } Bits;
  UINT32 Data;

} PCIE_RSVD7_0_KTI_LLPMON_STRUCT;

/* KTILCP_KTI_LLPMON_REG supported on:                                          */
/*      SPRA0 (0x21e09080)                                                      */
/*      SPRB0 (0x21e09080)                                                      */
/*      SPRHBM (0x21e09080)                                                     */
/*      SPRC0 (0x21e09080)                                                      */
/*      SPRMCC (0x21e09080)                                                     */
/*      SPRUCC (0x21e48080)                                                     */
/* Register default value on SPRA0: 0x000B3000                                  */
/* Register default value on SPRB0: 0x000B3000                                  */
/* Register default value on SPRHBM: 0x000B3000                                 */
/* Register default value on SPRC0: 0x000B3400                                  */
/* Register default value on SPRMCC: 0x000B3400                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktilcp
*/


#define KTILCP_KTI_LLPMON_REG 0x09020080

#if defined(SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 kti_version_number : 4;

                            /* Bits[3:0], Access Type=RO, default=0x00000000*/

                            /*
                               Intel UPI Version number 0h - rev 1.0 >0h -
                               Reserved
                            */
    UINT32 rsvd : 4;

                            /* Bits[7:4], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 crc_mode_supported : 2;

                            /* Bits[9:8], Access Type=RO, default=0x00000000*/

                            /*
                               CRC Mode Supported 00 - CRC16 01 - Reserved 10 -
                               Reserved 11 - Reserved Value set based on SKU.
                            */
    UINT32 vn1_supported : 1;

                            /* Bits[10:10], Access Type=RO, default=0x00000000*/

                            /*
                               VN1 Supported 0 - VN1 Not Supported 1 - VN1 Is
                               Supported
                            */
    UINT32 rsvd_11 : 1;

                            /* Bits[11:11], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 llrq_wrap_value : 8;

                            /* Bits[19:12], Access Type=RO, default=0x000000B3*/

                            /*
                               Link Layer Retry Queue Wrap Value Size of Queue
                               - 1
                            */
    UINT32 rsvd_20 : 12;

                            /* Bits[31:20], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTILCP_KTI_LLPMON_SPRA0_SPRB0_SPRHBM_SPRC0_SPRMCC_STRUCT;
#endif /* (SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) */

#if defined(SPRUCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 kti_version_number : 4;

                            /* Bits[3:0], Access Type=RO, default=0x00000000*/

                            /*
                               Intel UPI Version number 0h - rev 1.0 >0h -
                               Reserved
                            */
    UINT32 rsvd : 6;

                            /* Bits[9:4], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vn1_supported : 1;

                            /* Bits[10:10], Access Type=RO, default=0x00000000*/

                            /*
                               VN1 Supported 0 - VN1 Not Supported 1 - VN1 Is
                               Supported
                            */
    UINT32 rsvd_11 : 21;

                            /* Bits[31:11], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTILCP_KTI_LLPMON_SPRUCC_STRUCT;
#endif /* (SPRUCC_HOST) */

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 kti_version_number : 4;

                            /* Bits[3:0], Access Type=RO, default=0x00000000*/

                            /*
                               Intel UPI Version number 0h - rev 1.0 >0h -
                               Reserved
                            */
    UINT32 rsvd : 6;

                            /* Bits[9:4], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vn1_supported : 1;

                            /* Bits[10:10], Access Type=RO, default=0x00000000*/

                            /*
                               VN1 Supported 0 - VN1 Not Supported 1 - VN1 Is
                               Supported
                            */
    UINT32 rsvd_11 : 21;

                            /* Bits[31:11], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTILCP_KTI_LLPMON_STRUCT;

#if defined(SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST)
/* KTILCL_KTI_LLPMON_REG supported on:                                          */
/*      SPRA0 (0x21e09084)                                                      */
/*      SPRB0 (0x21e09084)                                                      */
/*      SPRHBM (0x21e09084)                                                     */
/*      SPRC0 (0x21e09084)                                                      */
/*      SPRMCC (0x21e09084)                                                     */
/* Register default value on SPRA0: 0x00003F01                                  */
/* Register default value on SPRB0: 0x00003F01                                  */
/* Register default value on SPRHBM: 0x00003F01                                 */
/* Register default value on SPRC0: 0x00003F01                                  */
/* Register default value on SPRMCC: 0x00003F01                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* ktilcl
*/


#define KTILCL_KTI_LLPMON_REG 0x09020084

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 link_layer_reset : 1;

                            /* Bits[0:0], Access Type=RW/V, default=0x00000001*/

                            /*
                               Re-initialize without resetting values in sticky
                               registers. Write 1 to reset link - this is a
                               destructive reset to all link layer state. When
                               link layer reset completes, hardware will clear
                               the bit to 0. This reset should only be done
                               when software can guarantee no valid protocol
                               traffic is flowing on the link. Only supported
                               usage for this bit in processor is hot-plug
                               sequence. Note: The default value of the
                               register is 1. It is expected that, when a
                               platform is booting, the deassertion of the
                               platform reset pin will allow link layer reset
                               to proceed and once that completes, hardware
                               will clear the bit to 0.
                            */
    UINT32 enable_debug_flits : 1;

                            /* Bits[1:1], Access Type=RW/P, default=0x00000000*/

                            /*
                               0 - No LLCTRL-DEBUG flits will be sent 1 -
                               LLCTRL-DEBUG flits may be sent
                            */
    UINT32 link_layer_initialization_stall : 1;

                            /* Bits[2:2], Access Type=RW/P, default=0x00000000*/

                            /*
                               Link Layer Initialization Stall 0 - disable 1 -
                               enable on next initialization. Stall the
                               transmission of the LLCTRL-INIT.Param flit until
                               this bit is cleared. Note: this bit is set and
                               cleared only by software (no hardware clearing
                               is supported).
                            */
    UINT32 link_layer_credit_refund_stall : 1;

                            /* Bits[3:3], Access Type=RW/P, default=0x00000000*/

                            /*
                               Link Layer Credit Refund Stall 0 - disable 1 -
                               Enable, on next initialization, stall the refund
                               of initial link layer credits until this bit is
                               cleared. Note: this bit is set and cleared only
                               by software (no hardware clearing is supported).
                            */
    UINT32 llr_retry_timeout : 3;

                            /* Bits[6:4], Access Type=RW/P, default=0x00000000*/

                            /*
                               Link Layer Retry Timeout value in terms of flits
                               received 000 - 4095 flits 001 - 2047 flits 010 -
                               1023 flits 011 - 511 flits 100 - 255 flits 101 -
                               127 flits 110 - 63 flits 111 - 31 flits Note:
                               This timeout value must be set higher than the
                               round-trip delay between this device and the
                               remote device. Note: Values below 4095 are
                               intended for validation purposes and are not
                               expected for use in systems.
                            */
    UINT32 rsvd : 1;

                            /* Bits[7:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 max_num_retry : 4;

                            /* Bits[11:8], Access Type=RW/P, default=0x0000000F*/

                            /*
                               Consecutive LLRs to Physical Layer ReInit Note:
                               This value is directly encoded which is
                               different then Intel UPI definition where values
                               were encoded.
                            */
    UINT32 max_num_phy_reinit : 2;

                            /* Bits[13:12], Access Type=RW/P, default=0x00000003*/

                            /*
                               Consecutive Phy ReInit?s to RETRY_ABORT Note:
                               this value is directly encoded which is
                               different then Intel UPI definition where values
                               were encoded.
                            */
    UINT32 next_crc_mode : 2;

                            /* Bits[15:14], Access Type=RW/P, default=0x00000000*/

                            /*
                               CRC mode for the Tx and Rx of the Link layer to
                               take effect after the next Link layer reset. 00
                               - Use CRC16 01 - Reserved 10 - Reserved 11 -
                               Reserved Note: Setting Next CRC Mode to Rolling
                               CRC will have no effect if that mode is not
                               supported by the device as defined in
                               KTILCP.crc_mode_supported. Software must ensure
                               the Next CRC Modes being set at both ends of the
                               link are within the capability of the devices
                               and match each other.
                            */
    UINT32 rsvd_16 : 16;

                            /* Bits[31:16], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTILCL_KTI_LLPMON_STRUCT;
#endif /* (SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) */

/* KTILCCL_KTI_LLPMON_REG supported on:                                         */
/*      SPRA0 (0x21e09088)                                                      */
/*      SPRB0 (0x21e09088)                                                      */
/*      SPRHBM (0x21e09088)                                                     */
/*      SPRC0 (0x21e09088)                                                      */
/*      SPRMCC (0x21e09088)                                                     */
/*      SPRUCC (0x21e48088)                                                     */
/* Register default value on SPRA0: 0x0092498A                                  */
/* Register default value on SPRB0: 0x0092498A                                  */
/* Register default value on SPRHBM: 0x0092498A                                 */
/* Register default value on SPRC0: 0x0092498A                                  */
/* Register default value on SPRMCC: 0x0092498A                                 */
/* Register default value on SPRUCC: 0x0092498A                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktilccl
*/


#define KTILCCL_KTI_LLPMON_REG 0x09020088

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 vna_credits : 8;

                            /* Bits[7:0], Access Type=RW/P, default=0x0000008A*/

                            /*
                               VNA credits to advertise at the next link init
                               0-180 credits (total across all VNA/VN0/VN1
                               credits must be less-than-or-equal-to 180)
                            */
    UINT32 vn0_req_credits : 3;

                            /* Bits[10:8], Access Type=RW/P, default=0x00000001*/

                            /*
                               VN0 - Req credits to advertise at the next link
                               init Allowed values:0-7 credit (total across all
                               VNA/VN0/VN1 credits must be less-than-or-equal-
                               to 180)
                            */
    UINT32 vn0_snp_credits : 3;

                            /* Bits[13:11], Access Type=RW/P, default=0x00000001*/

                            /*
                               VN0 - Snp credits to advertise at the next link
                               init Allowed values:0-7 credits (total across
                               all VNA/VN0/VN1 credits must be less-than-or-
                               equal-to 180)
                            */
    UINT32 vn0_rsp_credits : 3;

                            /* Bits[16:14], Access Type=RW/P, default=0x00000001*/

                            /*
                               VN0 - RSP credits to advertise at the next link
                               init Allowed values:0-7 credits (total across
                               all VNA/VN0/VN1 credits must be less-than-or-
                               equal-to 180)
                            */
    UINT32 vn0_wb_credits : 3;

                            /* Bits[19:17], Access Type=RW/P, default=0x00000001*/

                            /*
                               VN0 - WB credits to advertise at the next link
                               init Allowed values:0-7 credits (total across
                               all VNA/VN0/VN1 credits must be less-than-or-
                               equal-to 180)
                            */
    UINT32 vn0_ncb_credits : 3;

                            /* Bits[22:20], Access Type=RW/P, default=0x00000001*/

                            /*
                               VN0 - NCB credits to advertise at the next link
                               init Allowed values:0-7 credits (total across
                               all VNA/VN0/VN1 credits must be less-than-or-
                               equal-to 180)
                            */
    UINT32 vn0_ncs_credits : 3;

                            /* Bits[25:23], Access Type=RW/P, default=0x00000001*/

                            /*
                               VN0 - NCS credits to advertise at the next link
                               init Allowed values:0-7 credits (total across
                               all VNA/VN0/VN1 credits must be less-than-or-
                               equal-to 180)
                            */
    UINT32 vn1_enable : 1;

                            /* Bits[26:26], Access Type=RW/P, default=0x00000000*/

                            /*
                               Program to 1 to enable VN1 Link Credit Init. Use
                               VN0 credit values for VN1 channels. VN0 values
                               in the other fields of this register apply to
                               the corresponding channel in VN1. VN1 must be
                               supported and enabled.
                            */
    UINT32 rsvd : 5;

                            /* Bits[31:27], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTILCCL_KTI_LLPMON_STRUCT;

#if defined(SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST)
/* KTILS_KTI_LLPMON_REG supported on:                                           */
/*      SPRA0 (0x21e0908c)                                                      */
/*      SPRB0 (0x21e0908c)                                                      */
/*      SPRHBM (0x21e0908c)                                                     */
/*      SPRC0 (0x21e0908c)                                                      */
/*      SPRMCC (0x21e0908c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* ktils
*/


#define KTILS_KTI_LLPMON_REG 0x0902008C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 link_layer_retry_queue_consumed : 8;

                            /* Bits[7:0], Access Type=RO/V, default=0x00000000*/

                            /*
                               Link Layer Retry Queue Consumed Number of Retry
                               Queue entries currently consumed while waiting
                               for ACK.
                            */
    UINT32 init_state : 2;

                            /* Bits[9:8], Access Type=RO/V, default=0x00000000*/

                            /*
                               Reflects the current Initialization State of the
                               link Layer, including any stall conditions
                               controlled by LL_LCL[3:2]. 00 - NOT_RDY_FOR_INIT
                               01 - PARAM_EX 10 - CRD_RETURN_STALL 11 -
                               INIT_DONE
                            */
    UINT32 retry_state : 3;

                            /* Bits[12:10], Access Type=RO/V, default=0x00000000*/

                            /*
                               Reflects the current state of Local Retry State
                               Machine 000 - Retry_Local_Normal 001 -
                               Retry_LLRReq 010 - Retry_Local_Idle 011 -
                               Retry_Phy_Reinit 100 - Retry_Abort
                            */
    UINT32 rx_normal_op_state : 1;

                            /* Bits[13:13], Access Type=RO/V, default=0x00000000*/

                            /*
                               Reflects whether the LL Rx is in Normal
                               Operation (i.e.. has received at least one flit
                               from the Phy). Resets to 0 on cold reset, warm
                               reset, or Link layer LL_LCL[0] reset, and is set
                               to 1 upon receipt of the first flit from the
                               Physical layer. 0 - Not Rx Normal Operation 1 -
                               Rx Normal Operation
                            */
    UINT32 current_crc_mode : 2;

                            /* Bits[15:14], Access Type=RO/V, default=0x00000000*/

                            /*
                               This field represents the current operating CRC
                               mode of the Tx and Rx of the Link layer. 00 -
                               CRC16 01 - Reserved 10 - Reserved 11 - Reserved
                            */
    UINT32 rsvd : 16;

                            /* Bits[31:16], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTILS_KTI_LLPMON_STRUCT;
#endif /* (SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) */

#if defined(SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST)
/* KTILES_KTI_LLPMON_REG supported on:                                          */
/*      SPRA0 (0x21e09090)                                                      */
/*      SPRB0 (0x21e09090)                                                      */
/*      SPRHBM (0x21e09090)                                                     */
/*      SPRC0 (0x21e09090)                                                      */
/*      SPRMCC (0x21e09090)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* ktiles
*/


#define KTILES_KTI_LLPMON_REG 0x09020090

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 worst_llr_numretry_count : 4;

                            /* Bits[3:0], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Worst Case Link Layer Retry NUM_RETRY Highest
                               NUM_RETRY count achieved since last clear of
                               this register or PHY reinit initiated by the LLR
                               LRSM.
                            */
    UINT32 rsvd : 4;

                            /* Bits[7:4], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 worst_llr_num_phyreinit_count : 2;

                            /* Bits[9:8], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Worst Case Retry NUM_PHY_REINIT Highest
                               NUM_PHY_REINIT count achieved since last clear
                               of this field.
                            */
    UINT32 rsvd_10 : 22;

                            /* Bits[31:10], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTILES_KTI_LLPMON_STRUCT;
#endif /* (SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) */

/* KTILP0_KTI_LLPMON_REG supported on:                                          */
/*      SPRA0 (0x21e09094)                                                      */
/*      SPRB0 (0x21e09094)                                                      */
/*      SPRHBM (0x21e09094)                                                     */
/*      SPRC0 (0x21e09094)                                                      */
/*      SPRMCC (0x21e09094)                                                     */
/*      SPRUCC (0x21e48094)                                                     */
/* Register default value on SPRA0: 0x09000000                                  */
/* Register default value on SPRB0: 0x09000000                                  */
/* Register default value on SPRHBM: 0x09000000                                 */
/* Register default value on SPRC0: 0x09000000                                  */
/* Register default value on SPRMCC: 0x09000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktilp0
*/


#define KTILP0_KTI_LLPMON_REG 0x09020094

#if defined(SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 kti_version : 4;

                            /* Bits[3:0], Access Type=RO/V, default=0x00000000*/

                            /*
                               Parameter bits from peer agent. Cleared on any
                               LL initialization.
                            */
    UINT32 sku_type : 4;

                            /* Bits[7:4], Access Type=RO/V, default=0x00000000*/

                            /* RSVD */
    UINT32 sending_port : 5;

                            /* Bits[12:8], Access Type=RO/V, default=0x00000000*/

                            /*
                               Parameter bits from peer agent. Cleared on any
                               LL initialization. The processor die port number
                               of the sending port. Legal values are 0-2.
                            */
    UINT32 rsvd_13 : 1;

                            /* Bits[13:13], Access Type=RO/V, default=0x00000000*/

                            /*
                               Parameter bits from peer agent. Cleared on any
                               LL initialization.
                            */
    UINT32 lt_agent : 1;

                            /* Bits[14:14], Access Type=RO/V, default=0x00000000*/

                            /*
                               Parameter bits from peer agent. Cleared on any
                               LL initialization. Set if the sending socket
                               acts as an LT Agent. Tied to the LT Strap
                               (LTEnable).
                            */
    UINT32 firmware : 1;

                            /* Bits[15:15], Access Type=RO/V, default=0x00000000*/

                            /*
                               Parameter bits from peer agent. Cleared on any
                               LL initialization. Set if the sending socket
                               acts as a firmware agent. Tied to the Firmware
                               Agent Strap (FrmAGENT).
                            */
    UINT32 base_nodeid : 4;

                            /* Bits[19:16], Access Type=RO/V, default=0x00000000*/

                            /*
                               Parameter bits from peer agent. Cleared on any
                               LL initialization. The NodeID of the sending
                               socket.
                            */
    UINT32 rsvd_23_20 : 4;

                            /* Bits[23:20], Access Type=RO/V, default=0x00000000*/

                            /*
                               Parameter bits from peer agent. Cleared on any
                               LL initialization.
                            */
    UINT32 llr_wrap : 8;

                            /* Bits[31:24], Access Type=RO/V, default=0x00000009*/

                            /*
                               Parameter bits from peer agent. Cleared on any
                               LL initialization. Specifies the size of the
                               link layer retry buffer -1.
                            */

  } Bits;
  UINT32 Data;

} KTILP0_KTI_LLPMON_SPRA0_SPRB0_SPRHBM_SPRC0_SPRMCC_STRUCT;
#endif /* (SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) */

#if defined(SPRUCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 kti_version : 4;

                            /* Bits[3:0], Access Type=RO/V, default=0x00000000*/

                            /*
                               Parameter bits from peer agent. Cleared on any
                               LL initialization.
                            */
    UINT32 sku_type : 4;

                            /* Bits[7:4], Access Type=RO/V, default=0x00000000*/

                            /* RSVD */
    UINT32 sending_port : 5;

                            /* Bits[12:8], Access Type=RO/V, default=0x00000000*/

                            /*
                               Parameter bits from peer agent. Cleared on any
                               LL initialization. The processor die port number
                               of the sending port. Legal values are 0-2.
                            */
    UINT32 rsvd_13 : 1;

                            /* Bits[13:13], Access Type=RO/V, default=0x00000000*/

                            /*
                               Parameter bits from peer agent. Cleared on any
                               LL initialization.
                            */
    UINT32 lt_agent : 1;

                            /* Bits[14:14], Access Type=RO/V, default=0x00000000*/

                            /*
                               Parameter bits from peer agent. Cleared on any
                               LL initialization. Set if the sending socket
                               acts as an LT Agent. Tied to the LT Strap
                               (LTEnable).
                            */
    UINT32 firmware : 1;

                            /* Bits[15:15], Access Type=RO/V, default=0x00000000*/

                            /*
                               Parameter bits from peer agent. Cleared on any
                               LL initialization. Set if the sending socket
                               acts as a firmware agent. Tied to the Firmware
                               Agent Strap (FrmAGENT).
                            */
    UINT32 base_nodeid : 4;

                            /* Bits[19:16], Access Type=RO/V, default=0x00000000*/

                            /*
                               Parameter bits from peer agent. Cleared on any
                               LL initialization. The NodeID of the sending
                               socket.
                            */
    UINT32 rsvd_23_20 : 4;

                            /* Bits[23:20], Access Type=RO/V, default=0x00000000*/

                            /*
                               Parameter bits from peer agent. Cleared on any
                               LL initialization.
                            */
    UINT32 rsvd : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTILP0_KTI_LLPMON_SPRUCC_STRUCT;
#endif /* (SPRUCC_HOST) */

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 kti_version : 4;

                            /* Bits[3:0], Access Type=RO/V, default=0x00000000*/

                            /*
                               Parameter bits from peer agent. Cleared on any
                               LL initialization.
                            */
    UINT32 sku_type : 4;

                            /* Bits[7:4], Access Type=RO/V, default=0x00000000*/

                            /* RSVD */
    UINT32 sending_port : 5;

                            /* Bits[12:8], Access Type=RO/V, default=0x00000000*/

                            /*
                               Parameter bits from peer agent. Cleared on any
                               LL initialization. The processor die port number
                               of the sending port. Legal values are 0-2.
                            */
    UINT32 rsvd_13 : 1;

                            /* Bits[13:13], Access Type=RO/V, default=0x00000000*/

                            /*
                               Parameter bits from peer agent. Cleared on any
                               LL initialization.
                            */
    UINT32 lt_agent : 1;

                            /* Bits[14:14], Access Type=RO/V, default=0x00000000*/

                            /*
                               Parameter bits from peer agent. Cleared on any
                               LL initialization. Set if the sending socket
                               acts as an LT Agent. Tied to the LT Strap
                               (LTEnable).
                            */
    UINT32 firmware : 1;

                            /* Bits[15:15], Access Type=RO/V, default=0x00000000*/

                            /*
                               Parameter bits from peer agent. Cleared on any
                               LL initialization. Set if the sending socket
                               acts as a firmware agent. Tied to the Firmware
                               Agent Strap (FrmAGENT).
                            */
    UINT32 base_nodeid : 4;

                            /* Bits[19:16], Access Type=RO/V, default=0x00000000*/

                            /*
                               Parameter bits from peer agent. Cleared on any
                               LL initialization. The NodeID of the sending
                               socket.
                            */
    UINT32 rsvd_23_20 : 4;

                            /* Bits[23:20], Access Type=RO/V, default=0x00000000*/

                            /*
                               Parameter bits from peer agent. Cleared on any
                               LL initialization.
                            */
    UINT32 rsvd : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTILP0_KTI_LLPMON_STRUCT;

/* KTILP1_KTI_LLPMON_REG supported on:                                          */
/*      SPRA0 (0x21e09098)                                                      */
/*      SPRB0 (0x21e09098)                                                      */
/*      SPRHBM (0x21e09098)                                                     */
/*      SPRC0 (0x21e09098)                                                      */
/*      SPRMCC (0x21e09098)                                                     */
/*      SPRUCC (0x21e48098)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktilp1
*/


#define KTILP1_KTI_LLPMON_REG 0x09020098

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd_63_32 : 32;

                            /* Bits[31:0], Access Type=RO/V, default=0x00000000*/

                            /*
                               Parameter bits 63:32 from peer agent. Cleared on
                               any LL initialization.
                            */

  } Bits;
  UINT32 Data;

} KTILP1_KTI_LLPMON_STRUCT;

/* KTIVIRAL_KTI_LLPMON_REG supported on:                                        */
/*      SPRA0 (0x21e0909c)                                                      */
/*      SPRB0 (0x21e0909c)                                                      */
/*      SPRHBM (0x21e0909c)                                                     */
/*      SPRC0 (0x21e0909c)                                                      */
/*      SPRMCC (0x21e0909c)                                                     */
/*      SPRUCC (0x21e4809c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* ktiviral
*/


#define KTIVIRAL_KTI_LLPMON_REG 0x0902009C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 kti_viral_alert_enable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               Enables assertion of Global Viral by Intel UPII
                               Agent. 0 - Disabled 1 - Enabled
                            */
    UINT32 kti_signal_global_fatal : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Enables assertion of Global Fatal by Intel UPI
                               Agent due to internal detection of an
                               uncorrectable error. 0 - Disabled 1 - Enabled
                            */
    UINT32 kti_global_viral_mask : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               Enables generation of Tx (outgoing) Viral Flow 0
                               - Block Injection of Viral on Intel UPI 1 -
                               Allow Injection of Viral on Intel UPI Note:
                               polarity of this bit is treated as an enable
                            */
    UINT32 rsvd : 23;

                            /* Bits[25:3], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 kti_unc_err_set : 1;

                            /* Bits[26:26], Access Type=RW/1C/V, default=0x00000000*/

                            /*
                               Status that indicates the Intel UPI Agent has
                               detected an uncorrectable error. Note 1 - if
                               this bit is set, the Intel UPI Agent will
                               continue to assert Global Fatal/Global Viral (if
                               enabled) Note 2 - uncorrectable error used here
                               includes KTIERRDIS masking, but does NOT include
                               KTI_MC_CTL masking
                            */
    UINT32 rsvd_27 : 1;

                            /* Bits[27:27], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 kti_pkt_viral_set : 1;

                            /* Bits[28:28], Access Type=RW/1C/V, default=0x00000000*/

                            /*
                               Status that indicates the Intel UPI Agent has
                               received Viral bit received in the LLR.Ack
                               message. Note: If this bit is set, the Intel UPI
                               Agent will continue to assert Global Viral (if
                               enabled)
                            */
    UINT32 rsvd_29 : 1;

                            /* Bits[29:29], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 kti_viral_status : 1;

                            /* Bits[30:30], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Indicates previous detection of a Viral
                               condition sent.
                            */
    UINT32 kti_viral_state : 1;

                            /* Bits[31:31], Access Type=RW/1C/V, default=0x00000000*/

                            /*
                               Indicates that the Intel UPI Agent is currently
                               asserting Viral flow outgoing (Tx).
                            */

  } Bits;
  UINT32 Data;

} KTIVIRAL_KTI_LLPMON_STRUCT;

/* KTICSMITHRES_KTI_LLPMON_REG supported on:                                    */
/*      SPRA0 (0x21e090a0)                                                      */
/*      SPRB0 (0x21e090a0)                                                      */
/*      SPRHBM (0x21e090a0)                                                     */
/*      SPRC0 (0x21e090a0)                                                      */
/*      SPRMCC (0x21e090a0)                                                     */
/*      SPRUCC (0x21e480a0)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* kticsmithres
*/


#define KTICSMITHRES_KTI_LLPMON_REG 0x090200A0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 bios_ce_threshold : 15;

                            /* Bits[14:0], Access Type=RW/P, default=0x00000000*/

                            /* Threshold used in generation of CSMI. */
    UINT32 match_en : 1;

                            /* Bits[15:15], Access Type=RW/P, default=0x00000000*/

                            /*
                               If set it enables additional check for CSMI
                               generation. - Generate CSMI (if enabled in
                               KTI_MC_CTL2[32].CSMI_en) if MATCH_EN is set and
                               KTICSMITHRES.bios_ce_threshold ==
                               BIOS_KTI_ERR_ST1[20:6].cor_err_cnt - No CSMI
                               generated if BIOS_CE_THRESHOLD == 0 even if
                               MATCH_EN is set. When Match_en==0, we always
                               generate CSMI on any correctable error without
                               checking the threshold if CSMI is enabled.
                            */
    UINT32 rsvd : 16;

                            /* Bits[31:16], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTICSMITHRES_KTI_LLPMON_STRUCT;

/* KTICERRLOGCTRL_KTI_LLPMON_REG supported on:                                  */
/*      SPRA0 (0x21e090a4)                                                      */
/*      SPRB0 (0x21e090a4)                                                      */
/*      SPRHBM (0x21e090a4)                                                     */
/*      SPRC0 (0x21e090a4)                                                      */
/*      SPRMCC (0x21e090a4)                                                     */
/*      SPRUCC (0x21e480a4)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* kticerrlogctrl
*/


#define KTICERRLOGCTRL_KTI_LLPMON_REG 0x090200A4

#if defined(SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 dis_ce_log : 1;

                            /* Bits[0:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               When DIS_CE_LOG is set, Corrected errors will
                               not be logged in KTI_MC_ST (aka MCi_STATUS).
                               CMCI will not be signaled for corrected errors
                               when DIS_CE_LOG is set, which happens naturally
                               since they are not logged or counted.
                            */
    UINT32 dis_ucna_log : 1;

                            /* Bits[1:1], Access Type=RW/P, default=0x00000000*/

                            /*
                               When set, UCNA errors will not be logged (but
                               will be logged in KTIERR_ST CSRs). CMCI will not
                               be signaled for UCNA errors when DIS_UCNA_LOG is
                               set. Note: Intel UPI is not logging any UCNA
                               cases in processor, so setting the bit has no
                               affect.
                            */
    UINT32 rsvd : 30;

                            /* Bits[31:2], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTICERRLOGCTRL_KTI_LLPMON_SPRA0_SPRB0_SPRHBM_SPRC0_SPRMCC_STRUCT;
#endif /* (SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) */

#if defined(SPRUCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 1;

                            /* Bits[0:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 dis_ucna_log : 1;

                            /* Bits[1:1], Access Type=RW/P, default=0x00000000*/

                            /*
                               When set, UCNA errors will not be logged (but
                               will be logged in KTIERR_ST CSRs). CMCI will not
                               be signaled for UCNA errors when DIS_UCNA_LOG is
                               set. Note: Intel UPI is not logging any UCNA
                               cases in processor, so setting the bit has no
                               affect.
                            */
    UINT32 rsvd_2 : 30;

                            /* Bits[31:2], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTICERRLOGCTRL_KTI_LLPMON_SPRUCC_STRUCT;
#endif /* (SPRUCC_HOST) */

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 1;

                            /* Bits[0:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 dis_ucna_log : 1;

                            /* Bits[1:1], Access Type=RW/P, default=0x00000000*/

                            /*
                               When set, UCNA errors will not be logged (but
                               will be logged in KTIERR_ST CSRs). CMCI will not
                               be signaled for UCNA errors when DIS_UCNA_LOG is
                               set. Note: Intel UPI is not logging any UCNA
                               cases in processor, so setting the bit has no
                               affect.
                            */
    UINT32 rsvd_2 : 30;

                            /* Bits[31:2], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTICERRLOGCTRL_KTI_LLPMON_STRUCT;

/* BIOS_KTI_ERR_ST_N0_KTI_LLPMON_REG supported on:                              */
/*      SPRA0 (0x21e090a8)                                                      */
/*      SPRB0 (0x21e090a8)                                                      */
/*      SPRHBM (0x21e090a8)                                                     */
/*      SPRC0 (0x21e090a8)                                                      */
/*      SPRMCC (0x21e090a8)                                                     */
/*      SPRUCC (0x21e480a8)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* bios_kti_err_st
*/


#define BIOS_KTI_ERR_ST_N0_KTI_LLPMON_REG 0x090200A8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mcacod_ll : 2;

                            /* Bits[1:0], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               MSCOD Bus Interconnect Error LL Set to 1 for all
                               Transmit Path Parity Protection errors
                               (MSCOD_Code=0x12 'UC LL or Phy Control Error'
                               and KTIDBGERRST0.ctrl_txparerr=non-zero) such
                               that mcacod[15:0]=0x0405. Set to 3 for all other
                               errors. Encoding is: 0x0 - Level 0 0x1 - Level 1
                               0x2 - Level 2 0x3 - Generic LL
                            */
    UINT32 mcacod_ii : 2;

                            /* Bits[3:2], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               MSCOD Bus Interconnect Error II Set to 1 for all
                               Transmit Path Parity Protection errors
                               (MSCOD_Code=0x12 'UC LL or Phy Control Error'
                               and KTIDBGERRST0.ctrl_txparerr=non-zero) such
                               that mcacod[15:0]=0x0405. Set to 3 for all other
                               errors. Encoding is: 0x0 - Memory Access 0x1 -
                               Reserved II 0x2 - I/O 0x3 - Other Transaction
                            */
    UINT32 mcacod_rrrr : 4;

                            /* Bits[7:4], Access Type=RW/P, default=0x00000000*/

                            /* Field never set by hardware */
    UINT32 mcacod_t : 1;

                            /* Bits[8:8], Access Type=RW/P, default=0x00000000*/

                            /* Field never set by hardware */
    UINT32 mcacod_pp : 2;

                            /* Bits[10:9], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               MCACOD - Bus Int Error PP Set to 2 for all
                               Transmit Path Parity Protection errors
                               (MSCOD_Code=0x12 'UC LL or Phy Control Error'
                               and KTIDBGERRST0.ctrl_txparerr=non-zero) such
                               that mcacod[15:0]=0x0405. Set to 2 for all 'UC
                               LL Rx Unsupported/Undefined Packet' errors
                               (MSCOD_Code=0x11). Set to 3 for all other
                               errors. Encoding is: 0x0 - Local Processor
                               Originated 0x1 - Local Processor Responded 0x2 -
                               Local Processor Observed Error 0x3 - Generic PP
                            */
    UINT32 mcacod_int : 1;

                            /* Bits[11:11], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               MCACOD - Bus Interconnect Error Set to 0 for all
                               Transmit Path Parity Protection errors
                               (MSCOD_Code=0x12 'UC LL or Phy Control Error'
                               and KTIDBGERRST0.ctrl_txparerr=non-zero) such
                               that mcacod[15:0]=0x0405. Set to 1 for all other
                               errors. Encoding: 0 - Not Bus Interconnect Error
                               1 - Bus Interconnect Error
                            */
    UINT32 mcacod_rsvd : 4;

                            /* Bits[15:12], Access Type=RW/P, default=0x00000000*/

                            /* Field never set by hardware */
    UINT32 mscod_code : 6;

                            /* Bits[21:16], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               MSCOD Error Code Error Code from Intel UPI
                               Agent. This field captures the error type based
                               on the standard MC_ST overwrite rules. The Error
                               Codes and handling are defined in the HAS. The
                               summary per ID is: Uncorrectable (UC) 0x00 - UC
                               Phy Initialization Failure (NumInit) 0x01 - UC
                               Phy Detected Drift Buffer Alarm 0x02 - UC Phy
                               Detected Latency Buffer Rollover 0x10 - UC LL Rx
                               detected CRC error: unsuccessful LLR (entered
                               Abort state) 0x11 - UC LL Rx
                               Unsupported/Undefined packet 0x12 - UC LL or Phy
                               Control Error 0x13 - UC LL Rx Parameter
                               Exception 0x14 - UC LL TDX Failure 0x15 - UC LL
                               SGX Failure 0x1F - UC LL Detected Control Error
                               from M3UPI Correctable (COR) 0x20 - COR Phy
                               Initialization Abort 0x21 - COR Phy Reset 0x22 -
                               COR Phy Lane failure, recovery in x8 width 0x23
                               - COR Phy L0c error corrected without Phy reset
                               0x24 - COR Phy L0c error triggering Phy Reset
                               0x25 - COR Phy L0p exit error triggering Phy
                               Reset 0x30 - COR LL Rx detected CRC error:
                               successful LLR without Phy Reinit 0x31 - COR LL
                               Rx detected CRC error: successful LLR with Phy
                               Reinit
                            */
    UINT32 mscod_spare : 10;

                            /* Bits[31:22], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               MSCOD SPARE Field used for design specific sub-
                               status fields for UC LL or Phy Control Errors
                               (mscode_code=0x12): [22] - Phy Control Error
                               (note: currently tied to 0 in processor) [23] -
                               Unexpected Retry.Ack flit [24] - Unexpected
                               Retry.Req flit [25] - RF parity error [26] -
                               Routeback Table error [27] - unexpected Tx
                               Protocol flit (EOP, Header or Data) [28] - Rx
                               Header-or-Credit BGF credit overflow/underflow
                               [29] - Link Layer Reset still in progress when
                               Phy enters L0 (Phy training should not be
                               enabled until after LL reset is complete as
                               indicated by KTILCL.LinkLayerReset going back to
                               0). [30] - Link Layer reset initiated while
                               protocol traffic not idle [31] - Link Layer Tx
                               Parity Error
                            */

  } Bits;
  UINT32 Data;

} BIOS_KTI_ERR_ST_N0_KTI_LLPMON_STRUCT;

/* BIOS_KTI_ERR_ST_N1_KTI_LLPMON_REG supported on:                              */
/*      SPRA0 (0x21e090ac)                                                      */
/*      SPRB0 (0x21e090ac)                                                      */
/*      SPRHBM (0x21e090ac)                                                     */
/*      SPRC0 (0x21e090ac)                                                      */
/*      SPRMCC (0x21e090ac)                                                     */
/*      SPRUCC (0x21e480ac)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* bios_kti_err_st
*/


#define BIOS_KTI_ERR_ST_N1_KTI_LLPMON_REG 0x090200AC

#if defined(SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 other_info : 5;

                            /* Bits[4:0], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               Other Info Field used for design specific sub-
                               status fields for UC LL or Phy Control Errors
                               (mscode_code=0x12): [32] - Link layer credit or
                               queue (various) overflow/underflow [33] - Flow
                               Queue credit overflow/underflow [37:34] -
                               reserved
                            */
    UINT32 fw_upd : 1;

                            /* Bits[5:5], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               Firmware update bit. will be set by BIOS and
                               cleared by UPI hardware whenever MC_status
                               register content will be updated
                            */
    UINT32 cor_err_cnt : 15;

                            /* Bits[20:6], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               Corrected Error Count 15-bit counter which is
                               incremented on every corrected error. MSB (bit
                               15) is a sticky overflow bit.
                            */
    UINT32 corr_err_sts_ind : 2;

                            /* Bits[22:21], Access Type=RW/P, default=0x00000000*/

                            /*
                               Field never set by hardware (but can be set by
                               software). 00 - No tracking - No hardware status
                               tracking is provided for the structure reporting
                               this event. 01 - Green - Status tracking is
                               provided for the structure posting the event;
                               the current status is green (below threshold).
                               For more information, see Section 'Enhanced
                               Cache Error reporting' of the Software Developer
                               Manual. 10 - Yellow - Status tracking is
                               provided for the structure posting the event;
                               the current status is yellow (below threshold).
                               For more information, see Section 'Enhanced
                               Cache Error reporting' of the Software Developer
                               Manual. 11 - Reserved
                            */
    UINT32 ar : 1;

                            /* Bits[23:23], Access Type=RW/P, default=0x00000000*/

                            /* Field never set by hardware */
    UINT32 s : 1;

                            /* Bits[24:24], Access Type=RW/P, default=0x00000000*/

                            /* Field never set by hardware */
    UINT32 pcc : 1;

                            /* Bits[25:25], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               Processor Context Corrupt Flag Bit set on all
                               uncorrectable errors
                            */
    UINT32 addrv : 1;

                            /* Bits[26:26], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               Address Valid in BIOS_KTI_ERR_AD. Bit set on
                               error types which load Tx Address into
                               BIOS_KTI_ERR_AD. The applicable error types are:
                               LL or Phy Generic Control (error code 0x12)
                            */
    UINT32 miscv : 1;

                            /* Bits[27:27], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               BIOS_KTI_ERR_MISC valid flag Indicates (when
                               set) that the BIOS_KTI_ERR_MISC register
                               contains additional information regarding the
                               error. See individual fields of
                               BIOS_KTI_ERR_MISC for details on which are valid
                               for a given error.
                            */
    UINT32 en : 1;

                            /* Bits[28:28], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               Error Enable Flag Set by hardware when MCA
                               (uncorrectable) is signaled.
                            */
    UINT32 uc : 1;

                            /* Bits[29:29], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               Error Uncorrected Set for error which was not
                               corrected.
                            */
    UINT32 over : 1;

                            /* Bits[30:30], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               MCA Overflow Flag Set on uncorrected second
                               error cases
                            */
    UINT32 valid : 1;

                            /* Bits[31:31], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               Set by hardware when an uncorrectable or
                               correctable error is logged.
                            */

  } Bits;
  UINT32 Data;

} BIOS_KTI_ERR_ST_N1_KTI_LLPMON_SPRA0_SPRB0_SPRHBM_SPRC0_SPRMCC_STRUCT;
#endif /* (SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) */

#if defined(SPRUCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 other_info : 6;

                            /* Bits[5:0], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               Other Info Field used for design specific sub-
                               status fields for UC LL or Phy Control Errors
                               (mscode_code=0x12): [32] - Link layer credit or
                               queue (various) overflow/underflow [33] - Flow
                               Queue credit overflow/underflow [37:34] -
                               reserved
                            */
    UINT32 cor_err_cnt : 15;

                            /* Bits[20:6], Access Type=RW/P, default=0x00000000*/

                            /*
                               Corrected Error Count 15-bit counter which is
                               incremented on every corrected error. MSB (bit
                               15) is a sticky overflow bit.
                            */
    UINT32 corr_err_sts_ind : 2;

                            /* Bits[22:21], Access Type=RW/P, default=0x00000000*/

                            /*
                               Field never set by hardware (but can be set by
                               software). 00 - No tracking - No hardware status
                               tracking is provided for the structure reporting
                               this event. 01 - Green - Status tracking is
                               provided for the structure posting the event;
                               the current status is green (below threshold).
                               For more information, see Section 'Enhanced
                               Cache Error reporting' of the Software Developer
                               Manual. 10 - Yellow - Status tracking is
                               provided for the structure posting the event;
                               the current status is yellow (below threshold).
                               For more information, see Section 'Enhanced
                               Cache Error reporting' of the Software Developer
                               Manual. 11 - Reserved
                            */
    UINT32 ar : 1;

                            /* Bits[23:23], Access Type=RW/P, default=0x00000000*/

                            /* Field never set by hardware */
    UINT32 s : 1;

                            /* Bits[24:24], Access Type=RW/P, default=0x00000000*/

                            /* Field never set by hardware */
    UINT32 pcc : 1;

                            /* Bits[25:25], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               Processor Context Corrupt Flag Bit set on all
                               uncorrectable errors
                            */
    UINT32 addrv : 1;

                            /* Bits[26:26], Access Type=RW/P, default=0x00000000*/

                            /*
                               Address Valid in BIOS_KTI_ERR_AD. Bit set on
                               error types which load Tx Address into
                               BIOS_KTI_ERR_AD. The applicable error types are:
                               LL or Phy Generic Control (error code 0x12)
                            */
    UINT32 miscv : 1;

                            /* Bits[27:27], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               BIOS_KTI_ERR_MISC valid flag Indicates (when
                               set) that the BIOS_KTI_ERR_MISC register
                               contains additional information regarding the
                               error. See individual fields of
                               BIOS_KTI_ERR_MISC for details on which are valid
                               for a given error.
                            */
    UINT32 en : 1;

                            /* Bits[28:28], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               Error Enable Flag Set by hardware when MCA
                               (uncorrectable) is signaled.
                            */
    UINT32 uc : 1;

                            /* Bits[29:29], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               Error Uncorrected Set for error which was not
                               corrected.
                            */
    UINT32 over : 1;

                            /* Bits[30:30], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               MCA Overflow Flag Set on uncorrected second
                               error cases
                            */
    UINT32 valid : 1;

                            /* Bits[31:31], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               Set by hardware when an uncorrectable or
                               correctable error is logged.
                            */

  } Bits;
  UINT32 Data;

} BIOS_KTI_ERR_ST_N1_KTI_LLPMON_SPRUCC_STRUCT;
#endif /* (SPRUCC_HOST) */

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 6;

                            /* Bits[5:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 cor_err_cnt : 15;

                            /* Bits[20:6], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               Corrected Error Count 15-bit counter which is
                               incremented on every corrected error. MSB (bit
                               15) is a sticky overflow bit.
                            */
    UINT32 corr_err_sts_ind : 2;

                            /* Bits[22:21], Access Type=RW/P, default=0x00000000*/

                            /*
                               Field never set by hardware (but can be set by
                               software). 00 - No tracking - No hardware status
                               tracking is provided for the structure reporting
                               this event. 01 - Green - Status tracking is
                               provided for the structure posting the event;
                               the current status is green (below threshold).
                               For more information, see Section 'Enhanced
                               Cache Error reporting' of the Software Developer
                               Manual. 10 - Yellow - Status tracking is
                               provided for the structure posting the event;
                               the current status is yellow (below threshold).
                               For more information, see Section 'Enhanced
                               Cache Error reporting' of the Software Developer
                               Manual. 11 - Reserved
                            */
    UINT32 ar : 1;

                            /* Bits[23:23], Access Type=RW/P, default=0x00000000*/

                            /* Field never set by hardware */
    UINT32 s : 1;

                            /* Bits[24:24], Access Type=RW/P, default=0x00000000*/

                            /* Field never set by hardware */
    UINT32 pcc : 1;

                            /* Bits[25:25], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               Processor Context Corrupt Flag Bit set on all
                               uncorrectable errors
                            */
    UINT32 addrv : 1;

                            /* Bits[26:26], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               Address Valid in BIOS_KTI_ERR_AD. Bit set on
                               error types which load Tx Address into
                               BIOS_KTI_ERR_AD. The applicable error types are:
                               LL or Phy Generic Control (error code 0x12)
                            */
    UINT32 miscv : 1;

                            /* Bits[27:27], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               BIOS_KTI_ERR_MISC valid flag Indicates (when
                               set) that the BIOS_KTI_ERR_MISC register
                               contains additional information regarding the
                               error. See individual fields of
                               BIOS_KTI_ERR_MISC for details on which are valid
                               for a given error.
                            */
    UINT32 en : 1;

                            /* Bits[28:28], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               Error Enable Flag Set by hardware when MCA
                               (uncorrectable) is signaled.
                            */
    UINT32 uc : 1;

                            /* Bits[29:29], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               Error Uncorrected Set for error which was not
                               corrected.
                            */
    UINT32 over : 1;

                            /* Bits[30:30], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               MCA Overflow Flag Set on uncorrected second
                               error cases
                            */
    UINT32 valid : 1;

                            /* Bits[31:31], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               Set by hardware when an uncorrectable or
                               correctable error is logged.
                            */

  } Bits;
  UINT32 Data;

} BIOS_KTI_ERR_ST_N1_KTI_LLPMON_STRUCT;

/* BIOS_KTI_ERR_MISC_N0_KTI_LLPMON_REG supported on:                            */
/*      SPRA0 (0x21e090b0)                                                      */
/*      SPRB0 (0x21e090b0)                                                      */
/*      SPRHBM (0x21e090b0)                                                     */
/*      SPRC0 (0x21e090b0)                                                      */
/*      SPRMCC (0x21e090b0)                                                     */
/*      SPRUCC (0x21e480b0)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* bios_kti_err_misc
*/


#define BIOS_KTI_ERR_MISC_N0_KTI_LLPMON_REG 0x090200B0

#if defined(SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 flit_hdr : 20;

                            /* Bits[19:0], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               HDR bits captured: [0] - HIB (if not set other
                               bits >4 in this log are not valid) [1] - VN [2]
                               - VNA [3] - ACK [4] - CRD [8:5]- Slot 0 opcode
                               [11:9] - Slot 0 MC [15:12] - Slot 1 Opcode [16]
                               - Slot 1 MC [19:17] - Slot 2 Opcode Note: This
                               field is valid for all Errors caused by flit
                               decode errors (mscod_code 0x11, 0x13, 0x22,
                               0x23, 0x30, 0x31). For all other codes, this
                               field should be ignored.
                            */
    UINT32 syndrome_or_l0cbadlanes : 12;

                            /* Bits[31:20], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               Captures Syndrome for CRC check, or in L0c error
                               captures 8-bit vector of bad lanes. For both
                               conditions need to check Phy_state field to
                               translate to a physical lane. Syndrome Applies
                               for errors where crc error cause the error
                               (mscod_code 0x30, 0x31, 0x10, 0x11) L0c bad lane
                               map applies in L0c errors (mscod_code 0x23,
                               0x24). For all other codes, this field should be
                               ignored.
                            */

  } Bits;
  UINT32 Data;

} BIOS_KTI_ERR_MISC_N0_KTI_LLPMON_SPRA0_SPRB0_SPRHBM_SPRC0_SPRMCC_STRUCT;
#endif /* (SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) */

#if defined(SPRUCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 32;

                            /* Bits[31:0], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} BIOS_KTI_ERR_MISC_N0_KTI_LLPMON_SPRUCC_STRUCT;
#endif /* (SPRUCC_HOST) */

/* BIOS_KTI_ERR_MISC_N1_KTI_LLPMON_REG supported on:                            */
/*      SPRA0 (0x21e090b4)                                                      */
/*      SPRB0 (0x21e090b4)                                                      */
/*      SPRHBM (0x21e090b4)                                                     */
/*      SPRC0 (0x21e090b4)                                                      */
/*      SPRMCC (0x21e090b4)                                                     */
/*      SPRUCC (0x21e480b4)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* bios_kti_err_misc
*/


#define BIOS_KTI_ERR_MISC_N1_KTI_LLPMON_REG 0x090200B4

#if defined(SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 syndrome_or_l0cbadlanes : 4;

                            /* Bits[3:0], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               Captures Syndrome for CRC check, or in L0c error
                               captures 8-bit vector of bad lanes. For both
                               conditions need to check Phy_state field to
                               translate to a physical lane. Syndrome Applies
                               for errors where crc error cause the error
                               (mscod_code 0x30, 0x31, 0x10, 0x11) L0c bad lane
                               map applies in L0c errors (mscod_code 0x23,
                               0x24). For all other codes, this field should be
                               ignored.
                            */
    UINT32 illegal_flit_field : 1;

                            /* Bits[4:4], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               For Unexpected Flit Errors this bit is set if
                               unsupported error was cause by bits not captured
                               in Flit_HDR fields. In processor some of the
                               cases that cause this are: CTRL flit (RSVD Types
                               and/or Sub-types), bit set in unsupported
                               payloads (Addr[51:46], RTID[10], HTID[10]).
                               Note: we still capture Flit_HDR information even
                               if this bit is set. This field is valid for the
                               following error codes (mscod_code): 0x11, 0x13,
                               0x30, 0x31. For all other codes, this field
                               should be ignored.
                            */
    UINT32 phy_state : 3;

                            /* Bits[7:5], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               Link State from Physical Layer on error used for
                               isolating lane in CRC error cases: 0x0 - 20 lane
                               flit mux phase 0 0x1 - 20 lane flit mux phase 1
                               0x2 - 20 lane flit mux phase 2 0x3 - 20 lane
                               flit mux phase 3 0x4 - 20 lane flit mux phase 4
                               0x5 - Lower 8 logical lanes active in L0
                               (failover) 0x6 - Upper 8 logical lanes active in
                               L0 (failover) 0x7 - Lower 8 logical lane active
                               in L0p This field is valid for the following
                               error codes (mscod_code): 0x11, 0x13, 0x22,
                               0x23, 0x30, 0x31. For all other codes, this
                               field should be ignored. Note: This field is a
                               compressed encoding of the Intel UPI spec ERxCLM
                               (width) and ERxPhase (flit phasing info) fields:
                               - (ERxCLM=0b111 and ERxPhase=0x0-0x4) is equal
                               to PhyState=0x0-0x4 - ERxCLM=0b001 is equal to
                               PhyState 0x5(lower failover) or 0x7(L0p) -
                               ERxCLM=0b100 is equal to PhyState=0x6(upper
                               failover)
                            */
    UINT32 rx_lane_reversal : 1;

                            /* Bits[8:8], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               Indicates if physical layer Rx is reversed. This
                               field is valid for the following error codes
                               (mscod_code): 0x11, 0x13, 0x22, 0x23, 0x30,
                               0x31. For all other codes, this field should be
                               ignored.
                            */
    UINT32 rsvd0 : 1;

                            /* Bits[9:9], Access Type=RW/P, default=0x00000000*/

                            /*
                               Unset by hardware. Placeholder bit in case h/w
                               finds reason to add a HDR_Valid
                            */
    UINT32 nerr : 12;

                            /* Bits[21:10], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               Captures the Next Error, which is any later
                               error which occurred after the primary error was
                               logged (in mscod_code). Only Uncorrectable
                               Errors (as listed in mscod_code) are logged in a
                               12-bit one hot encoding format. Note that in
                               cases where multiple errors (any mix of
                               correctable and uncorrectable) occur in the same
                               cycle, all uncorrectable errors that occur on
                               that cycle will be logged in this field (in a
                               multi-hot fashion). Format: {bit} - {hex
                               mscod_code} {description} [42] - 0x00 UC Phy
                               Initialization Failure (NumInit) [43] - 0x01 UC
                               Phy Detected Drift Buffer Alarm [44] - 0x02 UC
                               Phy Detected Latency Buffer Rollover [45] -
                               Reserved [46] - Reserved [47] - 0x10 UC LL Rx
                               detected CRC error: unsuccessful LLR (entered
                               Abort state) [48] - 0x11 UC LL Rx
                               Unsupported/Undefined packet [49] - 0x12 UC LL
                               or Phy Control Error [50] - 0x13 UC LL Rx
                               Parameter Exception [51] - Reserved [52] -
                               Reserved [53] - 0x1F UC LL Detected Control
                               Error from M3UPI
                            */
    UINT32 cor_err : 10;

                            /* Bits[31:22], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               Captures Correctable Errors, indicating all
                               correctable error cases that have occurred since
                               last cleared. Only Correctable Errors (as listed
                               in mscod_code) are logged in a 10-bit multi hot
                               encoding format: Format: {bit} - {hex
                               mscod_code} {description} [54] - 0x20 COR Phy
                               Initialization Abort [55] - 0x21 COR Phy Reset
                               [56] - 0x22 COR Phy Lane failure, recovery in x8
                               width [57] - 0x23 COR Phy L0c error corrected
                               without Phy reset [58] - 0x24 COR Phy L0c error
                               triggering Phy Reset [59] - 0x25 COR Phy L0p
                               exit error triggering Phy Reset [60] - Reserved
                               [61] - 0x30 COR LL Rx detected CRC error:
                               successful LLR without Phy Reinit [62] - 0x31
                               COR LL Rx detected CRC error: successful LLR
                               with Phy Reinit [63] - Reserved
                            */

  } Bits;
  UINT32 Data;

} BIOS_KTI_ERR_MISC_N1_KTI_LLPMON_SPRA0_SPRB0_SPRHBM_SPRC0_SPRMCC_STRUCT;
#endif /* (SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) */

#if defined(SPRUCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 9;

                            /* Bits[8:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rsvd0 : 1;

                            /* Bits[9:9], Access Type=RW/P, default=0x00000000*/

                            /*
                               Unset by hardware. Placeholder bit in case h/w
                               finds reason to add a HDR_Valid
                            */
    UINT32 nerr : 2;

                            /* Bits[11:10], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               Captures the Next Error, which is any later
                               error which occurred after the primary error was
                               logged (in mscod_code). Only Uncorrectable
                               Errors (as listed in mscod_code) are logged in a
                               2-bit one hot encoding format. Note that in
                               cases where multiple errors occur in the same
                               cycle, all uncorrectable errors that occur on
                               that cycle will be logged in this field (in a
                               multi-hot fashion). Format: {bit} - {hex
                               mscod_code} {description} [42] - 0x12 UC LL or
                               Phy Control Error [43] - 0x1F UC LL Detected
                               Control Error from M3UPI
                            */
    UINT32 rsvd_12 : 20;

                            /* Bits[31:12], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} BIOS_KTI_ERR_MISC_N1_KTI_LLPMON_SPRUCC_STRUCT;
#endif /* (SPRUCC_HOST) */

/* BIOS_KTI_ERR_AD_N0_KTI_LLPMON_REG supported on:                              */
/*      SPRA0 (0x21e090b8)                                                      */
/*      SPRB0 (0x21e090b8)                                                      */
/*      SPRHBM (0x21e090b8)                                                     */
/*      SPRC0 (0x21e090b8)                                                      */
/*      SPRMCC (0x21e090b8)                                                     */
/*      SPRUCC (0x21e480b8)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* bios_kti_err_ad
*/


#define BIOS_KTI_ERR_AD_N0_KTI_LLPMON_REG 0x090200B8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd0 : 6;

                            /* Bits[5:0], Access Type=RW/P, default=0x00000000*/

                            /* Field never set by hardware */
    UINT32 address_51_6 : 26;

                            /* Bits[31:6], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               Tx Address 51 to 6 Note: this is only applicable
                               if BIOS_KTI_ERR_ST.addrv=1. If both flit slot0
                               and slot1 hit a Tx address parity error on the
                               same cycle, slot0 is logged here.
                            */

  } Bits;
  UINT32 Data;

} BIOS_KTI_ERR_AD_N0_KTI_LLPMON_STRUCT;

/* BIOS_KTI_ERR_AD_N1_KTI_LLPMON_REG supported on:                              */
/*      SPRA0 (0x21e090bc)                                                      */
/*      SPRB0 (0x21e090bc)                                                      */
/*      SPRHBM (0x21e090bc)                                                     */
/*      SPRC0 (0x21e090bc)                                                      */
/*      SPRMCC (0x21e090bc)                                                     */
/*      SPRUCC (0x21e480bc)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* bios_kti_err_ad
*/


#define BIOS_KTI_ERR_AD_N1_KTI_LLPMON_REG 0x090200BC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 address_51_6 : 20;

                            /* Bits[19:0], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               Tx Address 51 to 6 Note: this is only applicable
                               if BIOS_KTI_ERR_ST.addrv=1. If both flit slot0
                               and slot1 hit a Tx address parity error on the
                               same cycle, slot0 is logged here.
                            */
    UINT32 rsvd1 : 12;

                            /* Bits[31:20], Access Type=RW/P, default=0x00000000*/

                            /* Field never set by hardware */

  } Bits;
  UINT32 Data;

} BIOS_KTI_ERR_AD_N1_KTI_LLPMON_STRUCT;

#if defined(SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST)
/* KTICRCERRCNT_KTI_LLPMON_REG supported on:                                    */
/*      SPRA0 (0x21e090c0)                                                      */
/*      SPRB0 (0x21e090c0)                                                      */
/*      SPRHBM (0x21e090c0)                                                     */
/*      SPRC0 (0x21e090c0)                                                      */
/*      SPRMCC (0x21e090c0)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: COR_CNT                                          */
/* SPRB0 Security PolicyGroup: COR_CNT                                          */
/* SPRHBM Security PolicyGroup: COR_CNT                                         */
/* SPRC0 Security PolicyGroup: COR_CNT                                          */
/* SPRMCC Security PolicyGroup: COR_CNT                                         */
/* kticrcerrcnt
*/


#define KTICRCERRCNT_KTI_LLPMON_REG 0x090200C0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 counter : 31;

                            /* Bits[30:0], Access Type=RW/1C/V/P, default=0x00000000*/

                            /*
                               Counter increments every time the Link Layer
                               detects a CRC error.
                            */
    UINT32 overflow : 1;

                            /* Bits[31:31], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               Overflow bit - set when the number of detected
                               CRC errors exceeds the counter width.
                            */

  } Bits;
  UINT32 Data;

} KTICRCERRCNT_KTI_LLPMON_STRUCT;
#endif /* (SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) */

#if defined(SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST)
/* KTIERRDIS0_KTI_LLPMON_REG supported on:                                      */
/*      SPRA0 (0x21e090c4)                                                      */
/*      SPRB0 (0x21e090c4)                                                      */
/*      SPRHBM (0x21e090c4)                                                     */
/*      SPRC0 (0x21e090c4)                                                      */
/*      SPRMCC (0x21e090c4)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: COR_CNT                                          */
/* SPRB0 Security PolicyGroup: COR_CNT                                          */
/* SPRHBM Security PolicyGroup: COR_CNT                                         */
/* SPRC0 Security PolicyGroup: COR_CNT                                          */
/* SPRMCC Security PolicyGroup: COR_CNT                                         */
/* ktierrdis0
*/


#define KTIERRDIS0_KTI_LLPMON_REG 0x090200C4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 cor_mask : 10;

                            /* Bits[9:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               Correctable Error Disable Mask If bit is set it
                               disable MCA error logging signal for the given
                               error code. See Intel UPI MCA register for error
                               code description. Format: {bit} - {hex
                               mscod_code} {description} [0] - 0x20 COR Phy
                               Initialization Abort [1] - 0x21 COR Phy Reset
                               [2] - 0x22 COR Phy Lane failure, recovery in x8
                               width [3] - 0x23 COR Phy L0c error corrected
                               without Phy reset [4] - 0x24 COR Phy L0c error
                               triggering Phy Reset [5] - 0x25 COR Phy L0p exit
                               error triggering Phy Reset [6] - Reserved [7] -
                               0x30 COR LL Rx detected CRC error: successful
                               LLR without Phy Reinit [8] - 0x31 COR LL Rx
                               detected CRC error: successful LLR with Phy
                               Reinit [9] - Reserved
                            */
    UINT32 rsvd : 6;

                            /* Bits[15:10], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 cor_cnt_mask : 10;

                            /* Bits[25:16], Access Type=RW/P, default=0x00000000*/

                            /*
                               Correctable Count Disable Mask If bit is set it
                               disable MCA error counting for the given error
                               code. This does not affect logging of other
                               information. Note that error signaling for
                               corrected errors is based on error count
                               threshold, so if nothing is counted we won't
                               signal the error. See Intel UPI MCA register for
                               error code description. Format: {bit} - {hex
                               mscod_code} {description} [16] - 0x20 COR Phy
                               Initialization Abort [17] - 0x21 COR Phy Reset
                               [18] - 0x22 COR Phy Lane failure, recovery in x8
                               width [19] - 0x23 COR Phy L0c error corrected
                               without Phy reset [20] - 0x24 COR Phy L0c error
                               triggering Phy Reset [21] - 0x25 COR Phy L0p
                               exit error triggering Phy Reset [22] - Reserved
                               [23] - 0x30 COR LL Rx detected CRC error:
                               successful LLR without Phy Reinit [24] - 0x31
                               COR LL Rx detected CRC error: successful LLR
                               with Phy Reinit [25] - Reserved
                            */
    UINT32 rsvd_26 : 5;

                            /* Bits[30:26], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 smi_en : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /* smi enable */

  } Bits;
  UINT32 Data;

} KTIERRDIS0_KTI_LLPMON_STRUCT;
#endif /* (SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) */

/* KTIERRDIS1_KTI_LLPMON_REG supported on:                                      */
/*      SPRA0 (0x21e090c8)                                                      */
/*      SPRB0 (0x21e090c8)                                                      */
/*      SPRHBM (0x21e090c8)                                                     */
/*      SPRC0 (0x21e090c8)                                                      */
/*      SPRMCC (0x21e090c8)                                                     */
/*      SPRUCC (0x21e480c8)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* ktierrdis1
*/


#define KTIERRDIS1_KTI_LLPMON_REG 0x090200C8

#if defined(SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 unc_mask : 12;

                            /* Bits[11:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               Uncorrectable Disable Mask Disable uncorrectable
                               errors. See error code description in Intel UPI
                               MCA register for error code description. Format:
                               {bit} - {hex mscod_code} {description} [0] -
                               0x00 UC Phy Initialization Failure (NumInit) [1]
                               - 0x01 UC Phy Detected Drift Buffer Alarm [2] -
                               0x02 UC Phy Detected Latency Buffer Rollover [3]
                               - Reserved [4] - Reserved [5] - 0x10 UC LL Rx
                               detected CRC error: unsuccessful LLR (entered
                               Abort state) [6] - 0x11 UC LL Rx
                               Unsupported/Undefined packet [7] - 0x12 UC LL or
                               Phy Control Error [8] - 0x13 UC LL Rx Parameter
                               Exception [9] - Reserved [10] - Reserved [11] -
                               0x1F UC LL Detected Control Error from M3UPI
                            */
    UINT32 rsvd : 20;

                            /* Bits[31:12], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTIERRDIS1_KTI_LLPMON_SPRA0_SPRB0_SPRHBM_SPRC0_SPRMCC_STRUCT;
#endif /* (SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) */

#if defined(SPRUCC_HOST)
typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 unc_mask : 2;

                            /* Bits[1:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               Uncorrectable Disable Mask Disable uncorrecatble
                               errors. See erros code description in UPIMDF MCA
                               register for error code sescription. Format:
                               {bit} - {hex mscod_code} {description} [0] -
                               0x12 UC LL or Phy Control Error [1] - 0x1F UC LL
                               Detected Control Error from M3UPI
                            */
    UINT32 rsvd : 30;

                            /* Bits[31:2], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTIERRDIS1_KTI_LLPMON_SPRUCC_STRUCT;
#endif /* (SPRUCC_HOST) */

#if defined(SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST)
/* KTICORERRCNTDIS_KTI_LLPMON_REG supported on:                                 */
/*      SPRA0 (0x21e090cc)                                                      */
/*      SPRB0 (0x21e090cc)                                                      */
/*      SPRHBM (0x21e090cc)                                                     */
/*      SPRC0 (0x21e090cc)                                                      */
/*      SPRMCC (0x21e090cc)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: COR_CNT                                          */
/* SPRB0 Security PolicyGroup: COR_CNT                                          */
/* SPRHBM Security PolicyGroup: COR_CNT                                         */
/* SPRC0 Security PolicyGroup: COR_CNT                                          */
/* SPRMCC Security PolicyGroup: COR_CNT                                         */
/* kticorerrcntdis
*/


#define KTICORERRCNTDIS_KTI_LLPMON_REG 0x090200CC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 corerrcnt_mask : 10;

                            /* Bits[9:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               Intel UPI Correctable Error Count Disable Mask
                               NOTE: This has no affect on the
                               KTIERRCNT0/1/2_CNTR error counters. If bit is
                               set to 1 it disables incrementing of
                               KTI_MC_ST.cor_err_cnt and/or
                               BIOS_KTI_ERR_ST.cor_err_cnt for a given error
                               code. See Intel UPI MCA register for error code
                               description. Format: {bit} - {hex mscod_code}
                               {description} [0] - 0x20 COR Phy Initialization
                               Abort [1] - 0x21 COR Phy Reset [2] - 0x22 COR
                               Phy Lane failure, recovery in x8 width [3] -
                               0x23 COR Phy L0c error corrected without Phy
                               reset [4] - 0x24 COR Phy L0c error triggering
                               Phy Reset [5] - 0x25 COR Phy L0p exit error
                               triggering Phy Reset [6] - Reserved [7] - 0x30
                               COR LL Rx detected CRC error: successful LLR
                               without Phy Reinit [8] - 0x31 COR LL Rx detected
                               CRC error: successful LLR with Phy Reinit [9] -
                               Reserved
                            */
    UINT32 rsvd : 22;

                            /* Bits[31:10], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTICORERRCNTDIS_KTI_LLPMON_STRUCT;
#endif /* (SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) */

/* KTIERRCNT0_MASK_KTI_LLPMON_REG supported on:                                 */
/*      SPRA0 (0x21e090d0)                                                      */
/*      SPRB0 (0x21e090d0)                                                      */
/*      SPRHBM (0x21e090d0)                                                     */
/*      SPRC0 (0x21e090d0)                                                      */
/*      SPRMCC (0x21e090d0)                                                     */
/*      SPRUCC (0x21e480d0)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* ktierrcnt0_mask
*/


#define KTIERRCNT0_MASK_KTI_LLPMON_REG 0x090200D0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mask : 22;

                            /* Bits[21:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               Error Mask This mask is used to select which
                               bits are counted as part of error count. When
                               bit is set that error type is included in the
                               Count. See Intel UPI MCA register definition for
                               details on each error code. Format: {bit} - {hex
                               mscod_code} {description} [0] - 0x00 UC Phy
                               Initialization Failure (NumInit) [1] - 0x01 UC
                               Phy Detected Drift Buffer Alarm [2] - 0x02 UC
                               Phy Detected Latency Buffer Rollover [3] -
                               Reserved [4] - Reserved [5] - 0x10 UC LL Rx
                               detected CRC error: unsuccessful LLR (entered
                               Abort state) [6] - 0x11 UC LL Rx
                               Unsupported/Undefined packet [7] - 0x12 UC LL or
                               Phy Control Error [8] - 0x13 UC LL Rx Parameter
                               Exception [9] - Reserved [10] - Reserved [11] -
                               0x1F UC LL Detected Control Error from M3UPI
                               [12] - 0x20 COR Phy Initialization Abort [13] -
                               0x21 COR Phy Reset [14] - 0x22 COR Phy Lane
                               failure, recovery in x8 width [15] - 0x23 COR
                               Phy L0c error corrected without Phy reset [16] -
                               0x24 COR Phy L0c error triggering Phy Reset [17]
                               - 0x25 COR Phy L0p exit error triggering Phy
                               Reset [18] - Reserved [19] - 0x30 COR LL Rx
                               detected CRC error: successful LLR without Phy
                               Reinit [20] - 0x31 COR LL Rx detected CRC error:
                               successful LLR with Phy Reinit [21] - Reserved
                            */
    UINT32 rsvd : 10;

                            /* Bits[31:22], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTIERRCNT0_MASK_KTI_LLPMON_STRUCT;

/* KTIERRCNT0_CNTR_KTI_LLPMON_REG supported on:                                 */
/*      SPRA0 (0x21e090d4)                                                      */
/*      SPRB0 (0x21e090d4)                                                      */
/*      SPRHBM (0x21e090d4)                                                     */
/*      SPRC0 (0x21e090d4)                                                      */
/*      SPRMCC (0x21e090d4)                                                     */
/*      SPRUCC (0x21e480d4)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: COR_CNT                                          */
/* SPRB0 Security PolicyGroup: COR_CNT                                          */
/* SPRHBM Security PolicyGroup: COR_CNT                                         */
/* SPRC0 Security PolicyGroup: COR_CNT                                          */
/* SPRMCC Security PolicyGroup: COR_CNT                                         */
/* SPRUCC Security PolicyGroup: COR_CNT                                         */
/* ktierrcnt0_cntr
*/


#define KTIERRCNT0_CNTR_KTI_LLPMON_REG 0x090200D4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 counter : 15;

                            /* Bits[14:0], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               Counter increments based on error enabled in the
                               Mask register. Counter is cleared by writing
                               zeroes to both the 15-bit counter and 1-bit
                               overflow fields.
                            */
    UINT32 rsvd : 16;

                            /* Bits[30:15], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 overflow : 1;

                            /* Bits[31:31], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               Overflow, remains sticky until cleared by
                               software.
                            */

  } Bits;
  UINT32 Data;

} KTIERRCNT0_CNTR_KTI_LLPMON_STRUCT;

/* KTIERRCNT1_MASK_KTI_LLPMON_REG supported on:                                 */
/*      SPRA0 (0x21e090d8)                                                      */
/*      SPRB0 (0x21e090d8)                                                      */
/*      SPRHBM (0x21e090d8)                                                     */
/*      SPRC0 (0x21e090d8)                                                      */
/*      SPRMCC (0x21e090d8)                                                     */
/*      SPRUCC (0x21e480d8)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* ktierrcnt1_mask
*/


#define KTIERRCNT1_MASK_KTI_LLPMON_REG 0x090200D8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mask : 22;

                            /* Bits[21:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               Error Mask This mask is used to select which
                               bits are counted as part of error count. When
                               bit is set that error type is included in the
                               Count. See Intel UPI MCA register definition for
                               details on each error code. Format: {bit} - {hex
                               mscod_code} {description} [0] - 0x00 UC Phy
                               Initialization Failure (NumInit) [1] - 0x01 UC
                               Phy Detected Drift Buffer Alarm [2] - 0x02 UC
                               Phy Detected Latency Buffer Rollover [3] -
                               Reserved [4] - Reserved [5] - 0x10 UC LL Rx
                               detected CRC error: unsuccessful LLR (entered
                               Abort state) [6] - 0x11 UC LL Rx
                               Unsupported/Undefined packet [7] - 0x12 UC LL or
                               Phy Control Error [8] - 0x13 UC LL Rx Parameter
                               Exception [9] - Reserved [10] - Reserved [11] -
                               0x1F UC LL Detected Control Error from M3UPI
                               [12] - 0x20 COR Phy Initialization Abort [13] -
                               0x21 COR Phy Reset [14] - 0x22 COR Phy Lane
                               failure, recovery in x8 width [15] - 0x23 COR
                               Phy L0c error corrected without Phy reset [16] -
                               0x24 COR Phy L0c error triggering Phy Reset [17]
                               - 0x25 COR Phy L0p exit error triggering Phy
                               Reset [18] - Reserved [19] - 0x30 COR LL Rx
                               detected CRC error: successful LLR without Phy
                               Reinit [20] - 0x31 COR LL Rx detected CRC error:
                               successful LLR with Phy Reinit [21] - Reserved
                            */
    UINT32 rsvd : 10;

                            /* Bits[31:22], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTIERRCNT1_MASK_KTI_LLPMON_STRUCT;

/* KTIERRCNT1_CNTR_KTI_LLPMON_REG supported on:                                 */
/*      SPRA0 (0x21e090dc)                                                      */
/*      SPRB0 (0x21e090dc)                                                      */
/*      SPRHBM (0x21e090dc)                                                     */
/*      SPRC0 (0x21e090dc)                                                      */
/*      SPRMCC (0x21e090dc)                                                     */
/*      SPRUCC (0x21e480dc)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: COR_CNT                                          */
/* SPRB0 Security PolicyGroup: COR_CNT                                          */
/* SPRHBM Security PolicyGroup: COR_CNT                                         */
/* SPRC0 Security PolicyGroup: COR_CNT                                          */
/* SPRMCC Security PolicyGroup: COR_CNT                                         */
/* SPRUCC Security PolicyGroup: COR_CNT                                         */
/* ktierrcnt1_cntr
*/


#define KTIERRCNT1_CNTR_KTI_LLPMON_REG 0x090200DC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 counter : 15;

                            /* Bits[14:0], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               Counter increments based on error enabled in the
                               Mask register. Counter is cleared by writing
                               zeroes to both the 15-bit counter and 1-bit
                               overflow fields.
                            */
    UINT32 rsvd : 16;

                            /* Bits[30:15], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 overflow : 1;

                            /* Bits[31:31], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               Overflow, remains sticky until cleared by
                               software.
                            */

  } Bits;
  UINT32 Data;

} KTIERRCNT1_CNTR_KTI_LLPMON_STRUCT;

/* KTIERRCNT2_MASK_KTI_LLPMON_REG supported on:                                 */
/*      SPRA0 (0x21e090e0)                                                      */
/*      SPRB0 (0x21e090e0)                                                      */
/*      SPRHBM (0x21e090e0)                                                     */
/*      SPRC0 (0x21e090e0)                                                      */
/*      SPRMCC (0x21e090e0)                                                     */
/*      SPRUCC (0x21e480e0)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* ktierrcnt2_mask
*/


#define KTIERRCNT2_MASK_KTI_LLPMON_REG 0x090200E0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mask : 22;

                            /* Bits[21:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               Error Mask This mask is used to select which
                               bits are counted as part of error count. When
                               bit is set that error type is included in the
                               Count. See Intel UPI MCA register definition for
                               details on each error code. Format: {bit} - {hex
                               mscod_code} {description} [0] - 0x00 UC Phy
                               Initialization Failure (NumInit) [1] - 0x01 UC
                               Phy Detected Drift Buffer Alarm [2] - 0x02 UC
                               Phy Detected Latency Buffer Rollover [3] -
                               Reserved [4] - Reserved [5] - 0x10 UC LL Rx
                               detected CRC error: unsuccessful LLR (entered
                               Abort state) [6] - 0x11 UC LL Rx
                               Unsupported/Undefined packet [7] - 0x12 UC LL or
                               Phy Control Error [8] - 0x13 UC LL Rx Parameter
                               Exception [9] - Reserved [10] - Reserved [11] -
                               0x1F UC LL Detected Control Error from M3UPI
                               [12] - 0x20 COR Phy Initialization Abort [13] -
                               0x21 COR Phy Reset [14] - 0x22 COR Phy Lane
                               failure, recovery in x8 width [15] - 0x23 COR
                               Phy L0c error corrected without Phy reset [16] -
                               0x24 COR Phy L0c error triggering Phy Reset [17]
                               - 0x25 COR Phy L0p exit error triggering Phy
                               Reset [18] - Reserved [19] - 0x30 COR LL Rx
                               detected CRC error: successful LLR without Phy
                               Reinit [20] - 0x31 COR LL Rx detected CRC error:
                               successful LLR with Phy Reinit [21] - Reserved
                            */
    UINT32 rsvd : 10;

                            /* Bits[31:22], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTIERRCNT2_MASK_KTI_LLPMON_STRUCT;

/* KTIERRCNT2_CNTR_KTI_LLPMON_REG supported on:                                 */
/*      SPRA0 (0x21e090e4)                                                      */
/*      SPRB0 (0x21e090e4)                                                      */
/*      SPRHBM (0x21e090e4)                                                     */
/*      SPRC0 (0x21e090e4)                                                      */
/*      SPRMCC (0x21e090e4)                                                     */
/*      SPRUCC (0x21e480e4)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: COR_CNT                                          */
/* SPRB0 Security PolicyGroup: COR_CNT                                          */
/* SPRHBM Security PolicyGroup: COR_CNT                                         */
/* SPRC0 Security PolicyGroup: COR_CNT                                          */
/* SPRMCC Security PolicyGroup: COR_CNT                                         */
/* SPRUCC Security PolicyGroup: COR_CNT                                         */
/* ktierrcnt2_cntr
*/


#define KTIERRCNT2_CNTR_KTI_LLPMON_REG 0x090200E4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 counter : 15;

                            /* Bits[14:0], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               Counter increments based on error enabled in the
                               Mask register. Counter is cleared by writing
                               zeroes to both the 15-bit counter and 1-bit
                               overflow fields.
                            */
    UINT32 rsvd : 16;

                            /* Bits[30:15], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 overflow : 1;

                            /* Bits[31:31], Access Type=RW/V/P, default=0x00000000*/

                            /*
                               Overflow, remains sticky until cleared by
                               software.
                            */

  } Bits;
  UINT32 Data;

} KTIERRCNT2_CNTR_KTI_LLPMON_STRUCT;

/* KTIAGCTRL_KTI_LLPMON_REG supported on:                                       */
/*      SPRA0 (0x21e090f0)                                                      */
/*      SPRB0 (0x21e090f0)                                                      */
/*      SPRHBM (0x21e090f0)                                                     */
/*      SPRC0 (0x21e090f0)                                                      */
/*      SPRMCC (0x21e090f0)                                                     */
/*      SPRUCC (0x21e480f0)                                                     */
/* Register default value on SPRA0: 0x00101010                                  */
/* Register default value on SPRB0: 0x00101010                                  */
/* Register default value on SPRHBM: 0x00101010                                 */
/* Register default value on SPRC0: 0x00101010                                  */
/* Register default value on SPRMCC: 0x00101010                                 */
/* Register default value on SPRUCC: 0x00101010                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* ktiagctrl
*/


#define KTIAGCTRL_KTI_LLPMON_REG 0x090200F0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd_0 : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /* Reserved */
    UINT32 rbt_rd_enable : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               RBT Read Enable This mode enables the Rx RBT
                               flow. It does not control writing to RBT on Tx
                               path. 0 - Disable 1 - Enable By enabling RBT
                               reads, we cause the direct-to-core flow in Intel
                               UPI.
                            */
    UINT32 remote_prefetch_mod3 : 2;

                            /* Bits[3:2], Access Type=RW, default=0x00000000*/

                            /*
                               This field is obsolete and unused. Controls the
                               UPI prefetch feature mode. In UPI agent we need
                               to know mode to allow the correct Mod-3 to be
                               calculated. 00 - mod3(Addr[45:6]) 01 -
                               mod3(Addr[45:8]) 10 - mod3(Addr[45:12]) 11 -
                               Reserved Note: there are modes in M3UPI that
                               needs to be setup in a consistent way that
                               matches this setting and matches the memory
                               interleave in this socket. Also note that the
                               mod-3 is only used in modes with 3 SMI3 channels
                               in a Sub-NUMA cluster (EX only).
                            */
    UINT32 tunnel_timeout : 3;

                            /* Bits[6:4], Access Type=RW, default=0x00000001*/

                            /*
                               Sets timeout value for tunneled flows for SMI3.
                               0x0 - 2^9 sync pulse (327uS) 0x1 - 2^10 sync
                               pulse (655uS) 0x2 - 2^11 sync pulse (1.3 ms) 0x3
                               - 2^12 sync pulse (2.6 ms) 0x4 - 2^13 sync pulse
                               (5.2 ms) 0x5 - 2^14 sync pulse (10.4 ms) 0x6 -
                               Reserved 0x7 - Reserved Note Count is based on
                               sync pulse which is fixed 640ns period.
                            */
    UINT32 rsvd : 1;

                            /* Bits[7:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 vna_threshold_llcrd : 8;

                            /* Bits[15:8], Access Type=RW, default=0x00000010*/

                            /*
                               Threshold on number of VNA credits to accumulate
                               before forcing a LLCRD message. Recommended
                               range: 16 to 66.
                            */
    UINT32 ack_threshold_llcrd : 8;

                            /* Bits[23:16], Access Type=RW, default=0x00000010*/

                            /*
                               Threshold on number of ACK credits to accumulate
                               before forcing a LLCRD message. Recommended
                               range: 16 to 66.
                            */
    UINT32 enableprefetch : 1;

                            /* Bits[24:24], Access Type=RW, default=0x00000000*/

                            /*
                               Prefetch enable for Remote Rd Types. When
                               enabled this causes Remote Reads that match a
                               SNC range to generate MemSpecRd commands to the
                               memory controller. The intent is to reduce
                               latency for remote reads. Note: There is an
                               identical copy of this field in M3UPI
                               M3KPRECTRL.EnablePrefetch that should be kept
                               programmed identically to this.
                            */
    UINT32 fixed_field_reporting : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /*
                               The Intel UPI Spec defines some fields to have
                               fixed values. This register controls how the
                               link layer handles Rx detection of violations of
                               these definitions. 0 - Trigger a CRC error (per
                               Intel UPI Spec). 1 - Trigger a CRC error and an
                               uncorrectable error.
                            */
    UINT32 suppress_mem_rd_prefetch_rdcur : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /*
                               This bit defeatures Intel UPI generation of
                               memory read prefetches for RdCur. The default
                               value is such that Intel UPI prefetch for RdCur
                               is enabled. For platforms that expect high speed
                               and low latency IO devices consuming data where
                               data would be in the producer's cache (CPU or
                               peer IO), this bit could be used to disable
                               Intel UPI prefetch for RdCur to reduce wasteful
                               memory BW usage. For platforms that do not have
                               this tightly coupled IO behavior it is likely
                               better to allow the prefetch to save latency
                               from memory. Customers should be able to use a
                               BIOS provided knob to experiment with this bit
                               to determine how they want to set it.
                            */
    UINT32 xpt_prefetch_enable : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /*
                               This bit enables XPT prefetch support in the UPI
                               Link Layer Rx. &nbsp;Reception of RemMemSpecRd
                               when this bit is clear will result in an
                               Uncorrectable Error.
                            */
    UINT32 rsvd_28 : 4;

                            /* Bits[31:28], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTIAGCTRL_KTI_LLPMON_STRUCT;

/* KTIA2RCRCTRL_KTI_LLPMON_REG supported on:                                    */
/*      SPRA0 (0x21e090f4)                                                      */
/*      SPRB0 (0x21e090f4)                                                      */
/*      SPRHBM (0x21e090f4)                                                     */
/*      SPRC0 (0x21e090f4)                                                      */
/*      SPRMCC (0x21e090f4)                                                     */
/*      SPRUCC (0x21e480f4)                                                     */
/* Register default value on SPRA0: 0x000C9247                                  */
/* Register default value on SPRB0: 0x000C9247                                  */
/* Register default value on SPRHBM: 0x000C9247                                 */
/* Register default value on SPRC0: 0x000C9247                                  */
/* Register default value on SPRMCC: 0x000C9247                                 */
/* Register default value on SPRUCC: 0x000C9247                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* ktia2rcrctrl
*/


#define KTIA2RCRCTRL_KTI_LLPMON_REG 0x090200F4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ad_vna : 7;

                            /* Bits[6:0], Access Type=RW/P, default=0x00000047*/

                            /*
                               Credits given to the Intel UPI link layer to
                               send packets from any VN and a AD message class
                               to the M3UPI AD flow control queue. Link layer
                               consumes these before using VN0/1 and AD MC-
                               specific credits. Legal range of values: 7'd0 to
                               7'd71, but total across all applicable credit
                               types must not exceed the size of the respective
                               FlowQ.
                            */
    UINT32 bl_vna : 7;

                            /* Bits[13:7], Access Type=RW/P, default=0x00000024*/

                            /*
                               Credits given to the Intel UPI link layer to
                               send packets from any VN and a BL message class
                               to the M3UPI BL flow control queue. Link layer
                               consumes these before using VN0/1 and BL MC-
                               specific credits. Legal range of values: 7'd0 to
                               7'd36, but total across all applicable credit
                               types must not exceed the size of the respective
                               FlowQ.
                            */
    UINT32 ak_vna : 7;

                            /* Bits[20:14], Access Type=RW/P, default=0x00000032*/

                            /*
                               Credits given to the Intel UPI link layer to
                               send packets from any AK message class to the
                               M3UPI AK flow control queue. Note that for AK
                               messages VN0 and VN1 don't apply since all
                               messages are guaranteed to sink in local
                               destinations, so no need to track VN0/1 credits.
                               Legal range of values: If VN1 enabled then range
                               is 7'd4 to 7'd50. If VN1 disabled then range is
                               7'd2 to 7'd50. In either case, the total across
                               all applicable credit types must not exceed the
                               size of the respective FlowQ.
                            */
    UINT32 ad_snp_vn01 : 3;

                            /* Bits[23:21], Access Type=RW/P, default=0x00000000*/

                            /*
                               Credits +1 given to the Intel UPI link layer to
                               send AD SNP VN0 packets to the M3UPI AD flow
                               control queue. If VN1 is enabled, LL
                               additionally gets this number of credits to send
                               AD SNP VN1 to AD flow control queue. VN0/1 CRD
                               encodings are value + 1 (0=1CRD, 1=2CRD...).
                               Value takes affect on next Link Layer Reset.
                               Legal range of values: 3'd0 to 3'd6 (3'd7 is not
                               allowed to avoid counts going beyond 3-bits) but
                               total across all applicable credit types must
                               not exceed the size of the respective FlowQ.
                            */
    UINT32 ad_rsp_vn01 : 3;

                            /* Bits[26:24], Access Type=RW/P, default=0x00000000*/

                            /*
                               Credits +1 given to the Intel UPI link layer to
                               send AD RSP VN0 packets to the M3UPI AD flow
                               control queue. If VN1 is enabled, LL
                               additionally gets this number of credits to send
                               AD RSP VN1 to R3 AD flow control queue. VN0/1
                               CRD encodings are value + 1 (0=1CRD, 1=2CRD...).
                               Value takes affect on next Link Layer Reset.
                               Legal range of values: 3'd0 to 3'd6 (3'd7 is not
                               allowed to avoid counts going beyond 3-bits) but
                               total across all applicable credit types must
                               not exceed the size of the respective FlowQ.
                            */
    UINT32 bl_rsp_vn01 : 3;

                            /* Bits[29:27], Access Type=RW/P, default=0x00000000*/

                            /*
                               Credits +1 given to the Intel UPI link layer to
                               send BL RSP VN0 packets to the M3UPI BL flow
                               control queue. If VN1 is enabled, LL
                               additionally gets this number of credits to send
                               BL RSP VN1 to R3 BL flow control queue. VN0/1
                               CRD encodings are value + 1 (0=1CRD, 1=2CRD...).
                               Value takes affect on next Link Layer Reset.
                               Legal range of values: 3'd0 to 3'd6 (3'd7 is not
                               allowed to avoid counts going beyond 3-bits) but
                               total across all applicable credit types must
                               not exceed the size of the respective FlowQ.
                            */
    UINT32 rsvd : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTIA2RCRCTRL_KTI_LLPMON_STRUCT;

/* KTIQRT_KTI_LLPMON_REG supported on:                                          */
/*      SPRA0 (0x21e090f8)                                                      */
/*      SPRB0 (0x21e090f8)                                                      */
/*      SPRHBM (0x21e090f8)                                                     */
/*      SPRC0 (0x21e090f8)                                                      */
/*      SPRMCC (0x21e090f8)                                                     */
/*      SPRUCC (0x21e480f8)                                                     */
/* Register default value on SPRA0: 0x0000FFFF                                  */
/* Register default value on SPRB0: 0x0000FFFF                                  */
/* Register default value on SPRHBM: 0x0000FFFF                                 */
/* Register default value on SPRC0: 0x0000FFFF                                  */
/* Register default value on SPRMCC: 0x0000FFFF                                 */
/* Register default value on SPRUCC: 0x0000FFFF                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* ktiqrt
*/


#define KTIQRT_KTI_LLPMON_REG 0x090200F8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 routeskt : 16;

                            /* Bits[15:0], Access Type=RW, default=0x0000FFFF*/

                            /*
                               <p>The UPI agent needs to do Tx and Rx decodes
                               of the NID for routing and D2C purposes:<br> -
                               TX: decode if the RNID of an outgoing
                               REQ/SNP/NCS request packet is a locally
                               originated request versus remote (only write
                               into RBT if local)<br> - RX: decode if the DNID
                               of an incoming RSP4 packet is targeting the
                               local or remote socket. The result is used in
                               UPI Agent to target traffic to the correct FlowQ
                               (for local target) or to the route-thru path
                               (for remote target) to one of the other UPI
                               ports. &nbsp;Only read from RBT (and potentially
                               issue D2C) if local FlowQ destination.</p>
                               <p>8-deep table indexed by RNID/DNID. The output
                               is 2-bits each ([1:0] for NID0, [3:2] for NID1,
                               etc.) indicating request/target Port.
                               &nbsp;Encoding is: 00-UPI Port 0, 01-UPI port 1,
                               10-UPI Port 2, 11-Local Socket.<br> - For fully
                               connected topologies the UPI Agent must be able
                               to differentiate the local-vs-remote socket NID
                               using this register. &nbsp;Therefore the
                               convention is to program the local socket NID
                               with 11 and all other socket NIDs with 00. For
                               example, on socket 0, all 3 UPI agent KTIQRT
                               registers would be programmed with
                               0b00_00_00_00_00_00_00_11.<br> - For non-fully
                               connected topologies (4S ring, 8S) the UPI Agent
                               must program each NID appropriately to direct
                               traffic to the correct peer UPI port or local
                               destination.</p>
                            */
    UINT32 rsvd : 16;

                            /* Bits[31:16], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTIQRT_KTI_LLPMON_STRUCT;

/* PXPENHCAP_0_KTI_LLPMON_REG supported on:                                     */
/*      SPRA0 (0x21e09100)                                                      */
/*      SPRB0 (0x21e09100)                                                      */
/*      SPRHBM (0x21e09100)                                                     */
/*      SPRC0 (0x21e09100)                                                      */
/*      SPRMCC (0x21e09100)                                                     */
/*      SPRUCC (0x21e48100)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* PCI Express Enhanced Capability
*/


#define PXPENHCAP_0_KTI_LLPMON_REG 0x09020100

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 capability_id : 16;

                            /* Bits[15:0], Access Type=RO, default=0x00000000*/

                            /* There is no capability at this location */
    UINT32 capability_version : 4;

                            /* Bits[19:16], Access Type=RO, default=0x00000000*/

                            /* There is no capability at this location. */
    UINT32 next_capability_offset : 12;

                            /* Bits[31:20], Access Type=RO, default=0x00000000*/

                            /*
                               Pointer to the next capability in the enhanced
                               configuration space. Set to 0 to indicate there
                               are no more capability structures.
                            */

  } Bits;
  UINT32 Data;

} PXPENHCAP_0_KTI_LLPMON_STRUCT;

#if defined(SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST)
/* KTICTRTXPF_KTI_LLPMON_REG supported on:                                      */
/*      SPRA0 (0x21e09108)                                                      */
/*      SPRB0 (0x21e09108)                                                      */
/*      SPRHBM (0x21e09108)                                                     */
/*      SPRC0 (0x21e09108)                                                      */
/*      SPRMCC (0x21e09108)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* ktictrtxpf
*/


#define KTICTRTXPF_KTI_LLPMON_REG 0x09020108

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 count_tx_protocol_flit : 32;

                            /* Bits[31:0], Access Type=RO/V, default=0x00000000*/

                            /*
                               Free running count of cycles (not flits) in
                               which a Protocol header or data occupied one or
                               more slots of a UPI flit on the Tx. This count
                               does not include cycles in which all three slots
                               contained only link layer information (NULL,
                               Parameters, control, etc.).
                            */

  } Bits;
  UINT32 Data;

} KTICTRTXPF_KTI_LLPMON_STRUCT;
#endif /* (SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) */

#if defined(SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST)
/* KTICTRRXPF_KTI_LLPMON_REG supported on:                                      */
/*      SPRA0 (0x21e0910c)                                                      */
/*      SPRB0 (0x21e0910c)                                                      */
/*      SPRHBM (0x21e0910c)                                                     */
/*      SPRC0 (0x21e0910c)                                                      */
/*      SPRMCC (0x21e0910c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* ktictrrxpf
*/


#define KTICTRRXPF_KTI_LLPMON_REG 0x0902010C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 count_rx_protocol_flit : 32;

                            /* Bits[31:0], Access Type=RO/V, default=0x00000000*/

                            /*
                               Free running count of cycles (not flits) in
                               which a Protocol header or data occupied one or
                               more slots of a UPI flit on the Rx. This cycle
                               count does not include cycles in which all three
                               slots contained only link layer information
                               (NULL, Parameters, control, etc.).
                            */

  } Bits;
  UINT32 Data;

} KTICTRRXPF_KTI_LLPMON_STRUCT;
#endif /* (SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) */

#if defined(SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST)
/* KTICTRLINKCLK_KTI_LLPMON_REG supported on:                                   */
/*      SPRA0 (0x21e09110)                                                      */
/*      SPRB0 (0x21e09110)                                                      */
/*      SPRHBM (0x21e09110)                                                     */
/*      SPRC0 (0x21e09110)                                                      */
/*      SPRMCC (0x21e09110)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* ktictrlinkclk
*/


#define KTICTRLINKCLK_KTI_LLPMON_REG 0x09020110

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 count_linkclk : 32;

                            /* Bits[31:0], Access Type=RO/V, default=0x00000000*/

                            /*
                               Free running count of KFClk (8 UI link layer
                               clock).
                            */

  } Bits;
  UINT32 Data;

} KTICTRLINKCLK_KTI_LLPMON_STRUCT;
#endif /* (SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) */

#if defined(SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST)
/* KTICTRL1_KTI_LLPMON_REG supported on:                                        */
/*      SPRA0 (0x21e09114)                                                      */
/*      SPRB0 (0x21e09114)                                                      */
/*      SPRHBM (0x21e09114)                                                     */
/*      SPRC0 (0x21e09114)                                                      */
/*      SPRMCC (0x21e09114)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* ktictrl1
*/


#define KTICTRL1_KTI_LLPMON_REG 0x09020114

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 count_l1 : 23;

                            /* Bits[22:0], Access Type=RO/V, default=0x00000000*/

                            /*
                               Free running count of KFClk (8 UI link layer
                               clock) in L1 link state.
                            */
    UINT32 rsvd : 9;

                            /* Bits[31:23], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTICTRL1_KTI_LLPMON_STRUCT;
#endif /* (SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) */

/* KTICTRRXL0P_KTI_LLPMON_REG supported on:                                     */
/*      SPRA0 (0x21e09118)                                                      */
/*      SPRB0 (0x21e09118)                                                      */
/*      SPRHBM (0x21e09118)                                                     */
/*      SPRC0 (0x21e09118)                                                      */
/*      SPRMCC (0x21e09118)                                                     */
/*      SPRUCC (0x21e48118)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktictrrxl0p
*/


#define KTICTRRXL0P_KTI_LLPMON_REG 0x09020118

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 count_rx_l0p : 23;

                            /* Bits[22:0], Access Type=RO/V, default=0x00000000*/

                            /*
                               Free running count of KFClk (8 UI link layer
                               clock) in Rx side link in L0p state.
                            */
    UINT32 rsvd : 9;

                            /* Bits[31:23], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTICTRRXL0P_KTI_LLPMON_STRUCT;

/* KTICTRTXL0P_KTI_LLPMON_REG supported on:                                     */
/*      SPRA0 (0x21e0911c)                                                      */
/*      SPRB0 (0x21e0911c)                                                      */
/*      SPRHBM (0x21e0911c)                                                     */
/*      SPRC0 (0x21e0911c)                                                      */
/*      SPRMCC (0x21e0911c)                                                     */
/*      SPRUCC (0x21e4811c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktictrtxl0p
*/


#define KTICTRTXL0P_KTI_LLPMON_REG 0x0902011C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 count_tx_l0p : 23;

                            /* Bits[22:0], Access Type=RO/V, default=0x00000000*/

                            /*
                               Free running count of KFClk (8 UI link layer
                               clock) in Tx side link in L0p state.
                            */
    UINT32 rsvd : 9;

                            /* Bits[31:23], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTICTRTXL0P_KTI_LLPMON_STRUCT;

#if defined(SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST)
/* KTIPCSTS_KTI_LLPMON_REG supported on:                                        */
/*      SPRA0 (0x21e09120)                                                      */
/*      SPRB0 (0x21e09120)                                                      */
/*      SPRHBM (0x21e09120)                                                     */
/*      SPRC0 (0x21e09120)                                                      */
/*      SPRMCC (0x21e09120)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* ktipcsts
*/


#define KTIPCSTS_KTI_LLPMON_REG 0x09020120

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ll_status : 4;

                            /* Bits[3:0], Access Type=RW, default=0x00000000*/

                            /*
                               Link Layer status registers that is written by
                               Pcode. Encoding is the same as KTILS.Init_State.
                            */
    UINT32 ll_status_valid : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               Bit indicates valid training status logged from
                               PCode to BIOS.
                            */
    UINT32 not_used : 27;

                            /* Bits[31:5], Access Type=RW, default=0x00000000*/

                            /*
                               This is just extra scratchpad space to fill out
                               this register. Validation team plans to use this
                               to verify functionality of config register ring
                               in JKT
                            */

  } Bits;
  UINT32 Data;

} KTIPCSTS_KTI_LLPMON_STRUCT;
#endif /* (SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) */

/* KTILK_TAD_MMIOL_TARGET0_KTI_LLPMON_REG supported on:                         */
/*      SPRA0 (0x21e09130)                                                      */
/*      SPRB0 (0x21e09130)                                                      */
/*      SPRHBM (0x21e09130)                                                     */
/*      SPRC0 (0x21e09130)                                                      */
/*      SPRMCC (0x21e09130)                                                     */
/*      SPRUCC (0x21e48130)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_tad_mmiol_target0
*/


#define KTILK_TAD_MMIOL_TARGET0_KTI_LLPMON_REG 0x09020130

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mmiol_target0 : 4;

                            /* Bits[3:0], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 0. 4-bits for each target
                               to indicate IIO0, IIO1, .. IIO11 (only 8
                               encodings are defined for SPR).
                            */
    UINT32 mmiol_target1 : 4;

                            /* Bits[7:4], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 1. 4-bits for each target
                               to indicate IIO0, IIO1, .. IIO11 (only 8
                               encodings are defined for SPR).
                            */
    UINT32 mmiol_target2 : 4;

                            /* Bits[11:8], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 2. 4-bits for each target
                               to indicate IIO0, IIO1, .. IIO11 (only 8
                               encodings are defined for SPR).
                            */
    UINT32 mmiol_target3 : 4;

                            /* Bits[15:12], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 3. 4-bits for each target
                               to indicate IIO0, IIO1, .. IIO11 (only 8
                               encodings are defined for SPR).
                            */
    UINT32 mmiol_target4 : 4;

                            /* Bits[19:16], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 4. 4-bits for each target
                               to indicate IIO0, IIO1, .. IIO11 (only 8
                               encodings are defined for SPR).
                            */
    UINT32 mmiol_target5 : 4;

                            /* Bits[23:20], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 5. 4-bits for each target
                               to indicate IIO0, IIO1, .. IIO11 (only 8
                               encodings are defined for SPR).
                            */
    UINT32 mmiol_target6 : 4;

                            /* Bits[27:24], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 6. 4-bits for each target
                               to indicate IIO0, IIO1, .. IIO11 (only 8
                               encodings are defined for SPR).
                            */
    UINT32 mmiol_target7 : 4;

                            /* Bits[31:28], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 7. 4-bits for each target
                               to indicate IIO0, IIO1, .. IIO11 (only 8
                               encodings are defined for SPR).
                            */

  } Bits;
  UINT32 Data;

} KTILK_TAD_MMIOL_TARGET0_KTI_LLPMON_STRUCT;

/* KTILK_TAD_MMIOL_TARGET1_KTI_LLPMON_REG supported on:                         */
/*      SPRA0 (0x21e09134)                                                      */
/*      SPRB0 (0x21e09134)                                                      */
/*      SPRHBM (0x21e09134)                                                     */
/*      SPRC0 (0x21e09134)                                                      */
/*      SPRMCC (0x21e09134)                                                     */
/*      SPRUCC (0x21e48134)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_tad_mmiol_target1
*/


#define KTILK_TAD_MMIOL_TARGET1_KTI_LLPMON_REG 0x09020134

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mmiol_target8 : 4;

                            /* Bits[3:0], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 8. 4-bits for each target
                               to indicate IIO0, IIO1, .. IIO11 (only 8
                               encodings are defined for SPR).
                            */
    UINT32 mmiol_target9 : 4;

                            /* Bits[7:4], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 1. 4-bits for each target
                               to indicate IIO0, IIO1, .. IIO11 (only 8
                               encodings are defined for SPR).
                            */
    UINT32 mmiol_target10 : 4;

                            /* Bits[11:8], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 2. 4-bits for each target
                               to indicate IIO0, IIO1, .. IIO11 (only 8
                               encodings are defined for SPR).
                            */
    UINT32 mmiol_target11 : 4;

                            /* Bits[15:12], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 3. 4-bits for each target
                               to indicate IIO0, IIO1, .. IIO11 (only 8
                               encodings are defined for SPR).
                            */
    UINT32 rsvd : 16;

                            /* Bits[31:16], Access Type=RO, default=0x00000000*/

                            /* Reserved Bits. */

  } Bits;
  UINT32 Data;

} KTILK_TAD_MMIOL_TARGET1_KTI_LLPMON_STRUCT;

/* KTILK_TAD_MMIOL1_KTI_LLPMON_REG supported on:                                */
/*      SPRA0 (0x21e09138)                                                      */
/*      SPRB0 (0x21e09138)                                                      */
/*      SPRHBM (0x21e09138)                                                     */
/*      SPRC0 (0x21e09138)                                                      */
/*      SPRMCC (0x21e09138)                                                     */
/*      SPRUCC (0x21e48138)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_tad_mmiol1
*/


#define KTILK_TAD_MMIOL1_KTI_LLPMON_REG 0x09020138

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 6;

                            /* Bits[5:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 mmiol_limit0 : 10;

                            /* Bits[15:6], Access Type=RW, default=0x00000000*/

                            /* PA[31:22] */
    UINT32 rsvd_16 : 6;

                            /* Bits[21:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 mmiol_limit1 : 10;

                            /* Bits[31:22], Access Type=RW, default=0x00000000*/

                            /* PA[31:22] */

  } Bits;
  UINT32 Data;

} KTILK_TAD_MMIOL1_KTI_LLPMON_STRUCT;

/* KTILK_TAD_MMIOL2_KTI_LLPMON_REG supported on:                                */
/*      SPRA0 (0x21e0913c)                                                      */
/*      SPRB0 (0x21e0913c)                                                      */
/*      SPRHBM (0x21e0913c)                                                     */
/*      SPRC0 (0x21e0913c)                                                      */
/*      SPRMCC (0x21e0913c)                                                     */
/*      SPRUCC (0x21e4813c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_tad_mmiol2
*/


#define KTILK_TAD_MMIOL2_KTI_LLPMON_REG 0x0902013C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 6;

                            /* Bits[5:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 mmiol_limit2 : 10;

                            /* Bits[15:6], Access Type=RW, default=0x00000000*/

                            /* PA[31:22] */
    UINT32 rsvd_16 : 6;

                            /* Bits[21:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 mmiol_limit3 : 10;

                            /* Bits[31:22], Access Type=RW, default=0x00000000*/

                            /* PA[31:22] */

  } Bits;
  UINT32 Data;

} KTILK_TAD_MMIOL2_KTI_LLPMON_STRUCT;

/* KTILK_TAD_MMIOL3_KTI_LLPMON_REG supported on:                                */
/*      SPRA0 (0x21e09140)                                                      */
/*      SPRB0 (0x21e09140)                                                      */
/*      SPRHBM (0x21e09140)                                                     */
/*      SPRC0 (0x21e09140)                                                      */
/*      SPRMCC (0x21e09140)                                                     */
/*      SPRUCC (0x21e48140)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_tad_mmiol3
*/


#define KTILK_TAD_MMIOL3_KTI_LLPMON_REG 0x09020140

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 6;

                            /* Bits[5:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 mmiol_limit4 : 10;

                            /* Bits[15:6], Access Type=RW, default=0x00000000*/

                            /* PA[31:22] */
    UINT32 rsvd_16 : 6;

                            /* Bits[21:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 mmiol_limit5 : 10;

                            /* Bits[31:22], Access Type=RW, default=0x00000000*/

                            /* PA[31:22] */

  } Bits;
  UINT32 Data;

} KTILK_TAD_MMIOL3_KTI_LLPMON_STRUCT;

/* KTILK_TAD_MMIOL4_KTI_LLPMON_REG supported on:                                */
/*      SPRA0 (0x21e09144)                                                      */
/*      SPRB0 (0x21e09144)                                                      */
/*      SPRHBM (0x21e09144)                                                     */
/*      SPRC0 (0x21e09144)                                                      */
/*      SPRMCC (0x21e09144)                                                     */
/*      SPRUCC (0x21e48144)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_tad_mmiol4
*/


#define KTILK_TAD_MMIOL4_KTI_LLPMON_REG 0x09020144

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 6;

                            /* Bits[5:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 mmiol_limit6 : 10;

                            /* Bits[15:6], Access Type=RW, default=0x00000000*/

                            /* PA[31:22] */
    UINT32 rsvd_16 : 6;

                            /* Bits[21:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 mmiol_limit7 : 10;

                            /* Bits[31:22], Access Type=RW, default=0x00000000*/

                            /* PA[31:22] */

  } Bits;
  UINT32 Data;

} KTILK_TAD_MMIOL4_KTI_LLPMON_STRUCT;

/* KTILK_TAD_MMIOL5_KTI_LLPMON_REG supported on:                                */
/*      SPRA0 (0x21e09148)                                                      */
/*      SPRB0 (0x21e09148)                                                      */
/*      SPRHBM (0x21e09148)                                                     */
/*      SPRC0 (0x21e09148)                                                      */
/*      SPRMCC (0x21e09148)                                                     */
/*      SPRUCC (0x21e48148)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_tad_mmiol5
*/


#define KTILK_TAD_MMIOL5_KTI_LLPMON_REG 0x09020148

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 6;

                            /* Bits[5:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 mmiol_limit8 : 10;

                            /* Bits[15:6], Access Type=RW, default=0x00000000*/

                            /* PA[31:22] */
    UINT32 rsvd_16 : 6;

                            /* Bits[21:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 mmiol_limit9 : 10;

                            /* Bits[31:22], Access Type=RW, default=0x00000000*/

                            /* PA[31:22] */

  } Bits;
  UINT32 Data;

} KTILK_TAD_MMIOL5_KTI_LLPMON_STRUCT;

/* KTILK_TAD_MMIOL6_KTI_LLPMON_REG supported on:                                */
/*      SPRA0 (0x21e0914c)                                                      */
/*      SPRB0 (0x21e0914c)                                                      */
/*      SPRHBM (0x21e0914c)                                                     */
/*      SPRC0 (0x21e0914c)                                                      */
/*      SPRMCC (0x21e0914c)                                                     */
/*      SPRUCC (0x21e4814c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_tad_mmiol6
*/


#define KTILK_TAD_MMIOL6_KTI_LLPMON_REG 0x0902014C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 6;

                            /* Bits[5:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 mmiol_limit10 : 10;

                            /* Bits[15:6], Access Type=RW, default=0x00000000*/

                            /* PA[31:22] */
    UINT32 rsvd_16 : 6;

                            /* Bits[21:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 mmiol_limit11 : 10;

                            /* Bits[31:22], Access Type=RW, default=0x00000000*/

                            /* PA[31:22] */

  } Bits;
  UINT32 Data;

} KTILK_TAD_MMIOL6_KTI_LLPMON_STRUCT;

/* KTILK_TAD_CFG_TARGET0_KTI_LLPMON_REG supported on:                           */
/*      SPRA0 (0x21e09150)                                                      */
/*      SPRB0 (0x21e09150)                                                      */
/*      SPRHBM (0x21e09150)                                                     */
/*      SPRC0 (0x21e09150)                                                      */
/*      SPRMCC (0x21e09150)                                                     */
/*      SPRUCC (0x21e48150)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_tad_cfg_target0
*/


#define KTILK_TAD_CFG_TARGET0_KTI_LLPMON_REG 0x09020150

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 cfg_target0 : 4;

                            /* Bits[3:0], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 0. 3-bits for each target
                               to indicate IIO0, IIO1, .. IIO11 (only 8
                               encodings are defined for SPR).
                            */
    UINT32 cfg_target1 : 4;

                            /* Bits[7:4], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 1. 3-bits for each target
                               to indicate IIO0, IIO1, .. IIO11 (only 8
                               encodings are defined for SPR).
                            */
    UINT32 cfg_target2 : 4;

                            /* Bits[11:8], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 2. 3-bits for each target
                               to indicate IIO0, IIO1, .. IIO11 (only 8
                               encodings are defined for SPR).
                            */
    UINT32 cfg_target3 : 4;

                            /* Bits[15:12], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 3. 3-bits for each target
                               to indicate IIO0, IIO1, .. IIO11 (only 8
                               encodings are defined for SPR).
                            */
    UINT32 cfg_target4 : 4;

                            /* Bits[19:16], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 4. 3-bits for each target
                               to indicate IIO0, IIO1, .. IIO11 (only 8
                               encodings are defined for SPR).
                            */
    UINT32 cfg_target5 : 4;

                            /* Bits[23:20], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 5. 3-bits for each target
                               to indicate IIO0, IIO1, .. IIO11 (only 8
                               encodings are defined for SPR).
                            */
    UINT32 cfg_target6 : 4;

                            /* Bits[27:24], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 6. 3-bits for each target
                               to indicate IIO0, IIO1, .. IIO11 (only 8
                               encodings are defined for SPR).
                            */
    UINT32 cfg_target7 : 4;

                            /* Bits[31:28], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 7. 3-bits for each target
                               to indicate IIO0, IIO1, .. IIO11 (only 8
                               encodings are defined for SPR).
                            */

  } Bits;
  UINT32 Data;

} KTILK_TAD_CFG_TARGET0_KTI_LLPMON_STRUCT;

/* KTILK_TAD_CFG_TARGET1_KTI_LLPMON_REG supported on:                           */
/*      SPRA0 (0x21e09154)                                                      */
/*      SPRB0 (0x21e09154)                                                      */
/*      SPRHBM (0x21e09154)                                                     */
/*      SPRC0 (0x21e09154)                                                      */
/*      SPRMCC (0x21e09154)                                                     */
/*      SPRUCC (0x21e48154)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_tad_cfg_target1
*/


#define KTILK_TAD_CFG_TARGET1_KTI_LLPMON_REG 0x09020154

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 cfg_target8 : 4;

                            /* Bits[3:0], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 8. 3-bits for each target
                               to indicate IIO0, IIO1, .. IIO11 (only 8
                               encodings are defined for SPR).
                            */
    UINT32 cfg_target9 : 4;

                            /* Bits[7:4], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 9. 3-bits for each target
                               to indicate IIO0, IIO1, .. IIO11 (only 8
                               encodings are defined for SPR).
                            */
    UINT32 cfg_target10 : 4;

                            /* Bits[11:8], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 10. 3-bits for each target
                               to indicate IIO0, IIO1, .. IIO11 (only 8
                               encodings are defined for SPR).
                            */
    UINT32 cfg_target11 : 4;

                            /* Bits[15:12], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 3. 3-bits for each target
                               to indicate IIO0, IIO1, .. IIO11 (only 8
                               encodings are defined for SPR).
                            */
    UINT32 rsvd : 16;

                            /* Bits[31:16], Access Type=RO, default=0x00000000*/

                            /* Reserved Bits. */

  } Bits;
  UINT32 Data;

} KTILK_TAD_CFG_TARGET1_KTI_LLPMON_STRUCT;

/* KTILK_TAD_CFG1_KTI_LLPMON_REG supported on:                                  */
/*      SPRA0 (0x21e09158)                                                      */
/*      SPRB0 (0x21e09158)                                                      */
/*      SPRHBM (0x21e09158)                                                     */
/*      SPRC0 (0x21e09158)                                                      */
/*      SPRMCC (0x21e09158)                                                     */
/*      SPRUCC (0x21e48158)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_tad_cfg1
*/


#define KTILK_TAD_CFG1_KTI_LLPMON_REG 0x09020158

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 cfg_base_bus_num : 8;

                            /* Bits[7:0], Access Type=RW, default=0x00000000*/

                            /*
                               Base Bus # defined by Addr[27:20] in NcCfg*.
                               Base value must be set accurately before any
                               limit values are set. Note: Global address map
                               requires each socket CFG space be on granularity
                               be 32 bus#, so base must have lower 5 bits set
                               to zero.
                            */
    UINT32 cfg_limit0_bus_num : 8;

                            /* Bits[15:8], Access Type=RW, default=0x00000000*/

                            /* Bus# limit0: Bus# is defined by Addr[27:20] */
    UINT32 cfg_limit1_bus_num : 8;

                            /* Bits[23:16], Access Type=RW, default=0x00000000*/

                            /* Bus# limit1: Bus# is defined by Addr[27:20] */
    UINT32 cfg_limit2_bus_num : 8;

                            /* Bits[31:24], Access Type=RW, default=0x00000000*/

                            /* Bus# limit2: Bus# is defined by Addr[27:20] */

  } Bits;
  UINT32 Data;

} KTILK_TAD_CFG1_KTI_LLPMON_STRUCT;

/* KTILK_TAD_CFG2_KTI_LLPMON_REG supported on:                                  */
/*      SPRA0 (0x21e0915c)                                                      */
/*      SPRB0 (0x21e0915c)                                                      */
/*      SPRHBM (0x21e0915c)                                                     */
/*      SPRC0 (0x21e0915c)                                                      */
/*      SPRMCC (0x21e0915c)                                                     */
/*      SPRUCC (0x21e4815c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_tad_cfg2
*/


#define KTILK_TAD_CFG2_KTI_LLPMON_REG 0x0902015C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 cfg_limit3_bus_num : 8;

                            /* Bits[7:0], Access Type=RW, default=0x00000000*/

                            /* Bus# limit3: Bus# is defined by Addr[27:20] */
    UINT32 cfg_limit4_bus_num : 8;

                            /* Bits[15:8], Access Type=RW, default=0x00000000*/

                            /* Bus# limit4: Bus# is defined by Addr[27:20] */
    UINT32 cfg_limit5_bus_num : 8;

                            /* Bits[23:16], Access Type=RW, default=0x00000000*/

                            /* Bus# limit5: Bus# is defined by Addr[27:20] */
    UINT32 cfg_limit6_bus_num : 8;

                            /* Bits[31:24], Access Type=RW, default=0x00000000*/

                            /* Bus# limit6: Bus# is defined by Addr[27:20] */

  } Bits;
  UINT32 Data;

} KTILK_TAD_CFG2_KTI_LLPMON_STRUCT;

/* KTILK_TAD_CFG3_KTI_LLPMON_REG supported on:                                  */
/*      SPRA0 (0x21e09160)                                                      */
/*      SPRB0 (0x21e09160)                                                      */
/*      SPRHBM (0x21e09160)                                                     */
/*      SPRC0 (0x21e09160)                                                      */
/*      SPRMCC (0x21e09160)                                                     */
/*      SPRUCC (0x21e48160)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_tad_cfg3
*/


#define KTILK_TAD_CFG3_KTI_LLPMON_REG 0x09020160

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 cfg_limit7_bus_num : 8;

                            /* Bits[7:0], Access Type=RW, default=0x00000000*/

                            /* Bus# limit7: Bus# is defined by Addr[27:20] */
    UINT32 cfg_limit8_bus_num : 8;

                            /* Bits[15:8], Access Type=RW, default=0x00000000*/

                            /* Bus# limit8: Bus# is defined by Addr[27:20] */
    UINT32 cfg_limit9_bus_num : 8;

                            /* Bits[23:16], Access Type=RW, default=0x00000000*/

                            /* Bus# limit9: Bus# is defined by Addr[27:20] */
    UINT32 cfg_limit10_bus_num : 8;

                            /* Bits[31:24], Access Type=RW, default=0x00000000*/

                            /* Bus# limit10: Bus# is defined by Addr[27:20] */

  } Bits;
  UINT32 Data;

} KTILK_TAD_CFG3_KTI_LLPMON_STRUCT;

/* KTILK_TAD_CFG4_KTI_LLPMON_REG supported on:                                  */
/*      SPRA0 (0x21e09164)                                                      */
/*      SPRB0 (0x21e09164)                                                      */
/*      SPRHBM (0x21e09164)                                                     */
/*      SPRC0 (0x21e09164)                                                      */
/*      SPRMCC (0x21e09164)                                                     */
/*      SPRUCC (0x21e48164)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_tad_cfg4
*/


#define KTILK_TAD_CFG4_KTI_LLPMON_REG 0x09020164

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 cfg_limit11_bus_num : 8;

                            /* Bits[7:0], Access Type=RW, default=0x00000000*/

                            /* Bus# limit11: Bus# is defined by Addr[27:20] */
    UINT32 rsvd : 24;

                            /* Bits[31:8], Access Type=RO, default=0x00000000*/

                            /* Bus# limit8: Bus# is defined by Addr[27:20] */

  } Bits;
  UINT32 Data;

} KTILK_TAD_CFG4_KTI_LLPMON_STRUCT;

/* KTILK_TAD_LEG_KTI_LLPMON_REG supported on:                                   */
/*      SPRA0 (0x21e09168)                                                      */
/*      SPRB0 (0x21e09168)                                                      */
/*      SPRHBM (0x21e09168)                                                     */
/*      SPRC0 (0x21e09168)                                                      */
/*      SPRMCC (0x21e09168)                                                     */
/*      SPRUCC (0x21e48168)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_tad_leg
*/


#define KTILK_TAD_LEG_KTI_LLPMON_REG 0x09020168

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 vga_enable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               Enables VGA range to be match (applies to both
                               MMIO space and Legacy_IO space ranges).
                            */
    UINT32 vga_target : 4;

                            /* Bits[4:1], Access Type=RW, default=0x00000000*/

                            /*
                               4-bit value to indicate IIO 0-11. Values 12-15
                               are RSVD encodings
                            */
    UINT32 rsvd : 27;

                            /* Bits[31:5], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTILK_TAD_LEG_KTI_LLPMON_STRUCT;

/* KTILK_TAD_IO0_KTI_LLPMON_REG supported on:                                   */
/*      SPRA0 (0x21e0916c)                                                      */
/*      SPRB0 (0x21e0916c)                                                      */
/*      SPRHBM (0x21e0916c)                                                     */
/*      SPRC0 (0x21e0916c)                                                      */
/*      SPRMCC (0x21e0916c)                                                     */
/*      SPRUCC (0x21e4816c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_tad_io0
*/


#define KTILK_TAD_IO0_KTI_LLPMON_REG 0x0902016C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 legio_target0 : 4;

                            /* Bits[3:0], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 0. 4-bits for each target
                               to indicate IIO0, IIO1, .. IIO5 (only 6
                               encodings are defined).
                            */
    UINT32 legio_target1 : 4;

                            /* Bits[7:4], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 1. 4-bits for each target
                               to indicate IIO0, IIO1, .. IIO5 (only 6
                               encodings are defined).
                            */
    UINT32 legio_target2 : 4;

                            /* Bits[11:8], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 2. 4-bits for each target
                               to indicate IIO0, IIO1, .. IIO5 (only 6
                               encodings are defined).
                            */
    UINT32 legio_target3 : 4;

                            /* Bits[15:12], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 3. 4-bits for each target
                               to indicate IIO0, IIO1, .. IIO5 (only 6
                               encodings are defined).
                            */
    UINT32 legio_target4 : 4;

                            /* Bits[19:16], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 4. 4-bits for each target
                               to indicate IIO0, IIO1, .. IIO5 (only 6
                               encodings are defined).
                            */
    UINT32 legio_target5 : 4;

                            /* Bits[23:20], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 5. 4-bits for each target
                               to indicate IIO0, IIO1, .. IIO5 (only 6
                               encodings are defined).
                            */
    UINT32 rsvd : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTILK_TAD_IO0_KTI_LLPMON_STRUCT;

/* KTILK_TAD_IO1_KTI_LLPMON_REG supported on:                                   */
/*      SPRA0 (0x21e09170)                                                      */
/*      SPRB0 (0x21e09170)                                                      */
/*      SPRHBM (0x21e09170)                                                     */
/*      SPRC0 (0x21e09170)                                                      */
/*      SPRMCC (0x21e09170)                                                     */
/*      SPRUCC (0x21e48170)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_tad_io1
*/


#define KTILK_TAD_IO1_KTI_LLPMON_REG 0x09020170

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 legio_base : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000000*/

                            /* Base Addr(15:10) */
    UINT32 rsvd : 2;

                            /* Bits[7:6], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 legio_limit0 : 6;

                            /* Bits[13:8], Access Type=RW, default=0x00000000*/

                            /* Range 0 Limit Addr(15:10) */
    UINT32 rsvd_14 : 2;

                            /* Bits[15:14], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 legio_limit1 : 6;

                            /* Bits[21:16], Access Type=RW, default=0x00000000*/

                            /* Range 1 Limit Addr(15:10) */
    UINT32 rsvd_22 : 2;

                            /* Bits[23:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 legio_limit2 : 6;

                            /* Bits[29:24], Access Type=RW, default=0x00000000*/

                            /* Range 2 Limit Addr(15:10) */
    UINT32 rsvd_30 : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTILK_TAD_IO1_KTI_LLPMON_STRUCT;

/* KTILK_TAD_IO2_KTI_LLPMON_REG supported on:                                   */
/*      SPRA0 (0x21e09174)                                                      */
/*      SPRB0 (0x21e09174)                                                      */
/*      SPRHBM (0x21e09174)                                                     */
/*      SPRC0 (0x21e09174)                                                      */
/*      SPRMCC (0x21e09174)                                                     */
/*      SPRUCC (0x21e48174)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_tad_io2
*/


#define KTILK_TAD_IO2_KTI_LLPMON_REG 0x09020174

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 legio_limit3 : 6;

                            /* Bits[5:0], Access Type=RW, default=0x00000000*/

                            /* Range 3 Limit Addr(15:10) */
    UINT32 rsvd : 2;

                            /* Bits[7:6], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 legio_limit4 : 6;

                            /* Bits[13:8], Access Type=RW, default=0x00000000*/

                            /* Range 4 Limit Addr(15:10) */
    UINT32 rsvd_14 : 2;

                            /* Bits[15:14], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 legio_limit5 : 6;

                            /* Bits[21:16], Access Type=RW, default=0x00000000*/

                            /* Range 5 Limit Addr(15:10) */
    UINT32 rsvd_22 : 10;

                            /* Bits[31:22], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTILK_TAD_IO2_KTI_LLPMON_STRUCT;

/* KTILK_TAD_IOAPIC0_KTI_LLPMON_REG supported on:                               */
/*      SPRA0 (0x21e09178)                                                      */
/*      SPRB0 (0x21e09178)                                                      */
/*      SPRHBM (0x21e09178)                                                     */
/*      SPRC0 (0x21e09178)                                                      */
/*      SPRMCC (0x21e09178)                                                     */
/*      SPRUCC (0x21e48178)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_tad_ioapic0
*/


#define KTILK_TAD_IOAPIC0_KTI_LLPMON_REG 0x09020178

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ioapic_target0 : 4;

                            /* Bits[3:0], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 0. 4-bits for each target
                               to indicate IIO0, IIO1, .. IIO5 (only 6
                               encodings are defined).
                            */
    UINT32 ioapic_target1 : 4;

                            /* Bits[7:4], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 1. 4-bits for each target
                               to indicate IIO0, IIO1, .. IIO5 (only 6
                               encodings are defined).
                            */
    UINT32 ioapic_target2 : 4;

                            /* Bits[11:8], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 2. 4-bits for each target
                               to indicate IIO0, IIO1, .. IIO5 (only 6
                               encodings are defined).
                            */
    UINT32 ioapic_target3 : 4;

                            /* Bits[15:12], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 3. 4-bits for each target
                               to indicate IIO0, IIO1, .. IIO5 (only 6
                               encodings are defined).
                            */
    UINT32 ioapic_target4 : 4;

                            /* Bits[19:16], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 4. 4-bits for each target
                               to indicate IIO0, IIO1, .. IIO5 (only 6
                               encodings are defined).
                            */
    UINT32 ioapic_target5 : 4;

                            /* Bits[23:20], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 5. 4-bits for each target
                               to indicate IIO0, IIO1, .. IIO5 (only 6
                               encodings are defined).
                            */
    UINT32 rsvd : 8;

                            /* Bits[31:24], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTILK_TAD_IOAPIC0_KTI_LLPMON_STRUCT;

/* KTILK_TAD_IOAPIC1_KTI_LLPMON_REG supported on:                               */
/*      SPRA0 (0x21e0917c)                                                      */
/*      SPRB0 (0x21e0917c)                                                      */
/*      SPRHBM (0x21e0917c)                                                     */
/*      SPRC0 (0x21e0917c)                                                      */
/*      SPRMCC (0x21e0917c)                                                     */
/*      SPRUCC (0x21e4817c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_tad_ioapic1
*/


#define KTILK_TAD_IOAPIC1_KTI_LLPMON_REG 0x0902017C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ioapic_base : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /* IOAPIC Base Addr[19:15] */
    UINT32 rsvd : 3;

                            /* Bits[7:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ioapic_limit0 : 5;

                            /* Bits[12:8], Access Type=RW, default=0x00000000*/

                            /* IIO Range 0 Limit Addr[19:15] */
    UINT32 rsvd_13 : 3;

                            /* Bits[15:13], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ioapic_limit1 : 5;

                            /* Bits[20:16], Access Type=RW, default=0x00000000*/

                            /* IIO Range 1 Limit Addr[19:15] */
    UINT32 rsvd_21 : 3;

                            /* Bits[23:21], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ioapic_limit2 : 5;

                            /* Bits[28:24], Access Type=RW, default=0x00000000*/

                            /* IIO Range 2 Limit Addr[19:15] */
    UINT32 rsvd_29 : 3;

                            /* Bits[31:29], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTILK_TAD_IOAPIC1_KTI_LLPMON_STRUCT;

/* KTILK_TAD_IOAPIC2_KTI_LLPMON_REG supported on:                               */
/*      SPRA0 (0x21e09180)                                                      */
/*      SPRB0 (0x21e09180)                                                      */
/*      SPRHBM (0x21e09180)                                                     */
/*      SPRC0 (0x21e09180)                                                      */
/*      SPRMCC (0x21e09180)                                                     */
/*      SPRUCC (0x21e48180)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_tad_ioapic2
*/


#define KTILK_TAD_IOAPIC2_KTI_LLPMON_REG 0x09020180

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ioapic_limit3 : 5;

                            /* Bits[4:0], Access Type=RW, default=0x00000000*/

                            /* IIO Range 3 Limit Addr[19:15] */
    UINT32 rsvd : 3;

                            /* Bits[7:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ioapic_limit4 : 5;

                            /* Bits[12:8], Access Type=RW, default=0x00000000*/

                            /* IIO Range 4 Limit Addr[19:15] */
    UINT32 rsvd_13 : 3;

                            /* Bits[15:13], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ioapic_limit5 : 5;

                            /* Bits[20:16], Access Type=RW, default=0x00000000*/

                            /* IIO Range 5 Limit Addr[19:15] */
    UINT32 rsvd_21 : 11;

                            /* Bits[31:21], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTILK_TAD_IOAPIC2_KTI_LLPMON_STRUCT;

/* KTILK_SNC_CONFIG_KTI_LLPMON_REG supported on:                                */
/*      SPRA0 (0x21e09184)                                                      */
/*      SPRB0 (0x21e09184)                                                      */
/*      SPRHBM (0x21e09184)                                                     */
/*      SPRC0 (0x21e09184)                                                      */
/*      SPRMCC (0x21e09184)                                                     */
/*      SPRUCC (0x21e48184)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_snc_config
*/


#define KTILK_SNC_CONFIG_KTI_LLPMON_REG 0x09020184

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 full_snc_en : 1;

                            /* Bits[0:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               Enables SNC. Each individual range requires
                               legal address range setting prior to setting the
                               enable bit.
                            */
    UINT32 snc_ind_en : 1;

                            /* Bits[1:1], Access Type=RW/P, default=0x00000000*/

                            /*
                               Enables SNC range matching. For Intel UPI this
                               is just AND'ed with 'Full_SNC_En' to enable the
                               SNC feature. If either this bit or Full_SNC_en
                               is not set then SNC will not be enabled.
                            */
    UINT32 num_snc_clu : 2;

                            /* Bits[3:2], Access Type=RW/P, default=0x00000000*/

                            /*
                               Number SNC Clusters Limits the number of cluster
                               ranges that can be matched. 00 - 1 SNC clusters
                               01 - 2 SNC clusters 11 - 4 SNC clusters 10 -
                               RSVD
                            */
    UINT32 rsvd : 28;

                            /* Bits[31:4], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTILK_SNC_CONFIG_KTI_LLPMON_STRUCT;

/* KTILK_SNC_BASE_1_KTI_LLPMON_REG supported on:                                */
/*      SPRA0 (0x21e09188)                                                      */
/*      SPRB0 (0x21e09188)                                                      */
/*      SPRHBM (0x21e09188)                                                     */
/*      SPRC0 (0x21e09188)                                                      */
/*      SPRMCC (0x21e09188)                                                     */
/*      SPRUCC (0x21e48188)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_snc_base_1
*/


#define KTILK_SNC_BASE_1_KTI_LLPMON_REG 0x09020188

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 starting_addr_0 : 16;

                            /* Bits[15:0], Access Type=RW/P, default=0x00000000*/

                            /* Base Address of SNC decode (PA[45:30]) */
    UINT32 two_lm_mask_45_40 : 6;

                            /* Bits[21:16], Access Type=RW/P, default=0x00000000*/

                            /*
                               Address Hash mask bits [45:40]. 0 - causes
                               corresponding address bit to be included in the
                               hash 1 - causes corresponding address bit to be
                               forced to zero before entering the hash
                               function. In 2LM mode of operation the setting
                               must reflect the NM size (rounded to lower power
                               of 2) to ensure inclusive 2LM behavior.
                            */
    UINT32 hi_two_lm_mask_51_46 : 6;

                            /* Bits[27:22], Access Type=RW/P, default=0x00000000*/

                            /*
                               Address Hash mask bits [51:46]. 0 - causes
                               corresponding address bit to be included in the
                               hash 1 - causes corresponding address bit to be
                               forced to zero before entering the hash
                               function. In 2LM mode of operation the setting
                               must reflect the NM size (rounded to lower power
                               of 2) to ensure inclusive 2LM behavior.
                            */
    UINT32 rsvd : 4;

                            /* Bits[31:28], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTILK_SNC_BASE_1_KTI_LLPMON_STRUCT;

/* KTILK_SNC_BASE_2_KTI_LLPMON_REG supported on:                                */
/*      SPRA0 (0x21e0918c)                                                      */
/*      SPRB0 (0x21e0918c)                                                      */
/*      SPRHBM (0x21e0918c)                                                     */
/*      SPRC0 (0x21e0918c)                                                      */
/*      SPRMCC (0x21e0918c)                                                     */
/*      SPRUCC (0x21e4818c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_snc_base_2
*/


#define KTILK_SNC_BASE_2_KTI_LLPMON_REG 0x0902018C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 starting_addr_1 : 16;

                            /* Bits[15:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               Starting Address of SNC1 range (PA[45:30]). SNC
                               range 0 is considered disabled if the value is
                               less-than-or-equal-to SNC_Base. If SNC range 0
                               is disabled it is not legal to enable ranges 1,
                               2, or 3.
                            */
    UINT32 rsvd : 1;

                            /* Bits[16:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 two_lm_mask_28 : 1;

                            /* Bits[17:17], Access Type=RW/P, default=0x00000000*/

                            /*
                               Address Hash mask bit [28]. 0 - causes
                               corresponding address bit to be included in the
                               hash 1 - causes corresponding address bit to be
                               forced to zero before entering the hash
                               function. In 2LM mode of operation the setting
                               must reflect the NM size (rounded to lower power
                               of 2) to ensure inclusive 2LM behavior.
                            */
    UINT32 two_lm_mask_39_29 : 11;

                            /* Bits[28:18], Access Type=RW/P, default=0x00000000*/

                            /*
                               Address Hash mask bits (39:29]. 0 - causes
                               corresponding address bit to be included in the
                               hash 1 - causes corresponding address bit to be
                               forced to zero before entering the hash
                               function. In 2LM mode of operation the setting
                               must reflect the NM size (rounded to lower power
                               of 2) to ensure inclusive 2LM behavior.
                            */
    UINT32 rsvd_29 : 3;

                            /* Bits[31:29], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTILK_SNC_BASE_2_KTI_LLPMON_STRUCT;

/* KTILK_SNC_BASE_3_KTI_LLPMON_REG supported on:                                */
/*      SPRA0 (0x21e09190)                                                      */
/*      SPRB0 (0x21e09190)                                                      */
/*      SPRHBM (0x21e09190)                                                     */
/*      SPRC0 (0x21e09190)                                                      */
/*      SPRMCC (0x21e09190)                                                     */
/*      SPRUCC (0x21e48190)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_snc_base_3
*/


#define KTILK_SNC_BASE_3_KTI_LLPMON_REG 0x09020190

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 starting_addr_2 : 16;

                            /* Bits[15:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               Starting Address of SNC2 range (PA[45:30]) SNC
                               range 1 is considered disabled if the value is
                               less-than-or-equal-to starting_addr_1. If SNC
                               range 1 is disabled it is not legal to enable
                               range 2 or 3.
                            */
    UINT32 rsvd : 16;

                            /* Bits[31:16], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTILK_SNC_BASE_3_KTI_LLPMON_STRUCT;

/* KTILK_SNC_BASE_4_KTI_LLPMON_REG supported on:                                */
/*      SPRA0 (0x21e09194)                                                      */
/*      SPRB0 (0x21e09194)                                                      */
/*      SPRHBM (0x21e09194)                                                     */
/*      SPRC0 (0x21e09194)                                                      */
/*      SPRMCC (0x21e09194)                                                     */
/*      SPRUCC (0x21e48194)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_snc_base_4
*/


#define KTILK_SNC_BASE_4_KTI_LLPMON_REG 0x09020194

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 starting_addr_3 : 16;

                            /* Bits[15:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               Starting Address of SNC3 range (PA[45:30]). SNC
                               range 2 is considered disabled if this value is
                               less-than-or-equal-to starting_addr_2. If SNC
                               range 2 is disabled it is not legal to enable
                               range 3.
                            */
    UINT32 rsvd : 16;

                            /* Bits[31:16], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTILK_SNC_BASE_4_KTI_LLPMON_STRUCT;

/* KTILK_SNC_BASE_5_KTI_LLPMON_REG supported on:                                */
/*      SPRA0 (0x21e09198)                                                      */
/*      SPRB0 (0x21e09198)                                                      */
/*      SPRHBM (0x21e09198)                                                     */
/*      SPRC0 (0x21e09198)                                                      */
/*      SPRMCC (0x21e09198)                                                     */
/*      SPRUCC (0x21e48198)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_snc_base_5
*/


#define KTILK_SNC_BASE_5_KTI_LLPMON_REG 0x09020198

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 starting_addr_4 : 16;

                            /* Bits[15:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               Limit of SNC3 range (PA[46:30]) (not inclusive
                               of this address, aka less then this value). SNC
                               range 3 is considered disabled if the value is
                               less-than-or-equal-to starting_addr_3.
                            */
    UINT32 rsvd : 16;

                            /* Bits[31:16], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTILK_SNC_BASE_5_KTI_LLPMON_STRUCT;

/* KTILK_TAD_UBOX_KTI_LLPMON_REG supported on:                                  */
/*      SPRA0 (0x21e0919c)                                                      */
/*      SPRB0 (0x21e0919c)                                                      */
/*      SPRHBM (0x21e0919c)                                                     */
/*      SPRC0 (0x21e0919c)                                                      */
/*      SPRMCC (0x21e0919c)                                                     */
/*      SPRUCC (0x21e4819c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_tad_ubox
*/


#define KTILK_TAD_UBOX_KTI_LLPMON_REG 0x0902019C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 6;

                            /* Bits[5:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 ubox_mmiol_limit : 10;

                            /* Bits[15:6], Access Type=RW, default=0x00000000*/

                            /* PA[31:22] */
    UINT32 rsvd_16 : 16;

                            /* Bits[31:16], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTILK_TAD_UBOX_KTI_LLPMON_STRUCT;

/* KTILK_SNC_BASE_UPPER_KTI_LLPMON_REG supported on:                            */
/*      SPRA0 (0x21e09200)                                                      */
/*      SPRB0 (0x21e09200)                                                      */
/*      SPRHBM (0x21e09200)                                                     */
/*      SPRC0 (0x21e09200)                                                      */
/*      SPRMCC (0x21e09200)                                                     */
/*      SPRUCC (0x21e48200)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_snc_base_upper
*/


#define KTILK_SNC_BASE_UPPER_KTI_LLPMON_REG 0x09020200

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 upper_base_1 : 6;

                            /* Bits[5:0], Access Type=RW/P, default=0x00000000*/

                            /* Base Address [51:46] for 1st cluster */
    UINT32 upper_base_2 : 6;

                            /* Bits[11:6], Access Type=RW/P, default=0x00000000*/

                            /* Base Address [51:46] for 2nd cluster */
    UINT32 upper_base_3 : 6;

                            /* Bits[17:12], Access Type=RW/P, default=0x00000000*/

                            /* Base Address [51:46] for 3rd cluster */
    UINT32 upper_base_4 : 6;

                            /* Bits[23:18], Access Type=RW/P, default=0x00000000*/

                            /* Base Address [51:46] for 4th cluster */
    UINT32 upper_base_5 : 6;

                            /* Bits[29:24], Access Type=RW/P, default=0x00000000*/

                            /* Base Address [51:46] for 5th cluster */
    UINT32 rsvd : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTILK_SNC_BASE_UPPER_KTI_LLPMON_STRUCT;

/* KTILK_UNCORE_SNC_CONFIG_KTI_LLPMON_REG supported on:                         */
/*      SPRA0 (0x21e09204)                                                      */
/*      SPRB0 (0x21e09204)                                                      */
/*      SPRHBM (0x21e09204)                                                     */
/*      SPRC0 (0x21e09204)                                                      */
/*      SPRMCC (0x21e09204)                                                     */
/*      SPRUCC (0x21e48204)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_uncore_snc_config
*/


#define KTILK_UNCORE_SNC_CONFIG_KTI_LLPMON_REG 0x09020204

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 num_chas_per_cluster : 7;

                            /* Bits[6:0], Access Type=RW/P, default=0x00000000*/

                            /* Number of CHAs per cluster */
    UINT32 rsvd : 1;

                            /* Bits[7:7], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 base_cha_cluster_1 : 7;

                            /* Bits[14:8], Access Type=RW/P, default=0x00000000*/

                            /* Base CHA of cluster 1 */
    UINT32 rsvd_15 : 1;

                            /* Bits[15:15], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 base_cha_cluster_2 : 7;

                            /* Bits[22:16], Access Type=RW/P, default=0x00000000*/

                            /* Base CHA of cluster 2 */
    UINT32 rsvd_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 base_cha_cluster_3 : 7;

                            /* Bits[30:24], Access Type=RW/P, default=0x00000000*/

                            /* Base CHA of cluster 3 */
    UINT32 rsvd_31 : 1;

                            /* Bits[31:31], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTILK_UNCORE_SNC_CONFIG_KTI_LLPMON_STRUCT;

/* KTILK_TAD_UBOX_MMIOH_BASE_KTI_LLPMON_REG supported on:                       */
/*      SPRA0 (0x21e09208)                                                      */
/*      SPRB0 (0x21e09208)                                                      */
/*      SPRHBM (0x21e09208)                                                     */
/*      SPRC0 (0x21e09208)                                                      */
/*      SPRMCC (0x21e09208)                                                     */
/*      SPRUCC (0x21e48208)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_tad_ubox_mmioh_base
*/


#define KTILK_TAD_UBOX_MMIOH_BASE_KTI_LLPMON_REG 0x09020208

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 ubox_mmioh_base : 30;

                            /* Bits[29:0], Access Type=RW, default=0x00000000*/

                            /* PA[51:22] */
    UINT32 rsvd : 2;

                            /* Bits[31:30], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTILK_TAD_UBOX_MMIOH_BASE_KTI_LLPMON_STRUCT;

/* KTILK_UMA_CLUSTER_CONFIG_KTI_LLPMON_REG supported on:                        */
/*      SPRA0 (0x21e0920c)                                                      */
/*      SPRB0 (0x21e0920c)                                                      */
/*      SPRHBM (0x21e0920c)                                                     */
/*      SPRC0 (0x21e0920c)                                                      */
/*      SPRMCC (0x21e0920c)                                                     */
/*      SPRUCC (0x21e4820c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_uma_cluster_config
*/


#define KTILK_UMA_CLUSTER_CONFIG_KTI_LLPMON_REG 0x0902020C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 uma_clustering_enable : 2;

                            /* Bits[1:0], Access Type=RW/P, default=0x00000000*/

                            /*
                               Enable bit for UMA based clustering mode.
                               Overrides FULL_SNC_ENABLE and SNC_IND_ENABLE if
                               set. Legal values : 2'b00, 2'b11
                            */
    UINT32 defeature_xor : 1;

                            /* Bits[2:2], Access Type=RW/P, default=0x00000000*/

                            /*
                               Enable bit for XOR defeature mode. By default,
                               UMA mode clustering uses
                               Addr[26:25]^Addr[18:17]^Addr[12:11]^Addr[9:8].
                               But when this bit is set to 1, Addr[12:11] are
                               used.
                            */
    UINT32 rsvd : 29;

                            /* Bits[31:3], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTILK_UMA_CLUSTER_CONFIG_KTI_LLPMON_STRUCT;

#if defined(SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST)
/* UCE_STATUS_KTI_LLPMON_REG supported on:                                      */
/*      SPRA0 (0x21e09210)                                                      */
/*      SPRB0 (0x21e09210)                                                      */
/*      SPRHBM (0x21e09210)                                                     */
/*      SPRC0 (0x21e09210)                                                      */
/*      SPRMCC (0x21e09210)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* uce_status
*/


#define UCE_STATUS_KTI_LLPMON_REG 0x09020210

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 keys_rdy : 1;

                            /* Bits[0:0], Access Type=RO/V, default=0x00000000*/

                            /*
                               Can only be set by UCE hardware. When set,
                               indicates AES key generation is complete and UCE
                               is ready for use.
                            */
    UINT32 rsvd : 31;

                            /* Bits[31:1], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} UCE_STATUS_KTI_LLPMON_STRUCT;
#endif /* (SPRA0_HOST) || defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) */

/* KTIPMONDBGCTRL_KTI_LLPMON_REG supported on:                                  */
/*      SPRA0 (0x21e09300)                                                      */
/*      SPRB0 (0x21e09300)                                                      */
/*      SPRHBM (0x21e09300)                                                     */
/*      SPRC0 (0x21e09300)                                                      */
/*      SPRMCC (0x21e09300)                                                     */
/*      SPRUCC (0x21e48300)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktipmondbgctrl
*/


#define KTIPMONDBGCTRL_KTI_LLPMON_REG 0x09020300

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 1;

                            /* Bits[0:0], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 othereventstopen : 1;

                            /* Bits[1:1], Access Type=RW/L, default=0x00000000*/

                            /*
                               When this is set, counter 4's counterenable bit
                               will be set to 0 whenever the partner counter
                               3's event occurs.
                            */
    UINT32 rsvd_2 : 3;

                            /* Bits[4:2], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 othereventstarten : 1;

                            /* Bits[5:5], Access Type=RW/L, default=0x00000000*/

                            /*
                               When this bit is set, counter 4's counterenable
                               bit will be set to 1 whenever the partner
                               counter 3's event occurs.
                            */
    UINT32 rsvd_6 : 1;

                            /* Bits[6:6], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 myeventstarten : 1;

                            /* Bits[7:7], Access Type=RW/L, default=0x00000000*/

                            /*
                               When this is set, counter 4's counterenable bit
                               will automatically be set to 1 whenever the
                               event occurs while clockedincenable=1. Warning:
                               If clockedincenable=0, myeventstarten has no
                               effect.
                            */
    UINT32 rsvd_8 : 1;

                            /* Bits[8:8], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 othereventreseten : 1;

                            /* Bits[9:9], Access Type=RW/L, default=0x00000000*/

                            /*
                               When this bit is set, counter 4 will reset (to
                               the value specified in
                               KTIPMONDBGCNTRESETVAL.resetval) whenever the
                               partner counter 3's event occurs. An example
                               usage is to track how long things have been
                               inactive after an event, by setting
                               othereventreseten=1 and othereventstarten=1 and
                               clockedincenable=1, and programming counter 3 to
                               trigger on the desired activity. On the counter
                               3 event trigger, counter 4 will reset to 0 and
                               counter 4's counterenable will go to 1 and will
                               continue counting until the next time counter 3
                               event occurs. A variation on this is to set
                               myeventstarten=1 (and othereventstarten=0) with
                               all other settings the same as above, which will
                               cause counter 4 to start counting immediately
                               when myeventstarten=1 (unlike the first example
                               which only starts counting when counter 3 hits
                               the event at least once), but still reset on
                               counter 3's event just like the first example.
                            */
    UINT32 rsvd_10 : 1;

                            /* Bits[10:10], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 myeventreseten : 1;

                            /* Bits[11:11], Access Type=RW/L, default=0x00000000*/

                            /*
                               When this is enabled, counter 4 will reset (to
                               the value specified in
                               KTIPMONDBGCNTRESETVAL.resetval) whenever the
                               counter's event is triggered while the counter
                               is enabled. If the counter is not enabled, the
                               reset will not occur. An example usage is to
                               track how long things have been inactive after
                               an event, by setting myeventreseten=1 and
                               myeventstarten=1 and clockedincenable=1, and
                               programming counter 4 to trigger on the desired
                               activity. On the counter 4 event trigger,
                               counter 4 will reset to 0 and counter 4's
                               counterenable will go to 1 and will continue
                               counting until the next time counter 4 event
                               occurs.
                            */
    UINT32 rsvd_12 : 1;

                            /* Bits[12:12], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 clockedincenable : 1;

                            /* Bits[13:13], Access Type=RW/L, default=0x00000000*/

                            /*
                               Changes when counter 4 increments. Rather than
                               incrementing based on the event, the counter
                               will increment by 1 in each cycle. Note: this is
                               redundant with the dedicated event that count
                               clocks.
                            */
    UINT32 rsvd_14 : 18;

                            /* Bits[31:14], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTIPMONDBGCTRL_KTI_LLPMON_STRUCT;

/* KTIPMONDBGCNTRESETVAL_N0_KTI_LLPMON_REG supported on:                        */
/*      SPRA0 (0x21e09308)                                                      */
/*      SPRB0 (0x21e09308)                                                      */
/*      SPRHBM (0x21e09308)                                                     */
/*      SPRC0 (0x21e09308)                                                      */
/*      SPRMCC (0x21e09308)                                                     */
/*      SPRUCC (0x21e48308)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktipmondbgcntresetval
*/


#define KTIPMONDBGCNTRESETVAL_N0_KTI_LLPMON_REG 0x09020308

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 resetval : 32;

                            /* Bits[31:0], Access Type=RW/L, default=0x00000000*/

                            /*
                               The value to reset counter 4 to (on a
                               myeventreseten or othereventreseten enabled
                               event).
                            */

  } Bits;
  UINT32 Data;

} KTIPMONDBGCNTRESETVAL_N0_KTI_LLPMON_STRUCT;

/* KTIPMONDBGCNTRESETVAL_N1_KTI_LLPMON_REG supported on:                        */
/*      SPRA0 (0x21e0930c)                                                      */
/*      SPRB0 (0x21e0930c)                                                      */
/*      SPRHBM (0x21e0930c)                                                     */
/*      SPRC0 (0x21e0930c)                                                      */
/*      SPRMCC (0x21e0930c)                                                     */
/*      SPRUCC (0x21e4830c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktipmondbgcntresetval
*/


#define KTIPMONDBGCNTRESETVAL_N1_KTI_LLPMON_REG 0x0902030C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 resetval : 16;

                            /* Bits[15:0], Access Type=RW/L, default=0x00000000*/

                            /*
                               The value to reset counter 4 to (on a
                               myeventreseten or othereventreseten enabled
                               event).
                            */
    UINT32 rsvd : 16;

                            /* Bits[31:16], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTIPMONDBGCNTRESETVAL_N1_KTI_LLPMON_STRUCT;

/* KTIPMONDBGMBPSEL_KTI_LLPMON_REG supported on:                                */
/*      SPRA0 (0x21e09310)                                                      */
/*      SPRB0 (0x21e09310)                                                      */
/*      SPRHBM (0x21e09310)                                                     */
/*      SPRC0 (0x21e09310)                                                      */
/*      SPRMCC (0x21e09310)                                                     */
/*      SPRUCC (0x21e48310)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktipmondbgmbpsel
*/


#define KTIPMONDBGMBPSEL_KTI_LLPMON_REG 0x09020310

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 sel : 3;

                            /* Bits[2:0], Access Type=RW/L, default=0x00000000*/

                            /*
                               Selects the counter overflow that should be
                               routed to the microbreakpoint (uBP) in the
                               miniTAP. 0 - Counter 0 Overflow 1 - Counter 1
                               Overflow 2 - Counter 2 Overflow 3 - Counter 3
                               Overflow 4 - Counter 4 Overflow 5 - reserved 6 -
                               reserved 7 - Any of the 5 Counter Overflow
                               detects went high (ie. rising edge)
                            */
    UINT32 rsvd : 29;

                            /* Bits[31:3], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTIPMONDBGMBPSEL_KTI_LLPMON_STRUCT;

/* KTIPMONUNITCTRL_KTI_LLPMON_REG supported on:                                 */
/*      SPRA0 (0x21e09318)                                                      */
/*      SPRB0 (0x21e09318)                                                      */
/*      SPRHBM (0x21e09318)                                                     */
/*      SPRC0 (0x21e09318)                                                      */
/*      SPRMCC (0x21e09318)                                                     */
/*      SPRUCC (0x21e48318)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktipmonunitctrl
*/


#define KTIPMONUNITCTRL_KTI_LLPMON_REG 0x09020318

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 freezecounters : 1;

                            /* Bits[0:0], Access Type=RW/V, default=0x00000000*/

                            /*
                               This bit is written to when the counters should
                               be frozen. If this bit is written to and freeze
                               is enabled, the counters in the unit will stop
                               counting.
                            */
    UINT32 rsvd : 7;

                            /* Bits[7:1], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 resetcounterconfigs : 1;

                            /* Bits[8:8], Access Type=WO, default=0x00000000*/

                            /*
                               When this bit is written to, the counter
                               configuration registers will be reset. This does
                               not effect the values in the counters.
                            */
    UINT32 resetcounters : 1;

                            /* Bits[9:9], Access Type=WO, default=0x00000000*/

                            /*
                               When this bit is written to, the counters data
                               fields will be reset. The configuration values
                               will not be reset. Note: The counters should be
                               frozen (KTIPMONUNITCTRL.freezecounters=1) before
                               writing resetcounters=1.
                            */
    UINT32 rsvd_10 : 22;

                            /* Bits[31:10], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTIPMONUNITCTRL_KTI_LLPMON_STRUCT;

/* KTIPMONCNTR_0_N0_KTI_LLPMON_REG supported on:                                */
/*      SPRA0 (0x21e09320)                                                      */
/*      SPRB0 (0x21e09320)                                                      */
/*      SPRHBM (0x21e09320)                                                     */
/*      SPRC0 (0x21e09320)                                                      */
/*      SPRMCC (0x21e09320)                                                     */
/*      SPRUCC (0x21e48320)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktipmoncntr_0
*/


#define KTIPMONCNTR_0_N0_KTI_LLPMON_REG 0x09020320

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 countervalue : 32;

                            /* Bits[31:0], Access Type=RW/V, default=0x00000000*/

                            /* This is the current value of the counter. */

  } Bits;
  UINT32 Data;

} KTIPMONCNTR_0_N0_KTI_LLPMON_STRUCT;

/* KTIPMONCNTR_0_N1_KTI_LLPMON_REG supported on:                                */
/*      SPRA0 (0x21e09324)                                                      */
/*      SPRB0 (0x21e09324)                                                      */
/*      SPRHBM (0x21e09324)                                                     */
/*      SPRC0 (0x21e09324)                                                      */
/*      SPRMCC (0x21e09324)                                                     */
/*      SPRUCC (0x21e48324)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktipmoncntr_0
*/


#define KTIPMONCNTR_0_N1_KTI_LLPMON_REG 0x09020324

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 countervalue : 16;

                            /* Bits[15:0], Access Type=RW/V, default=0x00000000*/

                            /* This is the current value of the counter. */
    UINT32 rsvd : 16;

                            /* Bits[31:16], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTIPMONCNTR_0_N1_KTI_LLPMON_STRUCT;

/* KTIPMONCNTR_1_N0_KTI_LLPMON_REG supported on:                                */
/*      SPRA0 (0x21e09328)                                                      */
/*      SPRB0 (0x21e09328)                                                      */
/*      SPRHBM (0x21e09328)                                                     */
/*      SPRC0 (0x21e09328)                                                      */
/*      SPRMCC (0x21e09328)                                                     */
/*      SPRUCC (0x21e48328)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktipmoncntr_1
*/


#define KTIPMONCNTR_1_N0_KTI_LLPMON_REG 0x09020328

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 countervalue : 32;

                            /* Bits[31:0], Access Type=RW/V, default=0x00000000*/

                            /* This is the current value of the counter. */

  } Bits;
  UINT32 Data;

} KTIPMONCNTR_1_N0_KTI_LLPMON_STRUCT;

/* KTIPMONCNTR_1_N1_KTI_LLPMON_REG supported on:                                */
/*      SPRA0 (0x21e0932c)                                                      */
/*      SPRB0 (0x21e0932c)                                                      */
/*      SPRHBM (0x21e0932c)                                                     */
/*      SPRC0 (0x21e0932c)                                                      */
/*      SPRMCC (0x21e0932c)                                                     */
/*      SPRUCC (0x21e4832c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktipmoncntr_1
*/


#define KTIPMONCNTR_1_N1_KTI_LLPMON_REG 0x0902032C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 countervalue : 16;

                            /* Bits[15:0], Access Type=RW/V, default=0x00000000*/

                            /* This is the current value of the counter. */
    UINT32 rsvd : 16;

                            /* Bits[31:16], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTIPMONCNTR_1_N1_KTI_LLPMON_STRUCT;

/* KTIPMONCNTR_2_N0_KTI_LLPMON_REG supported on:                                */
/*      SPRA0 (0x21e09330)                                                      */
/*      SPRB0 (0x21e09330)                                                      */
/*      SPRHBM (0x21e09330)                                                     */
/*      SPRC0 (0x21e09330)                                                      */
/*      SPRMCC (0x21e09330)                                                     */
/*      SPRUCC (0x21e48330)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktipmoncntr_2
*/


#define KTIPMONCNTR_2_N0_KTI_LLPMON_REG 0x09020330

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 countervalue : 32;

                            /* Bits[31:0], Access Type=RW/V, default=0x00000000*/

                            /* This is the current value of the counter. */

  } Bits;
  UINT32 Data;

} KTIPMONCNTR_2_N0_KTI_LLPMON_STRUCT;

/* KTIPMONCNTR_2_N1_KTI_LLPMON_REG supported on:                                */
/*      SPRA0 (0x21e09334)                                                      */
/*      SPRB0 (0x21e09334)                                                      */
/*      SPRHBM (0x21e09334)                                                     */
/*      SPRC0 (0x21e09334)                                                      */
/*      SPRMCC (0x21e09334)                                                     */
/*      SPRUCC (0x21e48334)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktipmoncntr_2
*/


#define KTIPMONCNTR_2_N1_KTI_LLPMON_REG 0x09020334

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 countervalue : 16;

                            /* Bits[15:0], Access Type=RW/V, default=0x00000000*/

                            /* This is the current value of the counter. */
    UINT32 rsvd : 16;

                            /* Bits[31:16], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTIPMONCNTR_2_N1_KTI_LLPMON_STRUCT;

/* KTIPMONCNTR_3_N0_KTI_LLPMON_REG supported on:                                */
/*      SPRA0 (0x21e09338)                                                      */
/*      SPRB0 (0x21e09338)                                                      */
/*      SPRHBM (0x21e09338)                                                     */
/*      SPRC0 (0x21e09338)                                                      */
/*      SPRMCC (0x21e09338)                                                     */
/*      SPRUCC (0x21e48338)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktipmoncntr_3
*/


#define KTIPMONCNTR_3_N0_KTI_LLPMON_REG 0x09020338

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 countervalue : 32;

                            /* Bits[31:0], Access Type=RW/V, default=0x00000000*/

                            /* This is the current value of the counter. */

  } Bits;
  UINT32 Data;

} KTIPMONCNTR_3_N0_KTI_LLPMON_STRUCT;

/* KTIPMONCNTR_3_N1_KTI_LLPMON_REG supported on:                                */
/*      SPRA0 (0x21e0933c)                                                      */
/*      SPRB0 (0x21e0933c)                                                      */
/*      SPRHBM (0x21e0933c)                                                     */
/*      SPRC0 (0x21e0933c)                                                      */
/*      SPRMCC (0x21e0933c)                                                     */
/*      SPRUCC (0x21e4833c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktipmoncntr_3
*/


#define KTIPMONCNTR_3_N1_KTI_LLPMON_REG 0x0902033C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 countervalue : 16;

                            /* Bits[15:0], Access Type=RW/V, default=0x00000000*/

                            /* This is the current value of the counter. */
    UINT32 rsvd : 16;

                            /* Bits[31:16], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTIPMONCNTR_3_N1_KTI_LLPMON_STRUCT;

/* KTIPMONCNTR_4_N0_KTI_LLPMON_REG supported on:                                */
/*      SPRA0 (0x21e09340)                                                      */
/*      SPRB0 (0x21e09340)                                                      */
/*      SPRHBM (0x21e09340)                                                     */
/*      SPRC0 (0x21e09340)                                                      */
/*      SPRMCC (0x21e09340)                                                     */
/*      SPRUCC (0x21e48340)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktipmoncntr_4
*/


#define KTIPMONCNTR_4_N0_KTI_LLPMON_REG 0x09020340

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 countervalue : 32;

                            /* Bits[31:0], Access Type=RW/V, default=0x00000000*/

                            /* This is the current value of the counter. */

  } Bits;
  UINT32 Data;

} KTIPMONCNTR_4_N0_KTI_LLPMON_STRUCT;

/* KTIPMONCNTR_4_N1_KTI_LLPMON_REG supported on:                                */
/*      SPRA0 (0x21e09344)                                                      */
/*      SPRB0 (0x21e09344)                                                      */
/*      SPRHBM (0x21e09344)                                                     */
/*      SPRC0 (0x21e09344)                                                      */
/*      SPRMCC (0x21e09344)                                                     */
/*      SPRUCC (0x21e48344)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktipmoncntr_4
*/


#define KTIPMONCNTR_4_N1_KTI_LLPMON_REG 0x09020344

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 countervalue : 16;

                            /* Bits[15:0], Access Type=RW/V, default=0x00000000*/

                            /* This is the current value of the counter. */
    UINT32 rsvd : 16;

                            /* Bits[31:16], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTIPMONCNTR_4_N1_KTI_LLPMON_STRUCT;

/* KTIPMONCNTRCFG_0_N0_KTI_LLPMON_REG supported on:                             */
/*      SPRA0 (0x21e09350)                                                      */
/*      SPRB0 (0x21e09350)                                                      */
/*      SPRHBM (0x21e09350)                                                     */
/*      SPRC0 (0x21e09350)                                                      */
/*      SPRMCC (0x21e09350)                                                     */
/*      SPRUCC (0x21e48350)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktipmoncntrcfg_0
*/


#define KTIPMONCNTRCFG_0_N0_KTI_LLPMON_REG 0x09020350

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 eventselect : 8;

                            /* Bits[7:0], Access Type=RW/V, default=0x00000000*/

                            /*
                               This field is used to decode the PerfMon event
                               which is selected.
                            */
    UINT32 unitmask : 8;

                            /* Bits[15:8], Access Type=RW/V, default=0x00000000*/

                            /*
                               This mask selects the sub-events to be selected
                               for creation of the event (for applicable
                               events). See Pmon events for details.
                            */
    UINT32 rsvd_16 : 1;

                            /* Bits[16:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 counterreset : 1;

                            /* Bits[17:17], Access Type=RW/1S/V, default=0x00000000*/

                            /*
                               When this bit is set, the corresponding counter
                               will be reset to 0. This allows for a quick
                               reset of the counter when changing event
                               encodings.
                            */
    UINT32 edgedetect : 1;

                            /* Bits[18:18], Access Type=RW/V, default=0x00000000*/

                            /*
                               Edge Detect allows counting either 0 to 1 (if
                               invert=0) or 1 to 0 (if invert=1) transitions of
                               a given event. For example, there is an event
                               that counts the number of cycles in L1 power
                               state in Intel UPI. By using edge detect, one
                               can count the number of times that we entered L1
                               state (by detecting the rising edge by setting
                               invert=0). Edge detect only works in conjunction
                               with threshholding. This is true even for events
                               that can only increment by 1 in a given cycle
                               (like the L1 example above). In this case, one
                               should set a threshold of 1 (with invert=0). One
                               can also use Edge Detect with queue occupancy
                               events. For example, if one wanted to count the
                               number of times when the TXQ occupancy was
                               greater than or equal to 5, one would select the
                               TXQ occupancy event with a threshold of 5 and
                               set the Edge Detect bit (and invert=0).
                            */
    UINT32 rsvd_19 : 1;

                            /* Bits[19:19], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 frz_on_ov : 1;

                            /* Bits[20:20], Access Type=RW/V, default=0x00000000*/

                            /*
                               This bit will be sent in the GPSB message on a
                               pmon overflow to indicate whether or not to
                               freeze when an overflow occurs.
                            */
    UINT32 rsvd : 1;

                            /* Bits[21:21], Access Type=RW/V, default=0x00000000*/

                            /*
                               Bit was defined as Internal control bit, but
                               this function is dropped in SKX, and bit is now
                               Reserved.
                            */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 invert : 1;

                            /* Bits[23:23], Access Type=RW/V, default=0x00000000*/

                            /*
                               This bit indicates how the threshold field will
                               be compared to the incoming event. When 0, the
                               comparison that will be done is threshold
                               greater than or equal to event. When set to 1,
                               the comparison that will be done is inverted
                               from the case where this bit is set to 0, i.e.,
                               threshold less than event. The invert bit only
                               works when Threshold != 0. So, if one would like
                               to invert a non-occupancy event, one needs to
                               set the threshold to 1.
                            */
    UINT32 thresh : 8;

                            /* Bits[31:24], Access Type=RW/V, default=0x00000000*/

                            /*
                               This field is compared directly against an
                               incoming event value for events that can
                               increment by 1 or more in a given cycle. The
                               result of the comparison is effectively a 1 bit
                               wide event, i.e., the counter will be
                               incremented by 1 when the comparison is true
                               (the type of comparison depends on the setting
                               of the invert bit - see bit 23) no matter how
                               wide the original event was. When this field is
                               zero, threshold comparison is disabled and the
                               event is passed without modification.
                            */

  } Bits;
  UINT32 Data;

} KTIPMONCNTRCFG_0_N0_KTI_LLPMON_STRUCT;

/* KTIPMONCNTRCFG_0_N1_KTI_LLPMON_REG supported on:                             */
/*      SPRA0 (0x21e09354)                                                      */
/*      SPRB0 (0x21e09354)                                                      */
/*      SPRHBM (0x21e09354)                                                     */
/*      SPRC0 (0x21e09354)                                                      */
/*      SPRMCC (0x21e09354)                                                     */
/*      SPRUCC (0x21e48354)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktipmoncntrcfg_0
*/


#define KTIPMONCNTRCFG_0_N1_KTI_LLPMON_REG 0x09020354

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 32;

                            /* Bits[31:0], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTIPMONCNTRCFG_0_N1_KTI_LLPMON_STRUCT;

/* KTIPMONCNTRCFG_1_N0_KTI_LLPMON_REG supported on:                             */
/*      SPRA0 (0x21e09358)                                                      */
/*      SPRB0 (0x21e09358)                                                      */
/*      SPRHBM (0x21e09358)                                                     */
/*      SPRC0 (0x21e09358)                                                      */
/*      SPRMCC (0x21e09358)                                                     */
/*      SPRUCC (0x21e48358)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktipmoncntrcfg_1
*/


#define KTIPMONCNTRCFG_1_N0_KTI_LLPMON_REG 0x09020358

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 eventselect : 8;

                            /* Bits[7:0], Access Type=RW/V, default=0x00000000*/

                            /*
                               This field is used to decode the PerfMon event
                               which is selected.
                            */
    UINT32 unitmask : 8;

                            /* Bits[15:8], Access Type=RW/V, default=0x00000000*/

                            /*
                               This mask selects the sub-events to be selected
                               for creation of the event (for applicable
                               events). See Pmon events for details.
                            */
    UINT32 rsvd_16 : 1;

                            /* Bits[16:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 counterreset : 1;

                            /* Bits[17:17], Access Type=RW/1S/V, default=0x00000000*/

                            /*
                               When this bit is set, the corresponding counter
                               will be reset to 0. This allows for a quick
                               reset of the counter when changing event
                               encodings.
                            */
    UINT32 edgedetect : 1;

                            /* Bits[18:18], Access Type=RW/V, default=0x00000000*/

                            /*
                               Edge Detect allows counting either 0 to 1 (if
                               invert=0) or 1 to 0 (if invert=1) transitions of
                               a given event. For example, there is an event
                               that counts the number of cycles in L1 power
                               state in Intel UPI. By using edge detect, one
                               can count the number of times that we entered L1
                               state (by detecting the rising edge by setting
                               invert=0). Edge detect only works in conjunction
                               with threshholding. This is true even for events
                               that can only increment by 1 in a given cycle
                               (like the L1 example above). In this case, one
                               should set a threshold of 1 (with invert=0). One
                               can also use Edge Detect with queue occupancy
                               events. For example, if one wanted to count the
                               number of times when the TXQ occupancy was
                               greater than or equal to 5, one would select the
                               TXQ occupancy event with a threshold of 5 and
                               set the Edge Detect bit (and invert=0).
                            */
    UINT32 rsvd_19 : 1;

                            /* Bits[19:19], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 frz_on_ov : 1;

                            /* Bits[20:20], Access Type=RW/V, default=0x00000000*/

                            /*
                               This bit will be sent in the GPSB message on a
                               pmon overflow to indicate whether or not to
                               freeze when an overflow occurs.
                            */
    UINT32 rsvd : 1;

                            /* Bits[21:21], Access Type=RW/V, default=0x00000000*/

                            /*
                               Bit was defined as Internal control bit, but
                               this function is dropped in SKX, and bit is now
                               Reserved.
                            */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 invert : 1;

                            /* Bits[23:23], Access Type=RW/V, default=0x00000000*/

                            /*
                               This bit indicates how the threshold field will
                               be compared to the incoming event. When 0, the
                               comparison that will be done is threshold
                               greater than or equal to event. When set to 1,
                               the comparison that will be done is inverted
                               from the case where this bit is set to 0, i.e.,
                               threshold less than event. The invert bit only
                               works when Threshold != 0. So, if one would like
                               to invert a non-occupancy event, one needs to
                               set the threshold to 1.
                            */
    UINT32 thresh : 8;

                            /* Bits[31:24], Access Type=RW/V, default=0x00000000*/

                            /*
                               This field is compared directly against an
                               incoming event value for events that can
                               increment by 1 or more in a given cycle. The
                               result of the comparison is effectively a 1 bit
                               wide event, i.e., the counter will be
                               incremented by 1 when the comparison is true
                               (the type of comparison depends on the setting
                               of the invert bit - see bit 23) no matter how
                               wide the original event was. When this field is
                               zero, threshold comparison is disabled and the
                               event is passed without modification.
                            */

  } Bits;
  UINT32 Data;

} KTIPMONCNTRCFG_1_N0_KTI_LLPMON_STRUCT;

/* KTIPMONCNTRCFG_1_N1_KTI_LLPMON_REG supported on:                             */
/*      SPRA0 (0x21e0935c)                                                      */
/*      SPRB0 (0x21e0935c)                                                      */
/*      SPRHBM (0x21e0935c)                                                     */
/*      SPRC0 (0x21e0935c)                                                      */
/*      SPRMCC (0x21e0935c)                                                     */
/*      SPRUCC (0x21e4835c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktipmoncntrcfg_1
*/


#define KTIPMONCNTRCFG_1_N1_KTI_LLPMON_REG 0x0902035C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 32;

                            /* Bits[31:0], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTIPMONCNTRCFG_1_N1_KTI_LLPMON_STRUCT;

/* KTIPMONCNTRCFG_2_N0_KTI_LLPMON_REG supported on:                             */
/*      SPRA0 (0x21e09360)                                                      */
/*      SPRB0 (0x21e09360)                                                      */
/*      SPRHBM (0x21e09360)                                                     */
/*      SPRC0 (0x21e09360)                                                      */
/*      SPRMCC (0x21e09360)                                                     */
/*      SPRUCC (0x21e48360)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktipmoncntrcfg_2
*/


#define KTIPMONCNTRCFG_2_N0_KTI_LLPMON_REG 0x09020360

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 eventselect : 8;

                            /* Bits[7:0], Access Type=RW/V, default=0x00000000*/

                            /*
                               This field is used to decode the PerfMon event
                               which is selected.
                            */
    UINT32 unitmask : 8;

                            /* Bits[15:8], Access Type=RW/V, default=0x00000000*/

                            /*
                               This mask selects the sub-events to be selected
                               for creation of the event (for applicable
                               events). See Pmon events for details.
                            */
    UINT32 rsvd_16 : 1;

                            /* Bits[16:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 counterreset : 1;

                            /* Bits[17:17], Access Type=RW/1S/V, default=0x00000000*/

                            /*
                               When this bit is set, the corresponding counter
                               will be reset to 0. This allows for a quick
                               reset of the counter when changing event
                               encodings.
                            */
    UINT32 edgedetect : 1;

                            /* Bits[18:18], Access Type=RW/V, default=0x00000000*/

                            /*
                               Edge Detect allows counting either 0 to 1 (if
                               invert=0) or 1 to 0 (if invert=1) transitions of
                               a given event. For example, there is an event
                               that counts the number of cycles in L1 power
                               state in Intel UPI. By using edge detect, one
                               can count the number of times that we entered L1
                               state (by detecting the rising edge by setting
                               invert=0). Edge detect only works in conjunction
                               with threshholding. This is true even for events
                               that can only increment by 1 in a given cycle
                               (like the L1 example above). In this case, one
                               should set a threshold of 1 (with invert=0). One
                               can also use Edge Detect with queue occupancy
                               events. For example, if one wanted to count the
                               number of times when the TXQ occupancy was
                               greater than or equal to 5, one would select the
                               TXQ occupancy event with a threshold of 5 and
                               set the Edge Detect bit (and invert=0).
                            */
    UINT32 rsvd_19 : 1;

                            /* Bits[19:19], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 frz_on_ov : 1;

                            /* Bits[20:20], Access Type=RW/V, default=0x00000000*/

                            /*
                               This bit will be sent in the GPSB message on a
                               pmon overflow to indicate whether or not to
                               freeze when an overflow occurs.
                            */
    UINT32 rsvd : 1;

                            /* Bits[21:21], Access Type=RW/V, default=0x00000000*/

                            /*
                               Bit was defined as Internal control bit, but
                               this function is dropped in SKX, and bit is now
                               Reserved.
                            */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 invert : 1;

                            /* Bits[23:23], Access Type=RW/V, default=0x00000000*/

                            /*
                               This bit indicates how the threshold field will
                               be compared to the incoming event. When 0, the
                               comparison that will be done is threshold
                               greater than or equal to event. When set to 1,
                               the comparison that will be done is inverted
                               from the case where this bit is set to 0, i.e.,
                               threshold less than event. The invert bit only
                               works when Threshold != 0. So, if one would like
                               to invert a non-occupancy event, one needs to
                               set the threshold to 1.
                            */
    UINT32 thresh : 8;

                            /* Bits[31:24], Access Type=RW/V, default=0x00000000*/

                            /*
                               This field is compared directly against an
                               incoming event value for events that can
                               increment by 1 or more in a given cycle. The
                               result of the comparison is effectively a 1 bit
                               wide event, i.e., the counter will be
                               incremented by 1 when the comparison is true
                               (the type of comparison depends on the setting
                               of the invert bit - see bit 23) no matter how
                               wide the original event was. When this field is
                               zero, threshold comparison is disabled and the
                               event is passed without modification.
                            */

  } Bits;
  UINT32 Data;

} KTIPMONCNTRCFG_2_N0_KTI_LLPMON_STRUCT;

/* KTIPMONCNTRCFG_2_N1_KTI_LLPMON_REG supported on:                             */
/*      SPRA0 (0x21e09364)                                                      */
/*      SPRB0 (0x21e09364)                                                      */
/*      SPRHBM (0x21e09364)                                                     */
/*      SPRC0 (0x21e09364)                                                      */
/*      SPRMCC (0x21e09364)                                                     */
/*      SPRUCC (0x21e48364)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktipmoncntrcfg_2
*/


#define KTIPMONCNTRCFG_2_N1_KTI_LLPMON_REG 0x09020364

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 32;

                            /* Bits[31:0], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTIPMONCNTRCFG_2_N1_KTI_LLPMON_STRUCT;

/* KTIPMONCNTRCFG_3_N0_KTI_LLPMON_REG supported on:                             */
/*      SPRA0 (0x21e09368)                                                      */
/*      SPRB0 (0x21e09368)                                                      */
/*      SPRHBM (0x21e09368)                                                     */
/*      SPRC0 (0x21e09368)                                                      */
/*      SPRMCC (0x21e09368)                                                     */
/*      SPRUCC (0x21e48368)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktipmoncntrcfg_3
*/


#define KTIPMONCNTRCFG_3_N0_KTI_LLPMON_REG 0x09020368

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 eventselect : 8;

                            /* Bits[7:0], Access Type=RW/V, default=0x00000000*/

                            /*
                               This field is used to decode the PerfMon event
                               which is selected.
                            */
    UINT32 unitmask : 8;

                            /* Bits[15:8], Access Type=RW/V, default=0x00000000*/

                            /*
                               This mask selects the sub-events to be selected
                               for creation of the event (for applicable
                               events). See Pmon events for details.
                            */
    UINT32 rsvd_16 : 1;

                            /* Bits[16:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 counterreset : 1;

                            /* Bits[17:17], Access Type=RW/1S/V, default=0x00000000*/

                            /*
                               When this bit is set, the corresponding counter
                               will be reset to 0. This allows for a quick
                               reset of the counter when changing event
                               encodings.
                            */
    UINT32 edgedetect : 1;

                            /* Bits[18:18], Access Type=RW/V, default=0x00000000*/

                            /*
                               Edge Detect allows counting either 0 to 1 (if
                               invert=0) or 1 to 0 (if invert=1) transitions of
                               a given event. For example, there is an event
                               that counts the number of cycles in L1 power
                               state in Intel UPI. By using edge detect, one
                               can count the number of times that we entered L1
                               state (by detecting the rising edge by setting
                               invert=0). Edge detect only works in conjunction
                               with threshholding. This is true even for events
                               that can only increment by 1 in a given cycle
                               (like the L1 example above). In this case, one
                               should set a threshold of 1 (with invert=0). One
                               can also use Edge Detect with queue occupancy
                               events. For example, if one wanted to count the
                               number of times when the TXQ occupancy was
                               greater than or equal to 5, one would select the
                               TXQ occupancy event with a threshold of 5 and
                               set the Edge Detect bit (and invert=0).
                            */
    UINT32 rsvd_19 : 1;

                            /* Bits[19:19], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 frz_on_ov : 1;

                            /* Bits[20:20], Access Type=RW/V, default=0x00000000*/

                            /*
                               This bit will be sent in the GPSB message on a
                               pmon overflow to indicate whether or not to
                               freeze when an overflow occurs.
                            */
    UINT32 rsvd : 1;

                            /* Bits[21:21], Access Type=RW/V, default=0x00000000*/

                            /*
                               Bit was defined as Internal control bit, but
                               this function is dropped in SKX, and bit is now
                               Reserved.
                            */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 invert : 1;

                            /* Bits[23:23], Access Type=RW/V, default=0x00000000*/

                            /*
                               This bit indicates how the threshold field will
                               be compared to the incoming event. When 0, the
                               comparison that will be done is threshold
                               greater than or equal to event. When set to 1,
                               the comparison that will be done is inverted
                               from the case where this bit is set to 0, i.e.,
                               threshold less than event. The invert bit only
                               works when Threshold != 0. So, if one would like
                               to invert a non-occupancy event, one needs to
                               set the threshold to 1.
                            */
    UINT32 thresh : 8;

                            /* Bits[31:24], Access Type=RW/V, default=0x00000000*/

                            /*
                               This field is compared directly against an
                               incoming event value for events that can
                               increment by 1 or more in a given cycle. The
                               result of the comparison is effectively a 1 bit
                               wide event, i.e., the counter will be
                               incremented by 1 when the comparison is true
                               (the type of comparison depends on the setting
                               of the invert bit - see bit 23) no matter how
                               wide the original event was. When this field is
                               zero, threshold comparison is disabled and the
                               event is passed without modification.
                            */

  } Bits;
  UINT32 Data;

} KTIPMONCNTRCFG_3_N0_KTI_LLPMON_STRUCT;

/* KTIPMONCNTRCFG_3_N1_KTI_LLPMON_REG supported on:                             */
/*      SPRA0 (0x21e0936c)                                                      */
/*      SPRB0 (0x21e0936c)                                                      */
/*      SPRHBM (0x21e0936c)                                                     */
/*      SPRC0 (0x21e0936c)                                                      */
/*      SPRMCC (0x21e0936c)                                                     */
/*      SPRUCC (0x21e4836c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktipmoncntrcfg_3
*/


#define KTIPMONCNTRCFG_3_N1_KTI_LLPMON_REG 0x0902036C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 32;

                            /* Bits[31:0], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTIPMONCNTRCFG_3_N1_KTI_LLPMON_STRUCT;

/* KTIPMONCNTRCFG_4_N0_KTI_LLPMON_REG supported on:                             */
/*      SPRA0 (0x21e09370)                                                      */
/*      SPRB0 (0x21e09370)                                                      */
/*      SPRHBM (0x21e09370)                                                     */
/*      SPRC0 (0x21e09370)                                                      */
/*      SPRMCC (0x21e09370)                                                     */
/*      SPRUCC (0x21e48370)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktipmoncntrcfg_4
*/


#define KTIPMONCNTRCFG_4_N0_KTI_LLPMON_REG 0x09020370

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 eventselect : 8;

                            /* Bits[7:0], Access Type=RW/V, default=0x00000000*/

                            /*
                               This field is used to decode the PerfMon event
                               which is selected.
                            */
    UINT32 unitmask : 8;

                            /* Bits[15:8], Access Type=RW/V, default=0x00000000*/

                            /*
                               This mask selects the sub-events to be selected
                               for creation of the event (for applicable
                               events). See Pmon events for details.
                            */
    UINT32 rsvd_16 : 1;

                            /* Bits[16:16], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 counterreset : 1;

                            /* Bits[17:17], Access Type=RW/1S/V, default=0x00000000*/

                            /*
                               When this bit is set, the corresponding counter
                               will be reset to 0. This allows for a quick
                               reset of the counter when changing event
                               encodings.
                            */
    UINT32 edgedetect : 1;

                            /* Bits[18:18], Access Type=RW/V, default=0x00000000*/

                            /*
                               Edge Detect allows counting either 0 to 1 (if
                               invert=0) or 1 to 0 (if invert=1) transitions of
                               a given event. For example, there is an event
                               that counts the number of cycles in L1 power
                               state in Intel UPI. By using edge detect, one
                               can count the number of times that we entered L1
                               state (by detecting the rising edge by setting
                               invert=0). Edge detect only works in conjunction
                               with threshholding. This is true even for events
                               that can only increment by 1 in a given cycle
                               (like the L1 example above). In this case, one
                               should set a threshold of 1 (with invert=0). One
                               can also use Edge Detect with queue occupancy
                               events. For example, if one wanted to count the
                               number of times when the TXQ occupancy was
                               greater than or equal to 5, one would select the
                               TXQ occupancy event with a threshold of 5 and
                               set the Edge Detect bit (and invert=0).
                            */
    UINT32 rsvd_19 : 1;

                            /* Bits[19:19], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 frz_on_ov : 1;

                            /* Bits[20:20], Access Type=RW/V, default=0x00000000*/

                            /*
                               This bit will be sent in the GPSB message on a
                               pmon overflow to indicate whether or not to
                               freeze when an overflow occurs.
                            */
    UINT32 rsvd : 1;

                            /* Bits[21:21], Access Type=RW/V, default=0x00000000*/

                            /*
                               Bit was defined as Internal control bit, but
                               this function is dropped in SKX, and bit is now
                               Reserved.
                            */
    UINT32 rsvd_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 invert : 1;

                            /* Bits[23:23], Access Type=RW/V, default=0x00000000*/

                            /*
                               This bit indicates how the threshold field will
                               be compared to the incoming event. When 0, the
                               comparison that will be done is threshold
                               greater than or equal to event. When set to 1,
                               the comparison that will be done is inverted
                               from the case where this bit is set to 0, i.e.,
                               threshold less than event. The invert bit only
                               works when Threshold != 0. So, if one would like
                               to invert a non-occupancy event, one needs to
                               set the threshold to 1.
                            */
    UINT32 thresh : 8;

                            /* Bits[31:24], Access Type=RW/V, default=0x00000000*/

                            /*
                               This field is compared directly against an
                               incoming event value for events that can
                               increment by 1 or more in a given cycle. The
                               result of the comparison is effectively a 1 bit
                               wide event, i.e., the counter will be
                               incremented by 1 when the comparison is true
                               (the type of comparison depends on the setting
                               of the invert bit - see bit 23) no matter how
                               wide the original event was. When this field is
                               zero, threshold comparison is disabled and the
                               event is passed without modification.
                            */

  } Bits;
  UINT32 Data;

} KTIPMONCNTRCFG_4_N0_KTI_LLPMON_STRUCT;

/* KTIPMONCNTRCFG_4_N1_KTI_LLPMON_REG supported on:                             */
/*      SPRA0 (0x21e09374)                                                      */
/*      SPRB0 (0x21e09374)                                                      */
/*      SPRHBM (0x21e09374)                                                     */
/*      SPRC0 (0x21e09374)                                                      */
/*      SPRMCC (0x21e09374)                                                     */
/*      SPRUCC (0x21e48374)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktipmoncntrcfg_4
*/


#define KTIPMONCNTRCFG_4_N1_KTI_LLPMON_REG 0x09020374

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 32;

                            /* Bits[31:0], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTIPMONCNTRCFG_4_N1_KTI_LLPMON_STRUCT;

/* KTIPMONCNTRCFG_EXTN_0_KTI_LLPMON_REG supported on:                           */
/*      SPRA0 (0x21e09378)                                                      */
/*      SPRB0 (0x21e09378)                                                      */
/*      SPRHBM (0x21e09378)                                                     */
/*      SPRC0 (0x21e09378)                                                      */
/*      SPRMCC (0x21e09378)                                                     */
/*      SPRUCC (0x21e48378)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktipmoncntrcfg_0
*/


#define KTIPMONCNTRCFG_EXTN_0_KTI_LLPMON_REG 0x09020378

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 unitmask_extended : 32;

                            /* Bits[31:0], Access Type=RW/V, default=0x00000000*/

                            /* Unitmask extended bits. */

  } Bits;
  UINT32 Data;

} KTIPMONCNTRCFG_EXTN_0_KTI_LLPMON_STRUCT;

/* KTIPMONCNTRCFG_EXTN_1_KTI_LLPMON_REG supported on:                           */
/*      SPRA0 (0x21e0937c)                                                      */
/*      SPRB0 (0x21e0937c)                                                      */
/*      SPRHBM (0x21e0937c)                                                     */
/*      SPRC0 (0x21e0937c)                                                      */
/*      SPRMCC (0x21e0937c)                                                     */
/*      SPRUCC (0x21e4837c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktipmoncntrcfg_0
*/


#define KTIPMONCNTRCFG_EXTN_1_KTI_LLPMON_REG 0x0902037C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 unitmask_extended : 32;

                            /* Bits[31:0], Access Type=RW/V, default=0x00000000*/

                            /* Unitmask extended bits. */

  } Bits;
  UINT32 Data;

} KTIPMONCNTRCFG_EXTN_1_KTI_LLPMON_STRUCT;

/* KTIPMONCNTRCFG_EXTN_2_KTI_LLPMON_REG supported on:                           */
/*      SPRA0 (0x21e09380)                                                      */
/*      SPRB0 (0x21e09380)                                                      */
/*      SPRHBM (0x21e09380)                                                     */
/*      SPRC0 (0x21e09380)                                                      */
/*      SPRMCC (0x21e09380)                                                     */
/*      SPRUCC (0x21e48380)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktipmoncntrcfg_0
*/


#define KTIPMONCNTRCFG_EXTN_2_KTI_LLPMON_REG 0x09020380

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 unitmask_extended : 32;

                            /* Bits[31:0], Access Type=RW/V, default=0x00000000*/

                            /* Unitmask extended bits. */

  } Bits;
  UINT32 Data;

} KTIPMONCNTRCFG_EXTN_2_KTI_LLPMON_STRUCT;

/* KTIPMONCNTRCFG_EXTN_3_KTI_LLPMON_REG supported on:                           */
/*      SPRA0 (0x21e09384)                                                      */
/*      SPRB0 (0x21e09384)                                                      */
/*      SPRHBM (0x21e09384)                                                     */
/*      SPRC0 (0x21e09384)                                                      */
/*      SPRMCC (0x21e09384)                                                     */
/*      SPRUCC (0x21e48384)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktipmoncntrcfg_0
*/


#define KTIPMONCNTRCFG_EXTN_3_KTI_LLPMON_REG 0x09020384

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 unitmask_extended : 32;

                            /* Bits[31:0], Access Type=RW/V, default=0x00000000*/

                            /* Unitmask extended bits. */

  } Bits;
  UINT32 Data;

} KTIPMONCNTRCFG_EXTN_3_KTI_LLPMON_STRUCT;

/* KTIPMONCNTRCFG_EXTN_4_KTI_LLPMON_REG supported on:                           */
/*      SPRA0 (0x21e09388)                                                      */
/*      SPRB0 (0x21e09388)                                                      */
/*      SPRHBM (0x21e09388)                                                     */
/*      SPRC0 (0x21e09388)                                                      */
/*      SPRMCC (0x21e09388)                                                     */
/*      SPRUCC (0x21e48388)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktipmoncntrcfg_0
*/


#define KTIPMONCNTRCFG_EXTN_4_KTI_LLPMON_REG 0x09020388

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 unitmask_extended : 32;

                            /* Bits[31:0], Access Type=RW/V, default=0x00000000*/

                            /* Unitmask extended bits. */

  } Bits;
  UINT32 Data;

} KTIPMONCNTRCFG_EXTN_4_KTI_LLPMON_STRUCT;

/* KTIPMONUNITSTATUS_KTI_LLPMON_REG supported on:                               */
/*      SPRA0 (0x21e0938c)                                                      */
/*      SPRB0 (0x21e0938c)                                                      */
/*      SPRHBM (0x21e0938c)                                                     */
/*      SPRC0 (0x21e0938c)                                                      */
/*      SPRMCC (0x21e0938c)                                                     */
/*      SPRUCC (0x21e4838c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktipmonunitstatus
*/


#define KTIPMONUNITSTATUS_KTI_LLPMON_REG 0x0902038C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 counteroverflowbitmask : 5;

                            /* Bits[4:0], Access Type=RW/1C/V, default=0x00000000*/

                            /*
                               his field shows which PMON counters have
                               overflowed in the unit. Whenever a counter
                               overflows, it will set the relevant bit to 1. An
                               overflow will not effect the other status bits.
                               This status should only be cleared by software.
                               [0] - KTIPMONCNTR_0 overflowed [1] -
                               KTIPMONCNTR_1 overflowed [2] - KTIPMONCNTR_2
                               overflowed [3] - KTIPMONCNTR_3 overflowed [4] -
                               KTIPMONCNTR_4 overflowed
                            */
    UINT32 rsvd : 27;

                            /* Bits[31:5], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTIPMONUNITSTATUS_KTI_LLPMON_STRUCT;

/* SMI3TNLCTRL_KTI_LLPMON_REG supported on:                                     */
/*      SPRA0 (0x21e09400)                                                      */
/*      SPRB0 (0x21e09400)                                                      */
/*      SPRHBM (0x21e09400)                                                     */
/*      SPRC0 (0x21e09400)                                                      */
/*      SPRMCC (0x21e09400)                                                     */
/*      SPRUCC (0x21e48400)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* smi3tnlctrl
*/


#define SMI3TNLCTRL_KTI_LLPMON_REG 0x09020400

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 quiesce_enable : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               Places the tunnel agents into Quiesce Mode,
                               where agents are able to receive transactions.
                               It will not start sending until a WAKE command
                               is seen
                            */
    UINT32 ignore_agent_credit : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Tunneling control bit instructing the Agents to
                               not wait for remote agent credit returns prior
                               to. Only used during debug and bring up
                            */
    UINT32 ignore_link_credit : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               Tunneling control bit instructing the Link Agent
                               to not wait for the link credit to return prior
                               to sending another LLCTRL.MESSAGE txn across the
                               link
                            */
    UINT32 inject_link_credit_return : 1;

                            /* Bits[3:3], Access Type=RW/V, default=0x00000000*/

                            /* force the link to return a link credit */
    UINT32 duplicate_msg_to_tunnel_dbgmode : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               This will cause a local Message Channel Txn to
                               go to tunnel ring as well. Only used for a debug
                               mode
                            */
    UINT32 rsvd : 11;

                            /* Bits[15:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rx_pma_status : 2;

                            /* Bits[17:16], Access Type=RO/V, default=0x00000000*/

                            /*
                               This is the response to a local Rx PMA status
                               request, sampled on the incoming portion of the
                               LL Tx
                            */
    UINT32 rx_msg_status : 2;

                            /* Bits[19:18], Access Type=RO/V, default=0x00000000*/

                            /*
                               This is the response to a local Rx MSG status
                               request, sampled on the incoming portion of the
                               LL Tx
                            */
    UINT32 tx_pma_status : 2;

                            /* Bits[21:20], Access Type=RO/V, default=0x00000000*/

                            /*
                               This is the response to a remote Rx PMA status
                               request, sampled on the incoming portion of the
                               LL Rx
                            */
    UINT32 tx_msg_status : 2;

                            /* Bits[23:22], Access Type=RO/V, default=0x00000000*/

                            /*
                               This is the response to a remote Rx MSG status
                               request, sampled on the incoming portion of the
                               LL Rx
                            */
    UINT32 rsvd_24 : 7;

                            /* Bits[30:24], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 malformed_pkt : 1;

                            /* Bits[31:31], Access Type=RW/1C/V, default=0x00000000*/

                            /*
                               Indicates a malformed packet was seen on the
                               tunnel ring
                            */

  } Bits;
  UINT32 Data;

} SMI3TNLCTRL_KTI_LLPMON_STRUCT;

/* SMI3TNLCTRL2_KTI_LLPMON_REG supported on:                                    */
/*      SPRA0 (0x21e09404)                                                      */
/*      SPRB0 (0x21e09404)                                                      */
/*      SPRHBM (0x21e09404)                                                     */
/*      SPRC0 (0x21e09404)                                                      */
/*      SPRMCC (0x21e09404)                                                     */
/*      SPRUCC (0x21e48404)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* smi3tnlctrl2
*/


#define SMI3TNLCTRL2_KTI_LLPMON_REG 0x09020404

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rx_inject_pma_wake : 1;

                            /* Bits[0:0], Access Type=RW/V, default=0x00000000*/

                            /*
                               Causes a PMA wake message to be sent on the SKX
                               tunnel ring
                            */
    UINT32 rx_inject_pma_quiesce : 1;

                            /* Bits[1:1], Access Type=RW/V, default=0x00000000*/

                            /*
                               Causes a PMA quiesce message to be sent on the
                               SKX tunnel ring
                            */
    UINT32 rx_inject_pma_rst_agent : 1;

                            /* Bits[2:2], Access Type=RW/V, default=0x00000000*/

                            /*
                               Causes a PMA quiesce message to be sent on the
                               SKX tunnel ring
                            */
    UINT32 rx_inject_pma_agtcdtret : 1;

                            /* Bits[3:3], Access Type=RW/V, default=0x00000000*/

                            /*
                               Causes a PMA agent credit return request message
                               to be sent on the SKX tunnel ring
                            */
    UINT32 rx_inject_pma_agent_status : 1;

                            /* Bits[4:4], Access Type=RW/V, default=0x00000000*/

                            /*
                               Causes a PMA agent status request message to be
                               sent on the SKX tunnel ring
                            */
    UINT32 rsvd : 3;

                            /* Bits[7:5], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 rx_inject_msg_wake : 1;

                            /* Bits[8:8], Access Type=RW/V, default=0x00000000*/

                            /*
                               Causes a MSG wake message to be sent on the SKX
                               tunnel ring
                            */
    UINT32 rx_inject_msg_quiesce : 1;

                            /* Bits[9:9], Access Type=RW/V, default=0x00000000*/

                            /*
                               Causes a MSG quiesce message to be sent on the
                               SKX tunnel ring
                            */
    UINT32 rx_inject_msg_rst_agent : 1;

                            /* Bits[10:10], Access Type=RW/V, default=0x00000000*/

                            /*
                               Causes a MSG quiesce message to be sent on the
                               SKX tunnel ring
                            */
    UINT32 rx_inject_msg_agtcdtret : 1;

                            /* Bits[11:11], Access Type=RW/V, default=0x00000000*/

                            /*
                               Causes a MSG agent credit return request message
                               to be sent on the SKX tunnel ring
                            */
    UINT32 rx_inject_msg_agent_status : 1;

                            /* Bits[12:12], Access Type=RW/V, default=0x00000000*/

                            /*
                               Causes a MSG agent status request message to be
                               sent on the SKX tunnel ring
                            */
    UINT32 rsvd_13 : 3;

                            /* Bits[15:13], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 tx_inject_pma_wake : 1;

                            /* Bits[16:16], Access Type=RW/V, default=0x00000000*/

                            /*
                               Causes a PMA wake message to be sent on the
                               outgoing link targeting the RGT tunnel ring
                            */
    UINT32 tx_inject_pma_quiesce : 1;

                            /* Bits[17:17], Access Type=RW/V, default=0x00000000*/

                            /*
                               Causes a PMA quiesce message to be sent on the
                               outgoing link targeting the RGT tunnel ring
                            */
    UINT32 tx_inject_pma_rst_agent : 1;

                            /* Bits[18:18], Access Type=RW/V, default=0x00000000*/

                            /*
                               Causes a PMA quiesce message to be sent on the
                               outgoing link targeting the RGT tunnel ring
                            */
    UINT32 tx_inject_pma_agtcdtret : 1;

                            /* Bits[19:19], Access Type=RW/V, default=0x00000000*/

                            /*
                               Causes a PMA agent credit return request message
                               to be sent on the outgoing link targeting the
                               RGT tunnel ring
                            */
    UINT32 tx_inject_pma_agent_status : 1;

                            /* Bits[20:20], Access Type=RW/V, default=0x00000000*/

                            /*
                               Causes a PMA agent status request message to be
                               sent on the outgoing link targeting the RGT
                               tunnel ring
                            */
    UINT32 rsvd_21 : 3;

                            /* Bits[23:21], Access Type=RO, default=None*/

                            /* Reserved */
    UINT32 tx_inject_msg_wake : 1;

                            /* Bits[24:24], Access Type=RW/V, default=0x00000000*/

                            /*
                               Causes a MSG wake message to be sent on the
                               outgoing link targeting the RGT tunnel ring
                            */
    UINT32 tx_inject_msg_quiesce : 1;

                            /* Bits[25:25], Access Type=RW/V, default=0x00000000*/

                            /*
                               Causes a MSG quiesce message to be sent on the
                               outgoing link targeting the RGT tunnel ring
                            */
    UINT32 tx_inject_msg_rst_agent : 1;

                            /* Bits[26:26], Access Type=RW/V, default=0x00000000*/

                            /*
                               Causes a MSG quiesce message to be sent on the
                               outgoing link targeting the RGT tunnel ring
                            */
    UINT32 tx_inject_msg_agtcdtret : 1;

                            /* Bits[27:27], Access Type=RW/V, default=0x00000000*/

                            /*
                               Causes a MSG agent credit return request message
                               to be sent on the outgoing link targeting the
                               RGT tunnel ring
                            */
    UINT32 tx_inject_msg_agent_status : 1;

                            /* Bits[28:28], Access Type=RW/V, default=0x00000000*/

                            /*
                               Causes a MSG agent status request message to be
                               sent on the outgoing link targeting the RGT
                               tunnel ring
                            */
    UINT32 rsvd_29 : 3;

                            /* Bits[31:29], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} SMI3TNLCTRL2_KTI_LLPMON_STRUCT;

/* OS_W_CP_LO_KTI_LLPMON_REG supported on:                                      */
/*      SPRA0 (0x21e09408)                                                      */
/*      SPRB0 (0x21e09408)                                                      */
/*      SPRHBM (0x21e09408)                                                     */
/*      SPRC0 (0x21e09408)                                                      */
/*      SPRMCC (0x21e09408)                                                     */
/*      SPRUCC (0x21e48408)                                                     */
/* Register default value on SPRA0: 0x01000218                                  */
/* Register default value on SPRB0: 0x01000218                                  */
/* Register default value on SPRHBM: 0x01000218                                 */
/* Register default value on SPRC0: 0x01000218                                  */
/* Register default value on SPRMCC: 0x01000218                                 */
/* Register default value on SPRUCC: 0x01000218                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* OS_W_CP LOWER 32bits
*/


#define OS_W_CP_LO_KTI_LLPMON_REG 0x09020408

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 sai_mask_0 : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_1 : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_2 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_3 : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_4 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_5 : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_6 : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_7 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_8 : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_9 : 1;

                            /* Bits[9:9], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_10 : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_11 : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_12 : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_13 : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_14 : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_15 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_16 : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_17 : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_18 : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_19 : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_20 : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_21 : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_22 : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_23 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_24 : 1;

                            /* Bits[24:24], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_25 : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_26 : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_27 : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_28 : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_29 : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_30 : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_31 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} OS_W_CP_LO_KTI_LLPMON_STRUCT;

/* OS_W_CP_HI_KTI_LLPMON_REG supported on:                                      */
/*      SPRA0 (0x21e0940c)                                                      */
/*      SPRB0 (0x21e0940c)                                                      */
/*      SPRHBM (0x21e0940c)                                                     */
/*      SPRC0 (0x21e0940c)                                                      */
/*      SPRMCC (0x21e0940c)                                                     */
/*      SPRUCC (0x21e4840c)                                                     */
/* Register default value on SPRA0: 0x00000400                                  */
/* Register default value on SPRB0: 0x00000400                                  */
/* Register default value on SPRHBM: 0x00000400                                 */
/* Register default value on SPRC0: 0x00000400                                  */
/* Register default value on SPRMCC: 0x00000400                                 */
/* Register default value on SPRUCC: 0x00000400                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* OS_W_CP UPPER 32bits
*/


#define OS_W_CP_HI_KTI_LLPMON_REG 0x0902040C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 sai_mask_0 : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_1 : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_2 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_3 : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_4 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_5 : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_6 : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_7 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_8 : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_9 : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_10 : 1;

                            /* Bits[10:10], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_11 : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_12 : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_13 : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_14 : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_15 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_16 : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_17 : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_18 : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_19 : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_20 : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_21 : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_22 : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_23 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_24 : 1;

                            /* Bits[24:24], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_25 : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_26 : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_27 : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_28 : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_29 : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_30 : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_31 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} OS_W_CP_HI_KTI_LLPMON_STRUCT;

/* OS_W_RAC_LO_KTI_LLPMON_REG supported on:                                     */
/*      SPRA0 (0x21e09410)                                                      */
/*      SPRB0 (0x21e09410)                                                      */
/*      SPRHBM (0x21e09410)                                                     */
/*      SPRC0 (0x21e09410)                                                      */
/*      SPRMCC (0x21e09410)                                                     */
/*      SPRUCC (0x21e48410)                                                     */
/* Register default value on SPRA0: 0xFFFFFFFF                                  */
/* Register default value on SPRB0: 0xFFFFFFFF                                  */
/* Register default value on SPRHBM: 0xFFFFFFFF                                 */
/* Register default value on SPRC0: 0xFFFFFFFF                                  */
/* Register default value on SPRMCC: 0xFFFFFFFF                                 */
/* Register default value on SPRUCC: 0xFFFFFFFF                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* OS_W_RAC LOWER 32bits
*/


#define OS_W_RAC_LO_KTI_LLPMON_REG 0x09020410

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 sai_mask_0 : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_1 : 1;

                            /* Bits[1:1], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_2 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_3 : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_4 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_5 : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_6 : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_7 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_8 : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_9 : 1;

                            /* Bits[9:9], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_10 : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_11 : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_12 : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_13 : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_14 : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_15 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_16 : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_17 : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_18 : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_19 : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_20 : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_21 : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_22 : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_23 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_24 : 1;

                            /* Bits[24:24], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_25 : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_26 : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_27 : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_28 : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_29 : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_30 : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_31 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} OS_W_RAC_LO_KTI_LLPMON_STRUCT;

/* OS_W_RAC_HI_KTI_LLPMON_REG supported on:                                     */
/*      SPRA0 (0x21e09414)                                                      */
/*      SPRB0 (0x21e09414)                                                      */
/*      SPRHBM (0x21e09414)                                                     */
/*      SPRC0 (0x21e09414)                                                      */
/*      SPRMCC (0x21e09414)                                                     */
/*      SPRUCC (0x21e48414)                                                     */
/* Register default value on SPRA0: 0xFFFFFFFF                                  */
/* Register default value on SPRB0: 0xFFFFFFFF                                  */
/* Register default value on SPRHBM: 0xFFFFFFFF                                 */
/* Register default value on SPRC0: 0xFFFFFFFF                                  */
/* Register default value on SPRMCC: 0xFFFFFFFF                                 */
/* Register default value on SPRUCC: 0xFFFFFFFF                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* OS_W_RAC UPPER 32bits
*/


#define OS_W_RAC_HI_KTI_LLPMON_REG 0x09020414

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 sai_mask_0 : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_1 : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_2 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_3 : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_4 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_5 : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_6 : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_7 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_8 : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_9 : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_10 : 1;

                            /* Bits[10:10], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_11 : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_12 : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_13 : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_14 : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_15 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_16 : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_17 : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_18 : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_19 : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_20 : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_21 : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_22 : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_23 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_24 : 1;

                            /* Bits[24:24], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_25 : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_26 : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_27 : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_28 : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_29 : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_30 : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_31 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} OS_W_RAC_HI_KTI_LLPMON_STRUCT;

/* OS_W_WAC_LO_KTI_LLPMON_REG supported on:                                     */
/*      SPRA0 (0x21e09418)                                                      */
/*      SPRB0 (0x21e09418)                                                      */
/*      SPRHBM (0x21e09418)                                                     */
/*      SPRC0 (0x21e09418)                                                      */
/*      SPRMCC (0x21e09418)                                                     */
/*      SPRUCC (0x21e48418)                                                     */
/* Register default value on SPRA0: 0x0300021F                                  */
/* Register default value on SPRB0: 0x0300021F                                  */
/* Register default value on SPRHBM: 0x0300021F                                 */
/* Register default value on SPRC0: 0x0300021F                                  */
/* Register default value on SPRMCC: 0x0300021F                                 */
/* Register default value on SPRUCC: 0x0300021F                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* OS_W_WAC LOWER 32bits
*/


#define OS_W_WAC_LO_KTI_LLPMON_REG 0x09020418

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 sai_mask_0 : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_1 : 1;

                            /* Bits[1:1], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_2 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_3 : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_4 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_5 : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_6 : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_7 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_8 : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_9 : 1;

                            /* Bits[9:9], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_10 : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_11 : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_12 : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_13 : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_14 : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_15 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_16 : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_17 : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_18 : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_19 : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_20 : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_21 : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_22 : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_23 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_24 : 1;

                            /* Bits[24:24], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_25 : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_26 : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_27 : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_28 : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_29 : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_30 : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_31 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} OS_W_WAC_LO_KTI_LLPMON_STRUCT;

/* OS_W_WAC_HI_KTI_LLPMON_REG supported on:                                     */
/*      SPRA0 (0x21e0941c)                                                      */
/*      SPRB0 (0x21e0941c)                                                      */
/*      SPRHBM (0x21e0941c)                                                     */
/*      SPRC0 (0x21e0941c)                                                      */
/*      SPRMCC (0x21e0941c)                                                     */
/*      SPRUCC (0x21e4841c)                                                     */
/* Register default value on SPRA0: 0x20000C00                                  */
/* Register default value on SPRB0: 0x20000C00                                  */
/* Register default value on SPRHBM: 0x20000C00                                 */
/* Register default value on SPRC0: 0x20000C00                                  */
/* Register default value on SPRMCC: 0x20000C00                                 */
/* Register default value on SPRUCC: 0x20000C00                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* OS_W_WAC UPPER 32bits
*/


#define OS_W_WAC_HI_KTI_LLPMON_REG 0x0902041C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 sai_mask_0 : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_1 : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_2 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_3 : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_4 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_5 : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_6 : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_7 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_8 : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_9 : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_10 : 1;

                            /* Bits[10:10], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_11 : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_12 : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_13 : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_14 : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_15 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_16 : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_17 : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_18 : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_19 : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_20 : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_21 : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_22 : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_23 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_24 : 1;

                            /* Bits[24:24], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_25 : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_26 : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_27 : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_28 : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_29 : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_30 : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_31 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} OS_W_WAC_HI_KTI_LLPMON_STRUCT;













/* UPIAGT_LB_MCHECK_W_CP_LO_KTI_LLPMON_REG supported on:                        */
/*      SPRA0 (0x21e09468)                                                      */
/*      SPRB0 (0x21e09468)                                                      */
/*      SPRHBM (0x21e09468)                                                     */
/*      SPRC0 (0x21e09468)                                                      */
/*      SPRMCC (0x21e09468)                                                     */
/*      SPRUCC (0x21e48468)                                                     */
/* Register default value on SPRA0: 0x01000218                                  */
/* Register default value on SPRB0: 0x01000218                                  */
/* Register default value on SPRHBM: 0x01000218                                 */
/* Register default value on SPRC0: 0x01000218                                  */
/* Register default value on SPRMCC: 0x01000218                                 */
/* Register default value on SPRUCC: 0x01000218                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* UPIAGT_LB_MCHECK_W_CP LOWER 32bits
*/


#define UPIAGT_LB_MCHECK_W_CP_LO_KTI_LLPMON_REG 0x09020468

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 sai_mask_0 : 1;

                            /* Bits[0:0], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_1 : 1;

                            /* Bits[1:1], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_2 : 1;

                            /* Bits[2:2], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_3 : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_4 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_6 : 1;

                            /* Bits[6:6], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_7 : 1;

                            /* Bits[7:7], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_8 : 1;

                            /* Bits[8:8], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_9 : 1;

                            /* Bits[9:9], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_10 : 1;

                            /* Bits[10:10], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_11 : 1;

                            /* Bits[11:11], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_12 : 1;

                            /* Bits[12:12], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_13 : 1;

                            /* Bits[13:13], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_14 : 1;

                            /* Bits[14:14], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_15 : 1;

                            /* Bits[15:15], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_16 : 1;

                            /* Bits[16:16], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_17 : 1;

                            /* Bits[17:17], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_18 : 1;

                            /* Bits[18:18], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_19 : 1;

                            /* Bits[19:19], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_20 : 1;

                            /* Bits[20:20], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_21 : 1;

                            /* Bits[21:21], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_24 : 1;

                            /* Bits[24:24], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_25 : 1;

                            /* Bits[25:25], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_26 : 1;

                            /* Bits[26:26], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_27 : 1;

                            /* Bits[27:27], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_28 : 1;

                            /* Bits[28:28], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_29 : 1;

                            /* Bits[29:29], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_30 : 1;

                            /* Bits[30:30], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_31 : 1;

                            /* Bits[31:31], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} UPIAGT_LB_MCHECK_W_CP_LO_KTI_LLPMON_STRUCT;

/* UPIAGT_LB_MCHECK_W_CP_HI_KTI_LLPMON_REG supported on:                        */
/*      SPRA0 (0x21e0946c)                                                      */
/*      SPRB0 (0x21e0946c)                                                      */
/*      SPRHBM (0x21e0946c)                                                     */
/*      SPRC0 (0x21e0946c)                                                      */
/*      SPRMCC (0x21e0946c)                                                     */
/*      SPRUCC (0x21e4846c)                                                     */
/* Register default value on SPRA0: 0x00000400                                  */
/* Register default value on SPRB0: 0x00000400                                  */
/* Register default value on SPRHBM: 0x00000400                                 */
/* Register default value on SPRC0: 0x00000400                                  */
/* Register default value on SPRMCC: 0x00000400                                 */
/* Register default value on SPRUCC: 0x00000400                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* UPIAGT_LB_MCHECK_W_CP UPPER 32bits
*/


#define UPIAGT_LB_MCHECK_W_CP_HI_KTI_LLPMON_REG 0x0902046C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 sai_mask_0 : 1;

                            /* Bits[0:0], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_1 : 1;

                            /* Bits[1:1], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_2 : 1;

                            /* Bits[2:2], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_3 : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_4 : 1;

                            /* Bits[4:4], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_5 : 1;

                            /* Bits[5:5], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_6 : 1;

                            /* Bits[6:6], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_7 : 1;

                            /* Bits[7:7], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_8 : 1;

                            /* Bits[8:8], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_9 : 1;

                            /* Bits[9:9], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_10 : 1;

                            /* Bits[10:10], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_11 : 1;

                            /* Bits[11:11], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_12 : 1;

                            /* Bits[12:12], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_13 : 1;

                            /* Bits[13:13], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_14 : 1;

                            /* Bits[14:14], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_15 : 1;

                            /* Bits[15:15], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_16 : 1;

                            /* Bits[16:16], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_17 : 1;

                            /* Bits[17:17], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_18 : 1;

                            /* Bits[18:18], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_19 : 1;

                            /* Bits[19:19], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_20 : 1;

                            /* Bits[20:20], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_21 : 1;

                            /* Bits[21:21], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_22 : 1;

                            /* Bits[22:22], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_23 : 1;

                            /* Bits[23:23], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_24 : 1;

                            /* Bits[24:24], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_25 : 1;

                            /* Bits[25:25], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_26 : 1;

                            /* Bits[26:26], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_27 : 1;

                            /* Bits[27:27], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_28 : 1;

                            /* Bits[28:28], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_29 : 1;

                            /* Bits[29:29], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_30 : 1;

                            /* Bits[30:30], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_31 : 1;

                            /* Bits[31:31], Access Type=RO, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} UPIAGT_LB_MCHECK_W_CP_HI_KTI_LLPMON_STRUCT;

/* UPIAGT_LB_MCHECK_W_RAC_LO_KTI_LLPMON_REG supported on:                       */
/*      SPRA0 (0x21e09470)                                                      */
/*      SPRB0 (0x21e09470)                                                      */
/*      SPRHBM (0x21e09470)                                                     */
/*      SPRC0 (0x21e09470)                                                      */
/*      SPRMCC (0x21e09470)                                                     */
/*      SPRUCC (0x21e48470)                                                     */
/* Register default value on SPRA0: 0xFFFFFFFF                                  */
/* Register default value on SPRB0: 0xFFFFFFFF                                  */
/* Register default value on SPRHBM: 0xFFFFFFFF                                 */
/* Register default value on SPRC0: 0xFFFFFFFF                                  */
/* Register default value on SPRMCC: 0xFFFFFFFF                                 */
/* Register default value on SPRUCC: 0xFFFFFFFF                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* UPIAGT_LB_MCHECK_W_RAC LOWER 32bits
*/


#define UPIAGT_LB_MCHECK_W_RAC_LO_KTI_LLPMON_REG 0x09020470

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 sai_mask_0 : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_1 : 1;

                            /* Bits[1:1], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_2 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_3 : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_4 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_5 : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_6 : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_7 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_8 : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_9 : 1;

                            /* Bits[9:9], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_10 : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_11 : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_12 : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_13 : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_14 : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_15 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_16 : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_17 : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_18 : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_19 : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_20 : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_21 : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_22 : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_23 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_24 : 1;

                            /* Bits[24:24], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_25 : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_26 : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_27 : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_28 : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_29 : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_30 : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_31 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} UPIAGT_LB_MCHECK_W_RAC_LO_KTI_LLPMON_STRUCT;

/* UPIAGT_LB_MCHECK_W_RAC_HI_KTI_LLPMON_REG supported on:                       */
/*      SPRA0 (0x21e09474)                                                      */
/*      SPRB0 (0x21e09474)                                                      */
/*      SPRHBM (0x21e09474)                                                     */
/*      SPRC0 (0x21e09474)                                                      */
/*      SPRMCC (0x21e09474)                                                     */
/*      SPRUCC (0x21e48474)                                                     */
/* Register default value on SPRA0: 0xFFFFFFFF                                  */
/* Register default value on SPRB0: 0xFFFFFFFF                                  */
/* Register default value on SPRHBM: 0xFFFFFFFF                                 */
/* Register default value on SPRC0: 0xFFFFFFFF                                  */
/* Register default value on SPRMCC: 0xFFFFFFFF                                 */
/* Register default value on SPRUCC: 0xFFFFFFFF                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* UPIAGT_LB_MCHECK_W_RAC UPPER 32bits
*/


#define UPIAGT_LB_MCHECK_W_RAC_HI_KTI_LLPMON_REG 0x09020474

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 sai_mask_0 : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_1 : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_2 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_3 : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_4 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_5 : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_6 : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_7 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_8 : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_9 : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_10 : 1;

                            /* Bits[10:10], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_11 : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_12 : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_13 : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_14 : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_15 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_16 : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_17 : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_18 : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_19 : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_20 : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_21 : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_22 : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_23 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_24 : 1;

                            /* Bits[24:24], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_25 : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_26 : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_27 : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_28 : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_29 : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_30 : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_31 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} UPIAGT_LB_MCHECK_W_RAC_HI_KTI_LLPMON_STRUCT;

/* UPIAGT_LB_MCHECK_W_WAC_LO_KTI_LLPMON_REG supported on:                       */
/*      SPRA0 (0x21e09478)                                                      */
/*      SPRB0 (0x21e09478)                                                      */
/*      SPRHBM (0x21e09478)                                                     */
/*      SPRC0 (0x21e09478)                                                      */
/*      SPRMCC (0x21e09478)                                                     */
/*      SPRUCC (0x21e48478)                                                     */
/* Register default value on SPRA0: 0x0100021E                                  */
/* Register default value on SPRB0: 0x0100021E                                  */
/* Register default value on SPRHBM: 0x0100021E                                 */
/* Register default value on SPRC0: 0x0100021E                                  */
/* Register default value on SPRMCC: 0x0100021E                                 */
/* Register default value on SPRUCC: 0x0100021E                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* UPIAGT_LB_MCHECK_W_WAC LOWER 32bits
*/


#define UPIAGT_LB_MCHECK_W_WAC_LO_KTI_LLPMON_REG 0x09020478

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 sai_mask_0 : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_1 : 1;

                            /* Bits[1:1], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_2 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_3 : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_4 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_5 : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_6 : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_7 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_8 : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_9 : 1;

                            /* Bits[9:9], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_10 : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_11 : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_12 : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_13 : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_14 : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_15 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_16 : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_17 : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_18 : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_19 : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_20 : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_21 : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_22 : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_23 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_24 : 1;

                            /* Bits[24:24], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_25 : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_26 : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_27 : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_28 : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_29 : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_30 : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_31 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} UPIAGT_LB_MCHECK_W_WAC_LO_KTI_LLPMON_STRUCT;

/* UPIAGT_LB_MCHECK_W_WAC_HI_KTI_LLPMON_REG supported on:                       */
/*      SPRA0 (0x21e0947c)                                                      */
/*      SPRB0 (0x21e0947c)                                                      */
/*      SPRHBM (0x21e0947c)                                                     */
/*      SPRC0 (0x21e0947c)                                                      */
/*      SPRMCC (0x21e0947c)                                                     */
/*      SPRUCC (0x21e4847c)                                                     */
/* Register default value on SPRA0: 0x20000400                                  */
/* Register default value on SPRB0: 0x20000400                                  */
/* Register default value on SPRHBM: 0x20000400                                 */
/* Register default value on SPRC0: 0x20000400                                  */
/* Register default value on SPRMCC: 0x20000400                                 */
/* Register default value on SPRUCC: 0x20000400                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* UPIAGT_LB_MCHECK_W_WAC UPPER 32bits
*/


#define UPIAGT_LB_MCHECK_W_WAC_HI_KTI_LLPMON_REG 0x0902047C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 sai_mask_0 : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_1 : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_2 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_3 : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_4 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_5 : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_6 : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_7 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_8 : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_9 : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_10 : 1;

                            /* Bits[10:10], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_11 : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_12 : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_13 : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_14 : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_15 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_16 : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_17 : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_18 : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_19 : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_20 : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_21 : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_22 : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_23 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_24 : 1;

                            /* Bits[24:24], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_25 : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_26 : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_27 : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_28 : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_29 : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_30 : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_31 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} UPIAGT_LB_MCHECK_W_WAC_HI_KTI_LLPMON_STRUCT;

/* UPIAGT_DFX_CP_LO_KTI_LLPMON_REG supported on:                                */
/*      SPRA0 (0x21e09480)                                                      */
/*      SPRB0 (0x21e09480)                                                      */
/*      SPRHBM (0x21e09480)                                                     */
/*      SPRC0 (0x21e09480)                                                      */
/*      SPRMCC (0x21e09480)                                                     */
/*      SPRUCC (0x21e48480)                                                     */
/* Register default value on SPRA0: 0x01000218                                  */
/* Register default value on SPRB0: 0x01000218                                  */
/* Register default value on SPRHBM: 0x01000218                                 */
/* Register default value on SPRC0: 0x01000218                                  */
/* Register default value on SPRMCC: 0x01000218                                 */
/* Register default value on SPRUCC: 0x01000218                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: DFX                                              */
/* SPRB0 Security PolicyGroup: DFX                                              */
/* SPRHBM Security PolicyGroup: DFX                                             */
/* SPRC0 Security PolicyGroup: DFX                                              */
/* SPRMCC Security PolicyGroup: DFX                                             */
/* SPRUCC Security PolicyGroup: DFX                                             */
/* UPIAGT_DFX_CP LOWER 32bits
*/


#define UPIAGT_DFX_CP_LO_KTI_LLPMON_REG 0x09020480

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 sai_mask_0 : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_1 : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_2 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_3 : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_4 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_5 : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_6 : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_7 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_8 : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_9 : 1;

                            /* Bits[9:9], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_10 : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_11 : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_12 : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_13 : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_14 : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_15 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_16 : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_17 : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_18 : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_19 : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_20 : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_21 : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_22 : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_23 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_24 : 1;

                            /* Bits[24:24], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_25 : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_26 : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_27 : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_28 : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_29 : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_30 : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_31 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} UPIAGT_DFX_CP_LO_KTI_LLPMON_STRUCT;

/* UPIAGT_DFX_CP_HI_KTI_LLPMON_REG supported on:                                */
/*      SPRA0 (0x21e09484)                                                      */
/*      SPRB0 (0x21e09484)                                                      */
/*      SPRHBM (0x21e09484)                                                     */
/*      SPRC0 (0x21e09484)                                                      */
/*      SPRMCC (0x21e09484)                                                     */
/*      SPRUCC (0x21e48484)                                                     */
/* Register default value on SPRA0: 0x00000400                                  */
/* Register default value on SPRB0: 0x00000400                                  */
/* Register default value on SPRHBM: 0x00000400                                 */
/* Register default value on SPRC0: 0x00000400                                  */
/* Register default value on SPRMCC: 0x00000400                                 */
/* Register default value on SPRUCC: 0x00000400                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: DFX                                              */
/* SPRB0 Security PolicyGroup: DFX                                              */
/* SPRHBM Security PolicyGroup: DFX                                             */
/* SPRC0 Security PolicyGroup: DFX                                              */
/* SPRMCC Security PolicyGroup: DFX                                             */
/* SPRUCC Security PolicyGroup: DFX                                             */
/* UPIAGT_DFX_CP UPPER 32bits
*/


#define UPIAGT_DFX_CP_HI_KTI_LLPMON_REG 0x09020484

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 sai_mask_0 : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_1 : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_2 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_3 : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_4 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_5 : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_6 : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_7 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_8 : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_9 : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_10 : 1;

                            /* Bits[10:10], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_11 : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_12 : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_13 : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_14 : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_15 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_16 : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_17 : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_18 : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_19 : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_20 : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_21 : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_22 : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_23 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_24 : 1;

                            /* Bits[24:24], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_25 : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_26 : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_27 : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_28 : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_29 : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_30 : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_31 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} UPIAGT_DFX_CP_HI_KTI_LLPMON_STRUCT;

/* UPIAGT_DFX_RAC_LO_KTI_LLPMON_REG supported on:                               */
/*      SPRA0 (0x21e09488)                                                      */
/*      SPRB0 (0x21e09488)                                                      */
/*      SPRHBM (0x21e09488)                                                     */
/*      SPRC0 (0x21e09488)                                                      */
/*      SPRMCC (0x21e09488)                                                     */
/*      SPRUCC (0x21e48488)                                                     */
/* Register default value on SPRA0: 0x0100020A                                  */
/* Register default value on SPRB0: 0x0100020A                                  */
/* Register default value on SPRHBM: 0x0100020A                                 */
/* Register default value on SPRC0: 0x0100020A                                  */
/* Register default value on SPRMCC: 0x0100020A                                 */
/* Register default value on SPRUCC: 0x0100020A                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: DFX                                              */
/* SPRB0 Security PolicyGroup: DFX                                              */
/* SPRHBM Security PolicyGroup: DFX                                             */
/* SPRC0 Security PolicyGroup: DFX                                              */
/* SPRMCC Security PolicyGroup: DFX                                             */
/* SPRUCC Security PolicyGroup: DFX                                             */
/* UPIAGT_DFX_RAC LOWER 32bits
*/


#define UPIAGT_DFX_RAC_LO_KTI_LLPMON_REG 0x09020488

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 sai_mask_0 : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_1 : 1;

                            /* Bits[1:1], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_2 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_3 : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_4 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_5 : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_6 : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_7 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_8 : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_9 : 1;

                            /* Bits[9:9], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_10 : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_11 : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_12 : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_13 : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_14 : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_15 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_16 : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_17 : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_18 : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_19 : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_20 : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_21 : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_22 : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_23 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_24 : 1;

                            /* Bits[24:24], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_25 : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_26 : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_27 : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_28 : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_29 : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_30 : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_31 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} UPIAGT_DFX_RAC_LO_KTI_LLPMON_STRUCT;

/* UPIAGT_DFX_RAC_HI_KTI_LLPMON_REG supported on:                               */
/*      SPRA0 (0x21e0948c)                                                      */
/*      SPRB0 (0x21e0948c)                                                      */
/*      SPRHBM (0x21e0948c)                                                     */
/*      SPRC0 (0x21e0948c)                                                      */
/*      SPRMCC (0x21e0948c)                                                     */
/*      SPRUCC (0x21e4848c)                                                     */
/* Register default value on SPRA0: 0x20000500                                  */
/* Register default value on SPRB0: 0x20000500                                  */
/* Register default value on SPRHBM: 0x20000500                                 */
/* Register default value on SPRC0: 0x20000500                                  */
/* Register default value on SPRMCC: 0x20000500                                 */
/* Register default value on SPRUCC: 0x20000500                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: DFX                                              */
/* SPRB0 Security PolicyGroup: DFX                                              */
/* SPRHBM Security PolicyGroup: DFX                                             */
/* SPRC0 Security PolicyGroup: DFX                                              */
/* SPRMCC Security PolicyGroup: DFX                                             */
/* SPRUCC Security PolicyGroup: DFX                                             */
/* UPIAGT_DFX_RAC UPPER 32bits
*/


#define UPIAGT_DFX_RAC_HI_KTI_LLPMON_REG 0x0902048C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 sai_mask_0 : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_1 : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_2 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_3 : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_4 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_5 : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_6 : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_7 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_8 : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_9 : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_10 : 1;

                            /* Bits[10:10], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_11 : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_12 : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_13 : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_14 : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_15 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_16 : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_17 : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_18 : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_19 : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_20 : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_21 : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_22 : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_23 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_24 : 1;

                            /* Bits[24:24], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_25 : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_26 : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_27 : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_28 : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_29 : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_30 : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_31 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} UPIAGT_DFX_RAC_HI_KTI_LLPMON_STRUCT;

/* UPIAGT_DFX_WAC_LO_KTI_LLPMON_REG supported on:                               */
/*      SPRA0 (0x21e09490)                                                      */
/*      SPRB0 (0x21e09490)                                                      */
/*      SPRHBM (0x21e09490)                                                     */
/*      SPRC0 (0x21e09490)                                                      */
/*      SPRMCC (0x21e09490)                                                     */
/*      SPRUCC (0x21e48490)                                                     */
/* Register default value on SPRA0: 0x0100020A                                  */
/* Register default value on SPRB0: 0x0100020A                                  */
/* Register default value on SPRHBM: 0x0100020A                                 */
/* Register default value on SPRC0: 0x0100020A                                  */
/* Register default value on SPRMCC: 0x0100020A                                 */
/* Register default value on SPRUCC: 0x0100020A                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: DFX                                              */
/* SPRB0 Security PolicyGroup: DFX                                              */
/* SPRHBM Security PolicyGroup: DFX                                             */
/* SPRC0 Security PolicyGroup: DFX                                              */
/* SPRMCC Security PolicyGroup: DFX                                             */
/* SPRUCC Security PolicyGroup: DFX                                             */
/* UPIAGT_DFX_WAC LOWER 32bits
*/


#define UPIAGT_DFX_WAC_LO_KTI_LLPMON_REG 0x09020490

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 sai_mask_0 : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_1 : 1;

                            /* Bits[1:1], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_2 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_3 : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_4 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_5 : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_6 : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_7 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_8 : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_9 : 1;

                            /* Bits[9:9], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_10 : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_11 : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_12 : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_13 : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_14 : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_15 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_16 : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_17 : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_18 : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_19 : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_20 : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_21 : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_22 : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_23 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_24 : 1;

                            /* Bits[24:24], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_25 : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_26 : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_27 : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_28 : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_29 : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_30 : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_31 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} UPIAGT_DFX_WAC_LO_KTI_LLPMON_STRUCT;

/* UPIAGT_DFX_WAC_HI_KTI_LLPMON_REG supported on:                               */
/*      SPRA0 (0x21e09494)                                                      */
/*      SPRB0 (0x21e09494)                                                      */
/*      SPRHBM (0x21e09494)                                                     */
/*      SPRC0 (0x21e09494)                                                      */
/*      SPRMCC (0x21e09494)                                                     */
/*      SPRUCC (0x21e48494)                                                     */
/* Register default value on SPRA0: 0x20000400                                  */
/* Register default value on SPRB0: 0x20000400                                  */
/* Register default value on SPRHBM: 0x20000400                                 */
/* Register default value on SPRC0: 0x20000400                                  */
/* Register default value on SPRMCC: 0x20000400                                 */
/* Register default value on SPRUCC: 0x20000400                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: DFX                                              */
/* SPRB0 Security PolicyGroup: DFX                                              */
/* SPRHBM Security PolicyGroup: DFX                                             */
/* SPRC0 Security PolicyGroup: DFX                                              */
/* SPRMCC Security PolicyGroup: DFX                                             */
/* SPRUCC Security PolicyGroup: DFX                                             */
/* UPIAGT_DFX_WAC UPPER 32bits
*/


#define UPIAGT_DFX_WAC_HI_KTI_LLPMON_REG 0x09020494

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 sai_mask_0 : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_1 : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_2 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_3 : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_4 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_5 : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_6 : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_7 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_8 : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_9 : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_10 : 1;

                            /* Bits[10:10], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_11 : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_12 : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_13 : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_14 : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_15 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_16 : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_17 : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_18 : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_19 : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_20 : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_21 : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_22 : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_23 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_24 : 1;

                            /* Bits[24:24], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_25 : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_26 : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_27 : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_28 : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_29 : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_30 : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */
    UINT32 sai_mask_31 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} UPIAGT_DFX_WAC_HI_KTI_LLPMON_STRUCT;

/* KTI_MCA_N0_KTI_LLPMON_REG supported on:                                      */
/*      SPRA0 (0x21e09498)                                                      */
/*      SPRB0 (0x21e09498)                                                      */
/*      SPRHBM (0x21e09498)                                                     */
/*      SPRC0 (0x21e09498)                                                      */
/*      SPRMCC (0x21e09498)                                                     */
/*      SPRUCC (0x21e48498)                                                     */
/* Register default value on SPRA0: 0x00000001                                  */
/* Register default value on SPRB0: 0x00000001                                  */
/* Register default value on SPRHBM: 0x00000001                                 */
/* Register default value on SPRC0: 0x00000001                                  */
/* Register default value on SPRMCC: 0x00000001                                 */
/* Register default value on SPRUCC: 0x00000001                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* kti_mca_cfg
*/


#define KTI_MCA_N0_KTI_LLPMON_REG 0x09020498

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 latch_first_ce : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000001*/

                            /*
                               Latch First Correctable Error in MCA bank 0 -
                               Correctable Overwrites Correctable 1 - Latch and
                               hold first correctable error, do not overwrite
                               with later correctable errors. Note:
                               Uncorrectable errors will still overwrite,
                               KTI_MC_MISC 'cor_err' will still log all COR
                               errors, and COR counts will continue to
                               increment.
                            */
    UINT32 rsvd : 31;

                            /* Bits[31:1], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTI_MCA_N0_KTI_LLPMON_STRUCT;

/* KTI_MCA_N1_KTI_LLPMON_REG supported on:                                      */
/*      SPRA0 (0x21e0949c)                                                      */
/*      SPRB0 (0x21e0949c)                                                      */
/*      SPRHBM (0x21e0949c)                                                     */
/*      SPRC0 (0x21e0949c)                                                      */
/*      SPRMCC (0x21e0949c)                                                     */
/*      SPRUCC (0x21e4849c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_W                                             */
/* SPRB0 Security PolicyGroup: LB_W                                             */
/* SPRHBM Security PolicyGroup: LB_W                                            */
/* SPRC0 Security PolicyGroup: LB_W                                             */
/* SPRMCC Security PolicyGroup: LB_W                                            */
/* SPRUCC Security PolicyGroup: LB_W                                            */
/* kti_mca_cfg
*/


#define KTI_MCA_N1_KTI_LLPMON_REG 0x0902049C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 rsvd : 32;

                            /* Bits[31:0], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTI_MCA_N1_KTI_LLPMON_STRUCT;


/* KTIPERFCTRRXPHF_N0_KTI_LLPMON_REG supported on:                              */
/*      SPRA0 (0x21e094a8)                                                      */
/*      SPRB0 (0x21e094a8)                                                      */
/*      SPRHBM (0x21e094a8)                                                     */
/*      SPRC0 (0x21e094a8)                                                      */
/*      SPRMCC (0x21e094a8)                                                     */
/*      SPRUCC (0x21e484a8)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktiperfctrrxphf
*/


#define KTIPERFCTRRXPHF_N0_KTI_LLPMON_REG 0x090204A8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 count_rx_protocol_header_cycle : 32;

                            /* Bits[31:0], Access Type=RO/V, default=0x00000000*/

                            /*
                               Free running count of total cycles (not flits)
                               in which a protocol header occupied one or more
                               slots of a UPI flit on the Rx. This count does
                               not include cycles in which all three slots
                               contained link layer only information (NULL,
                               Parameters, control, etc.).
                            */

  } Bits;
  UINT32 Data;

} KTIPERFCTRRXPHF_N0_KTI_LLPMON_STRUCT;

/* KTIPERFCTRRXPHF_N1_KTI_LLPMON_REG supported on:                              */
/*      SPRA0 (0x21e094ac)                                                      */
/*      SPRB0 (0x21e094ac)                                                      */
/*      SPRHBM (0x21e094ac)                                                     */
/*      SPRC0 (0x21e094ac)                                                      */
/*      SPRMCC (0x21e094ac)                                                     */
/*      SPRUCC (0x21e484ac)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktiperfctrrxphf
*/


#define KTIPERFCTRRXPHF_N1_KTI_LLPMON_REG 0x090204AC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 count_rx_protocol_header_cycle : 16;

                            /* Bits[15:0], Access Type=RO/V, default=0x00000000*/

                            /*
                               Free running count of total cycles (not flits)
                               in which a protocol header occupied one or more
                               slots of a UPI flit on the Rx. This count does
                               not include cycles in which all three slots
                               contained link layer only information (NULL,
                               Parameters, control, etc.).
                            */
    UINT32 rsvd : 16;

                            /* Bits[31:16], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTIPERFCTRRXPHF_N1_KTI_LLPMON_STRUCT;

/* KTIPERFCTRRXDF_N0_KTI_LLPMON_REG supported on:                               */
/*      SPRA0 (0x21e094b0)                                                      */
/*      SPRB0 (0x21e094b0)                                                      */
/*      SPRHBM (0x21e094b0)                                                     */
/*      SPRC0 (0x21e094b0)                                                      */
/*      SPRMCC (0x21e094b0)                                                     */
/*      SPRUCC (0x21e484b0)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktiperfctrrxdf
*/


#define KTIPERFCTRRXDF_N0_KTI_LLPMON_REG 0x090204B0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 count_rx_data_cycle : 32;

                            /* Bits[31:0], Access Type=RO/V, default=0x00000000*/

                            /*
                               Free running count of total cycles (not flits)
                               in which data occupied slots of a UPI flit on
                               the Rx. This count does not include cycles in
                               which all three slots contained link layer only
                               information (NULL, Parameters, control, etc.).
                            */

  } Bits;
  UINT32 Data;

} KTIPERFCTRRXDF_N0_KTI_LLPMON_STRUCT;

/* KTIPERFCTRRXDF_N1_KTI_LLPMON_REG supported on:                               */
/*      SPRA0 (0x21e094b4)                                                      */
/*      SPRB0 (0x21e094b4)                                                      */
/*      SPRHBM (0x21e094b4)                                                     */
/*      SPRC0 (0x21e094b4)                                                      */
/*      SPRMCC (0x21e094b4)                                                     */
/*      SPRUCC (0x21e484b4)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktiperfctrrxdf
*/


#define KTIPERFCTRRXDF_N1_KTI_LLPMON_REG 0x090204B4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 count_rx_data_cycle : 16;

                            /* Bits[15:0], Access Type=RO/V, default=0x00000000*/

                            /*
                               Free running count of total cycles (not flits)
                               in which data occupied slots of a UPI flit on
                               the Rx. This count does not include cycles in
                               which all three slots contained link layer only
                               information (NULL, Parameters, control, etc.).
                            */
    UINT32 rsvd : 16;

                            /* Bits[31:16], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTIPERFCTRRXDF_N1_KTI_LLPMON_STRUCT;

/* KTIPERFCTRRXF_N0_KTI_LLPMON_REG supported on:                                */
/*      SPRA0 (0x21e094b8)                                                      */
/*      SPRB0 (0x21e094b8)                                                      */
/*      SPRHBM (0x21e094b8)                                                     */
/*      SPRC0 (0x21e094b8)                                                      */
/*      SPRMCC (0x21e094b8)                                                     */
/*      SPRUCC (0x21e484b8)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktiperfctrrxf
*/


#define KTIPERFCTRRXF_N0_KTI_LLPMON_REG 0x090204B8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 count_rx_total_cycle : 32;

                            /* Bits[31:0], Access Type=RO/V, default=0x00000000*/

                            /*
                               Free running count of total cycles of UPI flits
                               on Rx. This count includes cycles in which all
                               three slots contained link layer only
                               information (NULL, Parameters, control, etc.).
                            */

  } Bits;
  UINT32 Data;

} KTIPERFCTRRXF_N0_KTI_LLPMON_STRUCT;

/* KTIPERFCTRRXF_N1_KTI_LLPMON_REG supported on:                                */
/*      SPRA0 (0x21e094bc)                                                      */
/*      SPRB0 (0x21e094bc)                                                      */
/*      SPRHBM (0x21e094bc)                                                     */
/*      SPRC0 (0x21e094bc)                                                      */
/*      SPRMCC (0x21e094bc)                                                     */
/*      SPRUCC (0x21e484bc)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktiperfctrrxf
*/


#define KTIPERFCTRRXF_N1_KTI_LLPMON_REG 0x090204BC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 count_rx_total_cycle : 16;

                            /* Bits[15:0], Access Type=RO/V, default=0x00000000*/

                            /*
                               Free running count of total cycles of UPI flits
                               on Rx. This count includes cycles in which all
                               three slots contained link layer only
                               information (NULL, Parameters, control, etc.).
                            */
    UINT32 rsvd : 16;

                            /* Bits[31:16], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTIPERFCTRRXF_N1_KTI_LLPMON_STRUCT;

/* KTIPERFCTRTXPHF_N0_KTI_LLPMON_REG supported on:                              */
/*      SPRA0 (0x21e094c0)                                                      */
/*      SPRB0 (0x21e094c0)                                                      */
/*      SPRHBM (0x21e094c0)                                                     */
/*      SPRC0 (0x21e094c0)                                                      */
/*      SPRMCC (0x21e094c0)                                                     */
/*      SPRUCC (0x21e484c0)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktiperfctrtxphf
*/


#define KTIPERFCTRTXPHF_N0_KTI_LLPMON_REG 0x090204C0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 count_tx_protocol_header_cycle : 32;

                            /* Bits[31:0], Access Type=RO/V, default=0x00000000*/

                            /*
                               Free running count of total cycles (not flits)
                               in which a protocol header occupied one or more
                               slots of a UPI flit on the Tx. This count does
                               not include cycles in which all three slots
                               contained link layer only information (NULL,
                               Parameters, control, etc.).
                            */

  } Bits;
  UINT32 Data;

} KTIPERFCTRTXPHF_N0_KTI_LLPMON_STRUCT;

/* KTIPERFCTRTXPHF_N1_KTI_LLPMON_REG supported on:                              */
/*      SPRA0 (0x21e094c4)                                                      */
/*      SPRB0 (0x21e094c4)                                                      */
/*      SPRHBM (0x21e094c4)                                                     */
/*      SPRC0 (0x21e094c4)                                                      */
/*      SPRMCC (0x21e094c4)                                                     */
/*      SPRUCC (0x21e484c4)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktiperfctrtxphf
*/


#define KTIPERFCTRTXPHF_N1_KTI_LLPMON_REG 0x090204C4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 count_tx_protocol_header_cycle : 16;

                            /* Bits[15:0], Access Type=RO/V, default=0x00000000*/

                            /*
                               Free running count of total cycles (not flits)
                               in which a protocol header occupied one or more
                               slots of a UPI flit on the Tx. This count does
                               not include cycles in which all three slots
                               contained link layer only information (NULL,
                               Parameters, control, etc.).
                            */
    UINT32 rsvd : 16;

                            /* Bits[31:16], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTIPERFCTRTXPHF_N1_KTI_LLPMON_STRUCT;

/* KTIPERFCTRTXDF_N0_KTI_LLPMON_REG supported on:                               */
/*      SPRA0 (0x21e094c8)                                                      */
/*      SPRB0 (0x21e094c8)                                                      */
/*      SPRHBM (0x21e094c8)                                                     */
/*      SPRC0 (0x21e094c8)                                                      */
/*      SPRMCC (0x21e094c8)                                                     */
/*      SPRUCC (0x21e484c8)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktiperfctrtxdf
*/


#define KTIPERFCTRTXDF_N0_KTI_LLPMON_REG 0x090204C8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 count_tx_data_cycle : 32;

                            /* Bits[31:0], Access Type=RO/V, default=0x00000000*/

                            /*
                               Free running count of total cycles (not flits)
                               in which data occupied slots of a UPI flit on
                               the Tx. This count does not include cycles in
                               which all three slots contained link layer only
                               information (NULL, Parameters, control, etc.).
                            */

  } Bits;
  UINT32 Data;

} KTIPERFCTRTXDF_N0_KTI_LLPMON_STRUCT;

/* KTIPERFCTRTXDF_N1_KTI_LLPMON_REG supported on:                               */
/*      SPRA0 (0x21e094cc)                                                      */
/*      SPRB0 (0x21e094cc)                                                      */
/*      SPRHBM (0x21e094cc)                                                     */
/*      SPRC0 (0x21e094cc)                                                      */
/*      SPRMCC (0x21e094cc)                                                     */
/*      SPRUCC (0x21e484cc)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktiperfctrtxdf
*/


#define KTIPERFCTRTXDF_N1_KTI_LLPMON_REG 0x090204CC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 count_tx_data_cycle : 16;

                            /* Bits[15:0], Access Type=RO/V, default=0x00000000*/

                            /*
                               Free running count of total cycles (not flits)
                               in which data occupied slots of a UPI flit on
                               the Tx. This count does not include cycles in
                               which all three slots contained link layer only
                               information (NULL, Parameters, control, etc.).
                            */
    UINT32 rsvd : 16;

                            /* Bits[31:16], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTIPERFCTRTXDF_N1_KTI_LLPMON_STRUCT;

/* KTIPERFCTRTXF_N0_KTI_LLPMON_REG supported on:                                */
/*      SPRA0 (0x21e094d0)                                                      */
/*      SPRB0 (0x21e094d0)                                                      */
/*      SPRHBM (0x21e094d0)                                                     */
/*      SPRC0 (0x21e094d0)                                                      */
/*      SPRMCC (0x21e094d0)                                                     */
/*      SPRUCC (0x21e484d0)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktiperfctrtxf
*/


#define KTIPERFCTRTXF_N0_KTI_LLPMON_REG 0x090204D0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 count_tx_total_cycle : 32;

                            /* Bits[31:0], Access Type=RO/V, default=0x00000000*/

                            /*
                               Free running count of total cycles of UPI flits
                               on Tx. This count includes cycles in which all
                               three slots contained link layer only
                               information (NULL, Parameters, control, etc.).
                            */

  } Bits;
  UINT32 Data;

} KTIPERFCTRTXF_N0_KTI_LLPMON_STRUCT;

/* KTIPERFCTRTXF_N1_KTI_LLPMON_REG supported on:                                */
/*      SPRA0 (0x21e094d4)                                                      */
/*      SPRB0 (0x21e094d4)                                                      */
/*      SPRHBM (0x21e094d4)                                                     */
/*      SPRC0 (0x21e094d4)                                                      */
/*      SPRMCC (0x21e094d4)                                                     */
/*      SPRUCC (0x21e484d4)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: OS_W                                             */
/* SPRB0 Security PolicyGroup: OS_W                                             */
/* SPRHBM Security PolicyGroup: OS_W                                            */
/* SPRC0 Security PolicyGroup: OS_W                                             */
/* SPRMCC Security PolicyGroup: OS_W                                            */
/* SPRUCC Security PolicyGroup: OS_W                                            */
/* ktiperfctrtxf
*/


#define KTIPERFCTRTXF_N1_KTI_LLPMON_REG 0x090204D4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 count_tx_total_cycle : 16;

                            /* Bits[15:0], Access Type=RO/V, default=0x00000000*/

                            /*
                               Free running count of total cycles of UPI flits
                               on Tx. This count includes cycles in which all
                               three slots contained link layer only
                               information (NULL, Parameters, control, etc.).
                            */
    UINT32 rsvd : 16;

                            /* Bits[31:16], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTIPERFCTRTXF_N1_KTI_LLPMON_STRUCT;

/* UPIAGT_COR_CNT_CP_LO_KTI_LLPMON_REG supported on:                            */
/*      SPRA0 (0x21e094d8)                                                      */
/*      SPRB0 (0x21e094d8)                                                      */
/*      SPRHBM (0x21e094d8)                                                     */
/*      SPRC0 (0x21e094d8)                                                      */
/*      SPRMCC (0x21e094d8)                                                     */
/*      SPRUCC (0x21e484d8)                                                     */
/* Register default value on SPRA0: 0x0100021E                                  */
/* Register default value on SPRB0: 0x0100021E                                  */
/* Register default value on SPRHBM: 0x0100021E                                 */
/* Register default value on SPRC0: 0x0100021E                                  */
/* Register default value on SPRMCC: 0x0100021E                                 */
/* Register default value on SPRUCC: 0x0100021E                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: COR_CNT                                          */
/* SPRB0 Security PolicyGroup: COR_CNT                                          */
/* SPRHBM Security PolicyGroup: COR_CNT                                         */
/* SPRC0 Security PolicyGroup: COR_CNT                                          */
/* SPRMCC Security PolicyGroup: COR_CNT                                         */
/* SPRUCC Security PolicyGroup: COR_CNT                                         */
/* UPIAGT_COR_CNT_CP LOWER 32bits
*/


#define UPIAGT_COR_CNT_CP_LO_KTI_LLPMON_REG 0x090204D8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 sai_mask_0 : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to CR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_1 : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to CR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_2 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to CR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_3 : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_4 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to CR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_5 : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to CR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_6 : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to CR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_7 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to CR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_8 : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to CR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_9 : 1;

                            /* Bits[9:9], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_10 : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to CR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_11 : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to CR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_12 : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to CR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_13 : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to CR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_14 : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to CR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_15 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to CR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_16 : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to CR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_17 : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to CR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_18 : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to CR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_19 : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to CR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_20 : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to CR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_21 : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to CR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_22 : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to CR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_23 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to CR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_24 : 1;

                            /* Bits[24:24], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_25 : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to CR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_26 : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to CR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_27 : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to CR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_28 : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to CR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_29 : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to CR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_30 : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to CR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_31 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to CR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */

  } Bits;
  UINT32 Data;

} UPIAGT_COR_CNT_CP_LO_KTI_LLPMON_STRUCT;

/* UPIAGT_COR_CNT_CP_HI_KTI_LLPMON_REG supported on:                            */
/*      SPRA0 (0x21e094dc)                                                      */
/*      SPRB0 (0x21e094dc)                                                      */
/*      SPRHBM (0x21e094dc)                                                     */
/*      SPRC0 (0x21e094dc)                                                      */
/*      SPRMCC (0x21e094dc)                                                     */
/*      SPRUCC (0x21e484dc)                                                     */
/* Register default value on SPRA0: 0x00000400                                  */
/* Register default value on SPRB0: 0x00000400                                  */
/* Register default value on SPRHBM: 0x00000400                                 */
/* Register default value on SPRC0: 0x00000400                                  */
/* Register default value on SPRMCC: 0x00000400                                 */
/* Register default value on SPRUCC: 0x00000400                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: COR_CNT                                          */
/* SPRB0 Security PolicyGroup: COR_CNT                                          */
/* SPRHBM Security PolicyGroup: COR_CNT                                         */
/* SPRC0 Security PolicyGroup: COR_CNT                                          */
/* SPRMCC Security PolicyGroup: COR_CNT                                         */
/* SPRUCC Security PolicyGroup: COR_CNT                                         */
/* UPIAGT_COR_CNT_CP UPPER 32bits
*/


#define UPIAGT_COR_CNT_CP_HI_KTI_LLPMON_REG 0x090204DC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 sai_mask_0 : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_1 : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_2 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_3 : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_4 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_5 : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_6 : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_7 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_8 : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_9 : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_10 : 1;

                            /* Bits[10:10], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_11 : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_12 : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_13 : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_14 : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_15 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_16 : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_17 : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_18 : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_19 : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_20 : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_21 : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_22 : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_23 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_24 : 1;

                            /* Bits[24:24], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_25 : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_26 : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_27 : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_28 : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_29 : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_30 : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_31 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */

  } Bits;
  UINT32 Data;

} UPIAGT_COR_CNT_CP_HI_KTI_LLPMON_STRUCT;

/* UPIAGT_COR_CNT_RAC_LO_KTI_LLPMON_REG supported on:                           */
/*      SPRA0 (0x21e094e0)                                                      */
/*      SPRB0 (0x21e094e0)                                                      */
/*      SPRHBM (0x21e094e0)                                                     */
/*      SPRC0 (0x21e094e0)                                                      */
/*      SPRMCC (0x21e094e0)                                                     */
/*      SPRUCC (0x21e484e0)                                                     */
/* Register default value on SPRA0: 0x0300021F                                  */
/* Register default value on SPRB0: 0x0300021F                                  */
/* Register default value on SPRHBM: 0x0300021F                                 */
/* Register default value on SPRC0: 0x0300021F                                  */
/* Register default value on SPRMCC: 0x0300021F                                 */
/* Register default value on SPRUCC: 0x0300021F                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: COR_CNT                                          */
/* SPRB0 Security PolicyGroup: COR_CNT                                          */
/* SPRHBM Security PolicyGroup: COR_CNT                                         */
/* SPRC0 Security PolicyGroup: COR_CNT                                          */
/* SPRMCC Security PolicyGroup: COR_CNT                                         */
/* SPRUCC Security PolicyGroup: COR_CNT                                         */
/* UPIAGT_COR_CNT_RAC LOWER 32bits
*/


#define UPIAGT_COR_CNT_RAC_LO_KTI_LLPMON_REG 0x090204E0

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 sai_mask_0 : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT RAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_1 : 1;

                            /* Bits[1:1], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_2 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT RAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_3 : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_4 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT RAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_5 : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT RAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_6 : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT RAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_7 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT RAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_8 : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT RAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_9 : 1;

                            /* Bits[9:9], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_10 : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT RAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_11 : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT RAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_12 : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT RAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_13 : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT RAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_14 : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT RAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_15 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT RAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_16 : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT RAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_17 : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT RAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_18 : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT RAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_19 : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT RAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_20 : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT RAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_21 : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT RAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_22 : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT RAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_23 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT RAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_24 : 1;

                            /* Bits[24:24], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_25 : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT RAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_26 : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT RAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_27 : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT RAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_28 : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT RAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_29 : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT RAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_30 : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT RAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_31 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT RAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */

  } Bits;
  UINT32 Data;

} UPIAGT_COR_CNT_RAC_LO_KTI_LLPMON_STRUCT;

/* UPIAGT_COR_CNT_RAC_HI_KTI_LLPMON_REG supported on:                           */
/*      SPRA0 (0x21e094e4)                                                      */
/*      SPRB0 (0x21e094e4)                                                      */
/*      SPRHBM (0x21e094e4)                                                     */
/*      SPRC0 (0x21e094e4)                                                      */
/*      SPRMCC (0x21e094e4)                                                     */
/*      SPRUCC (0x21e484e4)                                                     */
/* Register default value on SPRA0: 0x20000D00                                  */
/* Register default value on SPRB0: 0x20000D00                                  */
/* Register default value on SPRHBM: 0x20000D00                                 */
/* Register default value on SPRC0: 0x20000D00                                  */
/* Register default value on SPRMCC: 0x20000D00                                 */
/* Register default value on SPRUCC: 0x20000D00                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: COR_CNT                                          */
/* SPRB0 Security PolicyGroup: COR_CNT                                          */
/* SPRHBM Security PolicyGroup: COR_CNT                                         */
/* SPRC0 Security PolicyGroup: COR_CNT                                          */
/* SPRMCC Security PolicyGroup: COR_CNT                                         */
/* SPRUCC Security PolicyGroup: COR_CNT                                         */
/* UPIAGT_COR_CNT_RAC UPPER 32bits
*/


#define UPIAGT_COR_CNT_RAC_HI_KTI_LLPMON_REG 0x090204E4

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 sai_mask_0 : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_1 : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_2 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_3 : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_4 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_5 : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_6 : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_7 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_8 : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_9 : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_10 : 1;

                            /* Bits[10:10], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_11 : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_12 : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_13 : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_14 : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_15 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_16 : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_17 : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_18 : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_19 : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_20 : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_21 : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_22 : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_23 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_24 : 1;

                            /* Bits[24:24], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_25 : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_26 : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_27 : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_28 : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_29 : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_30 : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_31 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */

  } Bits;
  UINT32 Data;

} UPIAGT_COR_CNT_RAC_HI_KTI_LLPMON_STRUCT;

/* UPIAGT_COR_CNT_WAC_LO_KTI_LLPMON_REG supported on:                           */
/*      SPRA0 (0x21e094e8)                                                      */
/*      SPRB0 (0x21e094e8)                                                      */
/*      SPRHBM (0x21e094e8)                                                     */
/*      SPRC0 (0x21e094e8)                                                      */
/*      SPRMCC (0x21e094e8)                                                     */
/*      SPRUCC (0x21e484e8)                                                     */
/* Register default value on SPRA0: 0x0300021F                                  */
/* Register default value on SPRB0: 0x0300021F                                  */
/* Register default value on SPRHBM: 0x0300021F                                 */
/* Register default value on SPRC0: 0x0300021F                                  */
/* Register default value on SPRMCC: 0x0300021F                                 */
/* Register default value on SPRUCC: 0x0300021F                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: COR_CNT                                          */
/* SPRB0 Security PolicyGroup: COR_CNT                                          */
/* SPRHBM Security PolicyGroup: COR_CNT                                         */
/* SPRC0 Security PolicyGroup: COR_CNT                                          */
/* SPRMCC Security PolicyGroup: COR_CNT                                         */
/* SPRUCC Security PolicyGroup: COR_CNT                                         */
/* UPIAGT_COR_CNT_WAC LOWER 32bits
*/


#define UPIAGT_COR_CNT_WAC_LO_KTI_LLPMON_REG 0x090204E8

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 sai_mask_0 : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_1 : 1;

                            /* Bits[1:1], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_2 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_3 : 1;

                            /* Bits[3:3], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_4 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_5 : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_6 : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_7 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_8 : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_9 : 1;

                            /* Bits[9:9], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_10 : 1;

                            /* Bits[10:10], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_11 : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_12 : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_13 : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_14 : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_15 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_16 : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_17 : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_18 : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_19 : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_20 : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_21 : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_22 : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_23 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_24 : 1;

                            /* Bits[24:24], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_25 : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_26 : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_27 : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_28 : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_29 : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_30 : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_31 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */

  } Bits;
  UINT32 Data;

} UPIAGT_COR_CNT_WAC_LO_KTI_LLPMON_STRUCT;

/* UPIAGT_COR_CNT_WAC_HI_KTI_LLPMON_REG supported on:                           */
/*      SPRA0 (0x21e094ec)                                                      */
/*      SPRB0 (0x21e094ec)                                                      */
/*      SPRHBM (0x21e094ec)                                                     */
/*      SPRC0 (0x21e094ec)                                                      */
/*      SPRMCC (0x21e094ec)                                                     */
/*      SPRUCC (0x21e484ec)                                                     */
/* Register default value on SPRA0: 0x20000C00                                  */
/* Register default value on SPRB0: 0x20000C00                                  */
/* Register default value on SPRHBM: 0x20000C00                                 */
/* Register default value on SPRC0: 0x20000C00                                  */
/* Register default value on SPRMCC: 0x20000C00                                 */
/* Register default value on SPRUCC: 0x20000C00                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: COR_CNT                                          */
/* SPRB0 Security PolicyGroup: COR_CNT                                          */
/* SPRHBM Security PolicyGroup: COR_CNT                                         */
/* SPRC0 Security PolicyGroup: COR_CNT                                          */
/* SPRMCC Security PolicyGroup: COR_CNT                                         */
/* SPRUCC Security PolicyGroup: COR_CNT                                         */
/* UPIAGT_COR_CNT_WAC UPPER 32bits
*/


#define UPIAGT_COR_CNT_WAC_HI_KTI_LLPMON_REG 0x090204EC

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 sai_mask_0 : 1;

                            /* Bits[0:0], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_1 : 1;

                            /* Bits[1:1], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_2 : 1;

                            /* Bits[2:2], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_3 : 1;

                            /* Bits[3:3], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_4 : 1;

                            /* Bits[4:4], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_5 : 1;

                            /* Bits[5:5], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_6 : 1;

                            /* Bits[6:6], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_7 : 1;

                            /* Bits[7:7], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_8 : 1;

                            /* Bits[8:8], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_9 : 1;

                            /* Bits[9:9], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_10 : 1;

                            /* Bits[10:10], Access Type=RO, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_11 : 1;

                            /* Bits[11:11], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_12 : 1;

                            /* Bits[12:12], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_13 : 1;

                            /* Bits[13:13], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_14 : 1;

                            /* Bits[14:14], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_15 : 1;

                            /* Bits[15:15], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_16 : 1;

                            /* Bits[16:16], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_17 : 1;

                            /* Bits[17:17], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_18 : 1;

                            /* Bits[18:18], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_19 : 1;

                            /* Bits[19:19], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_20 : 1;

                            /* Bits[20:20], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_21 : 1;

                            /* Bits[21:21], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_22 : 1;

                            /* Bits[22:22], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_23 : 1;

                            /* Bits[23:23], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_24 : 1;

                            /* Bits[24:24], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_25 : 1;

                            /* Bits[25:25], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_26 : 1;

                            /* Bits[26:26], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_27 : 1;

                            /* Bits[27:27], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_28 : 1;

                            /* Bits[28:28], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_29 : 1;

                            /* Bits[29:29], Access Type=RW, default=0x00000001*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_30 : 1;

                            /* Bits[30:30], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */
    UINT32 sai_mask_31 : 1;

                            /* Bits[31:31], Access Type=RW, default=0x00000000*/

                            /*
                               Used to determine which agents are allowed write
                               access to COR_CNT WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */

  } Bits;
  UINT32 Data;

} UPIAGT_COR_CNT_WAC_HI_KTI_LLPMON_STRUCT;

/* KTILK_TAD_MMIOH_TARGET0_KTI_LLPMON_REG supported on:                         */
/*      SPRA0 (0x21e09500)                                                      */
/*      SPRB0 (0x21e09500)                                                      */
/*      SPRHBM (0x21e09500)                                                     */
/*      SPRC0 (0x21e09500)                                                      */
/*      SPRMCC (0x21e09500)                                                     */
/*      SPRUCC (0x21e48500)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_tad_mmioh_target0
*/


#define KTILK_TAD_MMIOH_TARGET0_KTI_LLPMON_REG 0x09020500

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mmioh_target0 : 4;

                            /* Bits[3:0], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 0. 4-bits for each target
                               to indicate IIO0, IIO1, .. IIO11 (only 8
                               encodings are defined for SPR).
                            */
    UINT32 mmioh_target1 : 4;

                            /* Bits[7:4], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 1. 4-bits for each target
                               to indicate IIO0, IIO1, .. IIO11 (only 8
                               encodings are defined for SPR).
                            */
    UINT32 mmioh_target2 : 4;

                            /* Bits[11:8], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 2. 4-bits for each target
                               to indicate IIO0, IIO1, .. IIO11 (only 8
                               encodings are defined for SPR).
                            */
    UINT32 mmioh_target3 : 4;

                            /* Bits[15:12], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 3. 4-bits for each target
                               to indicate IIO0, IIO1, .. IIO11 (only 8
                               encodings are defined for SPR).
                            */
    UINT32 mmioh_target4 : 4;

                            /* Bits[19:16], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 4. 4-bits for each target
                               to indicate IIO0, IIO1, .. IIO11 (only 8
                               encodings are defined for SPR).
                            */
    UINT32 mmioh_target5 : 4;

                            /* Bits[23:20], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 5. 4-bits for each target
                               to indicate IIO0, IIO1, .. IIO11 (only 8
                               encodings are defined for SPR).
                            */
    UINT32 mmioh_target6 : 4;

                            /* Bits[27:24], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 6. 4-bits for each target
                               to indicate IIO0, IIO1, .. IIO11 (only 8
                               encodings are defined for SPR).
                            */
    UINT32 mmioh_target7 : 4;

                            /* Bits[31:28], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 7. 4-bits for each target
                               to indicate IIO0, IIO1, .. IIO11 (only 8
                               encodings are defined for SPR).
                            */

  } Bits;
  UINT32 Data;

} KTILK_TAD_MMIOH_TARGET0_KTI_LLPMON_STRUCT;

/* KTILK_TAD_MMIOH_TARGET1_KTI_LLPMON_REG supported on:                         */
/*      SPRA0 (0x21e09504)                                                      */
/*      SPRB0 (0x21e09504)                                                      */
/*      SPRHBM (0x21e09504)                                                     */
/*      SPRC0 (0x21e09504)                                                      */
/*      SPRMCC (0x21e09504)                                                     */
/*      SPRUCC (0x21e48504)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_tad_mmioh_target1
*/


#define KTILK_TAD_MMIOH_TARGET1_KTI_LLPMON_REG 0x09020504

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mmioh_target8 : 4;

                            /* Bits[3:0], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 8. 4-bits for each target
                               to indicate IIO0, IIO1, .. IIO11 (only 8
                               encodings are defined for SPR).
                            */
    UINT32 mmioh_target9 : 4;

                            /* Bits[7:4], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 9. 4-bits for each target
                               to indicate IIO0, IIO1, .. IIO11 (only 8
                               encodings are defined for SPR).
                            */
    UINT32 mmioh_target10 : 4;

                            /* Bits[11:8], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 10. 4-bits for each target
                               to indicate IIO0, IIO1, .. IIO11 (only 8
                               encodings are defined for SPR).
                            */
    UINT32 mmioh_target11 : 4;

                            /* Bits[15:12], Access Type=RW, default=0x00000000*/

                            /*
                               Target IIO for range 11. 4-bits for each target
                               to indicate IIO0, IIO1, .. IIO11 (only 8
                               encodings are defined for SPR).
                            */
    UINT32 rsvd : 16;

                            /* Bits[31:16], Access Type=RO, default=0x00000000*/

                            /* Reserved Bits. */

  } Bits;
  UINT32 Data;

} KTILK_TAD_MMIOH_TARGET1_KTI_LLPMON_STRUCT;

/* KTILK_TAD_MMIOH1_KTI_LLPMON_REG supported on:                                */
/*      SPRA0 (0x21e09508)                                                      */
/*      SPRB0 (0x21e09508)                                                      */
/*      SPRHBM (0x21e09508)                                                     */
/*      SPRC0 (0x21e09508)                                                      */
/*      SPRMCC (0x21e09508)                                                     */
/*      SPRUCC (0x21e48508)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_tad_mmioh1
*/


#define KTILK_TAD_MMIOH1_KTI_LLPMON_REG 0x09020508

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mmioh_limit0 : 22;

                            /* Bits[21:0], Access Type=RW, default=0x00000000*/

                            /* PA[51:30] */
    UINT32 rsvd : 10;

                            /* Bits[31:22], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTILK_TAD_MMIOH1_KTI_LLPMON_STRUCT;

/* KTILK_TAD_MMIOH2_KTI_LLPMON_REG supported on:                                */
/*      SPRA0 (0x21e0950c)                                                      */
/*      SPRB0 (0x21e0950c)                                                      */
/*      SPRHBM (0x21e0950c)                                                     */
/*      SPRC0 (0x21e0950c)                                                      */
/*      SPRMCC (0x21e0950c)                                                     */
/*      SPRUCC (0x21e4850c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_tad_mmioh2
*/


#define KTILK_TAD_MMIOH2_KTI_LLPMON_REG 0x0902050C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mmioh_limit1 : 22;

                            /* Bits[21:0], Access Type=RW, default=0x00000000*/

                            /* PA[51:30] */
    UINT32 rsvd : 10;

                            /* Bits[31:22], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTILK_TAD_MMIOH2_KTI_LLPMON_STRUCT;

/* KTILK_TAD_MMIOH3_KTI_LLPMON_REG supported on:                                */
/*      SPRA0 (0x21e09510)                                                      */
/*      SPRB0 (0x21e09510)                                                      */
/*      SPRHBM (0x21e09510)                                                     */
/*      SPRC0 (0x21e09510)                                                      */
/*      SPRMCC (0x21e09510)                                                     */
/*      SPRUCC (0x21e48510)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_tad_mmioh3
*/


#define KTILK_TAD_MMIOH3_KTI_LLPMON_REG 0x09020510

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mmioh_limit2 : 22;

                            /* Bits[21:0], Access Type=RW, default=0x00000000*/

                            /* PA[51:30] */
    UINT32 rsvd : 10;

                            /* Bits[31:22], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTILK_TAD_MMIOH3_KTI_LLPMON_STRUCT;

/* KTILK_TAD_MMIOH4_KTI_LLPMON_REG supported on:                                */
/*      SPRA0 (0x21e09514)                                                      */
/*      SPRB0 (0x21e09514)                                                      */
/*      SPRHBM (0x21e09514)                                                     */
/*      SPRC0 (0x21e09514)                                                      */
/*      SPRMCC (0x21e09514)                                                     */
/*      SPRUCC (0x21e48514)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_tad_mmioh4
*/


#define KTILK_TAD_MMIOH4_KTI_LLPMON_REG 0x09020514

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mmioh_limit3 : 22;

                            /* Bits[21:0], Access Type=RW, default=0x00000000*/

                            /* PA[51:30] */
    UINT32 rsvd : 10;

                            /* Bits[31:22], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTILK_TAD_MMIOH4_KTI_LLPMON_STRUCT;

/* KTILK_TAD_MMIOH5_KTI_LLPMON_REG supported on:                                */
/*      SPRA0 (0x21e09518)                                                      */
/*      SPRB0 (0x21e09518)                                                      */
/*      SPRHBM (0x21e09518)                                                     */
/*      SPRC0 (0x21e09518)                                                      */
/*      SPRMCC (0x21e09518)                                                     */
/*      SPRUCC (0x21e48518)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_tad_mmioh5
*/


#define KTILK_TAD_MMIOH5_KTI_LLPMON_REG 0x09020518

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mmioh_limit4 : 22;

                            /* Bits[21:0], Access Type=RW, default=0x00000000*/

                            /* PA[51:30] */
    UINT32 rsvd : 10;

                            /* Bits[31:22], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTILK_TAD_MMIOH5_KTI_LLPMON_STRUCT;

/* KTILK_TAD_MMIOH6_KTI_LLPMON_REG supported on:                                */
/*      SPRA0 (0x21e0951c)                                                      */
/*      SPRB0 (0x21e0951c)                                                      */
/*      SPRHBM (0x21e0951c)                                                     */
/*      SPRC0 (0x21e0951c)                                                      */
/*      SPRMCC (0x21e0951c)                                                     */
/*      SPRUCC (0x21e4851c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_tad_mmioh6
*/


#define KTILK_TAD_MMIOH6_KTI_LLPMON_REG 0x0902051C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mmioh_limit5 : 22;

                            /* Bits[21:0], Access Type=RW, default=0x00000000*/

                            /* PA[51:30] */
    UINT32 rsvd : 10;

                            /* Bits[31:22], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTILK_TAD_MMIOH6_KTI_LLPMON_STRUCT;

/* KTILK_TAD_MMIOH7_KTI_LLPMON_REG supported on:                                */
/*      SPRA0 (0x21e09520)                                                      */
/*      SPRB0 (0x21e09520)                                                      */
/*      SPRHBM (0x21e09520)                                                     */
/*      SPRC0 (0x21e09520)                                                      */
/*      SPRMCC (0x21e09520)                                                     */
/*      SPRUCC (0x21e48520)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_tad_mmioh7
*/


#define KTILK_TAD_MMIOH7_KTI_LLPMON_REG 0x09020520

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mmioh_limit6 : 22;

                            /* Bits[21:0], Access Type=RW, default=0x00000000*/

                            /* PA[51:30] */
    UINT32 rsvd : 10;

                            /* Bits[31:22], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTILK_TAD_MMIOH7_KTI_LLPMON_STRUCT;

/* KTILK_TAD_MMIOH8_KTI_LLPMON_REG supported on:                                */
/*      SPRA0 (0x21e09524)                                                      */
/*      SPRB0 (0x21e09524)                                                      */
/*      SPRHBM (0x21e09524)                                                     */
/*      SPRC0 (0x21e09524)                                                      */
/*      SPRMCC (0x21e09524)                                                     */
/*      SPRUCC (0x21e48524)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_tad_mmioh8
*/


#define KTILK_TAD_MMIOH8_KTI_LLPMON_REG 0x09020524

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mmioh_limit7 : 22;

                            /* Bits[21:0], Access Type=RW, default=0x00000000*/

                            /* PA[51:30] */
    UINT32 rsvd : 10;

                            /* Bits[31:22], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTILK_TAD_MMIOH8_KTI_LLPMON_STRUCT;

/* KTILK_TAD_MMIOH9_KTI_LLPMON_REG supported on:                                */
/*      SPRA0 (0x21e09528)                                                      */
/*      SPRB0 (0x21e09528)                                                      */
/*      SPRHBM (0x21e09528)                                                     */
/*      SPRC0 (0x21e09528)                                                      */
/*      SPRMCC (0x21e09528)                                                     */
/*      SPRUCC (0x21e48528)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_tad_mmioh9
*/


#define KTILK_TAD_MMIOH9_KTI_LLPMON_REG 0x09020528

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mmioh_limit8 : 22;

                            /* Bits[21:0], Access Type=RW, default=0x00000000*/

                            /* PA[51:30] */
    UINT32 rsvd : 10;

                            /* Bits[31:22], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTILK_TAD_MMIOH9_KTI_LLPMON_STRUCT;

/* KTILK_TAD_MMIOH10_KTI_LLPMON_REG supported on:                               */
/*      SPRA0 (0x21e0952c)                                                      */
/*      SPRB0 (0x21e0952c)                                                      */
/*      SPRHBM (0x21e0952c)                                                     */
/*      SPRC0 (0x21e0952c)                                                      */
/*      SPRMCC (0x21e0952c)                                                     */
/*      SPRUCC (0x21e4852c)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_tad_mmioh10
*/


#define KTILK_TAD_MMIOH10_KTI_LLPMON_REG 0x0902052C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mmioh_limit9 : 22;

                            /* Bits[21:0], Access Type=RW, default=0x00000000*/

                            /* PA[51:30] */
    UINT32 rsvd : 10;

                            /* Bits[31:22], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTILK_TAD_MMIOH10_KTI_LLPMON_STRUCT;

/* KTILK_TAD_MMIOH11_KTI_LLPMON_REG supported on:                               */
/*      SPRA0 (0x21e09530)                                                      */
/*      SPRB0 (0x21e09530)                                                      */
/*      SPRHBM (0x21e09530)                                                     */
/*      SPRC0 (0x21e09530)                                                      */
/*      SPRMCC (0x21e09530)                                                     */
/*      SPRUCC (0x21e48530)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_tad_mmioh11
*/


#define KTILK_TAD_MMIOH11_KTI_LLPMON_REG 0x09020530

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mmioh_limit10 : 22;

                            /* Bits[21:0], Access Type=RW, default=0x00000000*/

                            /* PA[51:30] */
    UINT32 rsvd : 10;

                            /* Bits[31:22], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTILK_TAD_MMIOH11_KTI_LLPMON_STRUCT;

/* KTILK_TAD_MMIOH12_KTI_LLPMON_REG supported on:                               */
/*      SPRA0 (0x21e09534)                                                      */
/*      SPRB0 (0x21e09534)                                                      */
/*      SPRHBM (0x21e09534)                                                     */
/*      SPRC0 (0x21e09534)                                                      */
/*      SPRMCC (0x21e09534)                                                     */
/*      SPRUCC (0x21e48534)                                                     */
/* Register default value on SPRA0: 0x00000000                                  */
/* Register default value on SPRB0: 0x00000000                                  */
/* Register default value on SPRHBM: 0x00000000                                 */
/* Register default value on SPRC0: 0x00000000                                  */
/* Register default value on SPRMCC: 0x00000000                                 */
/* Register default value on SPRUCC: 0x00000000                                 */
/* SPRA0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRA0 BDF: 30_1_1                                      */
/* SPRA0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRB0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRHBM Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRC0 Security PolicyGroup: LB_MCHECK_W                                      */
/* SPRMCC Security PolicyGroup: LB_MCHECK_W                                     */
/* SPRUCC Security PolicyGroup: LB_MCHECK_W                                     */
/* ktilk_tad_mmioh12
*/


#define KTILK_TAD_MMIOH12_KTI_LLPMON_REG 0x09020534

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 mmioh_limit11 : 22;

                            /* Bits[21:0], Access Type=RW, default=0x00000000*/

                            /* PA[51:30] */
    UINT32 rsvd : 10;

                            /* Bits[31:22], Access Type=RO, default=None*/

                            /* Reserved */

  } Bits;
  UINT32 Data;

} KTILK_TAD_MMIOH12_KTI_LLPMON_STRUCT;

#if defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
/* BIOS_W_CP_LO_KTI_LLPMON_REG supported on:                                    */
/*      SPRB0 (0x21e09540)                                                      */
/*      SPRHBM (0x21e09540)                                                     */
/*      SPRC0 (0x21e09540)                                                      */
/*      SPRMCC (0x21e09540)                                                     */
/*      SPRUCC (0x21e48540)                                                     */
/* Register default value on SPRB0: 0x01000208                                  */
/* Register default value on SPRHBM: 0x01000208                                 */
/* Register default value on SPRC0: 0x01000208                                  */
/* Register default value on SPRMCC: 0x01000208                                 */
/* Register default value on SPRUCC: 0x01000208                                 */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRB0 BDF: 30_1_1                                      */
/* SPRB0 Security PolicyGroup: BIOS_W                                           */
/* SPRHBM Security PolicyGroup: BIOS_W                                          */
/* SPRC0 Security PolicyGroup: BIOS_W                                           */
/* SPRMCC Security PolicyGroup: BIOS_W                                          */
/* SPRUCC Security PolicyGroup: BIOS_W                                          */
/* BIOS_W_CP LOWER 32bits
*/


#define BIOS_W_CP_LO_KTI_LLPMON_REG 0x09020540

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 sai_mask : 32;

                            /* Bits[31:0], Access Type=RW, default=0x01000208*/

                            /*
                               Used to determine which agents are allowed write
                               access to BIOS_W WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */

  } Bits;
  UINT32 Data;

} BIOS_W_CP_LO_KTI_LLPMON_STRUCT;
#endif /* (SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

#if defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
/* BIOS_W_CP_HI_KTI_LLPMON_REG supported on:                                    */
/*      SPRB0 (0x21e09544)                                                      */
/*      SPRHBM (0x21e09544)                                                     */
/*      SPRC0 (0x21e09544)                                                      */
/*      SPRMCC (0x21e09544)                                                     */
/*      SPRUCC (0x21e48544)                                                     */
/* Register default value on SPRB0: 0x00000400                                  */
/* Register default value on SPRHBM: 0x00000400                                 */
/* Register default value on SPRC0: 0x00000400                                  */
/* Register default value on SPRMCC: 0x00000400                                 */
/* Register default value on SPRUCC: 0x00000400                                 */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRB0 BDF: 30_1_1                                      */
/* SPRB0 Security PolicyGroup: BIOS_W                                           */
/* SPRHBM Security PolicyGroup: BIOS_W                                          */
/* SPRC0 Security PolicyGroup: BIOS_W                                           */
/* SPRMCC Security PolicyGroup: BIOS_W                                          */
/* SPRUCC Security PolicyGroup: BIOS_W                                          */
/* BIOS_W_CP UPPER 32bits
*/


#define BIOS_W_CP_HI_KTI_LLPMON_REG 0x09020544

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 sai_mask : 32;

                            /* Bits[31:0], Access Type=RW, default=0x00000400*/

                            /*
                               Used to determine which agents are allowed write
                               access to OS_W WAC, RAC and CP registers, based
                               on the value from each agent's 6bit SAI field.
                            */

  } Bits;
  UINT32 Data;

} BIOS_W_CP_HI_KTI_LLPMON_STRUCT;
#endif /* (SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

#if defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
/* BIOS_W_RAC_LO_KTI_LLPMON_REG supported on:                                   */
/*      SPRB0 (0x21e09548)                                                      */
/*      SPRHBM (0x21e09548)                                                     */
/*      SPRC0 (0x21e09548)                                                      */
/*      SPRMCC (0x21e09548)                                                     */
/*      SPRUCC (0x21e48548)                                                     */
/* Register default value on SPRB0: 0xFFFFFFFF                                  */
/* Register default value on SPRHBM: 0xFFFFFFFF                                 */
/* Register default value on SPRC0: 0xFFFFFFFF                                  */
/* Register default value on SPRMCC: 0xFFFFFFFF                                 */
/* Register default value on SPRUCC: 0xFFFFFFFF                                 */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRB0 BDF: 30_1_1                                      */
/* SPRB0 Security PolicyGroup: BIOS_W                                           */
/* SPRHBM Security PolicyGroup: BIOS_W                                          */
/* SPRC0 Security PolicyGroup: BIOS_W                                           */
/* SPRMCC Security PolicyGroup: BIOS_W                                          */
/* SPRUCC Security PolicyGroup: BIOS_W                                          */
/* BIOS_W_RAC LOWER 32bits
*/


#define BIOS_W_RAC_LO_KTI_LLPMON_REG 0x09020548

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 sai_mask : 32;

                            /* Bits[31:0], Access Type=RW, default=0xFFFFFFFF*/

                            /*
                               Used to determine which agents are allowed write
                               access to BIOS_W WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */

  } Bits;
  UINT32 Data;

} BIOS_W_RAC_LO_KTI_LLPMON_STRUCT;
#endif /* (SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

#if defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
/* BIOS_W_RAC_HI_KTI_LLPMON_REG supported on:                                   */
/*      SPRB0 (0x21e0954c)                                                      */
/*      SPRHBM (0x21e0954c)                                                     */
/*      SPRC0 (0x21e0954c)                                                      */
/*      SPRMCC (0x21e0954c)                                                     */
/*      SPRUCC (0x21e4854c)                                                     */
/* Register default value on SPRB0: 0xFFFFFFFF                                  */
/* Register default value on SPRHBM: 0xFFFFFFFF                                 */
/* Register default value on SPRC0: 0xFFFFFFFF                                  */
/* Register default value on SPRMCC: 0xFFFFFFFF                                 */
/* Register default value on SPRUCC: 0xFFFFFFFF                                 */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRB0 BDF: 30_1_1                                      */
/* SPRB0 Security PolicyGroup: BIOS_W                                           */
/* SPRHBM Security PolicyGroup: BIOS_W                                          */
/* SPRC0 Security PolicyGroup: BIOS_W                                           */
/* SPRMCC Security PolicyGroup: BIOS_W                                          */
/* SPRUCC Security PolicyGroup: BIOS_W                                          */
/* BIOS_W_RAC UPPER 32bits
*/


#define BIOS_W_RAC_HI_KTI_LLPMON_REG 0x0902054C

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 sai_mask : 32;

                            /* Bits[31:0], Access Type=RW, default=0xFFFFFFFF*/

                            /*
                               Used to determine which agents are allowed write
                               access to BIOS_W WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */

  } Bits;
  UINT32 Data;

} BIOS_W_RAC_HI_KTI_LLPMON_STRUCT;
#endif /* (SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

#if defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
/* BIOS_W_WAC_LO_KTI_LLPMON_REG supported on:                                   */
/*      SPRB0 (0x21e09550)                                                      */
/*      SPRHBM (0x21e09550)                                                     */
/*      SPRC0 (0x21e09550)                                                      */
/*      SPRMCC (0x21e09550)                                                     */
/*      SPRUCC (0x21e48550)                                                     */
/* Register default value on SPRB0: 0x0100021A                                  */
/* Register default value on SPRHBM: 0x0100021A                                 */
/* Register default value on SPRC0: 0x0100021A                                  */
/* Register default value on SPRMCC: 0x0100021A                                 */
/* Register default value on SPRUCC: 0x0100021A                                 */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRB0 BDF: 30_1_1                                      */
/* SPRB0 Security PolicyGroup: BIOS_W                                           */
/* SPRHBM Security PolicyGroup: BIOS_W                                          */
/* SPRC0 Security PolicyGroup: BIOS_W                                           */
/* SPRMCC Security PolicyGroup: BIOS_W                                          */
/* SPRUCC Security PolicyGroup: BIOS_W                                          */
/* BIOS_W_WAC LOWER 32bits
*/


#define BIOS_W_WAC_LO_KTI_LLPMON_REG 0x09020550

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 sai_mask : 32;

                            /* Bits[31:0], Access Type=RW, default=0x0100021A*/

                            /*
                               Used to determine which agents are allowed write
                               access to BIOS_W WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */

  } Bits;
  UINT32 Data;

} BIOS_W_WAC_LO_KTI_LLPMON_STRUCT;
#endif /* (SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */

#if defined(SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST)
/* BIOS_W_WAC_HI_KTI_LLPMON_REG supported on:                                   */
/*      SPRB0 (0x21e09554)                                                      */
/*      SPRHBM (0x21e09554)                                                     */
/*      SPRC0 (0x21e09554)                                                      */
/*      SPRMCC (0x21e09554)                                                     */
/*      SPRUCC (0x21e48554)                                                     */
/* Register default value on SPRB0: 0x20000400                                  */
/* Register default value on SPRHBM: 0x20000400                                 */
/* Register default value on SPRC0: 0x20000400                                  */
/* Register default value on SPRMCC: 0x20000400                                 */
/* Register default value on SPRUCC: 0x20000400                                 */
/* SPRB0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRHBM Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRC0 Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0            */
/* SPRMCC Register File:    sprsp_top/upi_1x_creg[0]/ktiln/CFG_KTI0_0           */
/* SPRUCC Register File:    sprsp_top/upimdf[0]/ktiln/CFG_KTI0_0                */
/* Struct generated from SPRB0 BDF: 30_1_1                                      */
/* SPRB0 Security PolicyGroup: BIOS_W                                           */
/* SPRHBM Security PolicyGroup: BIOS_W                                          */
/* SPRC0 Security PolicyGroup: BIOS_W                                           */
/* SPRMCC Security PolicyGroup: BIOS_W                                          */
/* SPRUCC Security PolicyGroup: BIOS_W                                          */
/* BIOS_W_WAC UPPER 32bits
*/


#define BIOS_W_WAC_HI_KTI_LLPMON_REG 0x09020554

typedef union {
  ///
  /// Individual bit fields
  ///
  struct {
    UINT32 sai_mask : 32;

                            /* Bits[31:0], Access Type=RW, default=0x20000400*/

                            /*
                               Used to determine which agents are allowed write
                               access to BIOS_W WAC, RAC and CP registers,
                               based on the value from each agent's 6bit SAI
                               field.
                            */

  } Bits;
  UINT32 Data;

} BIOS_W_WAC_HI_KTI_LLPMON_STRUCT;
#endif /* (SPRB0_HOST) || defined(SPRHBM_HOST) || defined(SPRC0_HOST) || defined(SPRMCC_HOST) || defined(SPRUCC_HOST) */
#endif /* _KTI_LLPMON_h */
